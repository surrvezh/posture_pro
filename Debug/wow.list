
wow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022108  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b1d8  080222a0  080222a0  000322a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d478  0802d478  000404b8  2**0
                  CONTENTS
  4 .ARM          00000008  0802d478  0802d478  0003d478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d480  0802d480  000404b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0802d480  0802d480  0003d480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d48c  0802d48c  0003d48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b8  20000000  0802d490  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df4  200004b8  0802d948  000404b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012ac  0802d948  000412ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000404b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000404e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   001891c1  00000000  00000000  0004052b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000121c6  00000000  00000000  001c96ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005d80  00000000  00000000  001db8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00004874  00000000  00000000  001e1638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c811  00000000  00000000  001e5eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00070782  00000000  00000000  002226bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001f6324  00000000  00000000  00292e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0001c91c  00000000  00000000  00489164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  004a5a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004b8 	.word	0x200004b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08022280 	.word	0x08022280

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004bc 	.word	0x200004bc
 80001cc:	08022280 	.word	0x08022280

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9f1 	b.w	80010ac <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9a6 	b.w	80010ac <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9e08      	ldr	r6, [sp, #32]
 8000dea:	460d      	mov	r5, r1
 8000dec:	4604      	mov	r4, r0
 8000dee:	460f      	mov	r7, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d14a      	bne.n	8000e8a <__udivmoddi4+0xa6>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4694      	mov	ip, r2
 8000df8:	d965      	bls.n	8000ec6 <__udivmoddi4+0xe2>
 8000dfa:	fab2 f382 	clz	r3, r2
 8000dfe:	b143      	cbz	r3, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	f1c3 0220 	rsb	r2, r3, #32
 8000e08:	409f      	lsls	r7, r3
 8000e0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	409c      	lsls	r4, r3
 8000e12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e16:	fa1f f58c 	uxth.w	r5, ip
 8000e1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e1e:	0c22      	lsrs	r2, r4, #16
 8000e20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e28:	fb01 f005 	mul.w	r0, r1, r5
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	d90a      	bls.n	8000e46 <__udivmoddi4+0x62>
 8000e30:	eb1c 0202 	adds.w	r2, ip, r2
 8000e34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e38:	f080 811c 	bcs.w	8001074 <__udivmoddi4+0x290>
 8000e3c:	4290      	cmp	r0, r2
 8000e3e:	f240 8119 	bls.w	8001074 <__udivmoddi4+0x290>
 8000e42:	3902      	subs	r1, #2
 8000e44:	4462      	add	r2, ip
 8000e46:	1a12      	subs	r2, r2, r0
 8000e48:	b2a4      	uxth	r4, r4
 8000e4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e56:	fb00 f505 	mul.w	r5, r0, r5
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	d90a      	bls.n	8000e74 <__udivmoddi4+0x90>
 8000e5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e66:	f080 8107 	bcs.w	8001078 <__udivmoddi4+0x294>
 8000e6a:	42a5      	cmp	r5, r4
 8000e6c:	f240 8104 	bls.w	8001078 <__udivmoddi4+0x294>
 8000e70:	4464      	add	r4, ip
 8000e72:	3802      	subs	r0, #2
 8000e74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	b11e      	cbz	r6, 8000e86 <__udivmoddi4+0xa2>
 8000e7e:	40dc      	lsrs	r4, r3
 8000e80:	2300      	movs	r3, #0
 8000e82:	e9c6 4300 	strd	r4, r3, [r6]
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0xbc>
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	f000 80ed 	beq.w	800106e <__udivmoddi4+0x28a>
 8000e94:	2100      	movs	r1, #0
 8000e96:	e9c6 0500 	strd	r0, r5, [r6]
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea0:	fab3 f183 	clz	r1, r3
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	d149      	bne.n	8000f3c <__udivmoddi4+0x158>
 8000ea8:	42ab      	cmp	r3, r5
 8000eaa:	d302      	bcc.n	8000eb2 <__udivmoddi4+0xce>
 8000eac:	4282      	cmp	r2, r0
 8000eae:	f200 80f8 	bhi.w	80010a2 <__udivmoddi4+0x2be>
 8000eb2:	1a84      	subs	r4, r0, r2
 8000eb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4617      	mov	r7, r2
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	d0e2      	beq.n	8000e86 <__udivmoddi4+0xa2>
 8000ec0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ec4:	e7df      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000ec6:	b902      	cbnz	r2, 8000eca <__udivmoddi4+0xe6>
 8000ec8:	deff      	udf	#255	; 0xff
 8000eca:	fab2 f382 	clz	r3, r2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 8090 	bne.w	8000ff4 <__udivmoddi4+0x210>
 8000ed4:	1a8a      	subs	r2, r1, r2
 8000ed6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eda:	fa1f fe8c 	uxth.w	lr, ip
 8000ede:	2101      	movs	r1, #1
 8000ee0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ee4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ee8:	0c22      	lsrs	r2, r4, #16
 8000eea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000eee:	fb0e f005 	mul.w	r0, lr, r5
 8000ef2:	4290      	cmp	r0, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x124>
 8000ef6:	eb1c 0202 	adds.w	r2, ip, r2
 8000efa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000efe:	d202      	bcs.n	8000f06 <__udivmoddi4+0x122>
 8000f00:	4290      	cmp	r0, r2
 8000f02:	f200 80cb 	bhi.w	800109c <__udivmoddi4+0x2b8>
 8000f06:	4645      	mov	r5, r8
 8000f08:	1a12      	subs	r2, r2, r0
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f10:	fb07 2210 	mls	r2, r7, r0, r2
 8000f14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f18:	fb0e fe00 	mul.w	lr, lr, r0
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x14e>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f28:	d202      	bcs.n	8000f30 <__udivmoddi4+0x14c>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	f200 80bb 	bhi.w	80010a6 <__udivmoddi4+0x2c2>
 8000f30:	4610      	mov	r0, r2
 8000f32:	eba4 040e 	sub.w	r4, r4, lr
 8000f36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f3a:	e79f      	b.n	8000e7c <__udivmoddi4+0x98>
 8000f3c:	f1c1 0720 	rsb	r7, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f52:	40fd      	lsrs	r5, r7
 8000f54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f5e:	fa1f fe8c 	uxth.w	lr, ip
 8000f62:	fb09 5518 	mls	r5, r9, r8, r5
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f70:	42a5      	cmp	r5, r4
 8000f72:	fa02 f201 	lsl.w	r2, r2, r1
 8000f76:	fa00 f001 	lsl.w	r0, r0, r1
 8000f7a:	d90b      	bls.n	8000f94 <__udivmoddi4+0x1b0>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f84:	f080 8088 	bcs.w	8001098 <__udivmoddi4+0x2b4>
 8000f88:	42a5      	cmp	r5, r4
 8000f8a:	f240 8085 	bls.w	8001098 <__udivmoddi4+0x2b4>
 8000f8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f92:	4464      	add	r4, ip
 8000f94:	1b64      	subs	r4, r4, r5
 8000f96:	b29d      	uxth	r5, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fa4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fa8:	45a6      	cmp	lr, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1da>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fb4:	d26c      	bcs.n	8001090 <__udivmoddi4+0x2ac>
 8000fb6:	45a6      	cmp	lr, r4
 8000fb8:	d96a      	bls.n	8001090 <__udivmoddi4+0x2ac>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	4464      	add	r4, ip
 8000fbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fc6:	eba4 040e 	sub.w	r4, r4, lr
 8000fca:	42ac      	cmp	r4, r5
 8000fcc:	46c8      	mov	r8, r9
 8000fce:	46ae      	mov	lr, r5
 8000fd0:	d356      	bcc.n	8001080 <__udivmoddi4+0x29c>
 8000fd2:	d053      	beq.n	800107c <__udivmoddi4+0x298>
 8000fd4:	b156      	cbz	r6, 8000fec <__udivmoddi4+0x208>
 8000fd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fda:	eb64 040e 	sbc.w	r4, r4, lr
 8000fde:	fa04 f707 	lsl.w	r7, r4, r7
 8000fe2:	40ca      	lsrs	r2, r1
 8000fe4:	40cc      	lsrs	r4, r1
 8000fe6:	4317      	orrs	r7, r2
 8000fe8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fec:	4618      	mov	r0, r3
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff4:	f1c3 0120 	rsb	r1, r3, #32
 8000ff8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ffc:	fa20 f201 	lsr.w	r2, r0, r1
 8001000:	fa25 f101 	lsr.w	r1, r5, r1
 8001004:	409d      	lsls	r5, r3
 8001006:	432a      	orrs	r2, r5
 8001008:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800100c:	fa1f fe8c 	uxth.w	lr, ip
 8001010:	fbb1 f0f7 	udiv	r0, r1, r7
 8001014:	fb07 1510 	mls	r5, r7, r0, r1
 8001018:	0c11      	lsrs	r1, r2, #16
 800101a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800101e:	fb00 f50e 	mul.w	r5, r0, lr
 8001022:	428d      	cmp	r5, r1
 8001024:	fa04 f403 	lsl.w	r4, r4, r3
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x258>
 800102a:	eb1c 0101 	adds.w	r1, ip, r1
 800102e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001032:	d22f      	bcs.n	8001094 <__udivmoddi4+0x2b0>
 8001034:	428d      	cmp	r5, r1
 8001036:	d92d      	bls.n	8001094 <__udivmoddi4+0x2b0>
 8001038:	3802      	subs	r0, #2
 800103a:	4461      	add	r1, ip
 800103c:	1b49      	subs	r1, r1, r5
 800103e:	b292      	uxth	r2, r2
 8001040:	fbb1 f5f7 	udiv	r5, r1, r7
 8001044:	fb07 1115 	mls	r1, r7, r5, r1
 8001048:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800104c:	fb05 f10e 	mul.w	r1, r5, lr
 8001050:	4291      	cmp	r1, r2
 8001052:	d908      	bls.n	8001066 <__udivmoddi4+0x282>
 8001054:	eb1c 0202 	adds.w	r2, ip, r2
 8001058:	f105 38ff 	add.w	r8, r5, #4294967295
 800105c:	d216      	bcs.n	800108c <__udivmoddi4+0x2a8>
 800105e:	4291      	cmp	r1, r2
 8001060:	d914      	bls.n	800108c <__udivmoddi4+0x2a8>
 8001062:	3d02      	subs	r5, #2
 8001064:	4462      	add	r2, ip
 8001066:	1a52      	subs	r2, r2, r1
 8001068:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800106c:	e738      	b.n	8000ee0 <__udivmoddi4+0xfc>
 800106e:	4631      	mov	r1, r6
 8001070:	4630      	mov	r0, r6
 8001072:	e708      	b.n	8000e86 <__udivmoddi4+0xa2>
 8001074:	4639      	mov	r1, r7
 8001076:	e6e6      	b.n	8000e46 <__udivmoddi4+0x62>
 8001078:	4610      	mov	r0, r2
 800107a:	e6fb      	b.n	8000e74 <__udivmoddi4+0x90>
 800107c:	4548      	cmp	r0, r9
 800107e:	d2a9      	bcs.n	8000fd4 <__udivmoddi4+0x1f0>
 8001080:	ebb9 0802 	subs.w	r8, r9, r2
 8001084:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001088:	3b01      	subs	r3, #1
 800108a:	e7a3      	b.n	8000fd4 <__udivmoddi4+0x1f0>
 800108c:	4645      	mov	r5, r8
 800108e:	e7ea      	b.n	8001066 <__udivmoddi4+0x282>
 8001090:	462b      	mov	r3, r5
 8001092:	e794      	b.n	8000fbe <__udivmoddi4+0x1da>
 8001094:	4640      	mov	r0, r8
 8001096:	e7d1      	b.n	800103c <__udivmoddi4+0x258>
 8001098:	46d0      	mov	r8, sl
 800109a:	e77b      	b.n	8000f94 <__udivmoddi4+0x1b0>
 800109c:	3d02      	subs	r5, #2
 800109e:	4462      	add	r2, ip
 80010a0:	e732      	b.n	8000f08 <__udivmoddi4+0x124>
 80010a2:	4608      	mov	r0, r1
 80010a4:	e70a      	b.n	8000ebc <__udivmoddi4+0xd8>
 80010a6:	4464      	add	r4, ip
 80010a8:	3802      	subs	r0, #2
 80010aa:	e742      	b.n	8000f32 <__udivmoddi4+0x14e>

080010ac <__aeabi_idiv0>:
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <_ZN9HX711_ADCC1EP12GPIO_TypeDeftS1_t>:
//	doutPin = dout;
//	sckPin = sck;
//}


HX711_ADC::HX711_ADC(GPIO_TypeDef* doutPort, uint16_t doutPin, GPIO_TypeDef* sckPort, uint16_t sckPin)
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	4613      	mov	r3, r2
 80010be:	80fb      	strh	r3, [r7, #6]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010ce:	615a      	str	r2, [r3, #20]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	665a      	str	r2, [r3, #100]	; 0x64
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2200      	movs	r2, #0
 80010da:	669a      	str	r2, [r3, #104]	; 0x68
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	671a      	str	r2, [r3, #112]	; 0x70
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2204      	movs	r2, #4
 80010fc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2204      	movs	r2, #4
 8001104:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	67da      	str	r2, [r3, #124]	; 0x7c
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f640 228c 	movw	r2, #2700	; 0xa8c
 800113c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2210      	movs	r2, #16
 8001154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
{
	this->doutPort_ = doutPort;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	601a      	str	r2, [r3, #0]
	    this->doutPin_ = doutPin;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	88fa      	ldrh	r2, [r7, #6]
 8001192:	809a      	strh	r2, [r3, #4]
	    this->sckPort_ = sckPort;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	609a      	str	r2, [r3, #8]
	    this->sckPin_ = sckPin;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800119e:	819a      	strh	r2, [r3, #12]
    // Initialize GPIO pins using STM32 HAL functions
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]

    // Configure DOUT pin
    GPIO_InitStruct.Pin = doutPin_;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	889b      	ldrh	r3, [r3, #4]
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(doutPort_, &GPIO_InitStruct);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f107 0214 	add.w	r2, r7, #20
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00f fcf3 	bl	8010bb4 <HAL_GPIO_Init>

    // Configure SCK pin
    GPIO_InitStruct.Pin = sckPin_;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	899b      	ldrh	r3, [r3, #12]
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d8:	2302      	movs	r3, #2
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(sckPort_, &GPIO_InitStruct);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f107 0214 	add.w	r2, r7, #20
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00f fce2 	bl	8010bb4 <HAL_GPIO_Init>
}
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4618      	mov	r0, r3
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_ZN9HX711_ADC7setGainEh>:



void HX711_ADC::setGain(uint8_t gain)  //value should be 32, 64 or 128*
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	70fb      	strb	r3, [r7, #3]
	if(gain < 64) GAIN = 2; //32, channel B
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	2b3f      	cmp	r3, #63	; 0x3f
 800120a:	d803      	bhi.n	8001214 <_ZN9HX711_ADC7setGainEh+0x1a>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2202      	movs	r2, #2
 8001210:	739a      	strb	r2, [r3, #14]
	else if(gain < 128) GAIN = 3; //64, channel A
	else GAIN = 1; //128, channel A
}
 8001212:	e00a      	b.n	800122a <_ZN9HX711_ADC7setGainEh+0x30>
	else if(gain < 128) GAIN = 3; //64, channel A
 8001214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db03      	blt.n	8001224 <_ZN9HX711_ADC7setGainEh+0x2a>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2203      	movs	r2, #3
 8001220:	739a      	strb	r2, [r3, #14]
}
 8001222:	e002      	b.n	800122a <_ZN9HX711_ADC7setGainEh+0x30>
	else GAIN = 1; //128, channel A
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	739a      	strb	r2, [r3, #14]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_ZN9HX711_ADC5beginEv>:

//set pinMode, HX711 gain and power up the HX711
void HX711_ADC::begin()
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	//pinMode(sckPin, OUTPUT);
	//pinMode(doutPin, INPUT);
	setGain(128);
 800123e:	2180      	movs	r1, #128	; 0x80
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffda 	bl	80011fa <_ZN9HX711_ADC7setGainEh>
	powerUp();
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fa12 	bl	8001670 <_ZN9HX711_ADC7powerUpEv>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN9HX711_ADC5startEmb>:
//	}
//}


void HX711_ADC::start(unsigned long t, bool dotare)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	4613      	mov	r3, r2
 8001260:	71fb      	strb	r3, [r7, #7]
    t += 400;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001268:	60bb      	str	r3, [r7, #8]
    lastDoutLowTime = HAL_GetTick();
 800126a:	f00f fa55 	bl	8010718 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    while (HAL_GetTick() < t)
 8001276:	e005      	b.n	8001284 <_ZN9HX711_ADC5startEmb+0x30>
    {
        update();
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 f878 	bl	800136e <_ZN9HX711_ADC6updateEv>
        // Add a small delay if needed
        HAL_Delay(1); // Uncomment and adjust as necessary
 800127e:	2001      	movs	r0, #1
 8001280:	f00f fa56 	bl	8010730 <HAL_Delay>
    while (HAL_GetTick() < t)
 8001284:	f00f fa48 	bl	8010718 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4293      	cmp	r3, r2
 800128e:	bf8c      	ite	hi
 8001290:	2301      	movhi	r3, #1
 8001292:	2300      	movls	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1ee      	bne.n	8001278 <_ZN9HX711_ADC5startEmb+0x24>
    }

    if (dotare)
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <_ZN9HX711_ADC5startEmb+0x5a>
    {
        tare();
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f000 f808 	bl	80012b6 <_ZN9HX711_ADC4tareEv>
        tareStatus = 0;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    }
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_ZN9HX711_ADC4tareEv>:
//}



void HX711_ADC::tare()
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
    uint8_t rdy = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
    doTare = 1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    tareTimes = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    tareTimeoutFlag = 0;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    unsigned long timeout = HAL_GetTick() + tareTimeOut;
 80012da:	f00f fa1d 	bl	8010718 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4413      	add	r3, r2
 80012e8:	60bb      	str	r3, [r7, #8]

    while (rdy != 2)
 80012ea:	e01f      	b.n	800132c <_ZN9HX711_ADC4tareEv+0x76>
    {
        rdy = update();
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f83e 	bl	800136e <_ZN9HX711_ADC6updateEv>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]

        if (!tareTimeoutDisable)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80012fc:	f083 0301 	eor.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00f      	beq.n	8001326 <_ZN9HX711_ADC4tareEv+0x70>
        {
            if (HAL_GetTick() > timeout)
 8001306:	f00f fa07 	bl	8010718 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4293      	cmp	r3, r2
 8001310:	bf34      	ite	cc
 8001312:	2301      	movcc	r3, #1
 8001314:	2300      	movcs	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <_ZN9HX711_ADC4tareEv+0x70>
            {
                tareTimeoutFlag = 1;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                break; // Prevent endless loop if no HX711 is connected
 8001324:	e006      	b.n	8001334 <_ZN9HX711_ADC4tareEv+0x7e>
            }
        }

        // Add a small delay for task yielding
        HAL_Delay(1); // Uncomment and adjust as necessary
 8001326:	2001      	movs	r0, #1
 8001328:	f00f fa02 	bl	8010730 <HAL_Delay>
    while (rdy != 2)
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d1dc      	bne.n	80012ec <_ZN9HX711_ADC4tareEv+0x36>
    }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_ZN9HX711_ADC12setCalFactorEf>:
	tareStatus = 0;
}

//set new calibration factor, raw data is divided by this value to convert to readable data
void HX711_ADC::setCalFactor(float cal) 
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	ed87 0a00 	vstr	s0, [r7]
	calFactor = cal;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	611a      	str	r2, [r3, #16]
	calFactorRecip = 1/calFactor;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	ed93 7a04 	vldr	s14, [r3, #16]
 8001354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_ZN9HX711_ADC6updateEv>:
//}



uint8_t HX711_ADC::update()
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
    // Manually added

    uint8_t dout = HAL_GPIO_ReadPin(doutPort_, doutPin_); // Check if conversion is ready
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	889b      	ldrh	r3, [r3, #4]
 800137e:	4619      	mov	r1, r3
 8001380:	4610      	mov	r0, r2
 8001382:	f00f fdc1 	bl	8010f08 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]

    if (!dout)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10d      	bne.n	80013ac <_ZN9HX711_ADC6updateEv+0x3e>
    {
        conversion24bit();
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f8b8 	bl	8001506 <_ZN9HX711_ADC15conversion24bitEv>
        lastDoutLowTime = HAL_GetTick();
 8001396:	f00f f9bf 	bl	8010718 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        signalTimeoutFlag = 0;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80013aa:	e023      	b.n	80013f4 <_ZN9HX711_ADC6updateEv+0x86>
    }
    else
    {
    	if (HAL_GetTick() > (lastDoutLowTime + SIGNAL_TIMEOUT))
 80013ac:	f00f f9b4 	bl	8010718 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013b8:	3364      	adds	r3, #100	; 0x64
 80013ba:	429a      	cmp	r2, r3
 80013bc:	bf8c      	ite	hi
 80013be:	2301      	movhi	r3, #1
 80013c0:	2300      	movls	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <_ZN9HX711_ADC6updateEv+0x86>
    		if (HAL_GetTick() - lastDoutLowTime > SIGNAL_TIMEOUT)
 80013c8:	f00f f9a6 	bl	8010718 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	bf8c      	ite	hi
 80013da:	2301      	movhi	r3, #1
 80013dc:	2300      	movls	r3, #0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <_ZN9HX711_ADC6updateEv+0x86>
        {
            signalTimeoutFlag = 1;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
            convRslt = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        }
    }

    return convRslt;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_ZN9HX711_ADC7getDataEv>:
	return false;

}

float HX711_ADC::getData() // return fresh data from the moving average dataset
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	long data = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
	lastSmoothedData = smoothedData();
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f81f 	bl	8001452 <_ZN9HX711_ADC12smoothedDataEv>
 8001414:	4602      	mov	r2, r0
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	data = lastSmoothedData - tareOffset ;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	60fb      	str	r3, [r7, #12]
	float x = (float)data * calFactorRecip;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edd3 7a05 	vldr	s15, [r3, #20]
 800143a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143e:	edc7 7a02 	vstr	s15, [r7, #8]
	return x;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	ee07 3a90 	vmov	s15, r3
}
 8001448:	eeb0 0a67 	vmov.f32	s0, s15
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_ZN9HX711_ADC12smoothedDataEv>:

long HX711_ADC::smoothedData() 
{
 8001452:	b480      	push	{r7}
 8001454:	b087      	sub	sp, #28
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	long data = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
	long L = 0xFFFFFF;
 800145e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001462:	613b      	str	r3, [r7, #16]
	long H = 0x00;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
	for (uint8_t r = 0; r < (samplesInUse + IGN_HIGH_SAMPLE + IGN_LOW_SAMPLE); r++) 
 8001468:	2300      	movs	r3, #0
 800146a:	72fb      	strb	r3, [r7, #11]
 800146c:	e030      	b.n	80014d0 <_ZN9HX711_ADC12smoothedDataEv+0x7e>
	{
		#if IGN_LOW_SAMPLE
		if (L > dataSampleSet[r]) L = dataSampleSet[r]; // find lowest value
 800146e:	7afa      	ldrb	r2, [r7, #11]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3206      	adds	r2, #6
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	429a      	cmp	r2, r3
 800147c:	bfcc      	ite	gt
 800147e:	2301      	movgt	r3, #1
 8001480:	2300      	movle	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <_ZN9HX711_ADC12smoothedDataEv+0x42>
 8001488:	7afa      	ldrb	r2, [r7, #11]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3206      	adds	r2, #6
 800148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001492:	613b      	str	r3, [r7, #16]
		#endif
		#if IGN_HIGH_SAMPLE
		if (H < dataSampleSet[r]) H = dataSampleSet[r]; // find highest value
 8001494:	7afa      	ldrb	r2, [r7, #11]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3206      	adds	r2, #6
 800149a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	bfb4      	ite	lt
 80014a4:	2301      	movlt	r3, #1
 80014a6:	2300      	movge	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <_ZN9HX711_ADC12smoothedDataEv+0x68>
 80014ae:	7afa      	ldrb	r2, [r7, #11]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3206      	adds	r2, #6
 80014b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b8:	60fb      	str	r3, [r7, #12]
		#endif
		data += dataSampleSet[r];
 80014ba:	7afa      	ldrb	r2, [r7, #11]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3206      	adds	r2, #6
 80014c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	4413      	add	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]
	for (uint8_t r = 0; r < (samplesInUse + IGN_HIGH_SAMPLE + IGN_LOW_SAMPLE); r++) 
 80014ca:	7afb      	ldrb	r3, [r7, #11]
 80014cc:	3301      	adds	r3, #1
 80014ce:	72fb      	strb	r3, [r7, #11]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	7afb      	ldrb	r3, [r7, #11]
 80014da:	429a      	cmp	r2, r3
 80014dc:	dac7      	bge.n	800146e <_ZN9HX711_ADC12smoothedDataEv+0x1c>
	}
	#if IGN_LOW_SAMPLE 
	data -= L; //remove lowest value
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
	#endif
	#if IGN_HIGH_SAMPLE 
	data -= H; //remove highest value
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
	#endif
	//return data;
	return (data >> divBit);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80014f4:	461a      	mov	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	4113      	asrs	r3, r2

}
 80014fa:	4618      	mov	r0, r3
 80014fc:	371c      	adds	r7, #28
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_ZN9HX711_ADC15conversion24bitEv>:
//	}
//}


void HX711_ADC::conversion24bit()
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
    conversionTime = HAL_GetTick() - conversionStartTime;
 800150e:	f00f f903 	bl	8010718 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001518:	1ad2      	subs	r2, r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	671a      	str	r2, [r3, #112]	; 0x70
    conversionStartTime = HAL_GetTick();
 800151e:	f00f f8fb 	bl	8010718 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	66da      	str	r2, [r3, #108]	; 0x6c
    uint32_t data = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
    uint8_t dout;
    convRslt = 0;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
    __disable_irq(); // Disable interrupts if necessary

    for (uint8_t i = 0; i < (24 + GAIN); i++)
 8001538:	2300      	movs	r3, #0
 800153a:	72fb      	strb	r3, [r7, #11]
 800153c:	e024      	b.n	8001588 <_ZN9HX711_ADC15conversion24bitEv+0x82>
    {
        HAL_GPIO_WritePin(sckPort_, sckPin_, GPIO_PIN_SET);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6898      	ldr	r0, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	899b      	ldrh	r3, [r3, #12]
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	f00f fcf5 	bl	8010f38 <HAL_GPIO_WritePin>
        if(SCK_DELAY) HAL_Delay(1); // Adjust delay as per requirement

        HAL_GPIO_WritePin(sckPort_, sckPin_, GPIO_PIN_RESET);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6898      	ldr	r0, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	899b      	ldrh	r3, [r3, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	4619      	mov	r1, r3
 800155a:	f00f fced 	bl	8010f38 <HAL_GPIO_WritePin>
        if (i < 24)
 800155e:	7afb      	ldrb	r3, [r7, #11]
 8001560:	2b17      	cmp	r3, #23
 8001562:	d80e      	bhi.n	8001582 <_ZN9HX711_ADC15conversion24bitEv+0x7c>
        {
            dout = HAL_GPIO_ReadPin(doutPort_, doutPin_);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	889b      	ldrh	r3, [r3, #4]
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f00f fcca 	bl	8010f08 <HAL_GPIO_ReadPin>
 8001574:	4603      	mov	r3, r0
 8001576:	72bb      	strb	r3, [r7, #10]
            data = (data << 1) | dout;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	005a      	lsls	r2, r3, #1
 800157c:	7abb      	ldrb	r3, [r7, #10]
 800157e:	4313      	orrs	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < (24 + GAIN); i++)
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	3301      	adds	r3, #1
 8001586:	72fb      	strb	r3, [r7, #11]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7b9b      	ldrb	r3, [r3, #14]
 800158c:	f103 0217 	add.w	r2, r3, #23
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	429a      	cmp	r2, r3
 8001594:	dad3      	bge.n	800153e <_ZN9HX711_ADC15conversion24bitEv+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 8001596:	b662      	cpsie	i
}
 8001598:	bf00      	nop
            if(SCK_DELAY) HAL_Delay(1); // Adjust delay as per requirement
        }
    }
    __enable_irq(); // Enable interrupts if disabled

    data ^= 0x800000; // Flip the 24th bit
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80015a0:	60fb      	str	r3, [r7, #12]

    if (data > 0xFFFFFF)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a8:	d303      	bcc.n	80015b2 <_ZN9HX711_ADC15conversion24bitEv+0xac>
    {
        dataOutOfRange = 1;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    }

    if (reverseVal)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <_ZN9HX711_ADC15conversion24bitEv+0xc2>
    {
        data = 0xFFFFFF - data;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 80015c2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015c6:	60fb      	str	r3, [r7, #12]
    }

    if (readIndex == samplesInUse + IGN_HIGH_SAMPLE + IGN_LOW_SAMPLE - 1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d2:	3301      	adds	r3, #1
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d103      	bne.n	80015e0 <_ZN9HX711_ADC15conversion24bitEv+0xda>
    {
        readIndex = 0;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	669a      	str	r2, [r3, #104]	; 0x68
 80015de:	e004      	b.n	80015ea <_ZN9HX711_ADC15conversion24bitEv+0xe4>
    }
    else
    {
        readIndex++;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    if(data > 0)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03b      	beq.n	8001668 <_ZN9HX711_ADC15conversion24bitEv+0x162>
    {
        convRslt++;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataSampleSet[readIndex] = static_cast<long>(data);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001604:	68f9      	ldr	r1, [r7, #12]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3206      	adds	r2, #6
 800160a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if(doTare)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001614:	2b00      	cmp	r3, #0
 8001616:	d027      	beq.n	8001668 <_ZN9HX711_ADC15conversion24bitEv+0x162>
        {
            if (tareTimes < DATA_SET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800161e:	2b11      	cmp	r3, #17
 8001620:	d808      	bhi.n	8001634 <_ZN9HX711_ADC15conversion24bitEv+0x12e>
            {
                tareTimes++;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001628:	3301      	adds	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                tareStatus = 1;
                convRslt++;
            }
        }
    }
}
 8001632:	e019      	b.n	8001668 <_ZN9HX711_ADC15conversion24bitEv+0x162>
                tareOffset = smoothedData();
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff0c 	bl	8001452 <_ZN9HX711_ADC12smoothedDataEv>
 800163a:	4602      	mov	r2, r0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	665a      	str	r2, [r3, #100]	; 0x64
                tareTimes = 0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                doTare = 0;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                tareStatus = 1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                convRslt++;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800165e:	3301      	adds	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_ZN9HX711_ADC7powerUpEv>:
    HAL_GPIO_WritePin(sckPort_, sckPin_, GPIO_PIN_SET);
}

//power up the HX711
void HX711_ADC::powerUp() 
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
//	digitalWrite(sckPin, LOW);
	HAL_GPIO_WritePin(sckPort_, sckPin_, GPIO_PIN_RESET);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6898      	ldr	r0, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	899b      	ldrh	r3, [r3, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	f00f fc58 	bl	8010f38 <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_ZN9HX711_ADC18getTareTimeoutFlagEv>:

//for testing and debugging:
//returns the tare timeout flag from the last tare operation. 
//0 = no timeout, 1 = timeout
bool HX711_ADC::getTareTimeoutFlag() 
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	return tareTimeoutFlag;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	bf00      	nop
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	7039      	strb	r1, [r7, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	7138      	strb	r0, [r7, #4]
 80016da:	bf00      	nop
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	f1c3 031f 	rsb	r3, r3, #31
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	ed87 0a01 	vstr	s0, [r7, #4]
 8001728:	edd7 7a01 	vldr	s15, [r7, #4]
 800172c:	eef0 7ae7 	vabs.f32	s15, s15
 8001730:	eeb0 0a67 	vmov.f32	s0, s15
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	1e5a      	subs	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4013      	ands	r3, r2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 800175c:	4a17      	ldr	r2, [pc, #92]	; (80017bc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 800175e:	2137      	movs	r1, #55	; 0x37
 8001760:	4817      	ldr	r0, [pc, #92]	; (80017c0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 8001762:	f01c f9b3 	bl	801dacc <__assert_func>

	if(align && size)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01f      	beq.n	80017ac <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d01c      	beq.n	80017ac <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3301      	adds	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4413      	add	r3, r2
 800177e:	2101      	movs	r1, #1
 8001780:	4618      	mov	r0, r3
 8001782:	f016 fd5d 	bl	8018240 <_Z9ei_callocjj>
 8001786:	60f8      	str	r0, [r7, #12]

		if(p)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00e      	beq.n	80017ac <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	425b      	negs	r3, r3
 800179a:	4013      	ands	r3, r2
 800179c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1ad2      	subs	r2, r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3b02      	subs	r3, #2
 80017a8:	b292      	uxth	r2, r2
 80017aa:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 80017ac:	697b      	ldr	r3, [r7, #20]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	080222a0 	.word	0x080222a0
 80017bc:	080222bc 	.word	0x080222bc
 80017c0:	080222f4 	.word	0x080222f4

080017c4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	assert(ptr);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 80017d6:	215a      	movs	r1, #90	; 0x5a
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 80017da:	f01c f977 	bl	801dacc <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80017e4:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 80017e6:	89fb      	ldrh	r3, [r7, #14]
 80017e8:	425b      	negs	r3, r3
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 80017f0:	68b8      	ldr	r0, [r7, #8]
 80017f2:	f016 fd33 	bl	801825c <_Z7ei_freePv>
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	08022370 	.word	0x08022370
 8001804:	08022374 	.word	0x08022374
 8001808:	080222f4 	.word	0x080222f4

0800180c <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_ZNKSt14_Bit_referencecvbEv>:

#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    operator bool() const _GLIBCXX_NOEXCEPT
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	2300      	moveq	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e009      	b.n	8001896 <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	43da      	mvns	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	400a      	ands	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
      return *this;
 8001896:	687b      	ldr	r3, [r7, #4]
    }
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	  --_M_p;
	}
    }

    void
    _M_incr(ptrdiff_t __i)
 80018ca:	b480      	push	{r7}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	da00      	bge.n	80018ea <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 80018e8:	331f      	adds	r3, #31
 80018ea:	115b      	asrs	r3, r3, #5
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	441a      	add	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	425a      	negs	r2, r3
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	f002 021f 	and.w	r2, r2, #31
 8001900:	bf58      	it	pl
 8001902:	4253      	negpl	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	da07      	bge.n	800191c <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3320      	adds	r3, #32
 8001910:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	1f1a      	subs	r2, r3, #4
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	605a      	str	r2, [r3, #4]
    }
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_ZNSt13_Bit_iteratorC1Ev>:
#else
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ffb1 	bl	80018a4 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ffa0 	bl	80018a4 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	461a      	mov	r2, r3
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff3f 	bl	800180c <_ZNSt14_Bit_referenceC1EPmm>
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6839      	ldr	r1, [r7, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff90 	bl	80018ca <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 80019aa:	687b      	ldr	r3, [r7, #4]
    }
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_ZNKSt13_Bit_iteratorixEi>:
      *this += -__i;
      return *this;
    }

    reference
    operator[](difference_type __i) const
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
    { return *(*this + __i); }
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f80b 	bl	80019e4 <_ZStplRKSt13_Bit_iteratori>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f107 0210 	add.w	r2, r7, #16
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ffc9 	bl	800196e <_ZNKSt13_Bit_iteratordeEv>
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZStplRKSt13_Bit_iteratori>:

    friend iterator
    operator+(const iterator& __x, difference_type __n)
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019f8:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7ff ffc9 	bl	8001996 <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 8001a04:	bf00      	nop
    }
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	2203      	movs	r2, #3
 8001a54:	4798      	blx	r3
    }
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	731a      	strb	r2, [r3, #12]
 8001aa2:	e00e      	b.n	8001ac2 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	2101      	movs	r1, #1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f016 fbc5 	bl	8018240 <_Z9ei_callocjj>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <_ZN2ei9ei_matrixD1Ev+0x22>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7b1b      	ldrb	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f016 fbb1 	bl	801825c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	6839      	ldr	r1, [r7, #0]
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
    }
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b36:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b3a:	f019 fbed 	bl	801b318 <expf>
 8001b3e:	eef0 7a40 	vmov.f32	s15, s0
 8001b42:	eeb0 0a67 	vmov.f32	s0, s15
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5a:	eef0 7ae7 	vabs.f32	s15, s15
 8001b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_ZSt3logf>:
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b76:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b7a:	f019 fc03 	bl	801b384 <logf>
 8001b7e:	eef0 7a40 	vmov.f32	s15, s0
 8001b82:	eeb0 0a67 	vmov.f32	s0, s15
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b96:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b9a:	f019 fe85 	bl	801b8a8 <roundf>
 8001b9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001bc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bcc:	db09      	blt.n	8001be2 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001bce:	ed97 0a05 	vldr	s0, [r7, #20]
 8001bd2:	f019 fc33 	bl	801b43c <sqrtf>
 8001bd6:	eef0 7a40 	vmov.f32	s15, s0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001be0:	e004      	b.n	8001bec <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001bea:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 8001bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_ZN2ei5numpy3sumEPfj>:
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(int16_t));

        return EIDSP_OK;
    }

    static float sum(float *input_array, size_t input_array_size) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	e00e      	b.n	8001c30 <_ZN2ei5numpy3sumEPfj+0x34>
            res += input_array[ix];
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	edd3 7a00 	vldr	s15, [r3]
 8001c1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c26:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d3ec      	bcc.n	8001c12 <_ZN2ei5numpy3sumEPfj+0x16>
        }
        return res;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	ee07 3a90 	vmov	s15, r3
    }
 8001c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
        }

        return EIDSP_OK;
    }

    static void transpose_in_place(matrix_t *matrix) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b096      	sub	sp, #88	; 0x58
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
        size_t size = matrix->cols * matrix->rows - 1;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6852      	ldr	r2, [r2, #4]
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48
        float temp; // temp for swap
        size_t next; // next item to swap
        size_t cycleBegin; // index of start of cycle
        size_t i; // location in matrix
        size_t all_done_mark = 1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
        ei_vector<bool> done(size+1,false);
 8001c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c6a:	1c59      	adds	r1, r3, #1
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	77fb      	strb	r3, [r7, #31]
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	f107 021f 	add.w	r2, r7, #31
 8001c78:	f107 0008 	add.w	r0, r7, #8
 8001c7c:	f007 fd9a 	bl	80097b4 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>

        i = 1; // Note that matrix[0] and last element of matrix won't move
 8001c80:	2301      	movs	r3, #1
 8001c82:	653b      	str	r3, [r7, #80]	; 0x50
        while (1)
        {
            cycleBegin = i;
 8001c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c86:	647b      	str	r3, [r7, #68]	; 0x44
            temp = matrix->buffer[i];
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	657b      	str	r3, [r7, #84]	; 0x54
            do
            {
                size_t col = i % matrix->cols;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ca0:	fb01 f202 	mul.w	r2, r1, r2
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	643b      	str	r3, [r7, #64]	; 0x40
                size_t row = i / matrix->cols;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
                // swap row and col to make new idx, b/c we want to know where in the transposed matrix
                next = col*matrix->rows + row;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cc0:	4413      	add	r3, r2
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38
                float temp2 = matrix->buffer[next];
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
                matrix->buffer[next] = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cde:	601a      	str	r2, [r3, #0]
                temp = temp2;
 8001ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce2:	657b      	str	r3, [r7, #84]	; 0x54
                done[next] = true;
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	f107 0108 	add.w	r1, r7, #8
 8001cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f007 fd88 	bl	8009804 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fdae 	bl	800185c <_ZNSt14_Bit_referenceaSEb>
                i = next;
 8001d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d02:	653b      	str	r3, [r7, #80]	; 0x50
            }
            while (i != cycleBegin);
 8001d04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1c4      	bne.n	8001c96 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x4a>

            // start next cycle by find next not done
            for (i = all_done_mark; done[i]; i++) {
 8001d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8001d10:	e009      	b.n	8001d26 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xda>
                all_done_mark++; // move the high water mark so we don't look again
 8001d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d14:	3301      	adds	r3, #1
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
                if(i>=size) { goto LOOP_END; }
 8001d18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d213      	bcs.n	8001d48 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xfc>
            for (i = all_done_mark; done[i]; i++) {
 8001d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d22:	3301      	adds	r3, #1
 8001d24:	653b      	str	r3, [r7, #80]	; 0x50
 8001d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2a:	f107 0108 	add.w	r1, r7, #8
 8001d2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d30:	4618      	mov	r0, r3
 8001d32:	f007 fd67 	bl	8009804 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fd79 	bl	8001832 <_ZNKSt14_Bit_referencecvbEv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1e5      	bne.n	8001d12 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc6>
            }
        }
 8001d46:	e79d      	b.n	8001c84 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                if(i>=size) { goto LOOP_END; }
 8001d48:	bf00      	nop
        LOOP_END:
        // finally, swap the row and column dimensions
        std::swap(matrix->rows, matrix->cols);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	1d1a      	adds	r2, r3, #4
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3308      	adds	r3, #8
 8001d52:	4619      	mov	r1, r3
 8001d54:	4610      	mov	r0, r2
 8001d56:	f007 fd78 	bl	800984a <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8001d5a:	f107 0308 	add.w	r3, r7, #8
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f007 fd43 	bl	80097ea <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>
 8001d64:	3758      	adds	r7, #88	; 0x58
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	461a      	mov	r2, r3
 8001d82:	f000 f817 	bl	8001db4 <_ZN2ei5numpy9transposeEPfii>
 8001d86:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	e00c      	b.n	8001dac <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001d9e:	893a      	ldrh	r2, [r7, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 8001da4:	897a      	ldrh	r2, [r7, #10]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 8001daa:	2300      	movs	r3, #0
    }
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b08f      	sub	sp, #60	; 0x3c
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f7ff fe5a 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <_ZN2ei5numpy9transposeEPfii+0x24>
 8001dd4:	4c23      	ldr	r4, [pc, #140]	; (8001e64 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001dd6:	e03b      	b.n	8001e50 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001dde:	4c21      	ldr	r4, [pc, #132]	; (8001e64 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001de0:	e036      	b.n	8001e50 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	da03      	bge.n	8001df2 <_ZN2ei5numpy9transposeEPfii+0x3e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df0:	db01      	blt.n	8001df6 <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 8001df2:	4c1d      	ldr	r4, [pc, #116]	; (8001e68 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 8001df4:	e02c      	b.n	8001e50 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	83bb      	strh	r3, [r7, #28]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	83fb      	strh	r3, [r7, #30]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	82bb      	strh	r3, [r7, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001e14:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001e16:	f107 0214 	add.w	r2, r7, #20
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f012 f875 	bl	8013f10 <arm_mat_trans_f32>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001e2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 8001e34:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001e38:	e00a      	b.n	8001e50 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	461a      	mov	r2, r3
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f01d fe2f 	bl	801faac <memcpy>

        return EIDSP_OK;
 8001e4e:	2400      	movs	r4, #0
    }
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fe3f 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8001e5a:	4623      	mov	r3, r4
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	373c      	adds	r7, #60	; 0x3c
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd90      	pop	{r4, r7, pc}
 8001e64:	fffffc16 	.word	0xfffffc16
 8001e68:	fffffc0c 	.word	0xfffffc0c

08001e6c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001e78:	edd7 7a00 	vldr	s15, [r7]
 8001e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e80:	eef4 7a47 	vcmp.f32	s15, s14
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d101      	bne.n	8001e8e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e033      	b.n	8001ef6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e96:	d204      	bcs.n	8001ea2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea0:	d301      	bcc.n	8001ea6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001ea4:	e027      	b.n	8001ef6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	82bb      	strh	r3, [r7, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	82fb      	strh	r3, [r7, #22]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	81bb      	strh	r3, [r7, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	81fb      	strh	r3, [r7, #14]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001ed2:	f107 020c 	add.w	r2, r7, #12
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4611      	mov	r1, r2
 8001edc:	ed97 0a00 	vldr	s0, [r7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f011 ffdf 	bl	8013ea4 <arm_mat_scale_f32>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	e000      	b.n	8001ef6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001ef4:	2300      	movs	r3, #0
    }
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	fffffc0c 	.word	0xfffffc0c

08001f04 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e014      	b.n	8001f40 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x3c>
            matrix->buffer[ix] -= subtraction;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	ed93 7a00 	vldr	s14, [r3]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	edd7 7a00 	vldr	s15, [r7]
 8001f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f36:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6892      	ldr	r2, [r2, #8]
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d3e1      	bcc.n	8001f16 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x12>
        }
        return EIDSP_OK;
 8001f52:	2300      	movs	r3, #0
    }
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001f76:	4c26      	ldr	r4, [pc, #152]	; (8002010 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001f78:	e045      	b.n	8002006 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d001      	beq.n	8001f86 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001f82:	4c23      	ldr	r4, [pc, #140]	; (8002010 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001f84:	e03f      	b.n	8002006 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e036      	b.n	8001ffa <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x9a>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689d      	ldr	r5, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	69f9      	ldr	r1, [r7, #28]
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f107 0008 	add.w	r0, r7, #8
 8001fa6:	462a      	mov	r2, r5
 8001fa8:	2101      	movs	r1, #1
 8001faa:	f7ff fd6a 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x5a>
 8001fb4:	4c17      	ldr	r4, [pc, #92]	; (8002014 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001fb6:	2500      	movs	r5, #0
 8001fb8:	e015      	b.n	8001fe6 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x86>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff97 	bl	8001f04 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001fd6:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x84>
                EIDSP_ERR(ret);
 8001fde:	69bc      	ldr	r4, [r7, #24]
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	e000      	b.n	8001fe6 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x86>
            }
        }
 8001fe4:	2501      	movs	r5, #1
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fd74 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8001ff0:	2d01      	cmp	r5, #1
 8001ff2:	d108      	bne.n	8002006 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	d3c3      	bcc.n	8001f8c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2c>

        return EIDSP_OK;
 8002004:	2400      	movs	r4, #0
    }
 8002006:	4623      	mov	r3, r4
 8002008:	4618      	mov	r0, r3
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}
 8002010:	fffffc14 	.word	0xfffffc14
 8002014:	fffffc16 	.word	0xfffffc16

08002018 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8002030:	e028      	b.n	8002084 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d001      	beq.n	800203e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 800203c:	e022      	b.n	8002084 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e019      	b.n	8002078 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x60>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	68f9      	ldr	r1, [r7, #12]
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	18d0      	adds	r0, r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f107 0208 	add.w	r2, r7, #8
 800205e:	4619      	mov	r1, r3
 8002060:	f011 ffc6 	bl	8013ff0 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3301      	adds	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	429a      	cmp	r2, r3
 8002080:	d3e0      	bcc.n	8002044 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2c>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8002082:	2300      	movs	r3, #0
    }
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	fffffc14 	.word	0xfffffc14

08002090 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 80020a8:	e028      	b.n	80020fc <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d001      	beq.n	80020b6 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 80020b4:	e022      	b.n	80020fc <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e019      	b.n	80020f0 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x60>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	18d0      	adds	r0, r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f107 0208 	add.w	r2, r7, #8
 80020d6:	4619      	mov	r1, r3
 80020d8:	f011 ff5b 	bl	8013f92 <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3e0      	bcc.n	80020bc <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 80020fa:	2300      	movs	r3, #0
    }
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	fffffc14 	.word	0xfffffc14

08002108 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>:
    /**
     * Get the stdev value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int stdev(matrix_t *input_matrix, matrix_t *output_matrix) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800211e:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8002120:	e043      	b.n	80021aa <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }
        if (output_matrix->cols != 1) {
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d001      	beq.n	800212e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 800212c:	e03d      	b.n	80021aa <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e034      	b.n	800219e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x96>
#if EIDSP_USE_CMSIS_DSP
            float std;
            float var;
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	69f9      	ldr	r1, [r7, #28]
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	18d0      	adds	r0, r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f107 020c 	add.w	r2, r7, #12
 800214e:	4619      	mov	r1, r3
 8002150:	f000 fc96 	bl	8002a80 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800215e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216a:	db09      	blt.n	8002180 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x78>
      *pOut = sqrtf(in);
 800216c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002170:	f019 f964 	bl	801b43c <sqrtf>
 8002174:	eef0 7a40 	vmov.f32	s15, s0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800217e:	e004      	b.n	800218a <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x82>
      *pOut = 0.0f;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002188:	bf00      	nop
            output_matrix->buffer[row] = std;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3301      	adds	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d3c5      	bcc.n	8002134 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = sqrt(std / input_matrix->cols);
#endif
        }

        return EIDSP_OK;
 80021a8:	2300      	movs	r3, #0
    }
 80021aa:	4618      	mov	r0, r3
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	fffffc14 	.word	0xfffffc14

080021b8 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>:
    /**
     * Get the skewness value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 80021d0:	e087      	b.n	80022e2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }
        if (output_matrix->cols != 1) {
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80021da:	4b44      	ldr	r3, [pc, #272]	; (80022ec <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 80021dc:	e081      	b.n	80022e2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	e078      	b.n	80022d6 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x11e>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate the mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	69f9      	ldr	r1, [r7, #28]
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	18d0      	adds	r0, r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f107 0210 	add.w	r2, r7, #16
 80021fe:	4619      	mov	r1, r3
 8002200:	f011 fec7 	bl	8013f92 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	69f9      	ldr	r1, [r7, #28]
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	18d0      	adds	r0, r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f107 020c 	add.w	r2, r7, #12
 800221e:	4619      	mov	r1, r3
 8002220:	f000 fc2e 	bl	8002a80 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_3
            float m_3;
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	69f9      	ldr	r1, [r7, #28]
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	18d0      	adds	r0, r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	edd7 7a04 	vldr	s15, [r7, #16]
 800223e:	f107 0208 	add.w	r2, r7, #8
 8002242:	eeb0 0a67 	vmov.f32	s0, s15
 8002246:	4619      	mov	r1, r3
 8002248:	f000 fd18 	bl	8002c7c <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>

            // Calculate (variance)^(3/2)
            arm_sqrt_f32(var * var * var, &var);
 800224c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002250:	edd7 7a03 	vldr	s15, [r7, #12]
 8002254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002258:	edd7 7a03 	vldr	s15, [r7, #12]
 800225c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002260:	edc7 7a06 	vstr	s15, [r7, #24]
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800226a:	edd7 7a06 	vldr	s15, [r7, #24]
 800226e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	db09      	blt.n	800228c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xd4>
      *pOut = sqrtf(in);
 8002278:	ed97 0a06 	vldr	s0, [r7, #24]
 800227c:	f019 f8de 	bl	801b43c <sqrtf>
 8002280:	eef0 7a40 	vmov.f32	s15, s0
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800228a:	e004      	b.n	8002296 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xde>
      *pOut = 0.0f;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002294:	bf00      	nop

            // Calculate skew = (m_3) / (variance)^(3/2)
            if (var == 0.0f) {
 8002296:	edd7 7a03 	vldr	s15, [r7, #12]
 800229a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	d108      	bne.n	80022b6 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xfe>
                output_matrix->buffer[row] = 0.0f;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e00c      	b.n	80022d0 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x118>
            } else {
                output_matrix->buffer[row] = m_3 / var;
 80022b6:	edd7 6a02 	vldr	s13, [r7, #8]
 80022ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022cc:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	3301      	adds	r3, #1
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d381      	bcc.n	80021e4 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x2c>
                output_matrix->buffer[row] = m_3 / m_2;
            }
#endif
        }

        return EIDSP_OK;
 80022e0:	2300      	movs	r3, #0
    }
 80022e2:	4618      	mov	r0, r3
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	fffffc14 	.word	0xfffffc14

080022f0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>:
    /**
     * Get the kurtosis value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002306:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8002308:	e06d      	b.n	80023e6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }
        if (output_matrix->cols != 1) {
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d001      	beq.n	8002316 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002312:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8002314:	e067      	b.n	80023e6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e05e      	b.n	80023da <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xea>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	6979      	ldr	r1, [r7, #20]
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	18d0      	adds	r0, r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f107 0210 	add.w	r2, r7, #16
 8002336:	4619      	mov	r1, r3
 8002338:	f011 fe2b 	bl	8013f92 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	6979      	ldr	r1, [r7, #20]
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	18d0      	adds	r0, r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f107 020c 	add.w	r2, r7, #12
 8002356:	4619      	mov	r1, r3
 8002358:	f000 fb92 	bl	8002a80 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_4
            float m_4;
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	6979      	ldr	r1, [r7, #20]
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	18d0      	adds	r0, r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	edd7 7a04 	vldr	s15, [r7, #16]
 8002376:	f107 0208 	add.w	r2, r7, #8
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	4619      	mov	r1, r3
 8002380:	f000 fd37 	bl	8002df2 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>

            // Calculate Fisher kurtosis = (m_4 / variance^2) - 3
            var = var * var;
 8002384:	ed97 7a03 	vldr	s14, [r7, #12]
 8002388:	edd7 7a03 	vldr	s15, [r7, #12]
 800238c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002390:	edc7 7a03 	vstr	s15, [r7, #12]
            if (var == 0.0f) {
 8002394:	edd7 7a03 	vldr	s15, [r7, #12]
 8002398:	eef5 7a40 	vcmp.f32	s15, #0.0
 800239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a0:	d107      	bne.n	80023b2 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xc2>
                output_matrix->buffer[row] = -3.0f;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x104>)
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e010      	b.n	80023d4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xe4>
            } else {
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 80023b2:	edd7 6a02 	vldr	s13, [r7, #8]
 80023b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80023ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80023cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023d0:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3301      	adds	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d39b      	bcc.n	800231c <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x2c>
                output_matrix->buffer[row] = (m_4 / variance) - 3.0f;
            }
#endif
        }

        return EIDSP_OK;
 80023e4:	2300      	movs	r3, #0
    }
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	fffffc14 	.word	0xfffffc14
 80023f4:	c0400000 	.word	0xc0400000

080023f8 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b098      	sub	sp, #96	; 0x60
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8002406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	3301      	adds	r3, #1
 800240c:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8002416:	4c65      	ldr	r4, [pc, #404]	; (80025ac <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8002418:	e0c2      	b.n	80025a0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800241e:	429a      	cmp	r2, r3
 8002420:	d901      	bls.n	8002426 <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8002422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002424:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8002426:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800242a:	2300      	movs	r3, #0
 800242c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800242e:	2101      	movs	r1, #1
 8002430:	f7ff fb27 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8002434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 800243a:	4c5d      	ldr	r4, [pc, #372]	; (80025b0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 800243c:	e0ab      	b.n	8002596 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 800243e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002444:	4c5a      	ldr	r4, [pc, #360]	; (80025b0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8002446:	e0a6      	b.n	8002596 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8002448:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	461a      	mov	r2, r3
 8002450:	68f9      	ldr	r1, [r7, #12]
 8002452:	f01d fb2b 	bl	801faac <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8002456:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	18d0      	adds	r0, r2, r3
 800245e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	461a      	mov	r2, r3
 8002468:	2100      	movs	r1, #0
 800246a:	f01d fa3b 	bl	801f8e4 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 800246e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002470:	2b20      	cmp	r3, #32
 8002472:	d025      	beq.n	80024c0 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8002474:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	d022      	beq.n	80024c0 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 800247a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d01f      	beq.n	80024c0 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8002480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002486:	d01b      	beq.n	80024c0 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8002488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800248a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800248e:	d017      	beq.n	80024c0 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8002490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002496:	d013      	beq.n	80024c0 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8002498:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800249a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800249e:	d00f      	beq.n	80024c0 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80024a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a6:	d00b      	beq.n	80024c0 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80024a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	f000 fa4e 	bl	8002950 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 80024b4:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 80024b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d068      	beq.n	800258e <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 80024bc:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80024be:	e06a      	b.n	8002596 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 80024c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fd58 	bl	8002f7c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 80024cc:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 80024ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 80024d4:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80024d6:	e05d      	b.n	8002594 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 80024d8:	f107 0014 	add.w	r0, r7, #20
 80024dc:	2300      	movs	r3, #0
 80024de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80024e0:	2101      	movs	r1, #1
 80024e2:	f7ff face 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 80024ec:	4c30      	ldr	r4, [pc, #192]	; (80025b0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 80024ee:	2500      	movs	r5, #0
 80024f0:	e045      	b.n	800257e <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80024f8:	4c2d      	ldr	r4, [pc, #180]	; (80025b0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 80024fa:	2500      	movs	r5, #0
 80024fc:	e03f      	b.n	800257e <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 80024fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002506:	2300      	movs	r3, #0
 8002508:	f014 f910 	bl	801672c <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002518:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800251c:	3b01      	subs	r3, #1
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	440b      	add	r3, r1
 8002524:	6852      	ldr	r2, [r2, #4]
 8002526:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8002528:	2302      	movs	r3, #2
 800252a:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800252c:	2301      	movs	r3, #1
 800252e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002530:	e01f      	b.n	8002572 <_ZN2ei5numpy4rfftEPKfjPfjj+0x17a>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	f107 0210 	add.w	r2, r7, #16
 800253e:	2102      	movs	r1, #2
 8002540:	4618      	mov	r0, r3
 8002542:	f011 fd55 	bl	8013ff0 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8002546:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800254a:	f7ff fb2f 	bl	8001bac <_ZN2ei5numpy4sqrtEf>
 800254e:	eeb0 7a40 	vmov.f32	s14, s0
 8002552:	edd7 7a04 	vldr	s15, [r7, #16]
 8002556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002562:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 8002566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002568:	3302      	adds	r3, #2
 800256a:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800256c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800256e:	3301      	adds	r3, #1
 8002570:	65bb      	str	r3, [r7, #88]	; 0x58
 8002572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002574:	3b01      	subs	r3, #1
 8002576:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002578:	429a      	cmp	r2, r3
 800257a:	d3da      	bcc.n	8002532 <_ZN2ei5numpy4rfftEPKfjPfjj+0x13a>
            }
        }
 800257c:	2501      	movs	r5, #1
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff faa8 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8002588:	2d01      	cmp	r5, #1
 800258a:	d103      	bne.n	8002594 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 800258c:	e000      	b.n	8002590 <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
        }
 800258e:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002590:	2400      	movs	r4, #0
 8002592:	e000      	b.n	8002596 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 8002594:	bf00      	nop
    }
 8002596:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fa9c 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80025a0:	4623      	mov	r3, r4
 80025a2:	4618      	mov	r0, r3
 80025a4:	3760      	adds	r7, #96	; 0x60
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bdb0      	pop	{r4, r5, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	fffffc11 	.word	0xfffffc11
 80025b0:	fffffc16 	.word	0xfffffc16

080025b4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b098      	sub	sp, #96	; 0x60
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 80025c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	3301      	adds	r3, #1
 80025c8:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 80025d2:	4c6f      	ldr	r4, [pc, #444]	; (8002790 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 80025d4:	e0d6      	b.n	8002784 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025da:	429a      	cmp	r2, r3
 80025dc:	d901      	bls.n	80025e2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 80025de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e0:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d101      	bne.n	80025f2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 80025f2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80025f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80025fa:	2101      	movs	r1, #1
 80025fc:	f7ff fa41 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8002600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 8002606:	4c63      	ldr	r4, [pc, #396]	; (8002794 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002608:	e0b7      	b.n	800277a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002610:	4c60      	ldr	r4, [pc, #384]	; (8002794 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002612:	e0b2      	b.n	800277a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 8002614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d112      	bne.n	8002640 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 800261a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	461a      	mov	r2, r3
 8002622:	68f9      	ldr	r1, [r7, #12]
 8002624:	f01d fa42 	bl	801faac <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8002628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	18d0      	adds	r0, r2, r3
 8002630:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	461a      	mov	r2, r3
 800263a:	2100      	movs	r1, #0
 800263c:	f01d f952 	bl	801f8e4 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8002640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002642:	2b20      	cmp	r3, #32
 8002644:	d025      	beq.n	8002692 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	d022      	beq.n	8002692 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800264c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800264e:	2b80      	cmp	r3, #128	; 0x80
 8002650:	d01f      	beq.n	8002692 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002658:	d01b      	beq.n	8002692 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800265a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800265c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002660:	d017      	beq.n	8002692 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8002662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002668:	d013      	beq.n	8002692 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800266a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800266c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002670:	d00f      	beq.n	8002692 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002678:	d00b      	beq.n	8002692 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 800267a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800267c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	f000 f9d7 	bl	8002a34 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 8002686:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 8002688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d071      	beq.n	8002772 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 800268e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002690:	e073      	b.n	800277a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8002692:	f107 0320 	add.w	r3, r7, #32
 8002696:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fc6f 	bl	8002f7c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 800269e:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 80026a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 80026a6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80026a8:	e066      	b.n	8002778 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 80026aa:	f107 0010 	add.w	r0, r7, #16
 80026ae:	2300      	movs	r3, #0
 80026b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80026b2:	2101      	movs	r1, #1
 80026b4:	f7ff f9e5 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d102      	bne.n	80026c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 80026be:	4c35      	ldr	r4, [pc, #212]	; (8002794 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 80026c0:	2500      	movs	r5, #0
 80026c2:	e04e      	b.n	8002762 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80026ca:	4c32      	ldr	r4, [pc, #200]	; (8002794 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 80026cc:	2500      	movs	r5, #0
 80026ce:	e048      	b.n	8002762 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 80026d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	f107 0020 	add.w	r0, r7, #32
 80026d8:	2300      	movs	r3, #0
 80026da:	f014 f827 	bl	801672c <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80026f6:	3b01      	subs	r3, #1
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	440b      	add	r3, r1
 80026fe:	6852      	ldr	r2, [r2, #4]
 8002700:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8002702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002704:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002708:	3b01      	subs	r3, #1
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 8002716:	2302      	movs	r3, #2
 8002718:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800271a:	2301      	movs	r3, #1
 800271c:	657b      	str	r3, [r7, #84]	; 0x54
 800271e:	e01a      	b.n	8002756 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1a2>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	441a      	add	r2, r3
 8002728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	440b      	add	r3, r1
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002738:	3301      	adds	r3, #1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	441a      	add	r2, r3
 800273e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	440b      	add	r3, r1
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 800274a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800274c:	3302      	adds	r3, #2
 800274e:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8002750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002752:	3301      	adds	r3, #1
 8002754:	657b      	str	r3, [r7, #84]	; 0x54
 8002756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002758:	3b01      	subs	r3, #1
 800275a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800275c:	429a      	cmp	r2, r3
 800275e:	d3df      	bcc.n	8002720 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16c>
            }
        }
 8002760:	2501      	movs	r5, #1
 8002762:	f107 0310 	add.w	r3, r7, #16
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff f9b6 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 800276c:	2d01      	cmp	r5, #1
 800276e:	d103      	bne.n	8002778 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 8002770:	e000      	b.n	8002774 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
        }
 8002772:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002774:	2400      	movs	r4, #0
 8002776:	e000      	b.n	800277a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 8002778:	bf00      	nop
    }
 800277a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff f9aa 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8002784:	4623      	mov	r3, r4
 8002786:	4618      	mov	r0, r3
 8002788:	3760      	adds	r7, #96	; 0x60
 800278a:	46bd      	mov	sp, r7
 800278c:	bdb0      	pop	{r4, r5, r7, pc}
 800278e:	bf00      	nop
 8002790:	fffffc11 	.word	0xfffffc11
 8002794:	fffffc16 	.word	0xfffffc16

08002798 <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	ed87 0a03 	vstr	s0, [r7, #12]
 80027a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 80027b8:	e03f      	b.n	800283a <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d104      	bne.n	80027ca <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e037      	b.n	800283a <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 80027ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80027ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80027d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3b01      	subs	r3, #1
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027e6:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e015      	b.n	800281c <_ZN2ei5numpy8linspaceEffmPf+0x84>
            out[ix] = start + ix * step;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80027fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	4413      	add	r3, r2
 800280a:	edd7 7a03 	vldr	s15, [r7, #12]
 800280e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002812:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3301      	adds	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	429a      	cmp	r2, r3
 8002824:	d3e4      	bcc.n	80027f0 <_ZN2ei5numpy8linspaceEffmPf+0x58>
        }

        // last entry always stop
        out[number - 1] = stop;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800282c:	3b01      	subs	r3, #1
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	4413      	add	r3, r2
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 8002838:	2300      	movs	r3, #0
    }
 800283a:	4618      	mov	r0, r3
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	fffffc10 	.word	0xfffffc10

0800284c <_ZN2ei5numpy5log10EPNS_9ei_matrixE>:
    /**
     * Calculate the log10 of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log10(matrix_t *matrix)
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	e062      	b.n	8002920 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xd4>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6811      	ldr	r1, [r2, #0]
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	188c      	adds	r4, r1, r2
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	617b      	str	r3, [r7, #20]
        float f = frexpf(fabsf(a), &e);
 8002876:	edd7 7a05 	vldr	s15, [r7, #20]
 800287a:	eef0 7ae7 	vabs.f32	s15, s15
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	4618      	mov	r0, r3
 8002884:	eeb0 0a67 	vmov.f32	s0, s15
 8002888:	f018 fdf6 	bl	801b478 <frexpf>
 800288c:	ed87 0a04 	vstr	s0, [r7, #16]
        float y = 1.23149591368684f;
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf0>)
 8002892:	60fb      	str	r3, [r7, #12]
        y *= f;
 8002894:	ed97 7a03 	vldr	s14, [r7, #12]
 8002898:	edd7 7a04 	vldr	s15, [r7, #16]
 800289c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a0:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -4.11852516267426f;
 80028a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028a8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002940 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf4>
 80028ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028b0:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 80028b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80028b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80028bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c0:	edc7 7a03 	vstr	s15, [r7, #12]
        y += 6.02197014179219f;
 80028c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028c8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002944 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf8>
 80028cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028d0:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 80028d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80028d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80028dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e0:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -3.13396450166353f;
 80028e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028e8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002948 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xfc>
 80028ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028f0:	edc7 7a03 	vstr	s15, [r7, #12]
        y += e;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	ee07 3a90 	vmov	s15, r3
 80028fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002906:	edc7 7a03 	vstr	s15, [r7, #12]
        return y;
 800290a:	edd7 7a03 	vldr	s15, [r7, #12]
        return numpy::log2(a) * 0.3010299956639812f;
 800290e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800294c <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0x100>
 8002912:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 8002916:	edc4 7a00 	vstr	s15, [r4]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3301      	adds	r3, #1
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6892      	ldr	r2, [r2, #8]
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	429a      	cmp	r2, r3
 8002930:	d393      	bcc.n	800285a <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xe>
        }

        return EIDSP_OK;
 8002932:	2300      	movs	r3, #0
    }
 8002934:	4618      	mov	r0, r3
 8002936:	3724      	adds	r7, #36	; 0x24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd90      	pop	{r4, r7, pc}
 800293c:	3f9da1a8 	.word	0x3f9da1a8
 8002940:	4083caf5 	.word	0x4083caf5
 8002944:	40c0b3fb 	.word	0x40c0b3fb
 8002948:	404892e0 	.word	0x404892e0
 800294c:	3e9a209b 	.word	0x3e9a209b

08002950 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 8002950:	b5b0      	push	{r4, r5, r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4618      	mov	r0, r3
 8002964:	f015 fc60 	bl	8018228 <_Z9ei_mallocj>
 8002968:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002972:	e058      	b.n	8002a26 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f107 0310 	add.w	r3, r7, #16
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	2300      	movs	r3, #0
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	f015 f8a1 	bl	8017ac8 <kiss_fftr_alloc>
 8002986:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d104      	bne.n	8002998 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 800298e:	69b8      	ldr	r0, [r7, #24]
 8002990:	f015 fc64 	bl	801825c <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002994:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002996:	e046      	b.n	8002a26 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	6978      	ldr	r0, [r7, #20]
 800299e:	f015 f9b3 	bl	8017d08 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	e033      	b.n	8002a10 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc0>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4413      	add	r3, r2
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	2002      	movs	r0, #2
 80029b6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ba:	f006 ff65 	bl	8009888 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80029be:	ec55 4b10 	vmov	r4, r5, d0
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4413      	add	r3, r2
 80029ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80029ce:	2002      	movs	r0, #2
 80029d0:	eeb0 0a67 	vmov.f32	s0, s15
 80029d4:	f006 ff58 	bl	8009888 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80029d8:	ec53 2b10 	vmov	r2, r3, d0
 80029dc:	4620      	mov	r0, r4
 80029de:	4629      	mov	r1, r5
 80029e0:	f7fd fc64 	bl	80002ac <__adddf3>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7fe f90c 	bl	8000c08 <__aeabi_d2f>
 80029f0:	4601      	mov	r1, r0
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	18d4      	adds	r4, r2, r3
 80029fa:	ee00 1a10 	vmov	s0, r1
 80029fe:	f7ff f8d5 	bl	8001bac <_ZN2ei5numpy4sqrtEf>
 8002a02:	eef0 7a40 	vmov.f32	s15, s0
 8002a06:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3c7      	bcc.n	80029a8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x58>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8002a18:	6978      	ldr	r0, [r7, #20]
 8002a1a:	f015 fc1f 	bl	801825c <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002a1e:	69b8      	ldr	r0, [r7, #24]
 8002a20:	f015 fc1c 	bl	801825c <_Z7ei_freePv>

        return EIDSP_OK;
 8002a24:	2300      	movs	r3, #0
    }
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	fffffc16 	.word	0xfffffc16

08002a34 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	f015 f83a 	bl	8017ac8 <kiss_fftr_alloc>
 8002a54:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002a5c:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 8002a5e:	e008      	b.n	8002a72 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	68f9      	ldr	r1, [r7, #12]
 8002a64:	6978      	ldr	r0, [r7, #20]
 8002a66:	f015 f94f 	bl	8017d08 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f015 fbf6 	bl	801825c <_Z7ei_freePv>

        return EIDSP_OK;
 8002a70:	2300      	movs	r3, #0
    }
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	fffffc16 	.word	0xfffffc16

08002a80 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 8002a80:	b480      	push	{r7}
 8002a82:	b08b      	sub	sp, #44	; 0x2c
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d804      	bhi.n	8002aac <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
            return;
 8002aaa:	e0e2      	b.n	8002c72 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002ab2:	e02e      	b.n	8002b12 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x92>
            sum += *pInput++;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	1d1a      	adds	r2, r3, #4
 8002ab8:	61ba      	str	r2, [r7, #24]
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac6:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	1d1a      	adds	r2, r3, #4
 8002ace:	61ba      	str	r2, [r7, #24]
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002adc:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1d1a      	adds	r2, r3, #4
 8002ae4:	61ba      	str	r2, [r7, #24]
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	ed97 7a08 	vldr	s14, [r7, #32]
 8002aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af2:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1d1a      	adds	r2, r3, #4
 8002afa:	61ba      	str	r2, [r7, #24]
 8002afc:	edd3 7a00 	vldr	s15, [r3]
 8002b00:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b08:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1cd      	bne.n	8002ab4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x34>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002b20:	e00d      	b.n	8002b3e <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xbe>
            sum += *pInput++;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	1d1a      	adds	r2, r3, #4
 8002b26:	61ba      	str	r2, [r7, #24]
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b34:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ee      	bne.n	8002b22 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa2>
        }

        fMean = sum / (float32_t)blockSize;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b4e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b56:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002b64:	e056      	b.n	8002c14 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x194>
            fValue = *pInput++ - fMean;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	1d1a      	adds	r2, r3, #4
 8002b6a:	61ba      	str	r2, [r7, #24]
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
 8002b70:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b78:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002b7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b84:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8c:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	1d1a      	adds	r2, r3, #4
 8002b94:	61ba      	str	r2, [r7, #24]
 8002b96:	ed93 7a00 	vldr	s14, [r3]
 8002b9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba2:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002ba6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002baa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002bae:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	1d1a      	adds	r2, r3, #4
 8002bbe:	61ba      	str	r2, [r7, #24]
 8002bc0:	ed93 7a00 	vldr	s14, [r3]
 8002bc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bcc:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002bd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002bd8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be0:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	61ba      	str	r2, [r7, #24]
 8002bea:	ed93 7a00 	vldr	s14, [r3]
 8002bee:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf6:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002bfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bfe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c02:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	3b01      	subs	r3, #1
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1a5      	bne.n	8002b66 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe6>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002c22:	e017      	b.n	8002c54 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1d4>
            fValue = *pInput++ - fMean;
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	1d1a      	adds	r2, r3, #4
 8002c28:	61ba      	str	r2, [r7, #24]
 8002c2a:	ed93 7a00 	vldr	s14, [r3]
 8002c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c36:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002c3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c42:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4a:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	3b01      	subs	r3, #1
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e4      	bne.n	8002c24 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a4>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	edc3 7a00 	vstr	s15, [r3]
    }
 8002c72:	372c      	adds	r7, #44	; 0x2c
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before cubing
     * @param      pResult    The third central moment of the input
     */
    static void cmsis_arm_third_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c8a:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 8002c98:	e06e      	b.n	8002d78 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0xfc>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1d1a      	adds	r2, r3, #4
 8002c9e:	60fa      	str	r2, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002ca4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb0:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002cb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cb8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002cbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ccc:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1d1a      	adds	r2, r3, #4
 8002cd4:	60fa      	str	r2, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002cda:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cde:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce6:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002cea:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002cf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfa:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d02:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1d1a      	adds	r2, r3, #4
 8002d0a:	60fa      	str	r2, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002d10:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1c:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002d20:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d24:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002d28:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d30:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d38:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1d1a      	adds	r2, r3, #4
 8002d40:	60fa      	str	r2, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002d46:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d52:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002d56:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d5a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002d5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d66:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6e:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d18d      	bne.n	8002c9a <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x1e>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 8002d86:	e01d      	b.n	8002dc4 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x148>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1d1a      	adds	r2, r3, #4
 8002d8c:	60fa      	str	r2, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9e:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002da2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002da6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002daa:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dba:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1de      	bne.n	8002d88 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x10c>
        }

        sum = sum / blockSize;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	ee07 3a90 	vmov	s15, r3
 8002dd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dd4:	edd7 6a06 	vldr	s13, [r7, #24]
 8002dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ddc:	edc7 7a06 	vstr	s15, [r7, #24]
        /* Store result to destination */
        *pResult = sum;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	601a      	str	r2, [r3, #0]
    }
 8002de6:	bf00      	nop
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before calculating fourth power
     * @param      pResult    The fourth central moment of the input
     */
    static void cmsis_arm_fourth_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 8002df2:	b480      	push	{r7}
 8002df4:	b08b      	sub	sp, #44	; 0x2c
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e00:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	623b      	str	r3, [r7, #32]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002e0e:	e076      	b.n	8002efe <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x10c>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1d1a      	adds	r2, r3, #4
 8002e14:	60fa      	str	r2, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002e1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e26:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 8002e2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e32:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e3e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e46:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1d1a      	adds	r2, r3, #4
 8002e4e:	60fa      	str	r2, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002e54:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e58:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e60:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8002e64:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e6c:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002e70:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e78:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1d1a      	adds	r2, r3, #4
 8002e88:	60fa      	str	r2, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002e8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9a:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8002e9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ea2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ea6:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002eaa:	edd7 7a05 	vldr	s15, [r7, #20]
 8002eae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002eb2:	ed97 7a08 	vldr	s14, [r7, #32]
 8002eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eba:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1d1a      	adds	r2, r3, #4
 8002ec2:	60fa      	str	r2, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002ec8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed4:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8002ed8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002edc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ee0:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002ee4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ee8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002eec:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	3b01      	subs	r3, #1
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d185      	bne.n	8002e10 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x1e>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002f0c:	e01f      	b.n	8002f4e <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x15c>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1d1a      	adds	r2, r3, #4
 8002f12:	60fa      	str	r2, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002f18:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f24:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 8002f28:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f30:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8002f34:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f44:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1dc      	bne.n	8002f0e <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x11c>
        }

        sum = sum / blockSize;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f5e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f66:	edc7 7a08 	vstr	s15, [r7, #32]
        /* Store result to destination */
        *pResult = sum;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	601a      	str	r2, [r3, #0]
    }
 8002f70:	bf00      	nop
 8002f72:	372c      	adds	r7, #44	; 0x2c
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 8002f86:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x18>)

        return status;
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	fffffc08 	.word	0xfffffc08

08002f98 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002f98:	b5b0      	push	{r4, r5, r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 8002fa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	461a      	mov	r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d001      	beq.n	8002fba <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002fb6:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002fb8:	e050      	b.n	800305c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002fba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff fa17 	bl	80023f8 <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002fca:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	e042      	b.n	800305c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e03a      	b.n	8003052 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xba>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 8002fdc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe6:	ee17 0a90 	vmov	r0, s15
 8002fea:	f7fd fabd 	bl	8000568 <__aeabi_f2d>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	491c      	ldr	r1, [pc, #112]	; (8003068 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 8002ff8:	f7fd fc38 	bl	800086c <__aeabi_ddiv>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4614      	mov	r4, r2
 8003002:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	ed93 7a00 	vldr	s14, [r3]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	edd3 7a00 	vldr	s15, [r3]
 800301c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003020:	ee17 0a90 	vmov	r0, s15
 8003024:	f7fd faa0 	bl	8000568 <__aeabi_f2d>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 800302c:	4620      	mov	r0, r4
 800302e:	4629      	mov	r1, r5
 8003030:	f7fd faf2 	bl	8000618 <__aeabi_dmul>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	18d4      	adds	r4, r2, r3
 8003044:	f7fd fde0 	bl	8000c08 <__aeabi_d2f>
 8003048:	4603      	mov	r3, r0
 800304a:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3301      	adds	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d3c0      	bcc.n	8002fdc <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x44>
        }

        return EIDSP_OK;
 800305a:	2300      	movs	r3, #0
    }
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bdb0      	pop	{r4, r5, r7, pc}
 8003064:	fffffc14 	.word	0xfffffc14
 8003068:	3ff00000 	.word	0x3ff00000

0800306c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:

    static int welch_max_hold(
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b093      	sub	sp, #76	; 0x4c
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
        size_t stop_bin,
        size_t fft_points,
        bool do_overlap)
    {
        // save off one point to put back, b/c we're going to calculate in place
        float saved_point = 0;
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
        bool do_saved_point = false;
 8003080:	2300      	movs	r3, #0
 8003082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        size_t fft_out_size = fft_points / 2 + 1;
 8003086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	3301      	adds	r3, #1
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
        float *fft_out;
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 800308e:	4b4f      	ldr	r3, [pc, #316]	; (80031cc <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x160>)
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	f107 0218 	add.w	r2, r7, #24
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f006 fc25 	bl	80098ec <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        if (input_size < fft_points) {
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d20b      	bcs.n	80030c2 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x56>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 80030aa:	2104      	movs	r1, #4
 80030ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ae:	f015 f8c7 	bl	8018240 <_Z9ei_callocjj>
 80030b2:	6378      	str	r0, [r7, #52]	; 0x34
            p_fft_out.reset(fft_out);
 80030b4:	f107 0310 	add.w	r3, r7, #16
 80030b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030ba:	4618      	mov	r0, r3
 80030bc:	f006 fc4c 	bl	8009958 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>
 80030c0:	e00b      	b.n	80030da <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6e>
        }
        else {
            // set input as output for in place operation
            fft_out = input;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
            // save off one point to put back, b/c we're going to calculate in place
            saved_point = input[fft_points / 2];
 80030c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
            do_saved_point = true;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        // init the output to zeros
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 80030da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	461a      	mov	r2, r3
 80030e4:	2100      	movs	r1, #0
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f01c fbfc 	bl	801f8e4 <memset>
        int input_ix = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 80030f0:	e05d      	b.n	80031ae <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x142>
            // Figure out if we need any zero padding
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 80030f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f6:	4413      	add	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d203      	bcs.n	8003106 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x9a>
                                                                        : input_size - input_ix;
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	e000      	b.n	8003108 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x9c>
 8003106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003108:	623b      	str	r3, [r7, #32]
            EI_TRY(power_spectrum(
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	18d0      	adds	r0, r2, r3
 8003112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311a:	b29b      	uxth	r3, r3
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003122:	6a39      	ldr	r1, [r7, #32]
 8003124:	f7ff ff38 	bl	8002f98 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 8003128:	61f8      	str	r0, [r7, #28]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xc8>
 8003130:	69fc      	ldr	r4, [r7, #28]
 8003132:	e041      	b.n	80031b8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14c>
                input + input_ix,
                n_input_points,
                fft_out,
                fft_points / 2 + 1,
                fft_points));
            int j = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
            // keep the max of the last frame and everything before
            for (size_t i = start_bin; i < stop_bin; i++) {
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
 800313c:	e017      	b.n	800316e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x102>
                output[j] = std::max(output[j], fft_out[i]);
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	18d0      	adds	r0, r2, r3
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800314c:	4413      	add	r3, r2
 800314e:	4619      	mov	r1, r3
 8003150:	f006 fc16 	bl	8009980 <_ZSt3maxIfERKT_S2_S2_>
 8003154:	4601      	mov	r1, r0
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	680a      	ldr	r2, [r1, #0]
 8003160:	601a      	str	r2, [r3, #0]
                j++;
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003164:	3301      	adds	r3, #1
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (size_t i = start_bin; i < stop_bin; i++) {
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	3301      	adds	r3, #1
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
 800316e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003172:	429a      	cmp	r2, r3
 8003174:	d3e3      	bcc.n	800313e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd2>
            }
            if (do_overlap) {
 8003176:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800317a:	2b00      	cmp	r3, #0
 800317c:	d013      	beq.n	80031a6 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x13a>
                if (do_saved_point) {
 800317e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x12e>
                    // This step only matters first time through
                    input[fft_points / 2] = saved_point;
 8003186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003192:	601a      	str	r2, [r3, #0]
                    do_saved_point = false;
 8003194:	2300      	movs	r3, #0
 8003196:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                }
                input_ix += fft_points / 2;
 800319a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319c:	085a      	lsrs	r2, r3, #1
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	4413      	add	r3, r2
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
 80031a4:	e003      	b.n	80031ae <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x142>
            }
            else {
                input_ix += fft_points;
 80031a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031aa:	4413      	add	r3, r2
 80031ac:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b2:	429a      	cmp	r2, r3
 80031b4:	db9d      	blt.n	80030f2 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x86>
            }
        }

        return EIDSP_OK;
 80031b6:	2400      	movs	r4, #0
    }
 80031b8:	f107 0310 	add.w	r3, r7, #16
 80031bc:	4618      	mov	r0, r3
 80031be:	f006 fbaa 	bl	8009916 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 80031c2:	4623      	mov	r3, r4
 80031c4:	4618      	mov	r0, r3
 80031c6:	3744      	adds	r7, #68	; 0x44
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd90      	pop	{r4, r7, pc}
 80031cc:	0801825d 	.word	0x0801825d

080031d0 <_ZN2ei5numpy8varianceEPfj>:

    static float variance(float *input, size_t size)
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
    {
        // Use CMSIS either way.  Will fall back to straight C when needed
        float temp;
#if EIDSP_USE_CMSIS_DSP
        arm_var_f32(input, size, &temp);
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	461a      	mov	r2, r3
 80031e0:	6839      	ldr	r1, [r7, #0]
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f010 ff4c 	bl	8014080 <arm_var_f32>
        for (size_t i = 0; i < size; i++) {
            temp += (input[i] - mean) * (input[i] - mean);
        }
        temp /= (size - 1);
#endif
        return temp;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	ee07 3a90 	vmov	s15, r3
    }
 80031ee:	eeb0 0a67 	vmov.f32	s0, s15
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e013      	b.n	8003230 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
            if (input[ix] == 0) {
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4413      	add	r3, r2
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321c:	d105      	bne.n	800322a <_ZN2ei5numpy13zero_handlingEPfj+0x32>
                input[ix] = 1e-10;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	4a08      	ldr	r2, [pc, #32]	; (8003248 <_ZN2ei5numpy13zero_handlingEPfj+0x50>)
 8003228:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3301      	adds	r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d3e7      	bcc.n	8003208 <_ZN2ei5numpy13zero_handlingEPfj+0x10>
            }
        }
    }
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	2edbe6ff 	.word	0x2edbe6ff

0800324c <_ZN2ei5numpy18underflow_handlingEPfjf>:
     * @param input Array
     * @param input_size Size of array
     * @param epsilon Smallest valid non-zero value
     * @returns void
     */
    static void underflow_handling(float* input, size_t input_size, float epsilon = 1e-07f)
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e021      	b.n	80032a4 <_ZN2ei5numpy18underflow_handlingEPfjf+0x58>
            if (fabs(input[ix]) < epsilon) {
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	eeb0 0a67 	vmov.f32	s0, s15
 8003270:	f7fe fc6c 	bl	8001b4c <_ZSt4fabsf>
 8003274:	eeb0 7a40 	vmov.f32	s14, s0
 8003278:	edd7 7a01 	vldr	s15, [r7, #4]
 800327c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003284:	bfcc      	ite	gt
 8003286:	2301      	movgt	r3, #1
 8003288:	2300      	movle	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d006      	beq.n	800329e <_ZN2ei5numpy18underflow_handlingEPfjf+0x52>
                input[ix] = 0.0f;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3301      	adds	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d3d9      	bcc.n	8003260 <_ZN2ei5numpy18underflow_handlingEPfjf+0x14>
            }
        }
    }
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 80032b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032bc:	b095      	sub	sp, #84	; 0x54
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6178      	str	r0, [r7, #20]
 80032c2:	ed87 0a04 	vstr	s0, [r7, #16]
 80032c6:	edc7 0a03 	vstr	s1, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	0fda      	lsrs	r2, r3, #31
 80032d4:	4413      	add	r3, r2
 80032d6:	105b      	asrs	r3, r3, #1
 80032d8:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7fd f944 	bl	8000568 <__aeabi_f2d>
 80032e0:	a3a9      	add	r3, pc, #676	; (adr r3, 8003588 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>)
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f7fd f997 	bl	8000618 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4690      	mov	r8, r2
 80032f0:	4699      	mov	r9, r3
 80032f2:	6938      	ldr	r0, [r7, #16]
 80032f4:	f7fd f938 	bl	8000568 <__aeabi_f2d>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4640      	mov	r0, r8
 80032fe:	4649      	mov	r1, r9
 8003300:	f7fd fab4 	bl	800086c <__aeabi_ddiv>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	ec43 2b17 	vmov	d7, r2, r3
 800330c:	eeb0 0a47 	vmov.f32	s0, s14
 8003310:	eef0 0a67 	vmov.f32	s1, s15
 8003314:	f017 ffcc 	bl	801b2b0 <tan>
 8003318:	ec53 2b10 	vmov	r2, r3, d0
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	f7fd fc72 	bl	8000c08 <__aeabi_d2f>
 8003324:	4603      	mov	r3, r0
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8003328:	2002      	movs	r0, #2
 800332a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800332e:	f006 faab 	bl	8009888 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003332:	ec53 2b10 	vmov	r2, r3, d0
 8003336:	4610      	mov	r0, r2
 8003338:	4619      	mov	r1, r3
 800333a:	f7fd fc65 	bl	8000c08 <__aeabi_d2f>
 800333e:	4603      	mov	r3, r0
 8003340:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8003342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003344:	2104      	movs	r1, #4
 8003346:	4618      	mov	r0, r3
 8003348:	f014 ff7a 	bl	8018240 <_Z9ei_callocjj>
 800334c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 800334e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003350:	2104      	movs	r1, #4
 8003352:	4618      	mov	r0, r3
 8003354:	f014 ff74 	bl	8018240 <_Z9ei_callocjj>
 8003358:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 800335a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335c:	2104      	movs	r1, #4
 800335e:	4618      	mov	r0, r3
 8003360:	f014 ff6e 	bl	8018240 <_Z9ei_callocjj>
 8003364:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8003366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003368:	2104      	movs	r1, #4
 800336a:	4618      	mov	r0, r3
 800336c:	f014 ff68 	bl	8018240 <_Z9ei_callocjj>
 8003370:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8003372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003374:	2104      	movs	r1, #4
 8003376:	4618      	mov	r0, r3
 8003378:	f014 ff62 	bl	8018240 <_Z9ei_callocjj>
 800337c:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 800337e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003380:	2104      	movs	r1, #4
 8003382:	4618      	mov	r0, r3
 8003384:	f014 ff5c 	bl	8018240 <_Z9ei_callocjj>
 8003388:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 800338a:	2300      	movs	r3, #0
 800338c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800338e:	e0e3      	b.n	8003558 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2a0>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8003390:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003392:	f7fd f8d7 	bl	8000544 <__aeabi_i2d>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	f7fc ff87 	bl	80002ac <__adddf3>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	4b79      	ldr	r3, [pc, #484]	; (8003590 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 80033ac:	f7fc ff7e 	bl	80002ac <__adddf3>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	a373      	add	r3, pc, #460	; (adr r3, 8003588 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>)
 80033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033be:	f7fd f92b 	bl	8000618 <__aeabi_dmul>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4690      	mov	r8, r2
 80033c8:	4699      	mov	r9, r3
 80033ca:	6978      	ldr	r0, [r7, #20]
 80033cc:	f7fd f8ba 	bl	8000544 <__aeabi_i2d>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	f7fc ff6a 	bl	80002ac <__adddf3>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4640      	mov	r0, r8
 80033de:	4649      	mov	r1, r9
 80033e0:	f7fd fa44 	bl	800086c <__aeabi_ddiv>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	ec43 2b17 	vmov	d7, r2, r3
 80033ec:	eeb0 0a47 	vmov.f32	s0, s14
 80033f0:	eef0 0a67 	vmov.f32	s1, s15
 80033f4:	f017 ff04 	bl	801b200 <sin>
 80033f8:	ec53 2b10 	vmov	r2, r3, d0
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	f7fd fc02 	bl	8000c08 <__aeabi_d2f>
 8003404:	4603      	mov	r3, r0
 8003406:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8003408:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800340a:	f7fd f8ad 	bl	8000568 <__aeabi_f2d>
 800340e:	4680      	mov	r8, r0
 8003410:	4689      	mov	r9, r1
 8003412:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003414:	f7fd f8a8 	bl	8000568 <__aeabi_f2d>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	f7fc ff46 	bl	80002ac <__adddf3>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4692      	mov	sl, r2
 8003426:	469b      	mov	fp, r3
 8003428:	69f8      	ldr	r0, [r7, #28]
 800342a:	f7fd f89d 	bl	8000568 <__aeabi_f2d>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4650      	mov	r0, sl
 8003434:	4659      	mov	r1, fp
 8003436:	f7fd f8ef 	bl	8000618 <__aeabi_dmul>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4640      	mov	r0, r8
 8003440:	4649      	mov	r1, r9
 8003442:	f7fc ff33 	bl	80002ac <__adddf3>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	4b4f      	ldr	r3, [pc, #316]	; (8003590 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 8003454:	f7fc ff2a 	bl	80002ac <__adddf3>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	f7fd fbd2 	bl	8000c08 <__aeabi_d2f>
 8003464:	4603      	mov	r3, r0
 8003466:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 8003468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800346e:	4413      	add	r3, r2
 8003470:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8003474:	ed97 7a04 	vldr	s14, [r7, #16]
 8003478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800347c:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8003480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003484:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800348c:	ee17 0a90 	vmov	r0, s15
 8003490:	f7fd f86a 	bl	8000568 <__aeabi_f2d>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	f7fc ff08 	bl	80002ac <__adddf3>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4690      	mov	r8, r2
 80034a2:	4699      	mov	r9, r3
 80034a4:	6938      	ldr	r0, [r7, #16]
 80034a6:	f7fd f85f 	bl	8000568 <__aeabi_f2d>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4640      	mov	r0, r8
 80034b0:	4649      	mov	r1, r9
 80034b2:	f7fd f9db 	bl	800086c <__aeabi_ddiv>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c4:	18d6      	adds	r6, r2, r3
 80034c6:	f7fd fb9f 	bl	8000c08 <__aeabi_d2f>
 80034ca:	4603      	mov	r3, r0
 80034cc:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 80034ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034d0:	f7fd f84a 	bl	8000568 <__aeabi_f2d>
 80034d4:	4680      	mov	r8, r0
 80034d6:	4689      	mov	r9, r1
 80034d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80034da:	f7fd f845 	bl	8000568 <__aeabi_f2d>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	f7fc fee3 	bl	80002ac <__adddf3>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4692      	mov	sl, r2
 80034ec:	469b      	mov	fp, r3
 80034ee:	69f8      	ldr	r0, [r7, #28]
 80034f0:	f7fd f83a 	bl	8000568 <__aeabi_f2d>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4650      	mov	r0, sl
 80034fa:	4659      	mov	r1, fp
 80034fc:	f7fd f88c 	bl	8000618 <__aeabi_dmul>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4640      	mov	r0, r8
 8003506:	4649      	mov	r1, r9
 8003508:	f7fc fece 	bl	80002a8 <__aeabi_dsub>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 800351a:	f7fc fec7 	bl	80002ac <__adddf3>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4614      	mov	r4, r2
 8003524:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003528:	6938      	ldr	r0, [r7, #16]
 800352a:	f7fd f81d 	bl	8000568 <__aeabi_f2d>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	f7fd f999 	bl	800086c <__aeabi_ddiv>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003548:	18d6      	adds	r6, r2, r3
 800354a:	f7fd fb5d 	bl	8000c08 <__aeabi_d2f>
 800354e:	4603      	mov	r3, r0
 8003550:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 8003552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003554:	3301      	adds	r3, #1
 8003556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800355a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355c:	429a      	cmp	r2, r3
 800355e:	f6ff af17 	blt.w	8003390 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xd8>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8003562:	2300      	movs	r3, #0
 8003564:	64bb      	str	r3, [r7, #72]	; 0x48
 8003566:	e0aa      	b.n	80036be <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x406>
            dest[sx] = src[sx];
 8003568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	441a      	add	r2, r3
 8003570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	440b      	add	r3, r1
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 800357c:	2300      	movs	r3, #0
 800357e:	647b      	str	r3, [r7, #68]	; 0x44
 8003580:	e095      	b.n	80036ae <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
 8003582:	bf00      	nop
 8003584:	f3af 8000 	nop.w
 8003588:	54442d18 	.word	0x54442d18
 800358c:	400921fb 	.word	0x400921fb
 8003590:	3ff00000 	.word	0x3ff00000
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8003594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359a:	4413      	add	r3, r2
 800359c:	ed93 7a00 	vldr	s14, [r3]
 80035a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a6:	4413      	add	r3, r2
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b6:	4413      	add	r3, r2
 80035b8:	edd3 6a00 	vldr	s13, [r3]
 80035bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	4413      	add	r3, r2
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	edd3 7a00 	vldr	s15, [r3]
 80035dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035e2:	4413      	add	r3, r2
 80035e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e8:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 80035ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035f2:	4413      	add	r3, r2
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fc ffb6 	bl	8000568 <__aeabi_f2d>
 80035fc:	4604      	mov	r4, r0
 80035fe:	460d      	mov	r5, r1
 8003600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003606:	4413      	add	r3, r2
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc ffac 	bl	8000568 <__aeabi_f2d>
 8003610:	4680      	mov	r8, r0
 8003612:	4689      	mov	r9, r1
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361a:	4413      	add	r3, r2
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fc ffa2 	bl	8000568 <__aeabi_f2d>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	f7fc fe40 	bl	80002ac <__adddf3>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4640      	mov	r0, r8
 8003632:	4649      	mov	r1, r9
 8003634:	f7fc fe3a 	bl	80002ac <__adddf3>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4690      	mov	r8, r2
 800363e:	4699      	mov	r9, r3
 8003640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	4413      	add	r3, r2
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ff8c 	bl	8000568 <__aeabi_f2d>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4640      	mov	r0, r8
 8003656:	4649      	mov	r1, r9
 8003658:	f7fc fe28 	bl	80002ac <__adddf3>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4620      	mov	r0, r4
 8003662:	4629      	mov	r1, r5
 8003664:	f7fc ffd8 	bl	8000618 <__aeabi_dmul>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	18d4      	adds	r4, r2, r3
 8003678:	f7fd fac6 	bl	8000c08 <__aeabi_d2f>
 800367c:	4603      	mov	r3, r0
 800367e:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8003680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003686:	441a      	add	r2, r3
 8003688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	6a39      	ldr	r1, [r7, #32]
 800368e:	440b      	add	r3, r1
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8003694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800369a:	441a      	add	r2, r3
 800369c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036a2:	440b      	add	r3, r1
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 80036a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036aa:	3301      	adds	r3, #1
 80036ac:	647b      	str	r3, [r7, #68]	; 0x44
 80036ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b2:	429a      	cmp	r2, r3
 80036b4:	f6ff af6e 	blt.w	8003594 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2dc>
        for (size_t sx = 0; sx < size; sx++) {
 80036b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ba:	3301      	adds	r3, #1
 80036bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80036be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	f4ff af50 	bcc.w	8003568 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2b0>
            }
        }

        ei_free(A);
 80036c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036ca:	f014 fdc7 	bl	801825c <_Z7ei_freePv>
        ei_free(d1);
 80036ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036d0:	f014 fdc4 	bl	801825c <_Z7ei_freePv>
        ei_free(d2);
 80036d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036d6:	f014 fdc1 	bl	801825c <_Z7ei_freePv>
        ei_free(w0);
 80036da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036dc:	f014 fdbe 	bl	801825c <_Z7ei_freePv>
        ei_free(w1);
 80036e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036e2:	f014 fdbb 	bl	801825c <_Z7ei_freePv>
        ei_free(w2);
 80036e6:	6a38      	ldr	r0, [r7, #32]
 80036e8:	f014 fdb8 	bl	801825c <_Z7ei_freePv>
    }
 80036ec:	bf00      	nop
 80036ee:	3754      	adds	r7, #84	; 0x54
 80036f0:	46bd      	mov	sp, r7
 80036f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f6:	bf00      	nop

080036f8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 80036f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036fc:	b095      	sub	sp, #84	; 0x54
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6178      	str	r0, [r7, #20]
 8003702:	ed87 0a04 	vstr	s0, [r7, #16]
 8003706:	edc7 0a03 	vstr	s1, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	0fda      	lsrs	r2, r3, #31
 8003714:	4413      	add	r3, r2
 8003716:	105b      	asrs	r3, r3, #1
 8003718:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7fc ff24 	bl	8000568 <__aeabi_f2d>
 8003720:	a3a9      	add	r3, pc, #676	; (adr r3, 80039c8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>)
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f7fc ff77 	bl	8000618 <__aeabi_dmul>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4690      	mov	r8, r2
 8003730:	4699      	mov	r9, r3
 8003732:	6938      	ldr	r0, [r7, #16]
 8003734:	f7fc ff18 	bl	8000568 <__aeabi_f2d>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4640      	mov	r0, r8
 800373e:	4649      	mov	r1, r9
 8003740:	f7fd f894 	bl	800086c <__aeabi_ddiv>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	ec43 2b17 	vmov	d7, r2, r3
 800374c:	eeb0 0a47 	vmov.f32	s0, s14
 8003750:	eef0 0a67 	vmov.f32	s1, s15
 8003754:	f017 fdac 	bl	801b2b0 <tan>
 8003758:	ec53 2b10 	vmov	r2, r3, d0
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	f7fd fa52 	bl	8000c08 <__aeabi_d2f>
 8003764:	4603      	mov	r3, r0
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8003768:	2002      	movs	r0, #2
 800376a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800376e:	f006 f88b 	bl	8009888 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003772:	ec53 2b10 	vmov	r2, r3, d0
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	f7fd fa45 	bl	8000c08 <__aeabi_d2f>
 800377e:	4603      	mov	r3, r0
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8003782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003784:	2104      	movs	r1, #4
 8003786:	4618      	mov	r0, r3
 8003788:	f014 fd5a 	bl	8018240 <_Z9ei_callocjj>
 800378c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 800378e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003790:	2104      	movs	r1, #4
 8003792:	4618      	mov	r0, r3
 8003794:	f014 fd54 	bl	8018240 <_Z9ei_callocjj>
 8003798:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 800379a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800379c:	2104      	movs	r1, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f014 fd4e 	bl	8018240 <_Z9ei_callocjj>
 80037a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 80037a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a8:	2104      	movs	r1, #4
 80037aa:	4618      	mov	r0, r3
 80037ac:	f014 fd48 	bl	8018240 <_Z9ei_callocjj>
 80037b0:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 80037b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b4:	2104      	movs	r1, #4
 80037b6:	4618      	mov	r0, r3
 80037b8:	f014 fd42 	bl	8018240 <_Z9ei_callocjj>
 80037bc:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 80037be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c0:	2104      	movs	r1, #4
 80037c2:	4618      	mov	r0, r3
 80037c4:	f014 fd3c 	bl	8018240 <_Z9ei_callocjj>
 80037c8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 80037ca:	2300      	movs	r3, #0
 80037cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ce:	e0e3      	b.n	8003998 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2a0>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 80037d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80037d2:	f7fc feb7 	bl	8000544 <__aeabi_i2d>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	f7fc fd67 	bl	80002ac <__adddf3>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4610      	mov	r0, r2
 80037e4:	4619      	mov	r1, r3
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	4b79      	ldr	r3, [pc, #484]	; (80039d0 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 80037ec:	f7fc fd5e 	bl	80002ac <__adddf3>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	a373      	add	r3, pc, #460	; (adr r3, 80039c8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>)
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f7fc ff0b 	bl	8000618 <__aeabi_dmul>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4690      	mov	r8, r2
 8003808:	4699      	mov	r9, r3
 800380a:	6978      	ldr	r0, [r7, #20]
 800380c:	f7fc fe9a 	bl	8000544 <__aeabi_i2d>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	f7fc fd4a 	bl	80002ac <__adddf3>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4640      	mov	r0, r8
 800381e:	4649      	mov	r1, r9
 8003820:	f7fd f824 	bl	800086c <__aeabi_ddiv>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	ec43 2b17 	vmov	d7, r2, r3
 800382c:	eeb0 0a47 	vmov.f32	s0, s14
 8003830:	eef0 0a67 	vmov.f32	s1, s15
 8003834:	f017 fce4 	bl	801b200 <sin>
 8003838:	ec53 2b10 	vmov	r2, r3, d0
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	f7fd f9e2 	bl	8000c08 <__aeabi_d2f>
 8003844:	4603      	mov	r3, r0
 8003846:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8003848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800384a:	f7fc fe8d 	bl	8000568 <__aeabi_f2d>
 800384e:	4680      	mov	r8, r0
 8003850:	4689      	mov	r9, r1
 8003852:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003854:	f7fc fe88 	bl	8000568 <__aeabi_f2d>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	f7fc fd26 	bl	80002ac <__adddf3>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4692      	mov	sl, r2
 8003866:	469b      	mov	fp, r3
 8003868:	69f8      	ldr	r0, [r7, #28]
 800386a:	f7fc fe7d 	bl	8000568 <__aeabi_f2d>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4650      	mov	r0, sl
 8003874:	4659      	mov	r1, fp
 8003876:	f7fc fecf 	bl	8000618 <__aeabi_dmul>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4640      	mov	r0, r8
 8003880:	4649      	mov	r1, r9
 8003882:	f7fc fd13 	bl	80002ac <__adddf3>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	4b4f      	ldr	r3, [pc, #316]	; (80039d0 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 8003894:	f7fc fd0a 	bl	80002ac <__adddf3>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	f7fd f9b2 	bl	8000c08 <__aeabi_d2f>
 80038a4:	4603      	mov	r3, r0
 80038a6:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 80038a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ae:	4413      	add	r3, r2
 80038b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80038b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038bc:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80038c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80038c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038cc:	ee17 0a90 	vmov	r0, s15
 80038d0:	f7fc fe4a 	bl	8000568 <__aeabi_f2d>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	f7fc fce8 	bl	80002ac <__adddf3>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4690      	mov	r8, r2
 80038e2:	4699      	mov	r9, r3
 80038e4:	6938      	ldr	r0, [r7, #16]
 80038e6:	f7fc fe3f 	bl	8000568 <__aeabi_f2d>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4640      	mov	r0, r8
 80038f0:	4649      	mov	r1, r9
 80038f2:	f7fc ffbb 	bl	800086c <__aeabi_ddiv>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003904:	18d6      	adds	r6, r2, r3
 8003906:	f7fd f97f 	bl	8000c08 <__aeabi_d2f>
 800390a:	4603      	mov	r3, r0
 800390c:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 800390e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003910:	f7fc fe2a 	bl	8000568 <__aeabi_f2d>
 8003914:	4680      	mov	r8, r0
 8003916:	4689      	mov	r9, r1
 8003918:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800391a:	f7fc fe25 	bl	8000568 <__aeabi_f2d>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	f7fc fcc3 	bl	80002ac <__adddf3>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4692      	mov	sl, r2
 800392c:	469b      	mov	fp, r3
 800392e:	69f8      	ldr	r0, [r7, #28]
 8003930:	f7fc fe1a 	bl	8000568 <__aeabi_f2d>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4650      	mov	r0, sl
 800393a:	4659      	mov	r1, fp
 800393c:	f7fc fe6c 	bl	8000618 <__aeabi_dmul>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4640      	mov	r0, r8
 8003946:	4649      	mov	r1, r9
 8003948:	f7fc fcae 	bl	80002a8 <__aeabi_dsub>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 800395a:	f7fc fca7 	bl	80002ac <__adddf3>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4614      	mov	r4, r2
 8003964:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003968:	6938      	ldr	r0, [r7, #16]
 800396a:	f7fc fdfd 	bl	8000568 <__aeabi_f2d>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4620      	mov	r0, r4
 8003974:	4629      	mov	r1, r5
 8003976:	f7fc ff79 	bl	800086c <__aeabi_ddiv>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003988:	18d6      	adds	r6, r2, r3
 800398a:	f7fd f93d 	bl	8000c08 <__aeabi_d2f>
 800398e:	4603      	mov	r3, r0
 8003990:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 8003992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003994:	3301      	adds	r3, #1
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800399a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399c:	429a      	cmp	r2, r3
 800399e:	f6ff af17 	blt.w	80037d0 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xd8>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 80039a2:	2300      	movs	r3, #0
 80039a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80039a6:	e0aa      	b.n	8003afe <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x406>
            dest[sx] = src[sx];
 80039a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	441a      	add	r2, r3
 80039b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	440b      	add	r3, r1
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 80039bc:	2300      	movs	r3, #0
 80039be:	647b      	str	r3, [r7, #68]	; 0x44
 80039c0:	e095      	b.n	8003aee <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
 80039c2:	bf00      	nop
 80039c4:	f3af 8000 	nop.w
 80039c8:	54442d18 	.word	0x54442d18
 80039cc:	400921fb 	.word	0x400921fb
 80039d0:	3ff00000 	.word	0x3ff00000
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 80039d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039da:	4413      	add	r3, r2
 80039dc:	ed93 7a00 	vldr	s14, [r3]
 80039e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e6:	4413      	add	r3, r2
 80039e8:	edd3 7a00 	vldr	s15, [r3]
 80039ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f6:	4413      	add	r3, r2
 80039f8:	edd3 6a00 	vldr	s13, [r3]
 80039fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	6a3a      	ldr	r2, [r7, #32]
 8003a02:	4413      	add	r3, r2
 8003a04:	edd3 7a00 	vldr	s15, [r3]
 8003a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	edd3 7a00 	vldr	s15, [r3]
 8003a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a22:	4413      	add	r3, r2
 8003a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a28:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 8003a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a32:	4413      	add	r3, r2
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fc fd96 	bl	8000568 <__aeabi_f2d>
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	460d      	mov	r5, r1
 8003a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a46:	4413      	add	r3, r2
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fd8c 	bl	8000568 <__aeabi_f2d>
 8003a50:	4680      	mov	r8, r0
 8003a52:	4689      	mov	r9, r1
 8003a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	4413      	add	r3, r2
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fc fd82 	bl	8000568 <__aeabi_f2d>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	f7fc fc20 	bl	80002ac <__adddf3>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4640      	mov	r0, r8
 8003a72:	4649      	mov	r1, r9
 8003a74:	f7fc fc18 	bl	80002a8 <__aeabi_dsub>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4690      	mov	r8, r2
 8003a7e:	4699      	mov	r9, r3
 8003a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	4413      	add	r3, r2
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fd6c 	bl	8000568 <__aeabi_f2d>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4640      	mov	r0, r8
 8003a96:	4649      	mov	r1, r9
 8003a98:	f7fc fc08 	bl	80002ac <__adddf3>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	f7fc fdb8 	bl	8000618 <__aeabi_dmul>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	18d4      	adds	r4, r2, r3
 8003ab8:	f7fd f8a6 	bl	8000c08 <__aeabi_d2f>
 8003abc:	4603      	mov	r3, r0
 8003abe:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8003ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	441a      	add	r2, r3
 8003ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	440b      	add	r3, r1
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8003ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ada:	441a      	add	r2, r3
 8003adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ae2:	440b      	add	r3, r1
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8003ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aea:	3301      	adds	r3, #1
 8003aec:	647b      	str	r3, [r7, #68]	; 0x44
 8003aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af2:	429a      	cmp	r2, r3
 8003af4:	f6ff af6e 	blt.w	80039d4 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2dc>
        for (size_t sx = 0; sx < size; sx++) {
 8003af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003afa:	3301      	adds	r3, #1
 8003afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	f4ff af50 	bcc.w	80039a8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2b0>
            }
        }

        ei_free(A);
 8003b08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b0a:	f014 fba7 	bl	801825c <_Z7ei_freePv>
        ei_free(d1);
 8003b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b10:	f014 fba4 	bl	801825c <_Z7ei_freePv>
        ei_free(d2);
 8003b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b16:	f014 fba1 	bl	801825c <_Z7ei_freePv>
        ei_free(w0);
 8003b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b1c:	f014 fb9e 	bl	801825c <_Z7ei_freePv>
        ei_free(w1);
 8003b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b22:	f014 fb9b 	bl	801825c <_Z7ei_freePv>
        ei_free(w2);
 8003b26:	6a38      	ldr	r0, [r7, #32]
 8003b28:	f014 fb98 	bl	801825c <_Z7ei_freePv>
    }
 8003b2c:	bf00      	nop
 8003b2e:	3754      	adds	r7, #84	; 0x54
 8003b30:	46bd      	mov	sp, r7
 8003b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b36:	bf00      	nop

08003b38 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b44:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	e01e      	b.n	8003b90 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x58>
            filters::butterworth_lowpass(
 8003b52:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	6979      	ldr	r1, [r7, #20]
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	6979      	ldr	r1, [r7, #20]
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 8003b76:	441a      	add	r2, r3
                matrix->cols);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	edd7 0a01 	vldr	s1, [r7, #4]
 8003b82:	ed97 0a02 	vldr	s0, [r7, #8]
 8003b86:	f7ff fb97 	bl	80032b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d3db      	bcc.n	8003b52 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x1a>
        }

        return EIDSP_OK;
 8003b9a:	2300      	movs	r3, #0
    }
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd90      	pop	{r4, r7, pc}

08003ba4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8003ba4:	b590      	push	{r4, r7, lr}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bb0:	edc7 0a01 	vstr	s1, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e01e      	b.n	8003bfc <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x58>
            filters::butterworth_highpass(
 8003bbe:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	6979      	ldr	r1, [r7, #20]
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	6979      	ldr	r1, [r7, #20]
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8003be2:	441a      	add	r2, r3
                matrix->cols);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 8003be8:	4621      	mov	r1, r4
 8003bea:	edd7 0a01 	vldr	s1, [r7, #4]
 8003bee:	ed97 0a02 	vldr	s0, [r7, #8]
 8003bf2:	f7ff fd81 	bl	80036f8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3db      	bcc.n	8003bbe <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x1a>
        }

        return EIDSP_OK;
 8003c06:	2300      	movs	r3, #0
    }
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd90      	pop	{r4, r7, pc}

08003c10 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 8003c10:	b480      	push	{r7}
 8003c12:	b091      	sub	sp, #68	; 0x44
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003c1e:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d001      	beq.n	8003c2c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8003c2a:	e0ba      	b.n	8003da2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x192>
        }

        if (output_matrix->cols != 1) {
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d001      	beq.n	8003c38 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c34:	4b5e      	ldr	r3, [pc, #376]	; (8003db0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8003c36:	e0b4      	b.n	8003da2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x192>
        }

        uint16_t out_ix = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8003c54:	4b57      	ldr	r3, [pc, #348]	; (8003db4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a4>)
 8003c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 8003c5e:	2300      	movs	r3, #0
 8003c60:	633b      	str	r3, [r7, #48]	; 0x30
 8003c62:	e028      	b.n	8003cb6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa6>
            if (in[ix] < min) {
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	edd3 7a00 	vldr	s15, [r3]
 8003c70:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003c74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7c:	dd05      	ble.n	8003c8a <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x7a>
                min = in[ix];
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	6a3a      	ldr	r2, [r7, #32]
 8003c84:	4413      	add	r3, r2
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	6a3a      	ldr	r2, [r7, #32]
 8003c90:	4413      	add	r3, r2
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca2:	d505      	bpl.n	8003cb0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa0>
                max = in[ix];
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	6a3a      	ldr	r2, [r7, #32]
 8003caa:	4413      	add	r3, r2
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d3d1      	bcc.n	8003c64 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x54>
            }
        }


        float prev = in[0];
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cca:	e05f      	b.n	8003d8c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x17c>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce4:	d549      	bpl.n	8003d7a <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	6a3a      	ldr	r2, [r7, #32]
 8003cec:	4413      	add	r3, r2
 8003cee:	ed93 7a00 	vldr	s14, [r3]
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	6a3a      	ldr	r2, [r7, #32]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	edd3 7a00 	vldr	s15, [r3]
 8003d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d08:	dd37      	ble.n	8003d7a <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	6a3a      	ldr	r2, [r7, #32]
 8003d10:	4413      	add	r3, r2
 8003d12:	ed93 7a00 	vldr	s14, [r3]
 8003d16:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003d1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	6a3a      	ldr	r2, [r7, #32]
 8003d24:	4413      	add	r3, r2
 8003d26:	edd3 6a00 	vldr	s13, [r3]
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	6a3a      	ldr	r2, [r7, #32]
 8003d32:	4413      	add	r3, r2
 8003d34:	edd3 7a00 	vldr	s15, [r3]
 8003d38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d40:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8003d44:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d54:	dd11      	ble.n	8003d7a <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
                    out[out_ix] = ix;
 8003d56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d60:	ee07 2a90 	vmov	s15, r2
 8003d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d68:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 8003d6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d6e:	3301      	adds	r3, #1
 8003d70:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 8003d72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d00e      	beq.n	8003d98 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
                }
            }

            prev = in[ix];
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	6a3a      	ldr	r2, [r7, #32]
 8003d80:	4413      	add	r3, r2
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	3301      	adds	r3, #1
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d39a      	bcc.n	8003ccc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xbc>
 8003d96:	e000      	b.n	8003d9a <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x18a>
                    if (out_ix == out_size) break;
 8003d98:	bf00      	nop
        }

        *peaks_found = out_ix;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003d9e:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 8003da0:	2300      	movs	r3, #0
    }
 8003da2:	4618      	mov	r0, r3
 8003da4:	3744      	adds	r7, #68	; 0x44
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	fffffc14 	.word	0xfffffc14
 8003db4:	7f7fffff 	.word	0x7f7fffff

08003db8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f005 ffde 	bl	8009d84 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ffeb 	bl	8003db8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	ed93 7a01 	vldr	s14, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0c:	bfcc      	ite	gt
 8003e0e:	2301      	movgt	r3, #1
 8003e10:	2300      	movle	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
        });
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8003e20:	b5b0      	push	{r4, r5, r7, lr}
 8003e22:	ed2d 8b02 	vpush	{d8}
 8003e26:	b09c      	sub	sp, #112	; 0x70
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6178      	str	r0, [r7, #20]
 8003e2c:	6139      	str	r1, [r7, #16]
 8003e2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e32:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d001      	beq.n	8003e46 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003e42:	4c95      	ldr	r4, [pc, #596]	; (8004098 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003e44:	e120      	b.n	8004088 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->cols != 2) {
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d001      	beq.n	8003e52 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003e4e:	4c92      	ldr	r4, [pc, #584]	; (8004098 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003e50:	e11a      	b.n	8004088 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->rows == 0) {
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 8003e5a:	2400      	movs	r4, #0
 8003e5c:	e114      	b.n	8004088 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        int N = static_cast<int>(fft_length);
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	663b      	str	r3, [r7, #96]	; 0x60
        float T = 1.0f / sampling_freq;
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e66:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	f7fd fe00 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8003e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 8003e88:	4c84      	ldr	r4, [pc, #528]	; (800409c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003e8a:	e0f8      	b.n	800407e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 8003e8c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003e90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e98:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003e9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e9e:	0fda      	lsrs	r2, r3, #31
 8003ea0:	4413      	add	r3, r2
 8003ea2:	105b      	asrs	r3, r3, #1
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f005 ff5b 	bl	8009d60 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003eaa:	ec53 2b10 	vmov	r2, r3, d0
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f7fc fe89 	bl	8000bc8 <__aeabi_d2uiz>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	eef0 0a48 	vmov.f32	s1, s16
 8003ec2:	ed9f 0a77 	vldr	s0, [pc, #476]	; 80040a0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8003ec6:	f7fe fc67 	bl	8002798 <_ZN2ei5numpy8linspaceEffmPf>
 8003eca:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb6>
            EIDSP_ERR(ret);
 8003ed2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003ed4:	e0d3      	b.n	800407e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2201      	movs	r2, #1
 8003eec:	f7fd fdc9 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xda>
 8003ef6:	4c69      	ldr	r4, [pc, #420]	; (800409c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003ef8:	e0bc      	b.n	8004074 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 8003efa:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8003efe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f02:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80040a0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8003f06:	4619      	mov	r1, r3
 8003f08:	6978      	ldr	r0, [r7, #20]
 8003f0a:	f7ff fe81 	bl	8003c10 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8003f0e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfa>
            EIDSP_ERR(ret);
 8003f16:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003f18:	e0ac      	b.n	8004074 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ei_vector<freq_peak_t> peaks;
 8003f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff57 	bl	8003dd2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003f2a:	e03c      	b.n	8003fa6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x186>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	edd3 7a00 	vldr	s15, [r3]
 8003f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f40:	ee17 3a90 	vmov	r3, s15
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	623b      	str	r3, [r7, #32]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	edd3 7a00 	vldr	s15, [r3]
 8003f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f62:	ee17 3a90 	vmov	r3, s15
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
            if (d.amplitude < threshold) {
 8003f6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f72:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7e:	dd05      	ble.n	8003f8c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x16c>
                d.freq = 0.0f;
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	623b      	str	r3, [r7, #32]
                d.amplitude = 0.0f;
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
            peaks.push_back(d);
 8003f8c:	f107 0220 	add.w	r2, r7, #32
 8003f90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f005 ff31 	bl	8009dfe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8003f9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003fa6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003faa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003fac:	4293      	cmp	r3, r2
 8003fae:	dbbd      	blt.n	8003f2c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10c>
        sort(peaks.begin(), peaks.end(),
 8003fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f005 ff48 	bl	8009e4a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 8003fba:	4604      	mov	r4, r0
 8003fbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f005 ff52 	bl	8009e6a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	462a      	mov	r2, r5
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f005 ff5d 	bl	8009e8c <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8003fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f005 ff6a 	bl	8009eb0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8003fdc:	66b8      	str	r0, [r7, #104]	; 0x68
 8003fde:	e010      	b.n	8004002 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1e2>
            freq_peak_t d;
            d.freq = 0;
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
            d.amplitude = 0;
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	61fb      	str	r3, [r7, #28]
            peaks.push_back(d);
 8003fec:	f107 0218 	add.w	r2, r7, #24
 8003ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f005 ff01 	bl	8009dfe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8003ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ffe:	3301      	adds	r3, #1
 8004000:	66bb      	str	r3, [r7, #104]	; 0x68
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004008:	429a      	cmp	r2, r3
 800400a:	d3e9      	bcc.n	8003fe0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1c0>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 800400c:	2300      	movs	r3, #0
 800400e:	667b      	str	r3, [r7, #100]	; 0x64
 8004010:	e025      	b.n	800405e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x23e>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8004012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004016:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004018:	4618      	mov	r0, r3
 800401a:	f005 ff59 	bl	8009ed0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	6802      	ldr	r2, [r0, #0]
 8004032:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8004034:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004038:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800403a:	4618      	mov	r0, r3
 800403c:	f005 ff48 	bl	8009ed0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	3301      	adds	r3, #1
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	6842      	ldr	r2, [r0, #4]
 8004056:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8004058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800405a:	3301      	adds	r3, #1
 800405c:	667b      	str	r3, [r7, #100]	; 0x64
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004064:	429a      	cmp	r2, r3
 8004066:	d3d4      	bcc.n	8004012 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f2>
        }

        return EIDSP_OK;
 8004068:	2400      	movs	r4, #0
    }
 800406a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800406e:	4618      	mov	r0, r3
 8004070:	f005 feaa 	bl	8009dc8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 8004074:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004078:	4618      	mov	r0, r3
 800407a:	f7fd fd2d 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 800407e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd fd28 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8004088:	4623      	mov	r3, r4
 800408a:	4618      	mov	r0, r3
 800408c:	3770      	adds	r7, #112	; 0x70
 800408e:	46bd      	mov	sp, r7
 8004090:	ecbd 8b02 	vpop	{d8}
 8004094:	bdb0      	pop	{r4, r5, r7, pc}
 8004096:	bf00      	nop
 8004098:	fffffc14 	.word	0xfffffc14
 800409c:	fffffc16 	.word	0xfffffc16
 80040a0:	00000000 	.word	0x00000000

080040a4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b093      	sub	sp, #76	; 0x4c
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6178      	str	r0, [r7, #20]
 80040ac:	6139      	str	r1, [r7, #16]
 80040ae:	60fa      	str	r2, [r7, #12]
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d103      	bne.n	80040c6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d001      	beq.n	80040ca <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80040c6:	4c7b      	ldr	r4, [pc, #492]	; (80042b4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80040c8:	e0ef      	b.n	80042aa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d001      	beq.n	80040d6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80040d2:	4c78      	ldr	r4, [pc, #480]	; (80042b4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80040d4:	e0e9      	b.n	80042aa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d105      	bne.n	80040f0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80040f0:	4c70      	ldr	r4, [pc, #448]	; (80042b4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80040f2:	e0da      	b.n	80042aa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004100:	4c6c      	ldr	r4, [pc, #432]	; (80042b4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8004102:	e0d2      	b.n	80042aa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	1e5a      	subs	r2, r3, #1
 800410a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800410e:	2300      	movs	r3, #0
 8004110:	2101      	movs	r1, #1
 8004112:	f7fd fcb6 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 800411c:	4c66      	ldr	r4, [pc, #408]	; (80042b8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 800411e:	e0bf      	b.n	80042a0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	f107 0018 	add.w	r0, r7, #24
 800412a:	2300      	movs	r3, #0
 800412c:	2101      	movs	r1, #1
 800412e:	f7fd fca8 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8004138:	4c5f      	ldr	r4, [pc, #380]	; (80042b8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 800413a:	e0ac      	b.n	8004296 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 800413c:	2300      	movs	r3, #0
 800413e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004142:	e063      	b.n	800420c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            float t = freq_matrix->buffer[ix];
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8004164:	2300      	movs	r3, #0
 8004166:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800416a:	e043      	b.n	80041f4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x150>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	edd3 7a00 	vldr	s15, [r3]
 800417c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004188:	db2f      	blt.n	80041ea <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004192:	3301      	adds	r3, #1
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	edd3 7a00 	vldr	s15, [r3]
 800419c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80041a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a8:	d51f      	bpl.n	80041ea <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
                    buckets.buffer[ex] += v;
 80041aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	ed93 7a00 	vldr	s14, [r3]
 80041b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80041c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ca:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	edd3 7a00 	vldr	s15, [r3]
 80041dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041e4:	edc3 7a00 	vstr	s15, [r3]
                    break;
 80041e8:	e00b      	b.n	8004202 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15e>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 80041ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041ee:	3301      	adds	r3, #1
 80041f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80041f4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	429a      	cmp	r2, r3
 8004200:	d3b4      	bcc.n	800416c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xc8>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8004202:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004206:	3301      	adds	r3, #1
 8004208:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800420c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	d395      	bcc.n	8004144 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa0>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8004218:	2300      	movs	r3, #0
 800421a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800421e:	e032      	b.n	8004286 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e2>
            if (bucket_count.buffer[ex] == 0.0f) {
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	edd3 7a00 	vldr	s15, [r3]
 800422e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004236:	d109      	bne.n	800424c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1a8>
                output_matrix->buffer[ex] = 0.0f;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e017      	b.n	800427c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1d8>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 800424c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800424e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	edd3 6a00 	vldr	s13, [r3]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	ed93 7a00 	vldr	s14, [r3]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004278:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 800427c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004280:	3301      	adds	r3, #1
 8004282:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004286:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	429a      	cmp	r2, r3
 8004292:	d3c5      	bcc.n	8004220 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17c>
            }
        }

        return EIDSP_OK;
 8004294:	2400      	movs	r4, #0
    }
 8004296:	f107 0318 	add.w	r3, r7, #24
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd fc1c 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80042a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fd fc17 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80042aa:	4623      	mov	r3, r4
 80042ac:	4618      	mov	r0, r3
 80042ae:	374c      	adds	r7, #76	; 0x4c
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd90      	pop	{r4, r7, pc}
 80042b4:	fffffc14 	.word	0xfffffc14
 80042b8:	fffffc16 	.word	0xfffffc16

080042bc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	ed2d 8b02 	vpush	{d8}
 80042c2:	b09b      	sub	sp, #108	; 0x6c
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	6178      	str	r0, [r7, #20]
 80042c8:	6139      	str	r1, [r7, #16]
 80042ca:	60fa      	str	r2, [r7, #12]
 80042cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80042d0:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d001      	beq.n	80042de <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80042da:	4c82      	ldr	r4, [pc, #520]	; (80044e4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 80042dc:	e192      	b.n	8004604 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d107      	bne.n	80042f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	0852      	lsrs	r2, r2, #1
 80042ee:	b292      	uxth	r2, r2
 80042f0:	3201      	adds	r2, #1
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d001      	beq.n	80042fa <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80042f6:	4c7b      	ldr	r4, [pc, #492]	; (80044e4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 80042f8:	e184      	b.n	8004604 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d107      	bne.n	8004312 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	0852      	lsrs	r2, r2, #1
 800430a:	b292      	uxth	r2, r2
 800430c:	3201      	adds	r2, #1
 800430e:	4293      	cmp	r3, r2
 8004310:	d001      	beq.n	8004316 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004312:	4c74      	ldr	r4, [pc, #464]	; (80044e4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8004314:	e176      	b.n	8004604 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800431e:	4c72      	ldr	r4, [pc, #456]	; (80044e8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8004320:	e170      	b.n	8004604 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800432a:	4c6f      	ldr	r4, [pc, #444]	; (80044e8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 800432c:	e16a      	b.n	8004604 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004336:	4c6c      	ldr	r4, [pc, #432]	; (80044e8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8004338:	e164      	b.n	8004604 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800434a:	f7fd fb9a 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 800434e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 8004354:	4c64      	ldr	r4, [pc, #400]	; (80044e8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8004356:	e150      	b.n	80045fa <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8004358:	88fb      	ldrh	r3, [r7, #6]
 800435a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	429a      	cmp	r2, r3
 8004366:	d904      	bls.n	8004372 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004370:	e006      	b.n	8004380 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	d201      	bcs.n	8004380 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8004380:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8004384:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004388:	2300      	movs	r3, #0
 800438a:	2101      	movs	r1, #1
 800438c:	f7fd fb79 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8004390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 8004396:	4c54      	ldr	r4, [pc, #336]	; (80044e8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8004398:	e12a      	b.n	80045f0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 800439a:	2300      	movs	r3, #0
 800439c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80043a0:	e00c      	b.n	80043bc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x100>
            triage_segments.buffer[ix] = 1.0f;
 80043a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80043b0:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 80043b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80043b6:	3301      	adds	r3, #1
 80043b8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80043bc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80043c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d3ec      	bcc.n	80043a2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe6>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 80043c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043cc:	ee07 3a90 	vmov	s15, r3
 80043d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80043d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80043ee:	e025      	b.n	800443c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x180>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 80043f0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004406:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800440a:	ed97 6a02 	vldr	s12, [r7, #8]
 800440e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004412:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004416:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800441a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442e:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8004432:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004436:	3301      	adds	r3, #1
 8004438:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	b29b      	uxth	r3, r3
 8004442:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004446:	429a      	cmp	r2, r3
 8004448:	d9d2      	bls.n	80043f0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x134>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 800444a:	f107 001c 	add.w	r0, r7, #28
 800444e:	2300      	movs	r3, #0
 8004450:	2201      	movs	r2, #1
 8004452:	2101      	movs	r1, #1
 8004454:	f7fd fb15 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 800445e:	4c22      	ldr	r4, [pc, #136]	; (80044e8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8004460:	e0c1      	b.n	80045e6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 8004462:	f107 021c 	add.w	r2, r7, #28
 8004466:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f7fd fe0f 	bl	8002090 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8004472:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8004474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 800447a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800447c:	e0b3      	b.n	80045e6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 800447e:	f107 021c 	add.w	r2, r7, #28
 8004482:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004486:	4611      	mov	r1, r2
 8004488:	4618      	mov	r0, r3
 800448a:	f7fd fd69 	bl	8001f60 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 800448e:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8004490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 8004496:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8004498:	e0a5      	b.n	80045e6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3301      	adds	r3, #1
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f013 feca 	bl	8018240 <_Z9ei_callocjj>
 80044ac:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 80044ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80044b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3301      	adds	r3, #1
 80044ba:	461a      	mov	r2, r3
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c4:	f7fe f876 	bl	80025b4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 80044c8:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80044ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x21e>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 80044d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80044d2:	f013 fec3 	bl	801825c <_Z7ei_freePv>
            EIDSP_ERR(ret);
 80044d6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80044d8:	e085      	b.n	80045e6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80044da:	2300      	movs	r3, #0
 80044dc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80044e0:	e076      	b.n	80045d0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x314>
 80044e2:	bf00      	nop
 80044e4:	fffffc14 	.word	0xfffffc14
 80044e8:	fffffc16 	.word	0xfffffc16
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 80044ec:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044f4:	4413      	add	r3, r2
 80044f6:	ed93 7a00 	vldr	s14, [r3]
 80044fa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004502:	4413      	add	r3, r2
 8004504:	edd3 7a00 	vldr	s15, [r3]
 8004508:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 800450c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004514:	4413      	add	r3, r2
 8004516:	ed93 7a01 	vldr	s14, [r3, #4]
 800451a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004522:	4413      	add	r3, r2
 8004524:	edd3 7a01 	vldr	s15, [r3, #4]
 8004528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452c:	eeb0 0a67 	vmov.f32	s0, s15
 8004530:	f7fd f8f5 	bl	800171e <_ZSt3absf>
 8004534:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8004538:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004540:	4413      	add	r3, r2
 8004542:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004546:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 800454a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004552:	4413      	add	r3, r2
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 800455a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004562:	4413      	add	r3, r2
 8004564:	ed93 7a00 	vldr	s14, [r3]
 8004568:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004570:	4413      	add	r3, r2
 8004572:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457a:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	b29b      	uxth	r3, r3
 8004584:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8004588:	429a      	cmp	r2, r3
 800458a:	d00f      	beq.n	80045ac <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2f0>
                fft_output[ix].r *= 2;
 800458c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004594:	4413      	add	r3, r2
 8004596:	edd3 7a00 	vldr	s15, [r3]
 800459a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a2:	4413      	add	r3, r2
 80045a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045a8:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 80045ac:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b4:	441a      	add	r2, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80045c6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80045ca:	3301      	adds	r3, #1
 80045cc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80045da:	429a      	cmp	r2, r3
 80045dc:	d986      	bls.n	80044ec <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x230>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 80045de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80045e0:	f013 fe3c 	bl	801825c <_Z7ei_freePv>

        return EIDSP_OK;
 80045e4:	2400      	movs	r4, #0
    }
 80045e6:	f107 031c 	add.w	r3, r7, #28
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fd fa74 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80045f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd fa6f 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80045fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fd fa6a 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8004604:	4623      	mov	r3, r4
 8004606:	4618      	mov	r0, r3
 8004608:	3764      	adds	r7, #100	; 0x64
 800460a:	46bd      	mov	sp, r7
 800460c:	ecbd 8b02 	vpop	{d8}
 8004610:	bd90      	pop	{r4, r7, pc}
 8004612:	bf00      	nop

08004614 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:

    static int subtract_mean(matrix_t* input_matrix) {
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b089      	sub	sp, #36	; 0x24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	f107 000c 	add.w	r0, r7, #12
 8004624:	2300      	movs	r3, #0
 8004626:	2201      	movs	r2, #1
 8004628:	f7fd fa2b 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x22>
 8004632:	4c12      	ldr	r4, [pc, #72]	; (800467c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x68>)
 8004634:	e018      	b.n	8004668 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 8004636:	f107 030c 	add.w	r3, r7, #12
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7fd fd27 	bl	8002090 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8004642:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800464a:	4c0d      	ldr	r4, [pc, #52]	; (8004680 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 800464c:	e00c      	b.n	8004668 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 800464e:	f107 030c 	add.w	r3, r7, #12
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fd fc83 	bl	8001f60 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 800465a:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x52>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004662:	4c07      	ldr	r4, [pc, #28]	; (8004680 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8004664:	e000      	b.n	8004668 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        return EIDSP_OK;
 8004666:	2400      	movs	r4, #0
    }
 8004668:	f107 030c 	add.w	r3, r7, #12
 800466c:	4618      	mov	r0, r3
 800466e:	f7fd fa33 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8004672:	4623      	mov	r3, r4
 8004674:	4618      	mov	r0, r3
 8004676:	3724      	adds	r7, #36	; 0x24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}
 800467c:	fffffc16 	.word	0xfffffc16
 8004680:	fffffc14 	.word	0xfffffc14

08004684 <_ZN2ei8spectral3dotEPKfS2_j>:
namespace spectral {

using fvec = ei_vector<float>;

inline float dot(const float *x, const float *y, size_t sz)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
    float sum = 0.0f;
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < sz; i++) {
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e016      	b.n	80046ca <_ZN2ei8spectral3dotEPKfS2_j+0x46>
        sum += x[i] * y[i];
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	ed93 7a00 	vldr	s14, [r3]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	4413      	add	r3, r2
 80046b0:	edd3 7a00 	vldr	s15, [r3]
 80046b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80046bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046c0:	edc7 7a05 	vstr	s15, [r7, #20]
    for (size_t i = 0; i < sz; i++) {
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	3301      	adds	r3, #1
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d3e4      	bcc.n	800469c <_ZN2ei8spectral3dotEPKfS2_j+0x18>
    }
    return sum;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	ee07 3a90 	vmov	s15, r3
}
 80046d8:	eeb0 0a67 	vmov.f32	s0, s15
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>:

inline void histo(const fvec &x, size_t nbins, fvec &h, bool normalize = false)
{
 80046e6:	b590      	push	{r4, r7, lr}
 80046e8:	b08f      	sub	sp, #60	; 0x3c
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	70fb      	strb	r3, [r7, #3]
    float min = *std::min_element(x.begin(), x.end());
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f005 fa0b 	bl	8009b10 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 80046fa:	4604      	mov	r4, r0
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f005 fa17 	bl	8009b30 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 8004702:	4603      	mov	r3, r0
 8004704:	4619      	mov	r1, r3
 8004706:	4620      	mov	r0, r4
 8004708:	f005 fbf2 	bl	8009ef0 <_ZSt11min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>
 800470c:	4603      	mov	r3, r0
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	f107 0314 	add.w	r3, r7, #20
 8004714:	4618      	mov	r0, r3
 8004716:	f005 fa44 	bl	8009ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800471a:	4603      	mov	r3, r0
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28
    float max = *std::max_element(x.begin(), x.end());
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f005 f9f5 	bl	8009b10 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 8004726:	4604      	mov	r4, r0
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f005 fa01 	bl	8009b30 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800472e:	4603      	mov	r3, r0
 8004730:	4619      	mov	r1, r3
 8004732:	4620      	mov	r0, r4
 8004734:	f005 fa60 	bl	8009bf8 <_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>
 8004738:	4603      	mov	r3, r0
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	f107 0318 	add.w	r3, r7, #24
 8004740:	4618      	mov	r0, r3
 8004742:	f005 fa2e 	bl	8009ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 8004746:	4603      	mov	r3, r0
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
    float step = (max - min) / nbins;
 800474c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004750:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004754:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004766:	edc7 7a08 	vstr	s15, [r7, #32]
    h.resize(nbins);
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f005 fbd0 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
    for (size_t i = 0; i < x.size(); i++) {
 8004772:	2300      	movs	r3, #0
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
 8004776:	e02a      	b.n	80047ce <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xe8>
        size_t bin = (x[i] - min) / step;
 8004778:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f005 fa7d 	bl	8009c7a <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8004780:	4603      	mov	r3, r0
 8004782:	ed93 7a00 	vldr	s14, [r3]
 8004786:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800478a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800478e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800479a:	ee17 3a90 	vmov	r3, s15
 800479e:	633b      	str	r3, [r7, #48]	; 0x30
        if (bin >= nbins)
 80047a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xc8>
            bin = nbins - 1;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	633b      	str	r3, [r7, #48]	; 0x30
        h[bin]++;
 80047ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f005 f988 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80047b6:	4603      	mov	r3, r0
 80047b8:	edd3 7a00 	vldr	s15, [r3]
 80047bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047c4:	edc3 7a00 	vstr	s15, [r3]
    for (size_t i = 0; i < x.size(); i++) {
 80047c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ca:	3301      	adds	r3, #1
 80047cc:	637b      	str	r3, [r7, #52]	; 0x34
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f004 ffd1 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d8:	4293      	cmp	r3, r2
 80047da:	bf34      	ite	cc
 80047dc:	2301      	movcc	r3, #1
 80047de:	2300      	movcs	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1c8      	bne.n	8004778 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x92>
    }
    if (normalize) {
 80047e6:	78fb      	ldrb	r3, [r7, #3]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d024      	beq.n	8004836 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x150>
        float s = numpy::sum(h.data(), h.size());
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f004 ffd2 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80047f2:	4604      	mov	r4, r0
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f004 ffbe 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80047fa:	4603      	mov	r3, r0
 80047fc:	4619      	mov	r1, r3
 80047fe:	4620      	mov	r0, r4
 8004800:	f7fd f9fc 	bl	8001bfc <_ZN2ei5numpy3sumEPfj>
 8004804:	ed87 0a07 	vstr	s0, [r7, #28]
        for (size_t i = 0; i < nbins; i++) {
 8004808:	2300      	movs	r3, #0
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480c:	e00f      	b.n	800482e <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x148>
            h[i] /= s;
 800480e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f005 f958 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8004816:	4603      	mov	r3, r0
 8004818:	edd3 6a00 	vldr	s13, [r3]
 800481c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004824:	edc3 7a00 	vstr	s15, [r3]
        for (size_t i = 0; i < nbins; i++) {
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	3301      	adds	r3, #1
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	429a      	cmp	r2, r3
 8004834:	d3eb      	bcc.n	800480e <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x128>
        }
    }
}
 8004836:	bf00      	nop
 8004838:	373c      	adds	r7, #60	; 0x3c
 800483a:	46bd      	mov	sp, r7
 800483c:	bd90      	pop	{r4, r7, pc}
	...

08004840 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>:
            h[i] = wav[0][n - i - 1];
            g[i] = wav[1][n - i - 1];
        }
    }

    static void find_filter(const char *wav, fvec &h, fvec &g)
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004842:	b0ab      	sub	sp, #172	; 0xac
 8004844:	af26      	add	r7, sp, #152	; 0x98
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
    {
        if (strcmp(wav, "bior1.3") == 0) get_filter<6>(bior1p3, h, g);
 800484c:	49ae      	ldr	r1, [pc, #696]	; (8004b08 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c8>)
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7fb fcbe 	bl	80001d0 <strcmp>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d113      	bne.n	8004882 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
 800485a:	4eac      	ldr	r6, [pc, #688]	; (8004b0c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2cc>)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	9309      	str	r3, [sp, #36]	; 0x24
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	9308      	str	r3, [sp, #32]
 8004864:	466d      	mov	r5, sp
 8004866:	f106 0410 	add.w	r4, r6, #16
 800486a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800486c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800486e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004872:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004876:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800487a:	f005 fba0 	bl	8009fbe <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
        else assert(0); // wavelet not in the list
    }
 800487e:	f000 bd9a 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior1.5") == 0) get_filter<10>(bior1p5, h, g);
 8004882:	49a3      	ldr	r1, [pc, #652]	; (8004b10 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d0>)
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7fb fca3 	bl	80001d0 <strcmp>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d117      	bne.n	80048c0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x80>
 8004890:	4ea0      	ldr	r6, [pc, #640]	; (8004b14 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d4>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	9311      	str	r3, [sp, #68]	; 0x44
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	9310      	str	r3, [sp, #64]	; 0x40
 800489a:	466d      	mov	r5, sp
 800489c:	f106 0410 	add.w	r4, r6, #16
 80048a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048b8:	f005 fbee 	bl	800a098 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80048bc:	f000 bd7b 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.2") == 0) get_filter<6>(bior2p2, h, g);
 80048c0:	4995      	ldr	r1, [pc, #596]	; (8004b18 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d8>)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7fb fc84 	bl	80001d0 <strcmp>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d113      	bne.n	80048f6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb6>
 80048ce:	4e93      	ldr	r6, [pc, #588]	; (8004b1c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2dc>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	9309      	str	r3, [sp, #36]	; 0x24
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	9308      	str	r3, [sp, #32]
 80048d8:	466d      	mov	r5, sp
 80048da:	f106 0410 	add.w	r4, r6, #16
 80048de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048ea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048ee:	f005 fb66 	bl	8009fbe <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80048f2:	f000 bd60 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.4") == 0) get_filter<10>(bior2p4, h, g);
 80048f6:	498a      	ldr	r1, [pc, #552]	; (8004b20 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e0>)
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7fb fc69 	bl	80001d0 <strcmp>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d117      	bne.n	8004934 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xf4>
 8004904:	4e87      	ldr	r6, [pc, #540]	; (8004b24 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e4>)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	9311      	str	r3, [sp, #68]	; 0x44
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	9310      	str	r3, [sp, #64]	; 0x40
 800490e:	466d      	mov	r5, sp
 8004910:	f106 0410 	add.w	r4, r6, #16
 8004914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800491a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800491c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800491e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004920:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004924:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004928:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800492c:	f005 fbb4 	bl	800a098 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004930:	f000 bd41 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.6") == 0) get_filter<14>(bior2p6, h, g);
 8004934:	497c      	ldr	r1, [pc, #496]	; (8004b28 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e8>)
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7fb fc4a 	bl	80001d0 <strcmp>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d111      	bne.n	8004966 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x126>
 8004942:	4c7a      	ldr	r4, [pc, #488]	; (8004b2c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2ec>)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	9319      	str	r3, [sp, #100]	; 0x64
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	9318      	str	r3, [sp, #96]	; 0x60
 800494c:	4668      	mov	r0, sp
 800494e:	f104 0310 	add.w	r3, r4, #16
 8004952:	2260      	movs	r2, #96	; 0x60
 8004954:	4619      	mov	r1, r3
 8004956:	f01b f8a9 	bl	801faac <memcpy>
 800495a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800495e:	f005 fc08 	bl	800a172 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004962:	f000 bd28 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.8") == 0) get_filter<18>(bior2p8, h, g);
 8004966:	4972      	ldr	r1, [pc, #456]	; (8004b30 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f0>)
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f7fb fc31 	bl	80001d0 <strcmp>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d111      	bne.n	8004998 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x158>
 8004974:	4c6f      	ldr	r4, [pc, #444]	; (8004b34 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f4>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	9321      	str	r3, [sp, #132]	; 0x84
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	9320      	str	r3, [sp, #128]	; 0x80
 800497e:	4668      	mov	r0, sp
 8004980:	f104 0310 	add.w	r3, r4, #16
 8004984:	2280      	movs	r2, #128	; 0x80
 8004986:	4619      	mov	r1, r3
 8004988:	f01b f890 	bl	801faac <memcpy>
 800498c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004990:	f005 fc60 	bl	800a254 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004994:	f000 bd0f 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.1") == 0) get_filter<4>(bior3p1, h, g);
 8004998:	4967      	ldr	r1, [pc, #412]	; (8004b38 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f8>)
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7fb fc18 	bl	80001d0 <strcmp>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d110      	bne.n	80049c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x188>
 80049a6:	4c65      	ldr	r4, [pc, #404]	; (8004b3c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2fc>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	9305      	str	r3, [sp, #20]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	9304      	str	r3, [sp, #16]
 80049b0:	466d      	mov	r5, sp
 80049b2:	f104 0310 	add.w	r3, r4, #16
 80049b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80049bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049c0:	f005 fcb6 	bl	800a330 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80049c4:	f000 bcf7 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.3") == 0) get_filter<8>(bior3p3, h, g);
 80049c8:	495d      	ldr	r1, [pc, #372]	; (8004b40 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x300>)
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7fb fc00 	bl	80001d0 <strcmp>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d115      	bne.n	8004a02 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c2>
 80049d6:	4e5b      	ldr	r6, [pc, #364]	; (8004b44 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x304>)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	930d      	str	r3, [sp, #52]	; 0x34
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	930c      	str	r3, [sp, #48]	; 0x30
 80049e0:	466d      	mov	r5, sp
 80049e2:	f106 0410 	add.w	r4, r6, #16
 80049e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80049f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80049fa:	f005 fd03 	bl	800a404 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80049fe:	f000 bcda 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.5") == 0) get_filter<12>(bior3p5, h, g);
 8004a02:	4951      	ldr	r1, [pc, #324]	; (8004b48 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x308>)
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7fb fbe3 	bl	80001d0 <strcmp>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d111      	bne.n	8004a34 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1f4>
 8004a10:	4c4e      	ldr	r4, [pc, #312]	; (8004b4c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x30c>)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	9315      	str	r3, [sp, #84]	; 0x54
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	9314      	str	r3, [sp, #80]	; 0x50
 8004a1a:	4668      	mov	r0, sp
 8004a1c:	f104 0310 	add.w	r3, r4, #16
 8004a20:	2250      	movs	r2, #80	; 0x50
 8004a22:	4619      	mov	r1, r3
 8004a24:	f01b f842 	bl	801faac <memcpy>
 8004a28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a2c:	f005 fd57 	bl	800a4de <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a30:	f000 bcc1 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.7") == 0) get_filter<16>(bior3p7, h, g);
 8004a34:	4946      	ldr	r1, [pc, #280]	; (8004b50 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x310>)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7fb fbca 	bl	80001d0 <strcmp>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d111      	bne.n	8004a66 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x226>
 8004a42:	4c44      	ldr	r4, [pc, #272]	; (8004b54 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x314>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	931d      	str	r3, [sp, #116]	; 0x74
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	931c      	str	r3, [sp, #112]	; 0x70
 8004a4c:	4668      	mov	r0, sp
 8004a4e:	f104 0310 	add.w	r3, r4, #16
 8004a52:	2270      	movs	r2, #112	; 0x70
 8004a54:	4619      	mov	r1, r3
 8004a56:	f01b f829 	bl	801faac <memcpy>
 8004a5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a5e:	f005 fda8 	bl	800a5b2 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a62:	f000 bca8 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.9") == 0) get_filter<20>(bior3p9, h, g);
 8004a66:	493c      	ldr	r1, [pc, #240]	; (8004b58 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x318>)
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7fb fbb1 	bl	80001d0 <strcmp>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d111      	bne.n	8004a98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x258>
 8004a74:	4c39      	ldr	r4, [pc, #228]	; (8004b5c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x31c>)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	9325      	str	r3, [sp, #148]	; 0x94
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	9324      	str	r3, [sp, #144]	; 0x90
 8004a7e:	4668      	mov	r0, sp
 8004a80:	f104 0310 	add.w	r3, r4, #16
 8004a84:	2290      	movs	r2, #144	; 0x90
 8004a86:	4619      	mov	r1, r3
 8004a88:	f01b f810 	bl	801faac <memcpy>
 8004a8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a90:	f005 fe00 	bl	800a694 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a94:	f000 bc8f 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior4.4") == 0) get_filter<10>(bior4p4, h, g);
 8004a98:	4931      	ldr	r1, [pc, #196]	; (8004b60 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x320>)
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f7fb fb98 	bl	80001d0 <strcmp>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d117      	bne.n	8004ad6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x296>
 8004aa6:	4e2f      	ldr	r6, [pc, #188]	; (8004b64 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x324>)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	9311      	str	r3, [sp, #68]	; 0x44
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	9310      	str	r3, [sp, #64]	; 0x40
 8004ab0:	466d      	mov	r5, sp
 8004ab2:	f106 0410 	add.w	r4, r6, #16
 8004ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ac6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004aca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ace:	f005 fae3 	bl	800a098 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004ad2:	f000 bc70 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior5.5") == 0) get_filter<12>(bior5p5, h, g);
 8004ad6:	4924      	ldr	r1, [pc, #144]	; (8004b68 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x328>)
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7fb fb79 	bl	80001d0 <strcmp>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d145      	bne.n	8004b70 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x330>
 8004ae4:	4c21      	ldr	r4, [pc, #132]	; (8004b6c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32c>)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	9315      	str	r3, [sp, #84]	; 0x54
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	9314      	str	r3, [sp, #80]	; 0x50
 8004aee:	4668      	mov	r0, sp
 8004af0:	f104 0310 	add.w	r3, r4, #16
 8004af4:	2250      	movs	r2, #80	; 0x50
 8004af6:	4619      	mov	r1, r3
 8004af8:	f01a ffd8 	bl	801faac <memcpy>
 8004afc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b00:	f005 fced 	bl	800a4de <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b04:	f000 bc57 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004b08:	080223a0 	.word	0x080223a0
 8004b0c:	08024c64 	.word	0x08024c64
 8004b10:	080223a8 	.word	0x080223a8
 8004b14:	08024c94 	.word	0x08024c94
 8004b18:	080223b0 	.word	0x080223b0
 8004b1c:	08024ce4 	.word	0x08024ce4
 8004b20:	080223b8 	.word	0x080223b8
 8004b24:	08024d14 	.word	0x08024d14
 8004b28:	080223c0 	.word	0x080223c0
 8004b2c:	08024d64 	.word	0x08024d64
 8004b30:	080223c8 	.word	0x080223c8
 8004b34:	08024dd4 	.word	0x08024dd4
 8004b38:	080223d0 	.word	0x080223d0
 8004b3c:	08024e64 	.word	0x08024e64
 8004b40:	080223d8 	.word	0x080223d8
 8004b44:	08024e84 	.word	0x08024e84
 8004b48:	080223e0 	.word	0x080223e0
 8004b4c:	08024ec4 	.word	0x08024ec4
 8004b50:	080223e8 	.word	0x080223e8
 8004b54:	08024f24 	.word	0x08024f24
 8004b58:	080223f0 	.word	0x080223f0
 8004b5c:	08024fa4 	.word	0x08024fa4
 8004b60:	080223f8 	.word	0x080223f8
 8004b64:	08025044 	.word	0x08025044
 8004b68:	08022400 	.word	0x08022400
 8004b6c:	08025094 	.word	0x08025094
        else if (strcmp(wav, "bior6.8") == 0) get_filter<18>(bior6p8, h, g);
 8004b70:	49b1      	ldr	r1, [pc, #708]	; (8004e38 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5f8>)
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7fb fb2c 	bl	80001d0 <strcmp>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d111      	bne.n	8004ba2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x362>
 8004b7e:	4caf      	ldr	r4, [pc, #700]	; (8004e3c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5fc>)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	9321      	str	r3, [sp, #132]	; 0x84
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	9320      	str	r3, [sp, #128]	; 0x80
 8004b88:	4668      	mov	r0, sp
 8004b8a:	f104 0310 	add.w	r3, r4, #16
 8004b8e:	2280      	movs	r2, #128	; 0x80
 8004b90:	4619      	mov	r1, r3
 8004b92:	f01a ff8b 	bl	801faac <memcpy>
 8004b96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b9a:	f005 fb5b 	bl	800a254 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b9e:	f000 bc0a 	b.w	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif1") == 0) get_filter<6>(coif1, h, g);
 8004ba2:	49a7      	ldr	r1, [pc, #668]	; (8004e40 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x600>)
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7fb fb13 	bl	80001d0 <strcmp>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d112      	bne.n	8004bd6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x396>
 8004bb0:	4ea4      	ldr	r6, [pc, #656]	; (8004e44 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x604>)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	9308      	str	r3, [sp, #32]
 8004bba:	466d      	mov	r5, sp
 8004bbc:	f106 0410 	add.w	r4, r6, #16
 8004bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004bc8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004bcc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004bd0:	f005 f9f5 	bl	8009fbe <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004bd4:	e3ef      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif2") == 0) get_filter<12>(coif2, h, g);
 8004bd6:	499c      	ldr	r1, [pc, #624]	; (8004e48 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x608>)
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7fb faf9 	bl	80001d0 <strcmp>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d110      	bne.n	8004c06 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3c6>
 8004be4:	4c99      	ldr	r4, [pc, #612]	; (8004e4c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x60c>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	9315      	str	r3, [sp, #84]	; 0x54
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	9314      	str	r3, [sp, #80]	; 0x50
 8004bee:	4668      	mov	r0, sp
 8004bf0:	f104 0310 	add.w	r3, r4, #16
 8004bf4:	2250      	movs	r2, #80	; 0x50
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f01a ff58 	bl	801faac <memcpy>
 8004bfc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c00:	f005 fc6d 	bl	800a4de <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c04:	e3d7      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif3") == 0) get_filter<18>(coif3, h, g);
 8004c06:	4992      	ldr	r1, [pc, #584]	; (8004e50 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x610>)
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7fb fae1 	bl	80001d0 <strcmp>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d110      	bne.n	8004c36 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3f6>
 8004c14:	4c8f      	ldr	r4, [pc, #572]	; (8004e54 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x614>)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	9321      	str	r3, [sp, #132]	; 0x84
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	9320      	str	r3, [sp, #128]	; 0x80
 8004c1e:	4668      	mov	r0, sp
 8004c20:	f104 0310 	add.w	r3, r4, #16
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	4619      	mov	r1, r3
 8004c28:	f01a ff40 	bl	801faac <memcpy>
 8004c2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c30:	f005 fb10 	bl	800a254 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c34:	e3bf      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db2") == 0) get_filter<4>(db2, h, g);
 8004c36:	4988      	ldr	r1, [pc, #544]	; (8004e58 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x618>)
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7fb fac9 	bl	80001d0 <strcmp>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10f      	bne.n	8004c64 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x424>
 8004c44:	4c85      	ldr	r4, [pc, #532]	; (8004e5c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x61c>)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	9305      	str	r3, [sp, #20]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	9304      	str	r3, [sp, #16]
 8004c4e:	466d      	mov	r5, sp
 8004c50:	f104 0310 	add.w	r3, r4, #16
 8004c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c56:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004c5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c5e:	f005 fb67 	bl	800a330 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c62:	e3a8      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db3") == 0) get_filter<6>(db3, h, g);
 8004c64:	497e      	ldr	r1, [pc, #504]	; (8004e60 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x620>)
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7fb fab2 	bl	80001d0 <strcmp>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d112      	bne.n	8004c98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x458>
 8004c72:	4e7c      	ldr	r6, [pc, #496]	; (8004e64 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x624>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	9309      	str	r3, [sp, #36]	; 0x24
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	9308      	str	r3, [sp, #32]
 8004c7c:	466d      	mov	r5, sp
 8004c7e:	f106 0410 	add.w	r4, r6, #16
 8004c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004c8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004c92:	f005 f994 	bl	8009fbe <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c96:	e38e      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db4") == 0) get_filter<8>(db4, h, g);
 8004c98:	4973      	ldr	r1, [pc, #460]	; (8004e68 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x628>)
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7fb fa98 	bl	80001d0 <strcmp>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d114      	bne.n	8004cd0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x490>
 8004ca6:	4e71      	ldr	r6, [pc, #452]	; (8004e6c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x62c>)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	930d      	str	r3, [sp, #52]	; 0x34
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	930c      	str	r3, [sp, #48]	; 0x30
 8004cb0:	466d      	mov	r5, sp
 8004cb2:	f106 0410 	add.w	r4, r6, #16
 8004cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004cc2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004cc6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004cca:	f005 fb9b 	bl	800a404 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004cce:	e372      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db5") == 0) get_filter<10>(db5, h, g);
 8004cd0:	4967      	ldr	r1, [pc, #412]	; (8004e70 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x630>)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7fb fa7c 	bl	80001d0 <strcmp>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d116      	bne.n	8004d0c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4cc>
 8004cde:	4e65      	ldr	r6, [pc, #404]	; (8004e74 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x634>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	9310      	str	r3, [sp, #64]	; 0x40
 8004ce8:	466d      	mov	r5, sp
 8004cea:	f106 0410 	add.w	r4, r6, #16
 8004cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cfa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004cfe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004d02:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004d06:	f005 f9c7 	bl	800a098 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d0a:	e354      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db6") == 0) get_filter<12>(db6, h, g);
 8004d0c:	495a      	ldr	r1, [pc, #360]	; (8004e78 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x638>)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7fb fa5e 	bl	80001d0 <strcmp>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d110      	bne.n	8004d3c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4fc>
 8004d1a:	4c58      	ldr	r4, [pc, #352]	; (8004e7c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x63c>)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	9315      	str	r3, [sp, #84]	; 0x54
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	9314      	str	r3, [sp, #80]	; 0x50
 8004d24:	4668      	mov	r0, sp
 8004d26:	f104 0310 	add.w	r3, r4, #16
 8004d2a:	2250      	movs	r2, #80	; 0x50
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f01a febd 	bl	801faac <memcpy>
 8004d32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d36:	f005 fbd2 	bl	800a4de <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d3a:	e33c      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db7") == 0) get_filter<14>(db7, h, g);
 8004d3c:	4950      	ldr	r1, [pc, #320]	; (8004e80 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x640>)
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7fb fa46 	bl	80001d0 <strcmp>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d110      	bne.n	8004d6c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x52c>
 8004d4a:	4c4e      	ldr	r4, [pc, #312]	; (8004e84 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x644>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	9319      	str	r3, [sp, #100]	; 0x64
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	9318      	str	r3, [sp, #96]	; 0x60
 8004d54:	4668      	mov	r0, sp
 8004d56:	f104 0310 	add.w	r3, r4, #16
 8004d5a:	2260      	movs	r2, #96	; 0x60
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	f01a fea5 	bl	801faac <memcpy>
 8004d62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d66:	f005 fa04 	bl	800a172 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d6a:	e324      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db8") == 0) get_filter<16>(db8, h, g);
 8004d6c:	4946      	ldr	r1, [pc, #280]	; (8004e88 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x648>)
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f7fb fa2e 	bl	80001d0 <strcmp>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d110      	bne.n	8004d9c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x55c>
 8004d7a:	4c44      	ldr	r4, [pc, #272]	; (8004e8c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x64c>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	931d      	str	r3, [sp, #116]	; 0x74
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	931c      	str	r3, [sp, #112]	; 0x70
 8004d84:	4668      	mov	r0, sp
 8004d86:	f104 0310 	add.w	r3, r4, #16
 8004d8a:	2270      	movs	r2, #112	; 0x70
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f01a fe8d 	bl	801faac <memcpy>
 8004d92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d96:	f005 fc0c 	bl	800a5b2 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d9a:	e30c      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db9") == 0) get_filter<18>(db9, h, g);
 8004d9c:	493c      	ldr	r1, [pc, #240]	; (8004e90 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x650>)
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7fb fa16 	bl	80001d0 <strcmp>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d110      	bne.n	8004dcc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x58c>
 8004daa:	4c3a      	ldr	r4, [pc, #232]	; (8004e94 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x654>)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	9321      	str	r3, [sp, #132]	; 0x84
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	9320      	str	r3, [sp, #128]	; 0x80
 8004db4:	4668      	mov	r0, sp
 8004db6:	f104 0310 	add.w	r3, r4, #16
 8004dba:	2280      	movs	r2, #128	; 0x80
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f01a fe75 	bl	801faac <memcpy>
 8004dc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004dc6:	f005 fa45 	bl	800a254 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004dca:	e2f4      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db10") == 0) get_filter<20>(db10, h, g);
 8004dcc:	4932      	ldr	r1, [pc, #200]	; (8004e98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x658>)
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7fb f9fe 	bl	80001d0 <strcmp>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d110      	bne.n	8004dfc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5bc>
 8004dda:	4c30      	ldr	r4, [pc, #192]	; (8004e9c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x65c>)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	9325      	str	r3, [sp, #148]	; 0x94
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	9324      	str	r3, [sp, #144]	; 0x90
 8004de4:	4668      	mov	r0, sp
 8004de6:	f104 0310 	add.w	r3, r4, #16
 8004dea:	2290      	movs	r2, #144	; 0x90
 8004dec:	4619      	mov	r1, r3
 8004dee:	f01a fe5d 	bl	801faac <memcpy>
 8004df2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004df6:	f005 fc4d 	bl	800a694 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004dfa:	e2dc      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "haar") == 0) get_filter<2>(haar, h, g);
 8004dfc:	4928      	ldr	r1, [pc, #160]	; (8004ea0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x660>)
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7fb f9e6 	bl	80001d0 <strcmp>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d14e      	bne.n	8004ea8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x668>
 8004e0a:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x664>)
 8004e0c:	ed93 6a00 	vldr	s12, [r3]
 8004e10:	edd3 6a01 	vldr	s13, [r3, #4]
 8004e14:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e18:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	68b8      	ldr	r0, [r7, #8]
 8004e20:	eeb0 0a46 	vmov.f32	s0, s12
 8004e24:	eef0 0a66 	vmov.f32	s1, s13
 8004e28:	eeb0 1a47 	vmov.f32	s2, s14
 8004e2c:	eef0 1a67 	vmov.f32	s3, s15
 8004e30:	f005 fc9e 	bl	800a770 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e34:	e2bf      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004e36:	bf00      	nop
 8004e38:	08022408 	.word	0x08022408
 8004e3c:	080250f4 	.word	0x080250f4
 8004e40:	08022410 	.word	0x08022410
 8004e44:	08025184 	.word	0x08025184
 8004e48:	08022418 	.word	0x08022418
 8004e4c:	080251b4 	.word	0x080251b4
 8004e50:	08022420 	.word	0x08022420
 8004e54:	08025214 	.word	0x08025214
 8004e58:	08022428 	.word	0x08022428
 8004e5c:	080252a4 	.word	0x080252a4
 8004e60:	0802242c 	.word	0x0802242c
 8004e64:	080252c4 	.word	0x080252c4
 8004e68:	08022430 	.word	0x08022430
 8004e6c:	080252f4 	.word	0x080252f4
 8004e70:	08022434 	.word	0x08022434
 8004e74:	08025334 	.word	0x08025334
 8004e78:	08022438 	.word	0x08022438
 8004e7c:	08025384 	.word	0x08025384
 8004e80:	0802243c 	.word	0x0802243c
 8004e84:	080253e4 	.word	0x080253e4
 8004e88:	08022440 	.word	0x08022440
 8004e8c:	08025454 	.word	0x08025454
 8004e90:	08022444 	.word	0x08022444
 8004e94:	080254d4 	.word	0x080254d4
 8004e98:	08022448 	.word	0x08022448
 8004e9c:	08025564 	.word	0x08025564
 8004ea0:	08022450 	.word	0x08022450
 8004ea4:	08025604 	.word	0x08025604
        else if (strcmp(wav, "rbio1.3") == 0) get_filter<6>(rbio1p3, h, g);
 8004ea8:	49a8      	ldr	r1, [pc, #672]	; (800514c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x90c>)
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7fb f990 	bl	80001d0 <strcmp>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d112      	bne.n	8004edc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x69c>
 8004eb6:	4ea6      	ldr	r6, [pc, #664]	; (8005150 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x910>)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	9308      	str	r3, [sp, #32]
 8004ec0:	466d      	mov	r5, sp
 8004ec2:	f106 0410 	add.w	r4, r6, #16
 8004ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ece:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004ed2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ed6:	f005 f872 	bl	8009fbe <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004eda:	e26c      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio1.5") == 0) get_filter<10>(rbio1p5, h, g);
 8004edc:	499d      	ldr	r1, [pc, #628]	; (8005154 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x914>)
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7fb f976 	bl	80001d0 <strcmp>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d116      	bne.n	8004f18 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x6d8>
 8004eea:	4e9b      	ldr	r6, [pc, #620]	; (8005158 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x918>)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	9311      	str	r3, [sp, #68]	; 0x44
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	9310      	str	r3, [sp, #64]	; 0x40
 8004ef4:	466d      	mov	r5, sp
 8004ef6:	f106 0410 	add.w	r4, r6, #16
 8004efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004f0e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004f12:	f005 f8c1 	bl	800a098 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f16:	e24e      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.2") == 0) get_filter<6>(rbio2p2, h, g);
 8004f18:	4990      	ldr	r1, [pc, #576]	; (800515c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x91c>)
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7fb f958 	bl	80001d0 <strcmp>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d112      	bne.n	8004f4c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x70c>
 8004f26:	4e8e      	ldr	r6, [pc, #568]	; (8005160 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x920>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	9308      	str	r3, [sp, #32]
 8004f30:	466d      	mov	r5, sp
 8004f32:	f106 0410 	add.w	r4, r6, #16
 8004f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004f42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004f46:	f005 f83a 	bl	8009fbe <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f4a:	e234      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.4") == 0) get_filter<10>(rbio2p4, h, g);
 8004f4c:	4985      	ldr	r1, [pc, #532]	; (8005164 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x924>)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f7fb f93e 	bl	80001d0 <strcmp>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d116      	bne.n	8004f88 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x748>
 8004f5a:	4e83      	ldr	r6, [pc, #524]	; (8005168 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x928>)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	9311      	str	r3, [sp, #68]	; 0x44
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	9310      	str	r3, [sp, #64]	; 0x40
 8004f64:	466d      	mov	r5, sp
 8004f66:	f106 0410 	add.w	r4, r6, #16
 8004f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004f7e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004f82:	f005 f889 	bl	800a098 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f86:	e216      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.6") == 0) get_filter<14>(rbio2p6, h, g);
 8004f88:	4978      	ldr	r1, [pc, #480]	; (800516c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x92c>)
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7fb f920 	bl	80001d0 <strcmp>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d110      	bne.n	8004fb8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x778>
 8004f96:	4c76      	ldr	r4, [pc, #472]	; (8005170 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x930>)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	9319      	str	r3, [sp, #100]	; 0x64
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	9318      	str	r3, [sp, #96]	; 0x60
 8004fa0:	4668      	mov	r0, sp
 8004fa2:	f104 0310 	add.w	r3, r4, #16
 8004fa6:	2260      	movs	r2, #96	; 0x60
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f01a fd7f 	bl	801faac <memcpy>
 8004fae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004fb2:	f005 f8de 	bl	800a172 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004fb6:	e1fe      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.8") == 0) get_filter<18>(rbio2p8, h, g);
 8004fb8:	496e      	ldr	r1, [pc, #440]	; (8005174 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x934>)
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7fb f908 	bl	80001d0 <strcmp>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d110      	bne.n	8004fe8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x7a8>
 8004fc6:	4c6c      	ldr	r4, [pc, #432]	; (8005178 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x938>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	9321      	str	r3, [sp, #132]	; 0x84
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	9320      	str	r3, [sp, #128]	; 0x80
 8004fd0:	4668      	mov	r0, sp
 8004fd2:	f104 0310 	add.w	r3, r4, #16
 8004fd6:	2280      	movs	r2, #128	; 0x80
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f01a fd67 	bl	801faac <memcpy>
 8004fde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004fe2:	f005 f937 	bl	800a254 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004fe6:	e1e6      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.1") == 0) get_filter<4>(rbio3p1, h, g);
 8004fe8:	4964      	ldr	r1, [pc, #400]	; (800517c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x93c>)
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7fb f8f0 	bl	80001d0 <strcmp>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10f      	bne.n	8005016 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x7d6>
 8004ff6:	4c62      	ldr	r4, [pc, #392]	; (8005180 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x940>)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	9305      	str	r3, [sp, #20]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	9304      	str	r3, [sp, #16]
 8005000:	466d      	mov	r5, sp
 8005002:	f104 0310 	add.w	r3, r4, #16
 8005006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005008:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800500c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005010:	f005 f98e 	bl	800a330 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8005014:	e1cf      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.3") == 0) get_filter<8>(rbio3p3, h, g);
 8005016:	495b      	ldr	r1, [pc, #364]	; (8005184 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x944>)
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f7fb f8d9 	bl	80001d0 <strcmp>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d114      	bne.n	800504e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x80e>
 8005024:	4e58      	ldr	r6, [pc, #352]	; (8005188 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x948>)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	930d      	str	r3, [sp, #52]	; 0x34
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	930c      	str	r3, [sp, #48]	; 0x30
 800502e:	466d      	mov	r5, sp
 8005030:	f106 0410 	add.w	r4, r6, #16
 8005034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800503a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800503c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005040:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005044:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005048:	f005 f9dc 	bl	800a404 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800504c:	e1b3      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.5") == 0) get_filter<12>(rbio3p5, h, g);
 800504e:	494f      	ldr	r1, [pc, #316]	; (800518c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x94c>)
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7fb f8bd 	bl	80001d0 <strcmp>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d110      	bne.n	800507e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x83e>
 800505c:	4c4c      	ldr	r4, [pc, #304]	; (8005190 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x950>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	9315      	str	r3, [sp, #84]	; 0x54
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	9314      	str	r3, [sp, #80]	; 0x50
 8005066:	4668      	mov	r0, sp
 8005068:	f104 0310 	add.w	r3, r4, #16
 800506c:	2250      	movs	r2, #80	; 0x50
 800506e:	4619      	mov	r1, r3
 8005070:	f01a fd1c 	bl	801faac <memcpy>
 8005074:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005078:	f005 fa31 	bl	800a4de <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800507c:	e19b      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.7") == 0) get_filter<16>(rbio3p7, h, g);
 800507e:	4945      	ldr	r1, [pc, #276]	; (8005194 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x954>)
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7fb f8a5 	bl	80001d0 <strcmp>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d110      	bne.n	80050ae <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x86e>
 800508c:	4c42      	ldr	r4, [pc, #264]	; (8005198 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x958>)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	931d      	str	r3, [sp, #116]	; 0x74
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	931c      	str	r3, [sp, #112]	; 0x70
 8005096:	4668      	mov	r0, sp
 8005098:	f104 0310 	add.w	r3, r4, #16
 800509c:	2270      	movs	r2, #112	; 0x70
 800509e:	4619      	mov	r1, r3
 80050a0:	f01a fd04 	bl	801faac <memcpy>
 80050a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80050a8:	f005 fa83 	bl	800a5b2 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80050ac:	e183      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.9") == 0) get_filter<20>(rbio3p9, h, g);
 80050ae:	493b      	ldr	r1, [pc, #236]	; (800519c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x95c>)
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7fb f88d 	bl	80001d0 <strcmp>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d110      	bne.n	80050de <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x89e>
 80050bc:	4c38      	ldr	r4, [pc, #224]	; (80051a0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x960>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	9325      	str	r3, [sp, #148]	; 0x94
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	9324      	str	r3, [sp, #144]	; 0x90
 80050c6:	4668      	mov	r0, sp
 80050c8:	f104 0310 	add.w	r3, r4, #16
 80050cc:	2290      	movs	r2, #144	; 0x90
 80050ce:	4619      	mov	r1, r3
 80050d0:	f01a fcec 	bl	801faac <memcpy>
 80050d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80050d8:	f005 fadc 	bl	800a694 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80050dc:	e16b      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio4.4") == 0) get_filter<10>(rbio4p4, h, g);
 80050de:	4931      	ldr	r1, [pc, #196]	; (80051a4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x964>)
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7fb f875 	bl	80001d0 <strcmp>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d116      	bne.n	800511a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x8da>
 80050ec:	4e2e      	ldr	r6, [pc, #184]	; (80051a8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x968>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	9311      	str	r3, [sp, #68]	; 0x44
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	9310      	str	r3, [sp, #64]	; 0x40
 80050f6:	466d      	mov	r5, sp
 80050f8:	f106 0410 	add.w	r4, r6, #16
 80050fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005108:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800510c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005110:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005114:	f004 ffc0 	bl	800a098 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8005118:	e14d      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio5.5") == 0) get_filter<12>(rbio5p5, h, g);
 800511a:	4924      	ldr	r1, [pc, #144]	; (80051ac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x96c>)
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7fb f857 	bl	80001d0 <strcmp>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d145      	bne.n	80051b4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x974>
 8005128:	4c21      	ldr	r4, [pc, #132]	; (80051b0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x970>)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	9315      	str	r3, [sp, #84]	; 0x54
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	9314      	str	r3, [sp, #80]	; 0x50
 8005132:	4668      	mov	r0, sp
 8005134:	f104 0310 	add.w	r3, r4, #16
 8005138:	2250      	movs	r2, #80	; 0x50
 800513a:	4619      	mov	r1, r3
 800513c:	f01a fcb6 	bl	801faac <memcpy>
 8005140:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005144:	f005 f9cb 	bl	800a4de <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8005148:	e135      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 800514a:	bf00      	nop
 800514c:	08022458 	.word	0x08022458
 8005150:	08025614 	.word	0x08025614
 8005154:	08022460 	.word	0x08022460
 8005158:	08025644 	.word	0x08025644
 800515c:	08022468 	.word	0x08022468
 8005160:	08025694 	.word	0x08025694
 8005164:	08022470 	.word	0x08022470
 8005168:	080256c4 	.word	0x080256c4
 800516c:	08022478 	.word	0x08022478
 8005170:	08025714 	.word	0x08025714
 8005174:	08022480 	.word	0x08022480
 8005178:	08025784 	.word	0x08025784
 800517c:	08022488 	.word	0x08022488
 8005180:	08025814 	.word	0x08025814
 8005184:	08022490 	.word	0x08022490
 8005188:	08025834 	.word	0x08025834
 800518c:	08022498 	.word	0x08022498
 8005190:	08025874 	.word	0x08025874
 8005194:	080224a0 	.word	0x080224a0
 8005198:	080258d4 	.word	0x080258d4
 800519c:	080224a8 	.word	0x080224a8
 80051a0:	08025954 	.word	0x08025954
 80051a4:	080224b0 	.word	0x080224b0
 80051a8:	080259f4 	.word	0x080259f4
 80051ac:	080224b8 	.word	0x080224b8
 80051b0:	08025a44 	.word	0x08025a44
        else if (strcmp(wav, "rbio6.8") == 0) get_filter<18>(rbio6p8, h, g);
 80051b4:	4981      	ldr	r1, [pc, #516]	; (80053bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb7c>)
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7fb f80a 	bl	80001d0 <strcmp>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d110      	bne.n	80051e4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x9a4>
 80051c2:	4c7f      	ldr	r4, [pc, #508]	; (80053c0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb80>)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	9321      	str	r3, [sp, #132]	; 0x84
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	9320      	str	r3, [sp, #128]	; 0x80
 80051cc:	4668      	mov	r0, sp
 80051ce:	f104 0310 	add.w	r3, r4, #16
 80051d2:	2280      	movs	r2, #128	; 0x80
 80051d4:	4619      	mov	r1, r3
 80051d6:	f01a fc69 	bl	801faac <memcpy>
 80051da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80051de:	f005 f839 	bl	800a254 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80051e2:	e0e8      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym2") == 0) get_filter<4>(sym2, h, g);
 80051e4:	4977      	ldr	r1, [pc, #476]	; (80053c4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb84>)
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7fa fff2 	bl	80001d0 <strcmp>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10f      	bne.n	8005212 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x9d2>
 80051f2:	4c75      	ldr	r4, [pc, #468]	; (80053c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb88>)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	9305      	str	r3, [sp, #20]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	9304      	str	r3, [sp, #16]
 80051fc:	466d      	mov	r5, sp
 80051fe:	f104 0310 	add.w	r3, r4, #16
 8005202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005204:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005208:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800520c:	f005 f890 	bl	800a330 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8005210:	e0d1      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym3") == 0) get_filter<6>(sym3, h, g);
 8005212:	496e      	ldr	r1, [pc, #440]	; (80053cc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8c>)
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7fa ffdb 	bl	80001d0 <strcmp>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d112      	bne.n	8005246 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa06>
 8005220:	4e6b      	ldr	r6, [pc, #428]	; (80053d0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb90>)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	9309      	str	r3, [sp, #36]	; 0x24
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	9308      	str	r3, [sp, #32]
 800522a:	466d      	mov	r5, sp
 800522c:	f106 0410 	add.w	r4, r6, #16
 8005230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005234:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005238:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800523c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005240:	f004 febd 	bl	8009fbe <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8005244:	e0b7      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym4") == 0) get_filter<8>(sym4, h, g);
 8005246:	4963      	ldr	r1, [pc, #396]	; (80053d4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb94>)
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7fa ffc1 	bl	80001d0 <strcmp>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d114      	bne.n	800527e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa3e>
 8005254:	4e60      	ldr	r6, [pc, #384]	; (80053d8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb98>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	930d      	str	r3, [sp, #52]	; 0x34
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	930c      	str	r3, [sp, #48]	; 0x30
 800525e:	466d      	mov	r5, sp
 8005260:	f106 0410 	add.w	r4, r6, #16
 8005264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800526a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800526c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005270:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005274:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005278:	f005 f8c4 	bl	800a404 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800527c:	e09b      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym5") == 0) get_filter<10>(sym5, h, g);
 800527e:	4957      	ldr	r1, [pc, #348]	; (80053dc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb9c>)
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f7fa ffa5 	bl	80001d0 <strcmp>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d116      	bne.n	80052ba <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa7a>
 800528c:	4e54      	ldr	r6, [pc, #336]	; (80053e0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba0>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	9311      	str	r3, [sp, #68]	; 0x44
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	9310      	str	r3, [sp, #64]	; 0x40
 8005296:	466d      	mov	r5, sp
 8005298:	f106 0410 	add.w	r4, r6, #16
 800529c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800529e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80052ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80052b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80052b4:	f004 fef0 	bl	800a098 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80052b8:	e07d      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym6") == 0) get_filter<12>(sym6, h, g);
 80052ba:	494a      	ldr	r1, [pc, #296]	; (80053e4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba4>)
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7fa ff87 	bl	80001d0 <strcmp>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d110      	bne.n	80052ea <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xaaa>
 80052c8:	4c47      	ldr	r4, [pc, #284]	; (80053e8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba8>)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	9315      	str	r3, [sp, #84]	; 0x54
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	9314      	str	r3, [sp, #80]	; 0x50
 80052d2:	4668      	mov	r0, sp
 80052d4:	f104 0310 	add.w	r3, r4, #16
 80052d8:	2250      	movs	r2, #80	; 0x50
 80052da:	4619      	mov	r1, r3
 80052dc:	f01a fbe6 	bl	801faac <memcpy>
 80052e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80052e4:	f005 f8fb 	bl	800a4de <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80052e8:	e065      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
 80052ea:	4940      	ldr	r1, [pc, #256]	; (80053ec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbac>)
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7fa ff6f 	bl	80001d0 <strcmp>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d110      	bne.n	800531a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xada>
 80052f8:	4c3d      	ldr	r4, [pc, #244]	; (80053f0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb0>)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	9319      	str	r3, [sp, #100]	; 0x64
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	9318      	str	r3, [sp, #96]	; 0x60
 8005302:	4668      	mov	r0, sp
 8005304:	f104 0310 	add.w	r3, r4, #16
 8005308:	2260      	movs	r2, #96	; 0x60
 800530a:	4619      	mov	r1, r3
 800530c:	f01a fbce 	bl	801faac <memcpy>
 8005310:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005314:	f004 ff2d 	bl	800a172 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8005318:	e04d      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
 800531a:	4936      	ldr	r1, [pc, #216]	; (80053f4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb4>)
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7fa ff57 	bl	80001d0 <strcmp>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d110      	bne.n	800534a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb0a>
 8005328:	4c33      	ldr	r4, [pc, #204]	; (80053f8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb8>)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	931d      	str	r3, [sp, #116]	; 0x74
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	931c      	str	r3, [sp, #112]	; 0x70
 8005332:	4668      	mov	r0, sp
 8005334:	f104 0310 	add.w	r3, r4, #16
 8005338:	2270      	movs	r2, #112	; 0x70
 800533a:	4619      	mov	r1, r3
 800533c:	f01a fbb6 	bl	801faac <memcpy>
 8005340:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005344:	f005 f935 	bl	800a5b2 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8005348:	e035      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
 800534a:	492c      	ldr	r1, [pc, #176]	; (80053fc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbbc>)
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7fa ff3f 	bl	80001d0 <strcmp>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d110      	bne.n	800537a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb3a>
 8005358:	4c29      	ldr	r4, [pc, #164]	; (8005400 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc0>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	9321      	str	r3, [sp, #132]	; 0x84
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	9320      	str	r3, [sp, #128]	; 0x80
 8005362:	4668      	mov	r0, sp
 8005364:	f104 0310 	add.w	r3, r4, #16
 8005368:	2280      	movs	r2, #128	; 0x80
 800536a:	4619      	mov	r1, r3
 800536c:	f01a fb9e 	bl	801faac <memcpy>
 8005370:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005374:	f004 ff6e 	bl	800a254 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8005378:	e01d      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
 800537a:	4922      	ldr	r1, [pc, #136]	; (8005404 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc4>)
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7fa ff27 	bl	80001d0 <strcmp>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d110      	bne.n	80053aa <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb6a>
 8005388:	4c1f      	ldr	r4, [pc, #124]	; (8005408 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc8>)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	9325      	str	r3, [sp, #148]	; 0x94
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	9324      	str	r3, [sp, #144]	; 0x90
 8005392:	4668      	mov	r0, sp
 8005394:	f104 0310 	add.w	r3, r4, #16
 8005398:	2290      	movs	r2, #144	; 0x90
 800539a:	4619      	mov	r1, r3
 800539c:	f01a fb86 	bl	801faac <memcpy>
 80053a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80053a4:	f005 f976 	bl	800a694 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80053a8:	e005      	b.n	80053b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else assert(0); // wavelet not in the list
 80053aa:	4b18      	ldr	r3, [pc, #96]	; (800540c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbcc>)
 80053ac:	4a18      	ldr	r2, [pc, #96]	; (8005410 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbd0>)
 80053ae:	2184      	movs	r1, #132	; 0x84
 80053b0:	4818      	ldr	r0, [pc, #96]	; (8005414 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbd4>)
 80053b2:	f018 fb8b 	bl	801dacc <__assert_func>
    }
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053bc:	080224c0 	.word	0x080224c0
 80053c0:	08025aa4 	.word	0x08025aa4
 80053c4:	080224c8 	.word	0x080224c8
 80053c8:	08025b34 	.word	0x08025b34
 80053cc:	080224d0 	.word	0x080224d0
 80053d0:	08025b54 	.word	0x08025b54
 80053d4:	080224d8 	.word	0x080224d8
 80053d8:	08025b84 	.word	0x08025b84
 80053dc:	080224e0 	.word	0x080224e0
 80053e0:	08025bc4 	.word	0x08025bc4
 80053e4:	080224e8 	.word	0x080224e8
 80053e8:	08025c14 	.word	0x08025c14
 80053ec:	080224f0 	.word	0x080224f0
 80053f0:	08025c74 	.word	0x08025c74
 80053f4:	080224f8 	.word	0x080224f8
 80053f8:	08025ce4 	.word	0x08025ce4
 80053fc:	08022500 	.word	0x08022500
 8005400:	08025d64 	.word	0x08025d64
 8005404:	08022508 	.word	0x08022508
 8005408:	08025df4 	.word	0x08025df4
 800540c:	08022510 	.word	0x08022510
 8005410:	08022514 	.word	0x08022514
 8005414:	0802257c 	.word	0x0802257c

08005418 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1Ev>:
      _Vector_base() = default;
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	f005 f9fc 	bl	800a820 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1Ev>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>:
      vector() = default;
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff ffeb 	bl	8005418 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1Ev>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4618      	mov	r0, r3
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>:

    static void calculate_entropy(const fvec &y, fvec &features)
 800544c:	b580      	push	{r7, lr}
 800544e:	ed2d 8b02 	vpush	{d8}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
    {
        fvec h;
 800545a:	f107 0310 	add.w	r3, r7, #16
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff ffe7 	bl	8005432 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        histo(y, 100, h, true);
 8005464:	f107 0210 	add.w	r2, r7, #16
 8005468:	2301      	movs	r3, #1
 800546a:	2164      	movs	r1, #100	; 0x64
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff f93a 	bl	80046e6 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>
        // entropy = -sum(prob * log(prob)
        float entropy = 0.0f;
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
        for (size_t i = 0; i < h.size(); i++) {
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	e035      	b.n	80054ea <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x9e>
            if (h[i] > 0.0f) {
 800547e:	f107 0310 	add.w	r3, r7, #16
 8005482:	69f9      	ldr	r1, [r7, #28]
 8005484:	4618      	mov	r0, r3
 8005486:	f004 fb1e 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800548a:	4603      	mov	r3, r0
 800548c:	edd3 7a00 	vldr	s15, [r3]
 8005490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005498:	bfcc      	ite	gt
 800549a:	2301      	movgt	r3, #1
 800549c:	2300      	movle	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01f      	beq.n	80054e4 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x98>
                entropy -= h[i] * log(h[i]);
 80054a4:	f107 0310 	add.w	r3, r7, #16
 80054a8:	69f9      	ldr	r1, [r7, #28]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f004 fb0b 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80054b0:	4603      	mov	r3, r0
 80054b2:	ed93 8a00 	vldr	s16, [r3]
 80054b6:	f107 0310 	add.w	r3, r7, #16
 80054ba:	69f9      	ldr	r1, [r7, #28]
 80054bc:	4618      	mov	r0, r3
 80054be:	f004 fb02 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80054c2:	4603      	mov	r3, r0
 80054c4:	edd3 7a00 	vldr	s15, [r3]
 80054c8:	eeb0 0a67 	vmov.f32	s0, s15
 80054cc:	f7fc fb4e 	bl	8001b6c <_ZSt3logf>
 80054d0:	eef0 7a40 	vmov.f32	s15, s0
 80054d4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80054d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80054dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054e0:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t i = 0; i < h.size(); i++) {
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	3301      	adds	r3, #1
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	f107 0310 	add.w	r3, r7, #16
 80054ee:	4618      	mov	r0, r3
 80054f0:	f004 f941 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80054f4:	4602      	mov	r2, r0
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	4293      	cmp	r3, r2
 80054fa:	bf34      	ite	cc
 80054fc:	2301      	movcc	r3, #1
 80054fe:	2300      	movcs	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1bb      	bne.n	800547e <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x32>
            }
        }
        features.push_back(entropy);
 8005506:	f107 030c 	add.w	r3, r7, #12
 800550a:	4619      	mov	r1, r3
 800550c:	6838      	ldr	r0, [r7, #0]
 800550e:	f005 f994 	bl	800a83a <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
    }
 8005512:	f107 0310 	add.w	r3, r7, #16
 8005516:	4618      	mov	r0, r3
 8005518:	f004 faba 	bl	8009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	ecbd 8b02 	vpop	{d8}
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>:

    static float get_percentile_from_sorted(const fvec &sorted, float percentile)
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	ed87 0a00 	vstr	s0, [r7]
    {
        // adding 0.5 is a trick to get rounding out of C flooring behavior during cast
        size_t index = (size_t) ((percentile * (sorted.size()-1)) + 0.5);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f004 f91e 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800553a:	4603      	mov	r3, r0
 800553c:	3b01      	subs	r3, #1
 800553e:	ee07 3a90 	vmov	s15, r3
 8005542:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005546:	edd7 7a00 	vldr	s15, [r7]
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	ee17 0a90 	vmov	r0, s15
 8005552:	f7fb f809 	bl	8000568 <__aeabi_f2d>
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	4b0c      	ldr	r3, [pc, #48]	; (800558c <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf+0x64>)
 800555c:	f7fa fea6 	bl	80002ac <__adddf3>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4610      	mov	r0, r2
 8005566:	4619      	mov	r1, r3
 8005568:	f7fb fb2e 	bl	8000bc8 <__aeabi_d2uiz>
 800556c:	4603      	mov	r3, r0
 800556e:	60fb      	str	r3, [r7, #12]
        return sorted[index];
 8005570:	68f9      	ldr	r1, [r7, #12]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f004 fb81 	bl	8009c7a <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005578:	4603      	mov	r3, r0
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	ee07 3a90 	vmov	s15, r3
    }
 8005580:	eeb0 0a67 	vmov.f32	s0, s15
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	3fe00000 	.word	0x3fe00000

08005590 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:

    static void calculate_statistics(const fvec &y, fvec &features, float mean)
 8005590:	b590      	push	{r4, r7, lr}
 8005592:	b097      	sub	sp, #92	; 0x5c
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        fvec sorted = y;
 800559e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f004 fb78 	bl	8009c9a <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1ERKS3_>
        std::sort(sorted.begin(), sorted.end());
 80055aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055ae:	4618      	mov	r0, r3
 80055b0:	f004 f9ff 	bl	80099b2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 80055b4:	4604      	mov	r4, r0
 80055b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055ba:	4618      	mov	r0, r3
 80055bc:	f004 fa09 	bl	80099d2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 80055c0:	4603      	mov	r3, r0
 80055c2:	4619      	mov	r1, r3
 80055c4:	4620      	mov	r0, r4
 80055c6:	f004 faf8 	bl	8009bba <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEvT_S9_>
        features.push_back(get_percentile_from_sorted(sorted,0.05));
 80055ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055ce:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80057d0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x240>
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff ffa8 	bl	8005528 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 80055d8:	eef0 7a40 	vmov.f32	s15, s0
 80055dc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80055e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055e4:	4619      	mov	r1, r3
 80055e6:	68b8      	ldr	r0, [r7, #8]
 80055e8:	f005 f94c 	bl	800a884 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.25));
 80055ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055f0:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff ff97 	bl	8005528 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 80055fa:	eef0 7a40 	vmov.f32	s15, s0
 80055fe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8005602:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005606:	4619      	mov	r1, r3
 8005608:	68b8      	ldr	r0, [r7, #8]
 800560a:	f005 f93b 	bl	800a884 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.75));
 800560e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005612:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff ff86 	bl	8005528 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800561c:	eef0 7a40 	vmov.f32	s15, s0
 8005620:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8005624:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005628:	4619      	mov	r1, r3
 800562a:	68b8      	ldr	r0, [r7, #8]
 800562c:	f005 f92a 	bl	800a884 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.95));
 8005630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005634:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80057d4 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x244>
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff ff75 	bl	8005528 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800563e:	eef0 7a40 	vmov.f32	s15, s0
 8005642:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8005646:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800564a:	4619      	mov	r1, r3
 800564c:	68b8      	ldr	r0, [r7, #8]
 800564e:	f005 f919 	bl	800a884 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.5));
 8005652:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005656:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff ff64 	bl	8005528 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 8005660:	eef0 7a40 	vmov.f32	s15, s0
 8005664:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8005668:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800566c:	4619      	mov	r1, r3
 800566e:	68b8      	ldr	r0, [r7, #8]
 8005670:	f005 f908 	bl	800a884 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>

        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f004 f87e 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800567a:	4604      	mov	r4, r0
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f004 faac 	bl	8009bda <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005682:	4603      	mov	r3, r0
 8005684:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005688:	4622      	mov	r2, r4
 800568a:	2101      	movs	r1, #1
 800568c:	f7fc f9f9 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 8005690:	f107 0014 	add.w	r0, r7, #20
 8005694:	2300      	movs	r3, #0
 8005696:	2201      	movs	r2, #1
 8005698:	2101      	movs	r1, #1
 800569a:	f7fc f9f2 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>

        features.push_back(mean);
 800569e:	1d3b      	adds	r3, r7, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	68b8      	ldr	r0, [r7, #8]
 80056a4:	f005 f8c9 	bl	800a83a <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::stdev(&x, &out) == EIDSP_OK)
 80056a8:	f107 0214 	add.w	r2, r7, #20
 80056ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056b0:	4611      	mov	r1, r2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fc fd28 	bl	8002108 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x14e>
            features.push_back(out.get_row_ptr(0)[0]);
 80056c8:	f107 0314 	add.w	r3, r7, #20
 80056cc:	2100      	movs	r1, #0
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fc fa18 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80056d4:	4603      	mov	r3, r0
 80056d6:	4619      	mov	r1, r3
 80056d8:	68b8      	ldr	r0, [r7, #8]
 80056da:	f005 f8ae 	bl	800a83a <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        features.push_back(numpy::variance(const_cast<float *>(y.data()), y.size()));
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f004 fa7b 	bl	8009bda <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80056e4:	4604      	mov	r4, r0
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f004 f845 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80056ec:	4603      	mov	r3, r0
 80056ee:	4619      	mov	r1, r3
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7fd fd6d 	bl	80031d0 <_ZN2ei5numpy8varianceEPfj>
 80056f6:	eef0 7a40 	vmov.f32	s15, s0
 80056fa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 80056fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005702:	4619      	mov	r1, r3
 8005704:	68b8      	ldr	r0, [r7, #8]
 8005706:	f005 f8bd 	bl	800a884 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        if (numpy::rms(&x, &out) == EIDSP_OK)
 800570a:	f107 0214 	add.w	r2, r7, #20
 800570e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005712:	4611      	mov	r1, r2
 8005714:	4618      	mov	r0, r3
 8005716:	f7fc fc7f 	bl	8002018 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1b0>
            features.push_back(out.get_row_ptr(0)[0]);
 800572a:	f107 0314 	add.w	r3, r7, #20
 800572e:	2100      	movs	r1, #0
 8005730:	4618      	mov	r0, r3
 8005732:	f7fc f9e7 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005736:	4603      	mov	r3, r0
 8005738:	4619      	mov	r1, r3
 800573a:	68b8      	ldr	r0, [r7, #8]
 800573c:	f005 f87d 	bl	800a83a <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::skew(&x, &out) == EIDSP_OK)
 8005740:	f107 0214 	add.w	r2, r7, #20
 8005744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005748:	4611      	mov	r1, r2
 800574a:	4618      	mov	r0, r3
 800574c:	f7fc fd34 	bl	80021b8 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1e6>
            features.push_back(out.get_row_ptr(0)[0]);
 8005760:	f107 0314 	add.w	r3, r7, #20
 8005764:	2100      	movs	r1, #0
 8005766:	4618      	mov	r0, r3
 8005768:	f7fc f9cc 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 800576c:	4603      	mov	r3, r0
 800576e:	4619      	mov	r1, r3
 8005770:	68b8      	ldr	r0, [r7, #8]
 8005772:	f005 f862 	bl	800a83a <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::kurtosis(&x, &out) == EIDSP_OK)
 8005776:	f107 0214 	add.w	r2, r7, #20
 800577a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800577e:	4611      	mov	r1, r2
 8005780:	4618      	mov	r0, r3
 8005782:	f7fc fdb5 	bl	80022f0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf0c      	ite	eq
 800578c:	2301      	moveq	r3, #1
 800578e:	2300      	movne	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x21c>
            features.push_back(out.get_row_ptr(0)[0]);
 8005796:	f107 0314 	add.w	r3, r7, #20
 800579a:	2100      	movs	r1, #0
 800579c:	4618      	mov	r0, r3
 800579e:	f7fc f9b1 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80057a2:	4603      	mov	r3, r0
 80057a4:	4619      	mov	r1, r3
 80057a6:	68b8      	ldr	r0, [r7, #8]
 80057a8:	f005 f847 	bl	800a83a <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
    }
 80057ac:	f107 0314 	add.w	r3, r7, #20
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fc f991 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80057b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fc f98c 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80057c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057c4:	4618      	mov	r0, r3
 80057c6:	f004 f963 	bl	8009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80057ca:	375c      	adds	r7, #92	; 0x5c
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd90      	pop	{r4, r7, pc}
 80057d0:	3d4ccccd 	.word	0x3d4ccccd
 80057d4:	3f733333 	.word	0x3f733333

080057d8 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:

    static void calculate_crossings(const fvec &y, fvec &features, float mean)
 80057d8:	b580      	push	{r7, lr}
 80057da:	ed2d 8b02 	vpush	{d8}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        size_t zc = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = 1; i < y.size(); i++) {
 80057ee:	2301      	movs	r3, #1
 80057f0:	623b      	str	r3, [r7, #32]
 80057f2:	e021      	b.n	8005838 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x60>
            if (y[i] * y[i - 1] < 0) {
 80057f4:	6a39      	ldr	r1, [r7, #32]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f004 fa3f 	bl	8009c7a <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80057fc:	4603      	mov	r3, r0
 80057fe:	ed93 8a00 	vldr	s16, [r3]
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	3b01      	subs	r3, #1
 8005806:	4619      	mov	r1, r3
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f004 fa36 	bl	8009c7a <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800580e:	4603      	mov	r3, r0
 8005810:	edd3 7a00 	vldr	s15, [r3]
 8005814:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005820:	bf4c      	ite	mi
 8005822:	2301      	movmi	r3, #1
 8005824:	2300      	movpl	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x5a>
                zc++;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	3301      	adds	r3, #1
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = 1; i < y.size(); i++) {
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	3301      	adds	r3, #1
 8005836:	623b      	str	r3, [r7, #32]
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f003 ff9c 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800583e:	4602      	mov	r2, r0
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	4293      	cmp	r3, r2
 8005844:	bf34      	ite	cc
 8005846:	2301      	movcc	r3, #1
 8005848:	2300      	movcs	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1d1      	bne.n	80057f4 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1c>
            }
        }
        features.push_back(zc / (float)y.size());
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f003 ff8b 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005860:	ee07 0a90 	vmov	s15, r0
 8005864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005868:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800586c:	edc7 7a04 	vstr	s15, [r7, #16]
 8005870:	f107 0310 	add.w	r3, r7, #16
 8005874:	4619      	mov	r1, r3
 8005876:	68b8      	ldr	r0, [r7, #8]
 8005878:	f005 f804 	bl	800a884 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>

        size_t mc = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i < y.size(); i++) {
 8005880:	2301      	movs	r3, #1
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	e029      	b.n	80058da <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x102>
            if ((y[i] - mean) * (y[i - 1] - mean) < 0) {
 8005886:	69b9      	ldr	r1, [r7, #24]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f004 f9f6 	bl	8009c7a <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800588e:	4603      	mov	r3, r0
 8005890:	ed93 7a00 	vldr	s14, [r3]
 8005894:	edd7 7a01 	vldr	s15, [r7, #4]
 8005898:	ee37 8a67 	vsub.f32	s16, s14, s15
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	3b01      	subs	r3, #1
 80058a0:	4619      	mov	r1, r3
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f004 f9e9 	bl	8009c7a <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80058a8:	4603      	mov	r3, r0
 80058aa:	ed93 7a00 	vldr	s14, [r3]
 80058ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80058b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058b6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80058ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c2:	bf4c      	ite	mi
 80058c4:	2301      	movmi	r3, #1
 80058c6:	2300      	movpl	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xfc>
                mc++;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	3301      	adds	r3, #1
 80058d2:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i < y.size(); i++) {
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	3301      	adds	r3, #1
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f003 ff4b 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80058e0:	4602      	mov	r2, r0
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bf34      	ite	cc
 80058e8:	2301      	movcc	r3, #1
 80058ea:	2300      	movcs	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1c9      	bne.n	8005886 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xae>
            }
        }
        features.push_back(mc / (float)y.size());
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	ee07 3a90 	vmov	s15, r3
 80058f8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f003 ff3a 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005902:	ee07 0a90 	vmov	s15, r0
 8005906:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800590a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800590e:	edc7 7a05 	vstr	s15, [r7, #20]
 8005912:	f107 0314 	add.w	r3, r7, #20
 8005916:	4619      	mov	r1, r3
 8005918:	68b8      	ldr	r0, [r7, #8]
 800591a:	f004 ffb3 	bl	800a884 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
    }
 800591e:	bf00      	nop
 8005920:	3728      	adds	r7, #40	; 0x28
 8005922:	46bd      	mov	sp, r7
 8005924:	ecbd 8b02 	vpop	{d8}
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>:

    static void
    dwt(const float *x, size_t nx, const float *h, const float *g, size_t nh, fvec &a, fvec &d)
 800592c:	b5b0      	push	{r4, r5, r7, lr}
 800592e:	b090      	sub	sp, #64	; 0x40
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
    {
        assert(nh <= 20 && nh > 0 && nx > 0);
 800593a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800593c:	2b14      	cmp	r3, #20
 800593e:	d805      	bhi.n	800594c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x20>
 8005940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x20>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d105      	bne.n	8005958 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c>
 800594c:	4b67      	ldr	r3, [pc, #412]	; (8005aec <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c0>)
 800594e:	4a68      	ldr	r2, [pc, #416]	; (8005af0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c4>)
 8005950:	21cb      	movs	r1, #203	; 0xcb
 8005952:	4868      	ldr	r0, [pc, #416]	; (8005af4 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c8>)
 8005954:	f018 f8ba 	bl	801dacc <__assert_func>
        size_t nx_padded = nx + nh * 2 - 2;
 8005958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800595a:	005a      	lsls	r2, r3, #1
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4413      	add	r3, r2
 8005960:	3b02      	subs	r3, #2
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
        fvec x_padded(nx_padded);
 8005964:	f107 0220 	add.w	r2, r7, #32
 8005968:	f107 0314 	add.w	r3, r7, #20
 800596c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800596e:	4618      	mov	r0, r3
 8005970:	f004 f874 	bl	8009a5c <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>

        // symmetric padding (default in PyWavelet)
        for (size_t i = 0; i < nh - 2; i++)
 8005974:	2300      	movs	r3, #0
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005978:	e012      	b.n	80059a0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x74>
            x_padded[i] = x[nh - 3 - i];
 800597a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800597c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	3b03      	subs	r3, #3
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	18d4      	adds	r4, r2, r3
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800598e:	4618      	mov	r0, r3
 8005990:	f004 f899 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005994:	4602      	mov	r2, r0
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nh - 2; i++)
 800599a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800599c:	3301      	adds	r3, #1
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a2:	3b02      	subs	r3, #2
 80059a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d3e7      	bcc.n	800597a <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x4e>
        for (size_t i = 0; i < nx; i++)
 80059aa:	2300      	movs	r3, #0
 80059ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ae:	e013      	b.n	80059d8 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xac>
            x_padded[i + nh - 2] = x[i];
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	18d4      	adds	r4, r2, r3
 80059b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059bc:	4413      	add	r3, r2
 80059be:	1e9a      	subs	r2, r3, #2
 80059c0:	f107 0314 	add.w	r3, r7, #20
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f004 f87d 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nx; i++)
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	3301      	adds	r3, #1
 80059d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d3e7      	bcc.n	80059b0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x84>
        for (size_t i = 0; i < nh; i++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
 80059e4:	e018      	b.n	8005a18 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xec>
            x_padded[i + nx + nh - 2] = x[nx - 1 - i];
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	18d4      	adds	r4, r2, r3
 80059f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	441a      	add	r2, r3
 80059fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fc:	4413      	add	r3, r2
 80059fe:	1e9a      	subs	r2, r3, #2
 8005a00:	f107 0314 	add.w	r3, r7, #20
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f004 f85d 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nh; i++)
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	3301      	adds	r3, #1
 8005a16:	637b      	str	r3, [r7, #52]	; 0x34
 8005a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d3e2      	bcc.n	80059e6 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xba>

        size_t ny = (nx + nh - 1) / 2;
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a24:	4413      	add	r3, r2
 8005a26:	3b01      	subs	r3, #1
 8005a28:	085b      	lsrs	r3, r3, #1
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
        a.resize(ny);
 8005a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a2e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005a30:	f004 fa6f 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        d.resize(ny);
 8005a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a36:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005a38:	f004 fa6b 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>

        // decimate and filter
        const float *xx = x_padded.data();
 8005a3c:	f107 0314 	add.w	r3, r7, #20
 8005a40:	4618      	mov	r0, r3
 8005a42:	f003 fea8 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005a46:	6278      	str	r0, [r7, #36]	; 0x24
        for (size_t i = 0; i < ny; i++) {
 8005a48:	2300      	movs	r3, #0
 8005a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a4c:	e026      	b.n	8005a9c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x170>
            a[i] = dot(xx + 2 * i, h, nh);
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a54:	18d5      	adds	r5, r2, r3
 8005a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005a5a:	f004 f834 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005a5e:	4604      	mov	r4, r0
 8005a60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4628      	mov	r0, r5
 8005a66:	f7fe fe0d 	bl	8004684 <_ZN2ei8spectral3dotEPKfS2_j>
 8005a6a:	eef0 7a40 	vmov.f32	s15, s0
 8005a6e:	edc4 7a00 	vstr	s15, [r4]
            d[i] = dot(xx + 2 * i, g, nh);
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a78:	18d5      	adds	r5, r2, r3
 8005a7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a7c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005a7e:	f004 f822 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005a82:	4604      	mov	r4, r0
 8005a84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f7fe fdfb 	bl	8004684 <_ZN2ei8spectral3dotEPKfS2_j>
 8005a8e:	eef0 7a40 	vmov.f32	s15, s0
 8005a92:	edc4 7a00 	vstr	s15, [r4]
        for (size_t i = 0; i < ny; i++) {
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	3301      	adds	r3, #1
 8005a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d3d4      	bcc.n	8005a4e <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x122>
        }

        numpy::underflow_handling(d.data(), d.size());
 8005aa4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005aa6:	f003 fe76 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005aaa:	4604      	mov	r4, r0
 8005aac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005aae:	f003 fe62 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005af8 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1cc>
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7fd fbc6 	bl	800324c <_ZN2ei5numpy18underflow_handlingEPfjf>
        numpy::underflow_handling(a.data(), a.size());
 8005ac0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005ac2:	f003 fe68 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005aca:	f003 fe54 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005af8 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1cc>
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f7fd fbb8 	bl	800324c <_ZN2ei5numpy18underflow_handlingEPfjf>
    }
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f003 ffd5 	bl	8009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005ae6:	3740      	adds	r7, #64	; 0x40
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bdb0      	pop	{r4, r5, r7, pc}
 8005aec:	080225f0 	.word	0x080225f0
 8005af0:	08022610 	.word	0x08022610
 8005af4:	0802257c 	.word	0x0802257c
 8005af8:	33d6bf95 	.word	0x33d6bf95

08005afc <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>:

    static void extract_features(fvec& y, fvec &features)
 8005afc:	b590      	push	{r4, r7, lr}
 8005afe:	b08d      	sub	sp, #52	; 0x34
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
    {
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f003 fe35 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f003 fe41 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f107 001c 	add.w	r0, r7, #28
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	f7fb ffb0 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 8005b22:	f107 000c 	add.w	r0, r7, #12
 8005b26:	2300      	movs	r3, #0
 8005b28:	2201      	movs	r2, #1
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	f7fb ffa9 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
        if (numpy::mean(&x, &out) != EIDSP_OK)
 8005b30:	f107 020c 	add.w	r2, r7, #12
 8005b34:	f107 031c 	add.w	r3, r7, #28
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fc faa8 	bl	8002090 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	bf14      	ite	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	2300      	moveq	r3, #0
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x60>
            assert(0);
 8005b50:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xac>)
 8005b52:	4a16      	ldr	r2, [pc, #88]	; (8005bac <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xb0>)
 8005b54:	21eb      	movs	r1, #235	; 0xeb
 8005b56:	4816      	ldr	r0, [pc, #88]	; (8005bb0 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xb4>)
 8005b58:	f017 ffb8 	bl	801dacc <__assert_func>
        float mean = out.get_row_ptr(0)[0];
 8005b5c:	f107 030c 	add.w	r3, r7, #12
 8005b60:	2100      	movs	r1, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fb ffce 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	62fb      	str	r3, [r7, #44]	; 0x2c

        calculate_entropy(y, features);
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff fc6b 	bl	800544c <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>
        calculate_crossings(y, features, mean);
 8005b76:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff fe2b 	bl	80057d8 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
        calculate_statistics(y, features, mean);
 8005b82:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff fd01 	bl	8005590 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
    }
 8005b8e:	f107 030c 	add.w	r3, r7, #12
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fb ffa0 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8005b98:	f107 031c 	add.w	r3, r7, #28
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fb ff9b 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8005ba2:	3734      	adds	r7, #52	; 0x34
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd90      	pop	{r4, r7, pc}
 8005ba8:	08022510 	.word	0x08022510
 8005bac:	0802269c 	.word	0x0802269c
 8005bb0:	0802257c 	.word	0x0802257c

08005bb4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static void
    wavedec_features(const float *x, int len, const char *wav, int level, fvec &features)
 8005bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb8:	b098      	sub	sp, #96	; 0x60
 8005bba:	af04      	add	r7, sp, #16
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
    {
        assert(level > 0 && level < 8);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	dd02      	ble.n	8005bd0 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1c>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b07      	cmp	r3, #7
 8005bce:	dd05      	ble.n	8005bdc <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x28>
 8005bd0:	4b6d      	ldr	r3, [pc, #436]	; (8005d88 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1d4>)
 8005bd2:	4a6e      	ldr	r2, [pc, #440]	; (8005d8c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1d8>)
 8005bd4:	21f6      	movs	r1, #246	; 0xf6
 8005bd6:	486e      	ldr	r0, [pc, #440]	; (8005d90 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1dc>)
 8005bd8:	f017 ff78 	bl	801dacc <__assert_func>

        fvec h;
 8005bdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff fc26 	bl	8005432 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        fvec g;
 8005be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fc21 	bl	8005432 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        find_filter(wav, h, g);
 8005bf0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005bf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fe fe20 	bl	8004840 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>

        features.clear();
 8005c00:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005c02:	f004 fe50 	bl	800a8a6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5clearEv>
        fvec a;
 8005c06:	f107 0320 	add.w	r3, r7, #32
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff fc11 	bl	8005432 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        fvec d;
 8005c10:	f107 0314 	add.w	r3, r7, #20
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fc0c 	bl	8005432 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        dwt(x, len, h.data(), g.data(), h.size(), a, d);
 8005c1a:	68bc      	ldr	r4, [r7, #8]
 8005c1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c20:	4618      	mov	r0, r3
 8005c22:	f003 fdb8 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005c26:	4605      	mov	r5, r0
 8005c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f003 fdb2 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005c32:	4606      	mov	r6, r0
 8005c34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f003 fd9c 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	f107 0314 	add.w	r3, r7, #20
 8005c44:	9302      	str	r3, [sp, #8]
 8005c46:	f107 0320 	add.w	r3, r7, #32
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	9200      	str	r2, [sp, #0]
 8005c4e:	4633      	mov	r3, r6
 8005c50:	462a      	mov	r2, r5
 8005c52:	4621      	mov	r1, r4
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff fe69 	bl	800592c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
        extract_features(d, features);
 8005c5a:	f107 0314 	add.w	r3, r7, #20
 8005c5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff ff4b 	bl	8005afc <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 1; l < level; l++) {
 8005c66:	2301      	movs	r3, #1
 8005c68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c6a:	e033      	b.n	8005cd4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x120>
            dwt(a.data(), a.size(), h.data(), g.data(), h.size(), a, d);
 8005c6c:	f107 0320 	add.w	r3, r7, #32
 8005c70:	4618      	mov	r0, r3
 8005c72:	f003 fd90 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005c76:	4604      	mov	r4, r0
 8005c78:	f107 0320 	add.w	r3, r7, #32
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f003 fd7a 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005c82:	4605      	mov	r5, r0
 8005c84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f003 fd84 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005c8e:	4606      	mov	r6, r0
 8005c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c94:	4618      	mov	r0, r3
 8005c96:	f003 fd7e 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005c9a:	4680      	mov	r8, r0
 8005c9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f003 fd68 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	f107 0314 	add.w	r3, r7, #20
 8005cac:	9302      	str	r3, [sp, #8]
 8005cae:	f107 0320 	add.w	r3, r7, #32
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	9200      	str	r2, [sp, #0]
 8005cb6:	4643      	mov	r3, r8
 8005cb8:	4632      	mov	r2, r6
 8005cba:	4629      	mov	r1, r5
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f7ff fe35 	bl	800592c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
            extract_features(d, features);
 8005cc2:	f107 0314 	add.w	r3, r7, #20
 8005cc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff ff17 	bl	8005afc <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>
        for (int l = 1; l < level; l++) {
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	dbc7      	blt.n	8005c6c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0xb8>
        }

        extract_features(a, features);
 8005cdc:	f107 0320 	add.w	r3, r7, #32
 8005ce0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff ff0a 	bl	8005afc <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 8005ce8:	2300      	movs	r3, #0
 8005cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cec:	e02c      	b.n	8005d48 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x194>
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 8005cee:	2300      	movs	r3, #0
 8005cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf2:	e023      	b.n	8005d3c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x188>
                std::swap(
                    features[l * NUM_FEATHERS_PER_COMP + i],
 8005cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	461a      	mov	r2, r3
 8005d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d02:	4413      	add	r3, r2
 8005d04:	4619      	mov	r1, r3
 8005d06:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005d08:	f003 fedd 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005d0c:	4604      	mov	r4, r0
                    features[(level - l) * NUM_FEATHERS_PER_COMP + i]);
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	4613      	mov	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	1a9b      	subs	r3, r3, r2
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d22:	4413      	add	r3, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005d28:	f003 fecd 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005d2c:	4603      	mov	r3, r0
                std::swap(
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4620      	mov	r0, r4
 8005d32:	f004 fdd1 	bl	800a8d8 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 8005d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d38:	3301      	adds	r3, #1
 8005d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3e:	2b0d      	cmp	r3, #13
 8005d40:	ddd8      	ble.n	8005cf4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x140>
        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 8005d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d44:	3301      	adds	r3, #1
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	0fda      	lsrs	r2, r3, #31
 8005d4c:	4413      	add	r3, r2
 8005d4e:	105b      	asrs	r3, r3, #1
 8005d50:	461a      	mov	r2, r3
 8005d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d54:	4293      	cmp	r3, r2
 8005d56:	ddca      	ble.n	8005cee <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x13a>
            }
        }
    }
 8005d58:	f107 0314 	add.w	r3, r7, #20
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f003 fe97 	bl	8009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005d62:	f107 0320 	add.w	r3, r7, #32
 8005d66:	4618      	mov	r0, r3
 8005d68:	f003 fe92 	bl	8009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d70:	4618      	mov	r0, r3
 8005d72:	f003 fe8d 	bl	8009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005d76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f003 fe88 	bl	8009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005d80:	3750      	adds	r7, #80	; 0x50
 8005d82:	46bd      	mov	sp, r7
 8005d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d88:	080226fc 	.word	0x080226fc
 8005d8c:	08022714 	.word	0x08022714
 8005d90:	0802257c 	.word	0x0802257c

08005d94 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static int dwt_features(const float *x, int len, const char *wav, int level, fvec &features)
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
    {
        assert(level <= 7);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b07      	cmp	r3, #7
 8005da6:	dd06      	ble.n	8005db6 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x22>
 8005da8:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x74>)
 8005daa:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x78>)
 8005dac:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005db0:	4817      	ldr	r0, [pc, #92]	; (8005e10 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x7c>)
 8005db2:	f017 fe8b 	bl	801dacc <__assert_func>

        assert(features.size() == 0); // make sure features is empty
 8005db6:	69b8      	ldr	r0, [r7, #24]
 8005db8:	f003 fcdd 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d006      	beq.n	8005dd0 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x3c>
 8005dc2:	4b14      	ldr	r3, [pc, #80]	; (8005e14 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x80>)
 8005dc4:	4a11      	ldr	r2, [pc, #68]	; (8005e0c <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x78>)
 8005dc6:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005dca:	4811      	ldr	r0, [pc, #68]	; (8005e10 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x7c>)
 8005dcc:	f017 fe7e 	bl	801dacc <__assert_func>
        features.reserve((level + 1) * NUM_FEATHERS_PER_COMP);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	4619      	mov	r1, r3
 8005de0:	69b8      	ldr	r0, [r7, #24]
 8005de2:	f004 fdaf 	bl	800a944 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj>

        wavedec_features(x, len, wav, level, features);
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7ff fedf 	bl	8005bb4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>

        return features.size();
 8005df6:	69b8      	ldr	r0, [r7, #24]
 8005df8:	f003 fcbd 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005dfc:	4603      	mov	r3, r0
    }
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	08022784 	.word	0x08022784
 8005e0c:	08022790 	.word	0x08022790
 8005e10:	0802257c 	.word	0x0802257c
 8005e14:	080227fc 	.word	0x080227fc

08005e18 <_ZN2ei8spectral7wavelet14check_min_sizeEii>:

    static bool check_min_size(int len, int level)
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
    {
        int min_size = 32 * (1 << level);
 8005e22:	2220      	movs	r2, #32
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	60fb      	str	r3, [r7, #12]
        return (len >= min_size);
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	bfac      	ite	ge
 8005e34:	2301      	movge	r3, #1
 8005e36:	2300      	movlt	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
    }
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

public:
    static int extract_wavelet_features(
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b094      	sub	sp, #80	; 0x50
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7fb fef7 	bl	8001c4c <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e64:	eeb0 0a67 	vmov.f32	s0, s15
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7fb ffff 	bl	8001e6c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8005e6e:	63b8      	str	r0, [r7, #56]	; 0x38
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x32>
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	e0b0      	b.n	8005fdc <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	4959      	ldr	r1, [pc, #356]	; (8005fe4 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19c>)
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fa f9a5 	bl	80001d0 <strcmp>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d117      	bne.n	8005ebc <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x74>
            if (config->filter_order) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d034      	beq.n	8005efe <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	eef0 0a67 	vmov.f32	s1, s15
 8005ea6:	ed97 0a00 	vldr	s0, [r7]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7fd fe44 	bl	8003b38 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8005eb0:	6338      	str	r0, [r7, #48]	; 0x30
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d022      	beq.n	8005efe <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	e08f      	b.n	8005fdc <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	4949      	ldr	r1, [pc, #292]	; (8005fe8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a0>)
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fa f984 	bl	80001d0 <strcmp>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d117      	bne.n	8005efe <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
            if (config->filter_order) {
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d013      	beq.n	8005efe <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	edd3 7a06 	vldr	s15, [r3, #24]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	eef0 0a67 	vmov.f32	s1, s15
 8005ee8:	ed97 0a00 	vldr	s0, [r7]
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7fd fe59 	bl	8003ba4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8005ef2:	6378      	str	r0, [r7, #52]	; 0x34
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
 8005efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efc:	e06e      	b.n	8005fdc <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>
                    config->filter_cutoff,
                    config->filter_order));
            }
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7fe fb88 	bl	8004614 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8005f04:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc8>
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0e:	e065      	b.n	8005fdc <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

        int out_idx = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	647b      	str	r3, [r7, #68]	; 0x44
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8005f14:	2300      	movs	r3, #0
 8005f16:	643b      	str	r3, [r7, #64]	; 0x40
 8005f18:	e05a      	b.n	8005fd0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x188>
            float *data_window = input_matrix->get_row_ptr(row);
 8005f1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7fb fdf1 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005f22:	62b8      	str	r0, [r7, #40]	; 0x28
            size_t data_size = input_matrix->cols;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24

            if (!check_min_size(data_size, config->wavelet_level))
 8005f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	4619      	mov	r1, r3
 8005f32:	4610      	mov	r0, r2
 8005f34:	f7ff ff70 	bl	8005e18 <_ZN2ei8spectral7wavelet14check_min_sizeEii>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f083 0301 	eor.w	r3, r3, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
                EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8005f44:	4b29      	ldr	r3, [pc, #164]	; (8005fec <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a4>)
 8005f46:	e049      	b.n	8005fdc <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

            fvec features;
 8005f48:	f107 0314 	add.w	r3, r7, #20
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff fa70 	bl	8005432 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
            size_t num_features = dwt_features(
 8005f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005f5c:	f107 0314 	add.w	r3, r7, #20
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	4603      	mov	r3, r0
 8005f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f66:	f7ff ff15 	bl	8005d94 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>
 8005f6a:	4603      	mov	r3, r0
                data_window,
                data_size,
                config->wavelet,
                config->wavelet_level,
                features);
 8005f6c:	623b      	str	r3, [r7, #32]

            assert(num_features == output_matrix->cols / input_matrix->rows);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7a:	6a3a      	ldr	r2, [r7, #32]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d006      	beq.n	8005f8e <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x146>
 8005f80:	4b1b      	ldr	r3, [pc, #108]	; (8005ff0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a8>)
 8005f82:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1ac>)
 8005f84:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005f88:	481b      	ldr	r0, [pc, #108]	; (8005ff8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b0>)
 8005f8a:	f017 fd9f 	bl	801dacc <__assert_func>
            for (size_t i = 0; i < num_features; i++) {
 8005f8e:	2300      	movs	r3, #0
 8005f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f92:	e011      	b.n	8005fb8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x170>
                output_matrix->buffer[out_idx++] = features[i];
 8005f94:	f107 0314 	add.w	r3, r7, #20
 8005f98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f003 fd93 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	6479      	str	r1, [r7, #68]	; 0x44
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	6802      	ldr	r2, [r0, #0]
 8005fb0:	601a      	str	r2, [r3, #0]
            for (size_t i = 0; i < num_features; i++) {
 8005fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d3e9      	bcc.n	8005f94 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14c>
            }
        }
 8005fc0:	f107 0314 	add.w	r3, r7, #20
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f003 fd63 	bl	8009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8005fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fcc:	3301      	adds	r3, #1
 8005fce:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d39f      	bcc.n	8005f1a <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd2>
        return EIDSP_OK;
 8005fda:	2300      	movs	r3, #0
    }
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3748      	adds	r7, #72	; 0x48
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	08022814 	.word	0x08022814
 8005fe8:	08022818 	.word	0x08022818
 8005fec:	fffffc11 	.word	0xfffffc11
 8005ff0:	08022820 	.word	0x08022820
 8005ff4:	0802285c 	.word	0x0802285c
 8005ff8:	0802257c 	.word	0x0802257c

08005ffc <_ZN2ei6signal18get_decimated_sizeEjj>:
        for (size_t ix = 0; ix < output_size; ix++) {
            output[ix] = filtered[ix * factor];
        }
    }

    static size_t get_decimated_size(size_t input_size, size_t factor)
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
    {
        return (input_size + factor - 1) / factor;
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	4413      	add	r3, r2
 800600c:	1e5a      	subs	r2, r3, #1
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
    }
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <_ZN2ei6signal7sosfiltC1EPKfS3_j>:
        const float *coeff; // 6 * num_sections coefficients
        float* zi;
        fvec zi_vec; // 2 * num_sections initial conditions
        size_t num_sections;

        sosfilt(const float *coeff_, const float *zi_, size_t num_sections_)
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
            : coeff(coeff_),
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	601a      	str	r2, [r3, #0]
              zi_vec(zi_, zi_ + (num_sections_ * 2)),
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f103 0008 	add.w	r0, r3, #8
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	441a      	add	r2, r3
 8006042:	f107 0314 	add.w	r3, r7, #20
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	f004 fcfc 	bl	800aa44 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1IPKfvEET_S7_RKS2_>
              num_sections(num_sections_)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	615a      	str	r2, [r3, #20]
        {
            zi = zi_vec.data();
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3308      	adds	r3, #8
 8006056:	4618      	mov	r0, r3
 8006058:	f003 fb9d 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 800605c:	4602      	mov	r2, r0
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	605a      	str	r2, [r3, #4]
        }
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <_ZN2ei6signal7sosfilt3runEPKfjPf>:
         * This is the counterpart of scipy.signal.sosfilt .
         * @param input Input signal
         * @param output Output signal. Can be the same as input for in place
         * @param x_size Minimum size of input and output signal
         */
        void run(const float *input, const size_t size, float* output)
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
        {
            assert(num_sections > 0);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d105      	bne.n	800608e <_ZN2ei6signal7sosfilt3runEPKfjPf+0x22>
 8006082:	4b21      	ldr	r3, [pc, #132]	; (8006108 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x9c>)
 8006084:	4a21      	ldr	r2, [pc, #132]	; (800610c <_ZN2ei6signal7sosfilt3runEPKfjPf+0xa0>)
 8006086:	216e      	movs	r1, #110	; 0x6e
 8006088:	4821      	ldr	r0, [pc, #132]	; (8006110 <_ZN2ei6signal7sosfilt3runEPKfjPf+0xa4>)
 800608a:	f017 fd1f 	bl	801dacc <__assert_func>

            iir2(input, output, size, coeff, coeff + 3, zi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6819      	ldr	r1, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	6852      	ldr	r2, [r2, #4]
 800609c:	9201      	str	r2, [sp, #4]
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	460b      	mov	r3, r1
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	68b8      	ldr	r0, [r7, #8]
 80060a8:	f000 f8cc 	bl	8006244 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>

            for (size_t sect = 1; sect < num_sections; sect++) {
 80060ac:	2301      	movs	r3, #1
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	e020      	b.n	80060f4 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x88>
                iir2(
                    output,
                    output,
                    size,
                    coeff + sect * 6,
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6819      	ldr	r1, [r3, #0]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4613      	mov	r3, r2
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	4413      	add	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
                iir2(
 80060c0:	18c8      	adds	r0, r1, r3
                    coeff + sect * 6 + 3,
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6819      	ldr	r1, [r3, #0]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4613      	mov	r3, r2
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	4413      	add	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	330c      	adds	r3, #12
                iir2(
 80060d2:	440b      	add	r3, r1
                    zi + sect * 2);
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	6851      	ldr	r1, [r2, #4]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	00d2      	lsls	r2, r2, #3
                iir2(
 80060dc:	440a      	add	r2, r1
 80060de:	9201      	str	r2, [sp, #4]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	4603      	mov	r3, r0
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6838      	ldr	r0, [r7, #0]
 80060ea:	f000 f8ab 	bl	8006244 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>
            for (size_t sect = 1; sect < num_sections; sect++) {
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	3301      	adds	r3, #1
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d3d9      	bcc.n	80060b2 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x46>
            }
        }
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	080228e0 	.word	0x080228e0
 800610c:	080228f4 	.word	0x080228f4
 8006110:	08022930 	.word	0x08022930

08006114 <_ZN2ei6signal7sosfilt4initEf>:

        void init(float x0)
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	ed87 0a00 	vstr	s0, [r7]
        {
            for (size_t sect = 0; sect < num_sections; sect++) {
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	e028      	b.n	8006178 <_ZN2ei6signal7sosfilt4initEf+0x64>
                zi[sect * 2] *= x0;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	ed93 7a00 	vldr	s14, [r3]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	edd7 7a00 	vldr	s15, [r7]
 8006142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006146:	edc3 7a00 	vstr	s15, [r3]
                zi[sect * 2 + 1] *= x0;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	3304      	adds	r3, #4
 8006154:	4413      	add	r3, r2
 8006156:	ed93 7a00 	vldr	s14, [r3]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	3304      	adds	r3, #4
 8006164:	4413      	add	r3, r2
 8006166:	edd7 7a00 	vldr	s15, [r7]
 800616a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616e:	edc3 7a00 	vstr	s15, [r3]
            for (size_t sect = 0; sect < num_sections; sect++) {
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3301      	adds	r3, #1
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	429a      	cmp	r2, r3
 8006180:	d3d1      	bcc.n	8006126 <_ZN2ei6signal7sosfilt4initEf+0x12>
            }
        }
 8006182:	bf00      	nop
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE>:
     * @param input Input signal
     * @param output Output signal
     * @param factor Decimation factor
     * @param sos Second-order section
     */
    static void decimate_simple(
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
        float *output,
        const size_t output_size,
        size_t factor,
        sosfilt &sos)
    {
        sos.init(input[0]);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	edd3 7a00 	vldr	s15, [r3]
 80061a4:	eeb0 0a67 	vmov.f32	s0, s15
 80061a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80061aa:	f7ff ffb3 	bl	8006114 <_ZN2ei6signal7sosfilt4initEf>

        fvec filtered(input_size);
 80061ae:	f107 021c 	add.w	r2, r7, #28
 80061b2:	f107 0310 	add.w	r3, r7, #16
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f003 fc4f 	bl	8009a5c <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
        sos.run(input, input_size, filtered.data());
 80061be:	f107 0310 	add.w	r3, r7, #16
 80061c2:	4618      	mov	r0, r3
 80061c4:	f003 fae7 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80061c8:	4603      	mov	r3, r0
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80061d0:	f7ff ff4c 	bl	800606c <_ZN2ei6signal7sosfilt3runEPKfjPf>

        size_t expected_size = get_decimated_size(input_size, factor);
 80061d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061d6:	68b8      	ldr	r0, [r7, #8]
 80061d8:	f7ff ff10 	bl	8005ffc <_ZN2ei6signal18get_decimated_sizeEjj>
 80061dc:	6238      	str	r0, [r7, #32]
        assert(output_size >= expected_size);
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d205      	bcs.n	80061f2 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x62>
 80061e6:	4b14      	ldr	r3, [pc, #80]	; (8006238 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xa8>)
 80061e8:	4a14      	ldr	r2, [pc, #80]	; (800623c <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xac>)
 80061ea:	219c      	movs	r1, #156	; 0x9c
 80061ec:	4814      	ldr	r0, [pc, #80]	; (8006240 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xb0>)
 80061ee:	f017 fc6d 	bl	801dacc <__assert_func>

        for (size_t ix = 0; ix < expected_size; ix++) {
 80061f2:	2300      	movs	r3, #0
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
 80061f6:	e013      	b.n	8006220 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x90>
            output[ix] = filtered[ix * factor];
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fc:	fb03 f202 	mul.w	r2, r3, r2
 8006200:	f107 0310 	add.w	r3, r7, #16
 8006204:	4611      	mov	r1, r2
 8006206:	4618      	mov	r0, r3
 8006208:	f003 fc5d 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800620c:	4601      	mov	r1, r0
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	4413      	add	r3, r2
 8006216:	680a      	ldr	r2, [r1, #0]
 8006218:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < expected_size; ix++) {
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	3301      	adds	r3, #1
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
 8006220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	429a      	cmp	r2, r3
 8006226:	d3e7      	bcc.n	80061f8 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x68>
        }
    }
 8006228:	f107 0310 	add.w	r3, r7, #16
 800622c:	4618      	mov	r0, r3
 800622e:	f003 fc2f 	bl	8009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8006232:	3728      	adds	r7, #40	; 0x28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	080229a4 	.word	0x080229a4
 800623c:	080229c4 	.word	0x080229c4
 8006240:	08022930 	.word	0x08022930

08006244 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>:
            }
            d[jx - 1] = b[jx] * xx - a[jx] * y[ix];
        }
    }

    static void iir2(const float *x, float *y, size_t n, const float *b, const float *a, float *d)
 8006244:	b480      	push	{r7}
 8006246:	b089      	sub	sp, #36	; 0x24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
        /*
         a[0]*y[n] = b[0] * x[n]               + d[0][n-1]
           d[0][n] = b[1] * x[n] - a[1] * y[n] + d[1][n-1]
           d[1][n] = b[2] * x[n] - a[2] * y[n]
         */
        const float one_over_a0 = 1.0f / a[0];
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	ed93 7a00 	vldr	s14, [r3]
 8006258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006260:	edc7 7a06 	vstr	s15, [r7, #24]
        for (size_t ix = 0; ix < n; ix++) {
 8006264:	2300      	movs	r3, #0
 8006266:	61fb      	str	r3, [r7, #28]
 8006268:	e063      	b.n	8006332 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0xee>
            const float xx = x[ix];
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4413      	add	r3, r2
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	617b      	str	r3, [r7, #20]
            y[ix] = b[0] * xx + d[0];
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	ed93 7a00 	vldr	s14, [r3]
 800627c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006280:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	edd3 7a00 	vldr	s15, [r3]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	4413      	add	r3, r2
 8006292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006296:	edc3 7a00 	vstr	s15, [r3]
            y[ix] *= one_over_a0;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	4413      	add	r3, r2
 80062a2:	ed93 7a00 	vldr	s14, [r3]
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	4413      	add	r3, r2
 80062ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80062b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b6:	edc3 7a00 	vstr	s15, [r3]
            d[0] = b[1] * xx - a[1] * y[ix] + d[1];
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	3304      	adds	r3, #4
 80062be:	ed93 7a00 	vldr	s14, [r3]
 80062c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80062c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	3304      	adds	r3, #4
 80062ce:	edd3 6a00 	vldr	s13, [r3]
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	4413      	add	r3, r2
 80062da:	edd3 7a00 	vldr	s15, [r3]
 80062de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	3304      	adds	r3, #4
 80062ea:	edd3 7a00 	vldr	s15, [r3]
 80062ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	edc3 7a00 	vstr	s15, [r3]
            d[1] = b[2] * xx - a[2] * y[ix];
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	3308      	adds	r3, #8
 80062fc:	ed93 7a00 	vldr	s14, [r3]
 8006300:	edd7 7a05 	vldr	s15, [r7, #20]
 8006304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	3308      	adds	r3, #8
 800630c:	edd3 6a00 	vldr	s13, [r3]
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	4413      	add	r3, r2
 8006318:	edd3 7a00 	vldr	s15, [r3]
 800631c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	3304      	adds	r3, #4
 8006324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006328:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < n; ix++) {
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	3301      	adds	r3, #1
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	429a      	cmp	r2, r3
 8006338:	d397      	bcc.n	800626a <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0x26>
        }
    }
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	3724      	adds	r7, #36	; 0x24
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8006348:	b5b0      	push	{r4, r5, r7, lr}
 800634a:	b0b0      	sub	sp, #192	; 0xc0
 800634c:	af02      	add	r7, sp, #8
 800634e:	6178      	str	r0, [r7, #20]
 8006350:	6139      	str	r1, [r7, #16]
 8006352:	ed87 0a03 	vstr	s0, [r7, #12]
 8006356:	4611      	mov	r1, r2
 8006358:	edc7 0a01 	vstr	s1, [r7, #4]
 800635c:	461a      	mov	r2, r3
 800635e:	ed87 1a00 	vstr	s2, [r7]
 8006362:	460b      	mov	r3, r1
 8006364:	72fb      	strb	r3, [r7, #11]
 8006366:	4613      	mov	r3, r2
 8006368:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	429a      	cmp	r2, r3
 8006374:	d001      	beq.n	800637a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006376:	4cbe      	ldr	r4, [pc, #760]	; (8006670 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006378:	e227      	b.n	80067ca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	689d      	ldr	r5, [r3, #8]
 800637e:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8006382:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	461a      	mov	r2, r3
 800638a:	2001      	movs	r0, #1
 800638c:	f000 fa22 	bl	80067d4 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8006390:	4603      	mov	r3, r0
 8006392:	429d      	cmp	r5, r3
 8006394:	bf14      	ite	ne
 8006396:	2301      	movne	r3, #1
 8006398:	2300      	moveq	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80063a0:	4cb3      	ldr	r4, [pc, #716]	; (8006670 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80063a2:	e212      	b.n	80067ca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (edges_matrix_in->cols != 1) {
 80063a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d001      	beq.n	80063b2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80063ae:	4cb0      	ldr	r4, [pc, #704]	; (8006670 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80063b0:	e20b      	b.n	80067ca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        int ret;

        size_t axes = input_matrix->rows;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        EI_TRY(processing::subtract_mean(input_matrix) );
 80063ba:	6938      	ldr	r0, [r7, #16]
 80063bc:	f7fe f92a 	bl	8004614 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 80063c0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80063c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8a>
 80063cc:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80063d0:	e1fb      	b.n	80067ca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>

        // apply filter
        if (filter_type == filter_lowpass) {
 80063d2:	7afb      	ldrb	r3, [r7, #11]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d110      	bne.n	80063fa <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb2>
            ret = spectral::processing::butterworth_lowpass_filter(
 80063d8:	7abb      	ldrb	r3, [r7, #10]
 80063da:	4619      	mov	r1, r3
 80063dc:	edd7 0a01 	vldr	s1, [r7, #4]
 80063e0:	ed97 0a03 	vldr	s0, [r7, #12]
 80063e4:	6938      	ldr	r0, [r7, #16]
 80063e6:	f7fd fba7 	bl	8003b38 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 80063ea:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 80063ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d015      	beq.n	8006422 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80063f6:	4c9e      	ldr	r4, [pc, #632]	; (8006670 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80063f8:	e1e7      	b.n	80067ca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }
        else if (filter_type == filter_highpass) {
 80063fa:	7afb      	ldrb	r3, [r7, #11]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d110      	bne.n	8006422 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
            ret = spectral::processing::butterworth_highpass_filter(
 8006400:	7abb      	ldrb	r3, [r7, #10]
 8006402:	4619      	mov	r1, r3
 8006404:	edd7 0a01 	vldr	s1, [r7, #4]
 8006408:	ed97 0a03 	vldr	s0, [r7, #12]
 800640c:	6938      	ldr	r0, [r7, #16]
 800640e:	f7fd fbc9 	bl	8003ba4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8006412:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8006416:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800641e:	4c94      	ldr	r4, [pc, #592]	; (8006670 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006420:	e1d3      	b.n	80067ca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8006422:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8006426:	2300      	movs	r3, #0
 8006428:	2201      	movs	r2, #1
 800642a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800642e:	f7fb fb28 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8006432:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf6>
 800643a:	4c8e      	ldr	r4, [pc, #568]	; (8006674 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800643c:	e1c0      	b.n	80067c0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        ret = numpy::rms(input_matrix, &rms_matrix);
 800643e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006442:	4619      	mov	r1, r3
 8006444:	6938      	ldr	r0, [r7, #16]
 8006446:	f7fb fde7 	bl	8002018 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800644a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret != EIDSP_OK) {
 800644e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x112>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006456:	4c86      	ldr	r4, [pc, #536]	; (8006670 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006458:	e1b2      	b.n	80067c0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 800645a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	461a      	mov	r2, r3
 8006462:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8006466:	2300      	movs	r3, #0
 8006468:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800646c:	f7fb fb09 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 8006470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 8006476:	4c7f      	ldr	r4, [pc, #508]	; (8006674 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8006478:	e19d      	b.n	80067b6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 800647a:	2300      	movs	r3, #0
 800647c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006480:	e191      	b.n	80067a6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x45e>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	689d      	ldr	r5, [r3, #8]
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006492:	fb01 f303 	mul.w	r3, r1, r3
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800649e:	462a      	mov	r2, r5
 80064a0:	2101      	movs	r1, #1
 80064a2:	f7fb faee 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 80064a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x16a>
 80064ac:	4c71      	ldr	r4, [pc, #452]	; (8006674 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80064ae:	2500      	movs	r5, #0
 80064b0:	e16d      	b.n	800678e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x446>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 80064b2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3301      	adds	r3, #1
 80064bc:	461a      	mov	r2, r3
 80064be:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80064c2:	2300      	movs	r3, #0
 80064c4:	2101      	movs	r1, #1
 80064c6:	f7fb fadc 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 80064ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x18e>
 80064d0:	4c68      	ldr	r4, [pc, #416]	; (8006674 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80064d2:	2500      	movs	r5, #0
 80064d4:	e151      	b.n	800677a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 80064d6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80064d8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80064da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064dc:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80064de:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	462b      	mov	r3, r5
 80064e6:	f7fb ff87 	bl	80023f8 <_ZN2ei5numpy4rfftEPKfjPfjj>
 80064ea:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (ret != EIDSP_OK) {
 80064ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1b4>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80064f6:	4c5e      	ldr	r4, [pc, #376]	; (8006670 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80064f8:	2500      	movs	r5, #0
 80064fa:	e13e      	b.n	800677a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 80064fc:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006500:	ee07 3a90 	vmov	s15, r3
 8006504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006508:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800650c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006510:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006514:	eeb0 0a47 	vmov.f32	s0, s14
 8006518:	4618      	mov	r0, r3
 800651a:	f7fb fca7 	bl	8001e6c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 800651e:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8006522:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8006526:	2300      	movs	r3, #0
 8006528:	2202      	movs	r2, #2
 800652a:	f7fb faaa 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 800652e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1f2>
 8006534:	4c4f      	ldr	r4, [pc, #316]	; (8006674 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8006536:	2500      	movs	r5, #0
 8006538:	e115      	b.n	8006766 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 800653a:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 800653e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006546:	edd7 0a00 	vldr	s1, [r7]
 800654a:	ed97 0a03 	vldr	s0, [r7, #12]
 800654e:	4618      	mov	r0, r3
 8006550:	f7fd fc66 	bl	8003e20 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8006554:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 8006558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x21e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006560:	4c43      	ldr	r4, [pc, #268]	; (8006670 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006562:	2500      	movs	r5, #0
 8006564:	e0ff      	b.n	8006766 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 8006566:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800656a:	085b      	lsrs	r3, r3, #1
 800656c:	b29b      	uxth	r3, r3
 800656e:	3301      	adds	r3, #1
 8006570:	461a      	mov	r2, r3
 8006572:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8006576:	2300      	movs	r3, #0
 8006578:	2101      	movs	r1, #1
 800657a:	f7fb fa82 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x242>
 8006584:	4c3b      	ldr	r4, [pc, #236]	; (8006674 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8006586:	2500      	movs	r5, #0
 8006588:	e0e3      	b.n	8006752 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 800658a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	b29b      	uxth	r3, r3
 8006592:	3301      	adds	r3, #1
 8006594:	461a      	mov	r2, r3
 8006596:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800659a:	2300      	movs	r3, #0
 800659c:	2101      	movs	r1, #1
 800659e:	f7fb fa70 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d102      	bne.n	80065ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x266>
 80065a8:	4c32      	ldr	r4, [pc, #200]	; (8006674 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80065aa:	2500      	movs	r5, #0
 80065ac:	e0c7      	b.n	800673e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
            ret = spectral::processing::periodogram(&axis_matrix,
 80065ae:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80065b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80065b6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80065ba:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80065be:	ed97 0a03 	vldr	s0, [r7, #12]
 80065c2:	f7fd fe7b 	bl	80042bc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 80065c6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 80065ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x292>
                EIDSP_ERR(ret);
 80065d2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80065d6:	2500      	movs	r5, #0
 80065d8:	e0b1      	b.n	800673e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 80065da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	1e59      	subs	r1, r3, #1
 80065e2:	f107 0018 	add.w	r0, r7, #24
 80065e6:	2300      	movs	r3, #0
 80065e8:	2201      	movs	r2, #1
 80065ea:	f7fb fa4a 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2b2>
 80065f4:	4c1f      	ldr	r4, [pc, #124]	; (8006674 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80065f6:	2500      	movs	r5, #0
 80065f8:	e097      	b.n	800672a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
            ret = spectral::processing::spectral_power_edges(
 80065fa:	f107 0318 	add.w	r3, r7, #24
 80065fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006602:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8006606:	ed97 0a03 	vldr	s0, [r7, #12]
 800660a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800660e:	f7fd fd49 	bl	80040a4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 8006612:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 8006616:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2de>
                EIDSP_ERR(ret);
 800661e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8006622:	2500      	movs	r5, #0
 8006624:	e081      	b.n	800672a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006632:	fb01 f303 	mul.w	r3, r1, r3
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            size_t fx = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            features_row[fx++] = rms_matrix.buffer[row];
 8006644:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	441a      	add	r2, r3
 8006650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006654:	1c59      	adds	r1, r3, #1
 8006656:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006660:	440b      	add	r3, r1
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8006666:	2300      	movs	r3, #0
 8006668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800666c:	e030      	b.n	80066d0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x388>
 800666e:	bf00      	nop
 8006670:	fffffc14 	.word	0xfffffc14
 8006674:	fffffc16 	.word	0xfffffc16
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 8006678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800667a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	441a      	add	r2, r3
 8006688:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800668c:	1c59      	adds	r1, r3, #1
 800668e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006698:	440b      	add	r3, r1
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 800669e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80066a6:	fb01 f303 	mul.w	r3, r1, r3
 80066aa:	3301      	adds	r3, #1
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	441a      	add	r2, r3
 80066b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066b4:	1c59      	adds	r1, r3, #1
 80066b6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80066c0:	440b      	add	r3, r1
 80066c2:	6812      	ldr	r2, [r2, #0]
 80066c4:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 80066c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066ca:	3301      	adds	r3, #1
 80066cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d3ce      	bcc.n	8006678 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x330>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 80066da:	2300      	movs	r3, #0
 80066dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066e0:	e01d      	b.n	800671e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3d6>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	ed93 7a00 	vldr	s14, [r3]
 80066f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006706:	4413      	add	r3, r2
 8006708:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800670c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006710:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8006714:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006718:	3301      	adds	r3, #1
 800671a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006724:	429a      	cmp	r2, r3
 8006726:	d3dc      	bcc.n	80066e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39a>
            }
        }
 8006728:	2501      	movs	r5, #1
 800672a:	f107 0318 	add.w	r3, r7, #24
 800672e:	4618      	mov	r0, r3
 8006730:	f7fb f9d2 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8006734:	2d01      	cmp	r5, #1
 8006736:	d101      	bne.n	800673c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f4>
 8006738:	2501      	movs	r5, #1
 800673a:	e000      	b.n	800673e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
 800673c:	2500      	movs	r5, #0
 800673e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006742:	4618      	mov	r0, r3
 8006744:	f7fb f9c8 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8006748:	2d01      	cmp	r5, #1
 800674a:	d101      	bne.n	8006750 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x408>
 800674c:	2501      	movs	r5, #1
 800674e:	e000      	b.n	8006752 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
 8006750:	2500      	movs	r5, #0
 8006752:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006756:	4618      	mov	r0, r3
 8006758:	f7fb f9be 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 800675c:	2d01      	cmp	r5, #1
 800675e:	d101      	bne.n	8006764 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41c>
 8006760:	2501      	movs	r5, #1
 8006762:	e000      	b.n	8006766 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
 8006764:	2500      	movs	r5, #0
 8006766:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800676a:	4618      	mov	r0, r3
 800676c:	f7fb f9b4 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8006770:	2d01      	cmp	r5, #1
 8006772:	d101      	bne.n	8006778 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x430>
 8006774:	2501      	movs	r5, #1
 8006776:	e000      	b.n	800677a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
 8006778:	2500      	movs	r5, #0
 800677a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800677e:	4618      	mov	r0, r3
 8006780:	f7fb f9aa 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8006784:	2d01      	cmp	r5, #1
 8006786:	d101      	bne.n	800678c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x444>
 8006788:	2501      	movs	r5, #1
 800678a:	e000      	b.n	800678e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x446>
 800678c:	2500      	movs	r5, #0
 800678e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006792:	4618      	mov	r0, r3
 8006794:	f7fb f9a0 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8006798:	2d01      	cmp	r5, #1
 800679a:	d10c      	bne.n	80067b6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 800679c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067a0:	3301      	adds	r3, #1
 80067a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067ae:	429a      	cmp	r2, r3
 80067b0:	f4ff ae67 	bcc.w	8006482 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x13a>

        return EIDSP_OK;
 80067b4:	2400      	movs	r4, #0
    }
 80067b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fb f98c 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80067c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fb f987 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80067ca:	4623      	mov	r3, r4
 80067cc:	4618      	mov	r0, r3
 80067ce:	37b8      	adds	r7, #184	; 0xb8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bdb0      	pop	{r4, r5, r7, pc}

080067d4 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	3301      	adds	r3, #1
 80067f0:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4413      	add	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4413      	add	r3, r2
 8006808:	3b01      	subs	r3, #1
 800680a:	617b      	str	r3, [r7, #20]
        }
        return count;
 800680c:	697b      	ldr	r3, [r7, #20]
    }
 800680e:	4618      	mov	r0, r3
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
	...

0800681c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v1(
 800681c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8006820:	b0b3      	sub	sp, #204	; 0xcc
 8006822:	af04      	add	r7, sp, #16
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
 800682a:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_ptr,
        const float sampling_freq)
    {
        // scale the signal
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	edd3 7a03 	vldr	s15, [r3, #12]
 8006834:	eeb0 0a67 	vmov.f32	s0, s15
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f7fb fb17 	bl	8001e6c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 800683e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8006842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x3e>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 800684a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800684e:	488c      	ldr	r0, [pc, #560]	; (8006a80 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x264>)
 8006850:	f011 fbd1 	bl	8017ff6 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8006854:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8006858:	e10b      	b.n	8006a72 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // transpose the matrix so we have one row per axis (nifty!)
        ret = numpy::transpose(input_matrix);
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7fb fa85 	bl	8001d6a <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8006860:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8006864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x60>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 800686c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006870:	4884      	ldr	r0, [pc, #528]	; (8006a84 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x268>)
 8006872:	f011 fbc0 	bl	8017ff6 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8006876:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800687a:	e0fa      	b.n	8006a72 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // the spectral edges that we want to calculate
        matrix_t edges_matrix_in(64, 1);
 800687c:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8006880:	2300      	movs	r3, #0
 8006882:	2201      	movs	r2, #1
 8006884:	2140      	movs	r1, #64	; 0x40
 8006886:	f7fb f8fc 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
        size_t edge_matrix_ix = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        char spectral_str[128] = { 0 };
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	f107 0318 	add.w	r3, r7, #24
 8006898:	227c      	movs	r2, #124	; 0x7c
 800689a:	2100      	movs	r1, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f019 f821 	bl	801f8e4 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7f9 fcf2 	bl	8000290 <strlen>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b7f      	cmp	r3, #127	; 0x7f
 80068b0:	d901      	bls.n	80068b6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x9a>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 80068b2:	4c75      	ldr	r4, [pc, #468]	; (8006a88 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x26c>)
 80068b4:	e0d8      	b.n	8006a68 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }
        memcpy(
            spectral_str,
            config_ptr->spectral_power_edges,
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
        memcpy(
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	4618      	mov	r0, r3
 80068c0:	f7f9 fce6 	bl	8000290 <strlen>
 80068c4:	4602      	mov	r2, r0
 80068c6:	f107 0314 	add.w	r3, r7, #20
 80068ca:	4621      	mov	r1, r4
 80068cc:	4618      	mov	r0, r3
 80068ce:	f019 f8ed 	bl	801faac <memcpy>
            strlen(config_ptr->spectral_power_edges));

        // convert spectral_power_edges (string) into float array
        char *spectral_ptr = spectral_str;
 80068d2:	f107 0314 	add.w	r3, r7, #20
 80068d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 80068da:	e03e      	b.n	800695a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
            while ((*spectral_ptr) == ' ') {
                spectral_ptr++;
 80068dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068e0:	3301      	adds	r3, #1
 80068e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            while ((*spectral_ptr) == ' ') {
 80068e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d0f5      	beq.n	80068dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc0>
            }

            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 80068f0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80068f4:	f017 f908 	bl	801db08 <atof>
 80068f8:	ec59 8b10 	vmov	r8, r9, d0
 80068fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006900:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006904:	1c59      	adds	r1, r3, #1
 8006906:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	18d4      	adds	r4, r2, r3
 800690e:	4640      	mov	r0, r8
 8006910:	4649      	mov	r1, r9
 8006912:	f7fa f979 	bl	8000c08 <__aeabi_d2f>
 8006916:	4603      	mov	r3, r0
 8006918:	6023      	str	r3, [r4, #0]

            // find next (spectral) delimiter (or '\0' character)
            while ((*spectral_ptr != ',')) {
 800691a:	e009      	b.n	8006930 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x114>
                spectral_ptr++;
 800691c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006920:	3301      	adds	r3, #1
 8006922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (*spectral_ptr == '\0')
 8006926:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d005      	beq.n	800693c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x120>
            while ((*spectral_ptr != ',')) {
 8006930:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b2c      	cmp	r3, #44	; 0x2c
 8006938:	d1f0      	bne.n	800691c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
 800693a:	e000      	b.n	800693e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x122>
                    break;
 800693c:	bf00      	nop
            }

            if (*spectral_ptr == '\0') {
 800693e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x134>
                spectral_ptr = NULL;
 8006948:	2300      	movs	r3, #0
 800694a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800694e:	e004      	b.n	800695a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
            }
            else {
                spectral_ptr++;
 8006950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006954:	3301      	adds	r3, #1
 8006956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 800695a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1c1      	bne.n	80068e6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
            }
        }
        edges_matrix_in.rows = edge_matrix_ix;
 8006962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006966:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        // calculate how much room we need for the output matrix
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
            true,
            config_ptr->spectral_peaks_count,
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 800696e:	4619      	mov	r1, r3
            edges_matrix_in.rows);
 8006970:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 8006974:	461a      	mov	r2, r3
 8006976:	2001      	movs	r0, #1
 8006978:	f7ff ff2c 	bl	80067d4 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 800697c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
        if (output_matrix->cols * output_matrix->rows !=
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	6852      	ldr	r2, [r2, #4]
 8006988:	fb03 f202 	mul.w	r2, r3, r2
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	4619      	mov	r1, r3
 8006992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006996:	fb01 f303 	mul.w	r3, r1, r3
        if (output_matrix->cols * output_matrix->rows !=
 800699a:	429a      	cmp	r2, r3
 800699c:	d001      	beq.n	80069a2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x186>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800699e:	4c3b      	ldr	r4, [pc, #236]	; (8006a8c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x270>)
 80069a0:	e062      	b.n	8006a68 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        output_matrix->cols = output_matrix_cols;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80069a8:	609a      	str	r2, [r3, #8]
        output_matrix->rows = config_ptr->axes;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	461a      	mov	r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	605a      	str	r2, [r3, #4]

        spectral::filter_t filter_type;
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	4935      	ldr	r1, [pc, #212]	; (8006a90 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x274>)
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7f9 fc08 	bl	80001d0 <strcmp>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b2>
            filter_type = spectral::filter_lowpass;
 80069c6:	2301      	movs	r3, #1
 80069c8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80069cc:	e00f      	b.n	80069ee <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	4930      	ldr	r1, [pc, #192]	; (8006a94 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x278>)
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7f9 fbfb 	bl	80001d0 <strcmp>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d103      	bne.n	80069e8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>
            filter_type = spectral::filter_highpass;
 80069e0:	2302      	movs	r3, #2
 80069e2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80069e6:	e002      	b.n	80069ee <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else {
            filter_type = spectral::filter_none;
 80069e8:	2300      	movs	r3, #0
 80069ea:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        ret = spectral::feature::spectral_analysis(
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	edd3 7a06 	vldr	s15, [r3, #24]
            output_matrix,
            input_matrix,
            sampling_freq,
            filter_type,
            config_ptr->filter_cutoff,
            config_ptr->filter_order,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69db      	ldr	r3, [r3, #28]
        ret = spectral::feature::spectral_analysis(
 80069f8:	b2dc      	uxtb	r4, r3
            config_ptr->fft_length,
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        ret = spectral::feature::spectral_analysis(
 80069fe:	b29b      	uxth	r3, r3
            config_ptr->spectral_peaks_count,
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6a92      	ldr	r2, [r2, #40]	; 0x28
        ret = spectral::feature::spectral_analysis(
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8006a0c:	f897 00af 	ldrb.w	r0, [r7, #175]	; 0xaf
 8006a10:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006a14:	9102      	str	r1, [sp, #8]
 8006a16:	9201      	str	r2, [sp, #4]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	eeb0 1a47 	vmov.f32	s2, s14
 8006a1e:	4623      	mov	r3, r4
 8006a20:	eef0 0a67 	vmov.f32	s1, s15
 8006a24:	4602      	mov	r2, r0
 8006a26:	ed97 0a00 	vldr	s0, [r7]
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	68b8      	ldr	r0, [r7, #8]
 8006a2e:	f7ff fc8b 	bl	8006348 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 8006a32:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            config_ptr->spectral_peaks_threshold,
            &edges_matrix_in);
        if (ret != EIDSP_OK) {
 8006a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x232>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 8006a3e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006a42:	4815      	ldr	r0, [pc, #84]	; (8006a98 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x27c>)
 8006a44:	f011 fad7 	bl	8017ff6 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8006a48:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8006a4c:	e00c      	b.n	8006a68 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        // flatten again
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a58:	fb03 f202 	mul.w	r2, r3, r2
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	609a      	str	r2, [r3, #8]
        output_matrix->rows = 1;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2201      	movs	r2, #1
 8006a64:	605a      	str	r2, [r3, #4]

        return EIDSP_OK;
 8006a66:	2400      	movs	r4, #0
    }
 8006a68:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fb f833 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8006a72:	4623      	mov	r3, r4
 8006a74:	4618      	mov	r0, r3
 8006a76:	37bc      	adds	r7, #188	; 0xbc
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 8006a7e:	bf00      	nop
 8006a80:	08022a30 	.word	0x08022a30
 8006a84:	08022a54 	.word	0x08022a54
 8006a88:	fffffc10 	.word	0xfffffc10
 8006a8c:	fffffc14 	.word	0xfffffc14
 8006a90:	08022814 	.word	0x08022814
 8006a94:	08022818 	.word	0x08022818
 8006a98:	08022a7c 	.word	0x08022a7c

08006a9c <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>:

    static void get_start_stop_bin(
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	ed87 0a05 	vstr	s0, [r7, #20]
 8006aa6:	6138      	str	r0, [r7, #16]
 8006aa8:	edc7 0a03 	vstr	s1, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	70fb      	strb	r3, [r7, #3]
        size_t *stop_bin,
        bool is_high_pass)
    {
        // we want to find n such that fcutoff < sample_f / fft * n ( or > for high pass )
        // also, + - half bin width (sample_f/(fft*2)) for high / low pass
        if (filter_cutoff > sampling_freq / 2) {
 8006ab2:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ab6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006abe:	ed97 7a03 	vldr	s14, [r7, #12]
 8006ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aca:	dd07      	ble.n	8006adc <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x40>
            filter_cutoff = sampling_freq / 2;
 8006acc:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ad0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ad8:	edc7 7a03 	vstr	s15, [r7, #12]
        }
        float bin = filter_cutoff * fft_length / sampling_freq;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ae6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006aea:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006aee:	ed97 7a05 	vldr	s14, [r7, #20]
 8006af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af6:	edc7 7a07 	vstr	s15, [r7, #28]
        if (is_high_pass) {
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d021      	beq.n	8006b44 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xa8>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 8006b00:	69f8      	ldr	r0, [r7, #28]
 8006b02:	f7f9 fd31 	bl	8000568 <__aeabi_f2d>
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	4b1b      	ldr	r3, [pc, #108]	; (8006b78 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xdc>)
 8006b0c:	f7f9 fbcc 	bl	80002a8 <__aeabi_dsub>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4610      	mov	r0, r2
 8006b16:	4619      	mov	r1, r3
 8006b18:	f7fa f856 	bl	8000bc8 <__aeabi_d2uiz>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	601a      	str	r2, [r3, #0]
            // don't use the DC bin b/c it's zero
            *start_bin = *start_bin == 0 ? 1 : *start_bin;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x96>
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	e000      	b.n	8006b34 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x98>
 8006b32:	2301      	movs	r3, #1
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	6013      	str	r3, [r2, #0]
            *stop_bin = fft_length / 2 + 1; // go one past
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
        }
        else {
            *start_bin = 1;
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
        }
    }
 8006b42:	e014      	b.n	8006b6e <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xd2>
            *start_bin = 1;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 8006b4a:	69f8      	ldr	r0, [r7, #28]
 8006b4c:	f7f9 fd0c 	bl	8000568 <__aeabi_f2d>
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xdc>)
 8006b56:	f7f9 fba9 	bl	80002ac <__adddf3>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	f7fa f831 	bl	8000bc8 <__aeabi_d2uiz>
 8006b66:	4603      	mov	r3, r0
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	601a      	str	r2, [r3, #0]
    }
 8006b6e:	bf00      	nop
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	3fe00000 	.word	0x3fe00000

08006b7c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>:
    /**
     * @brief Calculates the spectral analysis features.
     *
     * @return the number of features calculated
     */
    static size_t extract_spec_features(
 8006b7c:	b5b0      	push	{r4, r5, r7, lr}
 8006b7e:	b0ba      	sub	sp, #232	; 0xe8
 8006b80:	af04      	add	r7, sp, #16
 8006b82:	6178      	str	r0, [r7, #20]
 8006b84:	6139      	str	r1, [r7, #16]
 8006b86:	60fa      	str	r2, [r7, #12]
 8006b88:	ed87 0a02 	vstr	s0, [r7, #8]
 8006b8c:	71fb      	strb	r3, [r7, #7]
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq,
        const bool remove_mean = true,
        const bool transpose_and_scale_input = true)
    {
        if (transpose_and_scale_input) {
 8006b8e:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d013      	beq.n	8006bbe <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x42>
            // transpose the matrix so we have one row per axis
            numpy::transpose_in_place(input_matrix);
 8006b96:	6978      	ldr	r0, [r7, #20]
 8006b98:	f7fb f858 	bl	8001c4c <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

            // func tests for scale of 1 and does a no op in that case
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ba6:	6978      	ldr	r0, [r7, #20]
 8006ba8:	f7fb f960 	bl	8001e6c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8006bac:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8006bb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x42>
 8006bb8:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8006bbc:	e295      	b.n	80070ea <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x56e>
        }

        bool do_filter = false;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        bool is_high_pass;

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	49cc      	ldr	r1, [pc, #816]	; (8006efc <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x380>)
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7f9 fb00 	bl	80001d0 <strcmp>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d121      	bne.n	8006c1a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x9e>
            if( config->filter_order ) {
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d016      	beq.n	8006c0c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x90>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	edd3 7a06 	vldr	s15, [r3, #24]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	4619      	mov	r1, r3
 8006bec:	eef0 0a67 	vmov.f32	s1, s15
 8006bf0:	ed97 0a02 	vldr	s0, [r7, #8]
 8006bf4:	6978      	ldr	r0, [r7, #20]
 8006bf6:	f7fc ff9f 	bl	8003b38 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8006bfa:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8006bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x90>
 8006c06:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8006c0a:	e26e      	b.n	80070ea <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x56e>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            is_high_pass = false;
 8006c12:	2300      	movs	r3, #0
 8006c14:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8006c18:	e029      	b.n	8006c6e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xf2>
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	49b8      	ldr	r1, [pc, #736]	; (8006f00 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x384>)
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7f9 fad5 	bl	80001d0 <strcmp>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d120      	bne.n	8006c6e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xf2>
            if( config->filter_order ) {
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d016      	beq.n	8006c62 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xe6>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	edd3 7a06 	vldr	s15, [r3, #24]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	4619      	mov	r1, r3
 8006c42:	eef0 0a67 	vmov.f32	s1, s15
 8006c46:	ed97 0a02 	vldr	s0, [r7, #8]
 8006c4a:	6978      	ldr	r0, [r7, #20]
 8006c4c:	f7fc ffaa 	bl	8003ba4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8006c50:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8006c54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xe6>
 8006c5c:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8006c60:	e243      	b.n	80070ea <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x56e>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 8006c62:	2301      	movs	r3, #1
 8006c64:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            is_high_pass = true;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
        }

        if (remove_mean){
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x110>
            EI_TRY(processing::subtract_mean(input_matrix));
 8006c74:	6978      	ldr	r0, [r7, #20]
 8006c76:	f7fd fccd 	bl	8004614 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8006c7a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8006c7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x110>
 8006c86:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8006c8a:	e22e      	b.n	80070ea <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x56e>
        }

        // Figure bins we remove based on filter cutoff
        size_t start_bin, stop_bin;
        if (do_filter) {
 8006c8c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d012      	beq.n	8006cba <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x13e>
            get_start_stop_bin(
                sampling_freq,
                config->fft_length,
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            get_start_stop_bin(
 8006c98:	4618      	mov	r0, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006ca0:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8006ca4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8006ca8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006cac:	eef0 0a67 	vmov.f32	s1, s15
 8006cb0:	ed97 0a02 	vldr	s0, [r7, #8]
 8006cb4:	f7ff fef2 	bl	8006a9c <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>
 8006cb8:	e008      	b.n	8006ccc <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x150>
                &start_bin,
                &stop_bin,
                is_high_pass);
        }
        else {
            start_bin = 1;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	67bb      	str	r3, [r7, #120]	; 0x78
            stop_bin = config->fft_length / 2 + 1;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	0fda      	lsrs	r2, r3, #31
 8006cc4:	4413      	add	r3, r2
 8006cc6:	105b      	asrs	r3, r3, #1
 8006cc8:	3301      	adds	r3, #1
 8006cca:	677b      	str	r3, [r7, #116]	; 0x74
        }
        size_t num_bins = stop_bin - start_bin;
 8006ccc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        float *feature_out = output_matrix->buffer;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        const float *feature_out_ori = feature_out;
 8006cde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cec:	e1ec      	b.n	80070c8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x54c>
            float *data_window = input_matrix->get_row_ptr(row);
 8006cee:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8006cf2:	6978      	ldr	r0, [r7, #20]
 8006cf4:	f7fa ff06 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006cf8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            size_t data_size = input_matrix->cols;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            matrix_t rms_in_matrix(1, data_size, data_window);
 8006d04:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d10:	2101      	movs	r1, #1
 8006d12:	f7fa feb6 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 8006d16:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006d1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d1e:	2201      	movs	r2, #1
 8006d20:	2101      	movs	r1, #1
 8006d22:	f7fa feae 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 8006d26:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006d2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fb f971 	bl	8002018 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8006d36:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8006d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1ce>
 8006d42:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8006d46:	2500      	movs	r5, #0
 8006d48:	e1a8      	b.n	800709c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x520>

            feature_out++;
 8006d4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d4e:	3304      	adds	r3, #4
 8006d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

            // Standard Deviation
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 8006d54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d58:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8006d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            if (stddev == 0.0f) {
 8006d60:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8006d64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6c:	d102      	bne.n	8006d74 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1f8>
                stddev = 1e-10f;
 8006d6e:	4b65      	ldr	r3, [pc, #404]	; (8006f04 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x388>)
 8006d70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            // Substitute 0 for mean (b/c it is subtracted out above)
            // Skew becomes: mean(X^3) / stddev^3
            // Kurtosis becomes: mean(X^4) / stddev^4
            // Note, this is the Fisher definition of Kurtosis, so subtract 3
            // (see https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
            float s_sum = 0;
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            float k_sum = 0;
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            float temp;
            for (size_t i = 0; i < data_size; i++) {
 8006d84:	2300      	movs	r3, #0
 8006d86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d8a:	e03c      	b.n	8006e06 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x28a>
                temp = data_window[i] * data_window[i] * data_window[i];
 8006d8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006d96:	4413      	add	r3, r2
 8006d98:	ed93 7a00 	vldr	s14, [r3]
 8006d9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006da6:	4413      	add	r3, r2
 8006da8:	edd3 7a00 	vldr	s15, [r3]
 8006dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006db0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006dba:	4413      	add	r3, r2
 8006dbc:	edd3 7a00 	vldr	s15, [r3]
 8006dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
                s_sum += temp;
 8006dc8:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006dcc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dd4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
                k_sum += temp * data_window[i];
 8006dd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006de2:	4413      	add	r3, r2
 8006de4:	ed93 7a00 	vldr	s14, [r3]
 8006de8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df0:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8006df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006df8:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
            for (size_t i = 0; i < data_size; i++) {
 8006dfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e00:	3301      	adds	r3, #1
 8006e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006e0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d3bc      	bcc.n	8006d8c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x210>
            }
            // Skewness out
            temp = stddev * stddev * stddev;
 8006e12:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8006e16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006e1a:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8006e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e22:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            *feature_out++ = (s_sum / data_size) / temp;
 8006e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e32:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006e36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006e3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e3e:	1d1a      	adds	r2, r3, #4
 8006e40:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006e44:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e4c:	edc3 7a00 	vstr	s15, [r3]
            // Kurtosis out
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 8006e50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e54:	ee07 3a90 	vmov	s15, r3
 8006e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5c:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8006e60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006e64:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006e68:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8006e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e78:	1d1a      	adds	r2, r3, #4
 8006e7a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006e7e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006e82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e86:	edc3 7a00 	vstr	s15, [r3]

            if (config->implementation_version == 4) {
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	889b      	ldrh	r3, [r3, #4]
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	f040 80bf 	bne.w	8007012 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x496>

                size_t fft_out_size = config->fft_length / 2 + 1;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	0fda      	lsrs	r2, r3, #31
 8006e9a:	4413      	add	r3, r2
 8006e9c:	105b      	asrs	r3, r3, #1
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ei_vector<float> fft_out(fft_out_size);
 8006ea4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006ea8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006eac:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f002 fdd3 	bl	8009a5c <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
                EI_TRY(numpy::welch_max_hold(
 8006eb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f002 fc6b 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ece:	9302      	str	r3, [sp, #8]
 8006ed0:	9101      	str	r1, [sp, #4]
 8006ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006ede:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006ee2:	f7fc f8c3 	bl	800306c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8006ee6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8006eea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x38c>
 8006ef2:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8006ef6:	2500      	movs	r5, #0
 8006ef8:	e082      	b.n	8007000 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x484>
 8006efa:	bf00      	nop
 8006efc:	08022814 	.word	0x08022814
 8006f00:	08022818 	.word	0x08022818
 8006f04:	2edbe6ff 	.word	0x2edbe6ff
                    0,
                    fft_out_size,
                    config->fft_length,
                    config->do_fft_overlap));

                matrix_t x(1, fft_out.size(), const_cast<float *>(fft_out.data()));
 8006f08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f002 fc32 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8006f12:	4605      	mov	r5, r0
 8006f14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f002 fc3c 	bl	8009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8006f24:	462a      	mov	r2, r5
 8006f26:	2101      	movs	r1, #1
 8006f28:	f7fa fdab 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
                matrix_t out(1, 1);
 8006f2c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006f30:	2300      	movs	r3, #0
 8006f32:	2201      	movs	r2, #1
 8006f34:	2101      	movs	r1, #1
 8006f36:	f7fa fda4 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>

                *feature_out++ = (numpy::skew(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 8006f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006f3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fb f937 	bl	80021b8 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d108      	bne.n	8006f62 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3e6>
 8006f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f54:	2100      	movs	r1, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fa fdd4 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	e001      	b.n	8006f66 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3ea>
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f6a:	1d19      	adds	r1, r3, #4
 8006f6c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006f70:	601a      	str	r2, [r3, #0]
                *feature_out++ = (numpy::kurtosis(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 8006f72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006f76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fb f9b7 	bl	80022f0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d108      	bne.n	8006f9a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x41e>
 8006f88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fa fdb8 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006f94:	4603      	mov	r3, r0
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	e001      	b.n	8006f9e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x422>
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006fa2:	1d19      	adds	r1, r3, #4
 8006fa4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006fa8:	601a      	str	r2, [r3, #0]

                for (size_t i = start_bin; i < stop_bin; i++) {
 8006faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fb0:	e016      	b.n	8006fe0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x464>
                    feature_out[i - start_bin] = fft_out[i];
 8006fb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006fb6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f002 fd83 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8006fc0:	4601      	mov	r1, r0
 8006fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fd0:	4413      	add	r3, r2
 8006fd2:	680a      	ldr	r2, [r1, #0]
 8006fd4:	601a      	str	r2, [r3, #0]
                for (size_t i = start_bin; i < stop_bin; i++) {
 8006fd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fda:	3301      	adds	r3, #1
 8006fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d3e3      	bcc.n	8006fb2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x436>
                }
            } else {
 8006fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fa fd72 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8006ff4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fa fd6d 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 8006ffe:	2501      	movs	r5, #1
 8007000:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007004:	4618      	mov	r0, r3
 8007006:	f002 fd43 	bl	8009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 800700a:	2d01      	cmp	r5, #1
 800700c:	d01f      	beq.n	800704e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x4d2>
 800700e:	2500      	movs	r5, #0
 8007010:	e044      	b.n	800709c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x520>
                EI_TRY(numpy::welch_max_hold(
 8007012:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800701a:	4610      	mov	r0, r2
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8007022:	9202      	str	r2, [sp, #8]
 8007024:	9001      	str	r0, [sp, #4]
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	460b      	mov	r3, r1
 800702a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800702e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007032:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8007036:	f7fc f819 	bl	800306c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 800703a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 800703e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x4d2>
 8007046:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800704a:	2500      	movs	r5, #0
 800704c:	e026      	b.n	800709c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x520>
                    start_bin,
                    stop_bin,
                    config->fft_length,
                    config->do_fft_overlap));
            }
            if (config->do_log) {
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007054:	2b00      	cmp	r3, #0
 8007056:	d018      	beq.n	800708a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x50e>
                numpy::zero_handling(feature_out, num_bins);
 8007058:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800705c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007060:	f7fc f8ca 	bl	80031f8 <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 8007064:	f107 0018 	add.w	r0, r7, #24
 8007068:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800706c:	2201      	movs	r2, #1
 800706e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007072:	f7fa fd06 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
                numpy::log10(&temp);
 8007076:	f107 0318 	add.w	r3, r7, #24
 800707a:	4618      	mov	r0, r3
 800707c:	f7fb fbe6 	bl	800284c <_ZN2ei5numpy5log10EPNS_9ei_matrixE>
            }
 8007080:	f107 0318 	add.w	r3, r7, #24
 8007084:	4618      	mov	r0, r3
 8007086:	f7fa fd27 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
            feature_out += num_bins;
 800708a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007094:	4413      	add	r3, r2
 8007096:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        }
 800709a:	2501      	movs	r5, #1
 800709c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fa fd19 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80070a6:	2d01      	cmp	r5, #1
 80070a8:	d101      	bne.n	80070ae <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x532>
 80070aa:	2501      	movs	r5, #1
 80070ac:	e000      	b.n	80070b0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x534>
 80070ae:	2500      	movs	r5, #0
 80070b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fa fd0f 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80070ba:	2d01      	cmp	r5, #1
 80070bc:	d115      	bne.n	80070ea <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x56e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80070be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070c2:	3301      	adds	r3, #1
 80070c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80070d0:	429a      	cmp	r2, r3
 80070d2:	f4ff ae0c 	bcc.w	8006cee <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x172>
        size_t num_features = feature_out - feature_out_ori;
 80070d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	109b      	asrs	r3, r3, #2
 80070e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        return num_features;
 80070e6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    }
 80070ea:	4623      	mov	r3, r4
 80070ec:	4618      	mov	r0, r3
 80070ee:	37d8      	adds	r7, #216	; 0xd8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bdb0      	pop	{r4, r5, r7, pc}

080070f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v2(
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        size_t n_features =
            extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 8007104:	2301      	movs	r3, #1
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	2301      	movs	r3, #1
 800710a:	ed97 0a00 	vldr	s0, [r7]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff fd32 	bl	8006b7c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8007118:	6178      	str	r0, [r7, #20]
        return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	429a      	cmp	r2, r3
 8007122:	d101      	bne.n	8007128 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x34>
 8007124:	2300      	movs	r3, #0
 8007126:	e000      	b.n	800712a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x40>)
    }
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	fffffc14 	.word	0xfffffc14

08007138 <_ZN2ei8spectral7feature15get_ratio_comboEi>:
        } else {
            return extract_spectral_analysis_features_v2(input_matrix, output_matrix, config, sampling_freq);
        }
    }

    static ei_vector<int> get_ratio_combo(int r)
 8007138:	b580      	push	{r7, lr}
 800713a:	b09a      	sub	sp, #104	; 0x68
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
    {
        if (r == 1 || r == 3 || r == 10) {
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d005      	beq.n	8007154 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x1c>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b03      	cmp	r3, #3
 800714c:	d002      	beq.n	8007154 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x1c>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b0a      	cmp	r3, #10
 8007152:	d10f      	bne.n	8007174 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x3c>
            return {r};
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	f107 0310 	add.w	r3, r7, #16
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	2301      	movs	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	f107 0314 	add.w	r3, r7, #20
 8007166:	f107 0208 	add.w	r2, r7, #8
 800716a:	ca06      	ldmia	r2, {r1, r2}
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f003 fc86 	bl	800aa7e <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
            return {10, 10, 10};
        } else {
            assert(0);
        }
        return {0}; // to make linter happy
    }
 8007172:	e04e      	b.n	8007212 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 30) {
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b1e      	cmp	r3, #30
 8007178:	d114      	bne.n	80071a4 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x6c>
            return {3, 10};
 800717a:	4a28      	ldr	r2, [pc, #160]	; (800721c <_ZN2ei8spectral7feature15get_ratio_comboEi+0xe4>)
 800717c:	f107 0320 	add.w	r3, r7, #32
 8007180:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007184:	e883 0003 	stmia.w	r3, {r0, r1}
 8007188:	f107 0320 	add.w	r3, r7, #32
 800718c:	61bb      	str	r3, [r7, #24]
 800718e:	2302      	movs	r3, #2
 8007190:	61fb      	str	r3, [r7, #28]
 8007192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007196:	f107 0218 	add.w	r2, r7, #24
 800719a:	ca06      	ldmia	r2, {r1, r2}
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f003 fc6e 	bl	800aa7e <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 80071a2:	e036      	b.n	8007212 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 100) {
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b64      	cmp	r3, #100	; 0x64
 80071a8:	d114      	bne.n	80071d4 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x9c>
            return {10, 10};
 80071aa:	4a1d      	ldr	r2, [pc, #116]	; (8007220 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xe8>)
 80071ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80071b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80071b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071be:	2302      	movs	r3, #2
 80071c0:	633b      	str	r3, [r7, #48]	; 0x30
 80071c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80071c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80071ca:	ca06      	ldmia	r2, {r1, r2}
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f003 fc56 	bl	800aa7e <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 80071d2:	e01e      	b.n	8007212 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 1000) {
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071da:	d113      	bne.n	8007204 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xcc>
            return {10, 10, 10};
 80071dc:	4a11      	ldr	r2, [pc, #68]	; (8007224 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xec>)
 80071de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80071e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80071e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071ec:	643b      	str	r3, [r7, #64]	; 0x40
 80071ee:	2303      	movs	r3, #3
 80071f0:	647b      	str	r3, [r7, #68]	; 0x44
 80071f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80071f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80071fa:	ca06      	ldmia	r2, {r1, r2}
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f003 fc3e 	bl	800aa7e <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8007202:	e006      	b.n	8007212 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
            assert(0);
 8007204:	4b08      	ldr	r3, [pc, #32]	; (8007228 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf0>)
 8007206:	4a09      	ldr	r2, [pc, #36]	; (800722c <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf4>)
 8007208:	f240 11ff 	movw	r1, #511	; 0x1ff
 800720c:	4808      	ldr	r0, [pc, #32]	; (8007230 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf8>)
 800720e:	f016 fc5d 	bl	801dacc <__assert_func>
    }
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	3768      	adds	r7, #104	; 0x68
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	08022b68 	.word	0x08022b68
 8007220:	08022b70 	.word	0x08022b70
 8007224:	08022b78 	.word	0x08022b78
 8007228:	08022510 	.word	0x08022510
 800722c:	08022ab0 	.word	0x08022ab0
 8007230:	08022af4 	.word	0x08022af4

08007234 <_ZN2ei6signal7sosfiltD1Ev>:
    struct sosfilt {
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3308      	adds	r3, #8
 8007240:	4618      	mov	r0, r3
 8007242:	f002 fc25 	bl	8009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>:

    // can do in-place or out-of-place
    static size_t _decimate(matrix_t *input_matrix, matrix_t *output_matrix, size_t ratio)
 8007250:	b580      	push	{r7, lr}
 8007252:	b092      	sub	sp, #72	; 0x48
 8007254:	af02      	add	r7, sp, #8
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
        static float sos_zi_deci_10[] = { 1.38071060429997e-06f,   -1.146570262401316e-06f,
                                          0.00020862168862901534f, -0.0001782374705409433f,
                                          0.016663820918116152f,   -0.015002020730727955f,
                                          0.9773862470492868f,     -0.9420150059170858 };

        assert(ratio == 3 || ratio == 10);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b03      	cmp	r3, #3
 8007260:	d009      	beq.n	8007276 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b0a      	cmp	r3, #10
 8007266:	d006      	beq.n	8007276 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
 8007268:	4b27      	ldr	r3, [pc, #156]	; (8007308 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xb8>)
 800726a:	4a28      	ldr	r2, [pc, #160]	; (800730c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xbc>)
 800726c:	f240 212b 	movw	r1, #555	; 0x22b
 8007270:	4827      	ldr	r0, [pc, #156]	; (8007310 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc0>)
 8007272:	f016 fc2b 	bl	801dacc <__assert_func>

        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b03      	cmp	r3, #3
 800727a:	d101      	bne.n	8007280 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x30>
 800727c:	4b25      	ldr	r3, [pc, #148]	; (8007314 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc4>)
 800727e:	e000      	b.n	8007282 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x32>
 8007280:	4b25      	ldr	r3, [pc, #148]	; (8007318 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc8>)
 8007282:	63bb      	str	r3, [r7, #56]	; 0x38
        float* sos_zi = ratio == 3 ? sos_zi_deci_3 : sos_zi_deci_10;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b03      	cmp	r3, #3
 8007288:	d101      	bne.n	800728e <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x3e>
 800728a:	4b24      	ldr	r3, [pc, #144]	; (800731c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xcc>)
 800728c:	e000      	b.n	8007290 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x40>
 800728e:	4b24      	ldr	r3, [pc, #144]	; (8007320 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xd0>)
 8007290:	637b      	str	r3, [r7, #52]	; 0x34

        const size_t out_size = signal::get_decimated_size(input_matrix->cols, ratio);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe feaf 	bl	8005ffc <_ZN2ei6signal18get_decimated_sizeEjj>
 800729e:	6338      	str	r0, [r7, #48]	; 0x30

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80072a0:	2300      	movs	r3, #0
 80072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a4:	e026      	b.n	80072f4 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xa4>
            const float *x = input_matrix->get_row_ptr(row);
 80072a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7fa fc2b 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80072ae:	62f8      	str	r0, [r7, #44]	; 0x2c
            float *y = output_matrix->get_row_ptr(row);
 80072b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072b2:	68b8      	ldr	r0, [r7, #8]
 80072b4:	f7fa fc26 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80072b8:	62b8      	str	r0, [r7, #40]	; 0x28
            signal::sosfilt sosfilt(sos, sos_zi, 4);
 80072ba:	f107 0010 	add.w	r0, r7, #16
 80072be:	2304      	movs	r3, #4
 80072c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072c4:	f7fe feac 	bl	8006020 <_ZN2ei6signal7sosfiltC1EPKfS3_j>
            signal::decimate_simple(
                x,
                input_matrix->cols,
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6899      	ldr	r1, [r3, #8]
                y,
                output_matrix->cols,
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	689a      	ldr	r2, [r3, #8]
            signal::decimate_simple(
 80072d0:	f107 0310 	add.w	r3, r7, #16
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	4613      	mov	r3, r2
 80072dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072e0:	f7fe ff56 	bl	8006190 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE>
                ratio,
                sosfilt);
        }
 80072e4:	f107 0310 	add.w	r3, r7, #16
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7ff ffa3 	bl	8007234 <_ZN2ei6signal7sosfiltD1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80072ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f0:	3301      	adds	r3, #1
 80072f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d3d3      	bcc.n	80072a6 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x56>

        return out_size;
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
 8007300:	4618      	mov	r0, r3
 8007302:	3740      	adds	r7, #64	; 0x40
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	08022b84 	.word	0x08022b84
 800730c:	08022ba0 	.word	0x08022ba0
 8007310:	08022af4 	.word	0x08022af4
 8007314:	20000000 	.word	0x20000000
 8007318:	20000080 	.word	0x20000080
 800731c:	20000060 	.word	0x20000060
 8007320:	200000e0 	.word	0x200000e0

08007324 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v4(
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b0b5      	sub	sp, #212	; 0xd4
 8007328:	af02      	add	r7, sp, #8
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_p,
        const float sampling_freq)
    {
        auto config_copy = *config_p;
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800733a:	4611      	mov	r1, r2
 800733c:	2244      	movs	r2, #68	; 0x44
 800733e:	4618      	mov	r0, r3
 8007340:	f018 fbb4 	bl	801faac <memcpy>
        auto config = &config_copy;
 8007344:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        if (strcmp(config->analysis_type, "Wavelet") == 0) {
 800734c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	4998      	ldr	r1, [pc, #608]	; (80075b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x290>)
 8007354:	4618      	mov	r0, r3
 8007356:	f7f8 ff3b 	bl	80001d0 <strcmp>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d109      	bne.n	8007374 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x50>
            return wavelet::extract_wavelet_features(input_matrix, output_matrix, config, sampling_freq);
 8007360:	ed97 0a00 	vldr	s0, [r7]
 8007364:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f7fe fd6c 	bl	8005e48 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 8007370:	4604      	mov	r4, r0
 8007372:	e19e      	b.n	80076b2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
        }
        else if (config->extra_low_freq == false && config->input_decimation_ratio == 1) {
 8007374:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11b      	bne.n	80073b8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x94>
 8007380:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d116      	bne.n	80073b8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x94>
            size_t n_features =
                extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 800738a:	2301      	movs	r3, #1
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	2301      	movs	r3, #1
 8007390:	ed97 0a00 	vldr	s0, [r7]
 8007394:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f7ff fbee 	bl	8006b7c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 80073a0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d101      	bne.n	80073b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x90>
 80073b0:	2400      	movs	r4, #0
 80073b2:	e17e      	b.n	80076b2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
 80073b4:	4c80      	ldr	r4, [pc, #512]	; (80075b8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x294>)
 80073b6:	e17c      	b.n	80076b2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
        }
        else {
            numpy::transpose_in_place(input_matrix);
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f7fa fc47 	bl	8001c4c <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 80073be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80073c6:	eeb0 0a67 	vmov.f32	s0, s15
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7fa fd4e 	bl	8001e6c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80073d0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80073d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
 80073dc:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80073e0:	e167      	b.n	80076b2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>

            if (config->input_decimation_ratio > 1) {
 80073e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	f340 8086 	ble.w	80074fa <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d6>
                ei_vector<int> ratio_combo = get_ratio_combo(config->input_decimation_ratio);
 80073ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073f2:	691a      	ldr	r2, [r3, #16]
 80073f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fe9c 	bl	8007138 <_ZN2ei8spectral7feature15get_ratio_comboEi>
                size_t out_size = input_matrix->cols;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                for (int r : ratio_combo) {
 8007408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800740c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007410:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007414:	f003 fb54 	bl	800aac0 <_ZNSt6vectorIiN2ei7EiAllocIiEEE5beginEv>
 8007418:	4603      	mov	r3, r0
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
 800741c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007420:	f003 fb5e 	bl	800aae0 <_ZNSt6vectorIiN2ei7EiAllocIiEEE3endEv>
 8007424:	4603      	mov	r3, r0
 8007426:	623b      	str	r3, [r7, #32]
 8007428:	e016      	b.n	8007458 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x134>
 800742a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800742e:	4618      	mov	r0, r3
 8007430:	f003 fb8f 	bl	800ab52 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEdeEv>
 8007434:	4603      	mov	r3, r0
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    out_size = _decimate(input_matrix, input_matrix, r);
 800743c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007440:	461a      	mov	r2, r3
 8007442:	68f9      	ldr	r1, [r7, #12]
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff ff03 	bl	8007250 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>
 800744a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
                for (int r : ratio_combo) {
 800744e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007452:	4618      	mov	r0, r3
 8007454:	f003 fb6d 	bl	800ab32 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEppEv>
 8007458:	f107 0220 	add.w	r2, r7, #32
 800745c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007460:	4611      	mov	r1, r2
 8007462:	4618      	mov	r0, r3
 8007464:	f003 fb4d 	bl	800ab02 <_ZN9__gnu_cxxneIPiSt6vectorIiN2ei7EiAllocIiEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1dd      	bne.n	800742a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x106>
                }

                // rearrange input matrix to be in the right shape after decimation
                float* out = input_matrix->get_row_ptr(0) + out_size;
 800746e:	2100      	movs	r1, #0
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f7fa fb47 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8007476:	4602      	mov	r2, r0
 8007478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 8007484:	2301      	movs	r3, #1
 8007486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800748a:	e027      	b.n	80074dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b8>
                    float *row = input_matrix->get_row_ptr(r);
 800748c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f7fa fb37 	bl	8001b04 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8007496:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                    for(size_t c = 0; c < out_size; c++) {
 800749a:	2300      	movs	r3, #0
 800749c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074a0:	e011      	b.n	80074c6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a2>
                        *out++ = row[c];
 80074a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80074ac:	441a      	add	r2, r3
 80074ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074b2:	1d19      	adds	r1, r3, #4
 80074b4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	601a      	str	r2, [r3, #0]
                    for(size_t c = 0; c < out_size; c++) {
 80074bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074c0:	3301      	adds	r3, #1
 80074c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d3e7      	bcc.n	80074a2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x17e>
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 80074d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074d6:	3301      	adds	r3, #1
 80074d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d3d1      	bcc.n	800748c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x168>
                    }
                }
                input_matrix->cols = out_size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074ee:	609a      	str	r2, [r3, #8]
            }
 80074f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074f4:	4618      	mov	r0, r3
 80074f6:	f002 fb90 	bl	8009c1a <_ZNSt6vectorIiN2ei7EiAllocIiEEED1Ev>

            float new_sampling_freq = sampling_freq / config->input_decimation_ratio;
 80074fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	ee07 3a90 	vmov	s15, r3
 8007504:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007508:	edd7 6a00 	vldr	s13, [r7]
 800750c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007510:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

            // filter here, before decimating, instead of inside extract_spec_features
            if (strcmp(config->filter_type, "low") == 0) {
 8007514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	4928      	ldr	r1, [pc, #160]	; (80075bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x298>)
 800751c:	4618      	mov	r0, r3
 800751e:	f7f8 fe57 	bl	80001d0 <strcmp>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d11d      	bne.n	8007564 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x240>
                if( config->filter_order ) {
 8007528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d048      	beq.n	80075c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                    EI_TRY(spectral::processing::butterworth_lowpass_filter(
 8007532:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007536:	edd3 7a06 	vldr	s15, [r3, #24]
 800753a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	4619      	mov	r1, r3
 8007544:	eef0 0a67 	vmov.f32	s1, s15
 8007548:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7fc faf3 	bl	8003b38 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8007552:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8007556:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800755a:	2b00      	cmp	r3, #0
 800755c:	d032      	beq.n	80075c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
 800755e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8007562:	e0a6      	b.n	80076b2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
                        new_sampling_freq,
                        config->filter_cutoff,
                        config->filter_order));
                }
            }
            else if (strcmp(config->filter_type, "high") == 0) {
 8007564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	4915      	ldr	r1, [pc, #84]	; (80075c0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x29c>)
 800756c:	4618      	mov	r0, r3
 800756e:	f7f8 fe2f 	bl	80001d0 <strcmp>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d125      	bne.n	80075c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                if( config->filter_order ) {
 8007578:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d020      	beq.n	80075c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                    EI_TRY(spectral::processing::butterworth_highpass_filter(
 8007582:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007586:	edd3 7a06 	vldr	s15, [r3, #24]
 800758a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	4619      	mov	r1, r3
 8007594:	eef0 0a67 	vmov.f32	s1, s15
 8007598:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f7fc fb01 	bl	8003ba4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 80075a2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80075a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
 80075ae:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 80075b2:	e07e      	b.n	80076b2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
 80075b4:	08022bf8 	.word	0x08022bf8
 80075b8:	fffffc14 	.word	0xfffffc14
 80075bc:	08022814 	.word	0x08022814
 80075c0:	08022818 	.word	0x08022818
                        config->filter_order));
                }
            }
            
            // set the filter order to 0, so that we won't double filter
            config->filter_order = 0;
 80075c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075c8:	2200      	movs	r2, #0
 80075ca:	61da      	str	r2, [r3, #28]

            // do this before extract_spec_features because extract_spec_features modifies the matrix
            constexpr size_t decimation = 10;
 80075cc:	230a      	movs	r3, #10
 80075ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            const size_t decimated_size =
                signal::get_decimated_size(input_matrix->cols, decimation);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	210a      	movs	r1, #10
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe fd0f 	bl	8005ffc <_ZN2ei6signal18get_decimated_sizeEjj>
 80075de:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            matrix_t lf_signal(input_matrix->rows, decimated_size);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6859      	ldr	r1, [r3, #4]
 80075e6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80075ea:	2300      	movs	r3, #0
 80075ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80075f0:	f7fa fa47 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
            _decimate(input_matrix, &lf_signal, decimation);
 80075f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80075f8:	220a      	movs	r2, #10
 80075fa:	4619      	mov	r1, r3
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff fe27 	bl	8007250 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>

            size_t n_features = extract_spec_features(
 8007602:	2300      	movs	r3, #0
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	2301      	movs	r3, #1
 8007608:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800760c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7ff fab2 	bl	8006b7c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8007618:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
                config,
                new_sampling_freq,
                true,
                false);

            if (n_features > 0 && config->extra_low_freq) {
 800761c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d038      	beq.n	8007696 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x372>
 8007624:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007628:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	d032      	beq.n	8007696 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x372>
                // disable filtering post decimation
                matrix_t lf_features(1, output_matrix->rows * output_matrix->cols - n_features,
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	6892      	ldr	r2, [r2, #8]
 8007638:	fb03 f202 	mul.w	r2, r3, r2
                    output_matrix->buffer + n_features);
 800763c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007640:	1ad1      	subs	r1, r2, r3
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	f107 0010 	add.w	r0, r7, #16
 8007652:	460a      	mov	r2, r1
 8007654:	2101      	movs	r1, #1
 8007656:	f7fa fa14 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>

                n_features += extract_spec_features(
 800765a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800765e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8007662:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007666:	f107 0110 	add.w	r1, r7, #16
 800766a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800766e:	2300      	movs	r3, #0
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	2301      	movs	r3, #1
 8007674:	eeb0 0a47 	vmov.f32	s0, s14
 8007678:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800767c:	f7ff fa7e 	bl	8006b7c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8007680:	4602      	mov	r2, r0
 8007682:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007686:	4413      	add	r3, r2
 8007688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    &lf_features,
                    config,
                    new_sampling_freq / decimation,
                    true,
                    false);
            }
 800768c:	f107 0310 	add.w	r3, r7, #16
 8007690:	4618      	mov	r0, r3
 8007692:	f7fa fa21 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800769e:	429a      	cmp	r2, r3
 80076a0:	d101      	bne.n	80076a6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x382>
 80076a2:	2400      	movs	r4, #0
 80076a4:	e000      	b.n	80076a8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x384>
 80076a6:	4c05      	ldr	r4, [pc, #20]	; (80076bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x398>)
        }
 80076a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fa fa13 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
    }
 80076b2:	4623      	mov	r3, r4
 80076b4:	4618      	mov	r0, r3
 80076b6:	37cc      	adds	r7, #204	; 0xcc
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd90      	pop	{r4, r7, pc}
 80076bc:	fffffc14 	.word	0xfffffc14

080076c0 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fa f9b5 	bl	8001a3a <_ZNSt14_Function_baseD1Ev>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4618      	mov	r0, r3
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <_ZN2ei11ei_signal_tC1Ev>:
} DCT_NORMALIZATION_MODE;

/**
 * Sensor signal structure
 */
typedef struct ei_signal_t {
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f003 fa53 	bl	800ab90 <_ZNSt8functionIFijjPfEEC1Ev>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <_ZN2ei11ei_signal_tD1Ev>:
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff ffde 	bl	80076c0 <_ZNSt8functionIFijjPfEED1Ev>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectral_analysis_features(
    signal_t *signal,
    matrix_t *output_matrix,
    void *config_ptr,
    const float frequency)
{
 8007710:	b590      	push	{r4, r7, lr}
 8007712:	b08b      	sub	sp, #44	; 0x2c
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t *config = (ei_dsp_config_spectral_analysis_t *)config_ptr;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	627b      	str	r3, [r7, #36]	; 0x24

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772a:	6892      	ldr	r2, [r2, #8]
 800772c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	461a      	mov	r2, r3
 8007736:	f107 0014 	add.w	r0, r7, #20
 800773a:	2300      	movs	r3, #0
 800773c:	f7fa f9a1 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8007746:	4c23      	ldr	r4, [pc, #140]	; (80077d4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc4>)
 8007748:	e039      	b.n	80077be <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	2100      	movs	r1, #0
 8007754:	f002 fad6 	bl	8009d04 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        return spectral::wavelet::extract_wavelet_features(&input_matrix, output_matrix, config, frequency);
    }
#endif

#if EI_DSP_PARAMS_SPECTRAL_ANALYSIS_ANALYSIS_TYPE_FFT || EI_DSP_PARAMS_ALL
    if (strcmp(config->analysis_type, "FFT") == 0) {
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	491e      	ldr	r1, [pc, #120]	; (80077d8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc8>)
 800775e:	4618      	mov	r0, r3
 8007760:	f7f8 fd36 	bl	80001d0 <strcmp>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d128      	bne.n	80077bc <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xac>
        if (config->implementation_version == 1) {
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	889b      	ldrh	r3, [r3, #4]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d10a      	bne.n	8007788 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x78>
            return spectral::feature::extract_spectral_analysis_features_v1(
 8007772:	f107 0314 	add.w	r3, r7, #20
 8007776:	ed97 0a00 	vldr	s0, [r7]
 800777a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777c:	68b9      	ldr	r1, [r7, #8]
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff f84c 	bl	800681c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 8007784:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 8007786:	e01a      	b.n	80077be <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        } else if (config->implementation_version == 4) {
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	889b      	ldrh	r3, [r3, #4]
 800778c:	2b04      	cmp	r3, #4
 800778e:	d10a      	bne.n	80077a6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
            return spectral::feature::extract_spectral_analysis_features_v4(
 8007790:	f107 0314 	add.w	r3, r7, #20
 8007794:	ed97 0a00 	vldr	s0, [r7]
 8007798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779a:	68b9      	ldr	r1, [r7, #8]
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff fdc1 	bl	8007324 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80077a2:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80077a4:	e00b      	b.n	80077be <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        } else {
            return spectral::feature::extract_spectral_analysis_features_v2(
 80077a6:	f107 0314 	add.w	r3, r7, #20
 80077aa:	ed97 0a00 	vldr	s0, [r7]
 80077ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b0:	68b9      	ldr	r1, [r7, #8]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff fc9e 	bl	80070f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80077b8:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80077ba:	e000      	b.n	80077be <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
            output_matrix,
            config,
            frequency);
    }
#endif
    return EIDSP_NOT_SUPPORTED;
 80077bc:	4c07      	ldr	r4, [pc, #28]	; (80077dc <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xcc>)
}
 80077be:	f107 0314 	add.w	r3, r7, #20
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fa f988 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 80077c8:	4623      	mov	r3, r4
 80077ca:	4618      	mov	r0, r3
 80077cc:	372c      	adds	r7, #44	; 0x2c
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd90      	pop	{r4, r7, pc}
 80077d2:	bf00      	nop
 80077d4:	fffffc16 	.word	0xfffffc16
 80077d8:	08022d4c 	.word	0x08022d4c
 80077dc:	fffffc0a 	.word	0xfffffc0a

080077e0 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	605a      	str	r2, [r3, #4]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	609a      	str	r2, [r3, #8]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	60da      	str	r2, [r3, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3310      	adds	r3, #16
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff ff65 	bl	80076da <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	f000 f832 	bl	800789a <_ZN14SignalWithAxes8get_dataEjjPf>
 8007836:	4603      	mov	r3, r0
        };
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	429a      	cmp	r2, r3
 8007854:	d102      	bne.n	800785c <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	e01a      	b.n	8007892 <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691a      	ldr	r2, [r3, #16]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	fbb2 f3f3 	udiv	r3, r2, r3
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6892      	ldr	r2, [r2, #8]
 8007870:	fb03 f202 	mul.w	r2, r3, r2
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	621a      	str	r2, [r3, #32]
        };
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f103 0210 	add.w	r2, r3, #16
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	f107 030c 	add.w	r3, r7, #12
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f003 f9b6 	bl	800abfa <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>
#endif
        return &wrapped_signal;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3310      	adds	r3, #16
    }
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 800789a:	b580      	push	{r7, lr}
 800789c:	b08a      	sub	sp, #40	; 0x28
 800789e:	af00      	add	r7, sp, #0
 80078a0:	60f8      	str	r0, [r7, #12]
 80078a2:	60b9      	str	r1, [r7, #8]
 80078a4:	607a      	str	r2, [r7, #4]
 80078a6:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	68d2      	ldr	r2, [r2, #12]
 80078b6:	6992      	ldr	r2, [r2, #24]
 80078b8:	fb02 f303 	mul.w	r3, r2, r3
 80078bc:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	68d2      	ldr	r2, [r2, #12]
 80078cc:	6992      	ldr	r2, [r2, #24]
 80078ce:	fb02 f303 	mul.w	r3, r2, r3
 80078d2:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	623b      	str	r3, [r7, #32]
 80078dc:	e02a      	b.n	8007934 <_ZN14SignalWithAxes8get_dataEjjPf+0x9a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80078de:	2300      	movs	r3, #0
 80078e0:	61fb      	str	r3, [r7, #28]
 80078e2:	e01c      	b.n	800791e <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4618      	mov	r0, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	4413      	add	r3, r2
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	18d1      	adds	r1, r2, r3
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	627a      	str	r2, [r7, #36]	; 0x24
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4413      	add	r3, r2
 8007906:	2201      	movs	r2, #1
 8007908:	f002 f9fc 	bl	8009d04 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 800790c:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <_ZN14SignalWithAxes8get_dataEjjPf+0x7e>
                    return r;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	e014      	b.n	8007942 <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	3301      	adds	r3, #1
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	429a      	cmp	r2, r3
 8007926:	d3dd      	bcc.n	80078e4 <_ZN14SignalWithAxes8get_dataEjjPf+0x4a>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	6a3a      	ldr	r2, [r7, #32]
 8007930:	4413      	add	r3, r2
 8007932:	623b      	str	r3, [r7, #32]
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	4413      	add	r3, r2
 800793a:	6a3a      	ldr	r2, [r7, #32]
 800793c:	429a      	cmp	r2, r3
 800793e:	d3ce      	bcc.n	80078de <_ZN14SignalWithAxes8get_dataEjjPf+0x44>
                }
            }
        }

        return 0;
 8007940:	2300      	movs	r3, #0
    }
 8007942:	4618      	mov	r0, r3
 8007944:	3728      	adds	r7, #40	; 0x28
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	607a      	str	r2, [r7, #4]
 8007956:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8007958:	f06f 0314 	mvn.w	r3, #20
#endif
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6178      	str	r0, [r7, #20]
 8007970:	6139      	str	r1, [r7, #16]
 8007972:	60fa      	str	r2, [r7, #12]
 8007974:	ed87 0a02 	vstr	s0, [r7, #8]
 8007978:	edc7 0a01 	vstr	s1, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800797e:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8007982:	4618      	mov	r0, r3
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
	...

08007990 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af00      	add	r7, sp, #0
 8007996:	6178      	str	r0, [r7, #20]
 8007998:	6139      	str	r1, [r7, #16]
 800799a:	60fa      	str	r2, [r7, #12]
 800799c:	ed87 0a02 	vstr	s0, [r7, #8]
 80079a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80079a4:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80079a6:	2300      	movs	r3, #0
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	e03e      	b.n	8007a2a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x9a>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	4413      	add	r3, r2
 80079b2:	f993 3000 	ldrsb.w	r3, [r3]
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079be:	edd7 7a02 	vldr	s15, [r7, #8]
 80079c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80079ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ce:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 80079d2:	78fb      	ldrb	r3, [r7, #3]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d011      	beq.n	80079fc <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x6c>
            ei_printf("%s:\t", impulse->categories[ix]);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4619      	mov	r1, r3
 80079e8:	4816      	ldr	r0, [pc, #88]	; (8007a44 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 80079ea:	f010 fb04 	bl	8017ff6 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80079ee:	ed97 0a06 	vldr	s0, [r7, #24]
 80079f2:	f010 fb15 	bl	8018020 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80079f6:	4814      	ldr	r0, [pc, #80]	; (8007a48 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb8>)
 80079f8:	f010 fafd 	bl	8017ff6 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	6819      	ldr	r1, [r3, #0]
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	69fa      	ldr	r2, [r7, #28]
 8007a0e:	3201      	adds	r2, #1
 8007a10:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3304      	adds	r3, #4
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	3301      	adds	r3, #1
 8007a28:	61fb      	str	r3, [r7, #28]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8007a30:	461a      	mov	r2, r3
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d3b9      	bcc.n	80079ac <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1c>
    }

    return EI_IMPULSE_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3720      	adds	r7, #32
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	08022ff8 	.word	0x08022ff8
 8007a48:	08023000 	.word	0x08023000

08007a4c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e031      	b.n	8007ac4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x78>
        float value = data[ix];
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	4413      	add	r3, r2
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	613b      	str	r3, [r7, #16]

        if (debug) {
 8007a6c:	78fb      	ldrb	r3, [r7, #3]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d011      	beq.n	8007a96 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x4a>
            ei_printf("%s:\t", impulse->categories[ix]);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4619      	mov	r1, r3
 8007a82:	4816      	ldr	r0, [pc, #88]	; (8007adc <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8007a84:	f010 fab7 	bl	8017ff6 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8007a88:	ed97 0a04 	vldr	s0, [r7, #16]
 8007a8c:	f010 fac8 	bl	8018020 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8007a90:	4813      	ldr	r0, [pc, #76]	; (8007ae0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 8007a92:	f010 fab0 	bl	8017ff6 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	6819      	ldr	r1, [r3, #0]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	3201      	adds	r2, #1
 8007aaa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	00db      	lsls	r3, r3, #3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	3304      	adds	r3, #4
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8007aca:	461a      	mov	r2, r3
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d3c6      	bcc.n	8007a60 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x14>
    }

    return EI_IMPULSE_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	08022ff8 	.word	0x08022ff8
 8007ae0:	08023000 	.word	0x08023000

08007ae4 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the visual anomaly result structures from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_visual_ad_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	70fb      	strb	r3, [r7, #3]
    }

    result->visual_ad_grid_cells = results.data();
    result->visual_ad_count = results.size();
#endif // EI_CLASSIFIER_HAS_VISUAL_ANOMALY
    return EI_IMPULSE_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfj>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov5(const ei_impulse_t *impulse,
                                                                              ei_impulse_result_t *result,
                                                                              int version,
                                                                              float *data,
                                                                              size_t output_features_count) {
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8007b0e:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfj>:
  * Fill the result structure from an unquantized output tensor
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolox(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                             float *data,
                                                                             size_t output_features_count) {
 8007b1e:	b480      	push	{r7}
 8007b20:	b085      	sub	sp, #20
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	607a      	str	r2, [r7, #4]
 8007b2a:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8007b2c:	f06f 0314 	mvn.w	r3, #20
#endif // EI_HAS_YOLOX
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>:
  * Fill the result structure from an unquantized output tensor
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov7(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                              float *data,
                                                                              size_t output_features_count) {
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8007b4a:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_YOLOV7
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfj>:
  * Fill the result structure from an unquantized output tensor
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_decode_detections(const ei_impulse_t *impulse,
                                                                                     ei_impulse_result_t *result,
                                                                                     float *data,
                                                                                     size_t output_features_count) {
 8007b5a:	b480      	push	{r7}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_DECODE_DETECTIONS
    return fill_result_struct_tao_decode_detections_common(impulse, result, data, 0.0f, 1.0f, output_features_count);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8007b68:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_DETECT_DETECTIONS
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <_ZL31fill_result_struct_f32_tao_yoloPK10ei_impulseP19ei_impulse_result_tPfj>:
  * Fill the result structure from an unquantized output tensor
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolo(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count) {
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLO
    return fill_result_struct_tao_yolo_common(impulse, result, data, 0.0f, 1.0f, output_features_count);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8007b86:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLO
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <_ZL17pre_cast_quantizefflb>:
#define __EI_QUANTIZE__H__

#include <algorithm>
#include <cmath>

static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b088      	sub	sp, #32
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	ed87 0a03 	vstr	s0, [r7, #12]
 8007ba0:	edc7 0a02 	vstr	s1, [r7, #8]
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]

    int32_t max_value = is_signed ? 127 : 255;
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <_ZL17pre_cast_quantizefflb+0x1e>
 8007bb0:	237f      	movs	r3, #127	; 0x7f
 8007bb2:	e000      	b.n	8007bb6 <_ZL17pre_cast_quantizefflb+0x20>
 8007bb4:	23ff      	movs	r3, #255	; 0xff
 8007bb6:	61bb      	str	r3, [r7, #24]
    int32_t min_value = is_signed ? -128 : 0;
 8007bb8:	78fb      	ldrb	r3, [r7, #3]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <_ZL17pre_cast_quantizefflb+0x2e>
 8007bbe:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8007bc2:	e000      	b.n	8007bc6 <_ZL17pre_cast_quantizefflb+0x30>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	617b      	str	r3, [r7, #20]
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 8007bc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8007bcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8007bd0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007bd4:	eeb0 0a66 	vmov.f32	s0, s13
 8007bd8:	f7f9 ffd8 	bl	8001b8c <_ZSt5roundf>
 8007bdc:	eef0 7a40 	vmov.f32	s15, s0
 8007be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007be4:	ee17 2a90 	vmov	r2, s15
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4413      	add	r3, r2
 8007bec:	61fb      	str	r3, [r7, #28]
 8007bee:	f107 0214 	add.w	r2, r7, #20
 8007bf2:	f107 031c 	add.w	r3, r7, #28
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f003 f831 	bl	800ac60 <_ZSt3maxIlERKT_S2_S2_>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	f107 0318 	add.w	r3, r7, #24
 8007c04:	4619      	mov	r1, r3
 8007c06:	4610      	mov	r0, r2
 8007c08:	f003 f816 	bl	800ac38 <_ZSt3minIlERKT_S2_S2_>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	681b      	ldr	r3, [r3, #0]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3720      	adds	r7, #32
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d201      	bcs.n	8007c32 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	e000      	b.n	8007c34 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007c32:	687b      	ldr	r3, [r7, #4]
    }
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08e      	sub	sp, #56	; 0x38
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
    size_t matrix_els = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t input_idx = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	633b      	str	r3, [r7, #48]	; 0x30

    for (size_t i = 0; i < input_block_ids_size; i++) {
 8007c56:	2300      	movs	r3, #0
 8007c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c5a:	e098      	b.n	8007d8e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x14e>
        if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, mtx_size)) {
            ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
            return EI_IMPULSE_INVALID_SIZE;
        }
#else
        ei::matrix_t* matrix = fmatrix[0].matrix;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	61fb      	str	r3, [r7, #28]
#endif

        matrix_els += matrix->rows * matrix->cols;
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	6892      	ldr	r2, [r2, #8]
 8007c6a:	fb02 f303 	mul.w	r3, r2, r3
 8007c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c70:	4413      	add	r3, r2
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34

        switch (input->type) {
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b09      	cmp	r3, #9
 8007c7a:	d024      	beq.n	8007cc6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x86>
 8007c7c:	2b09      	cmp	r3, #9
 8007c7e:	dc7a      	bgt.n	8007d76 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d002      	beq.n	8007c8a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x4a>
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d04a      	beq.n	8007d1e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xde>
 8007c88:	e075      	b.n	8007d76 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
            case kTfLiteFloat32: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c8e:	e010      	b.n	8007cb2 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x72>
                    input->data.f[input_idx++] = matrix->buffer[ix];
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	441a      	add	r2, r3
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	6859      	ldr	r1, [r3, #4]
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	1c58      	adds	r0, r3, #1
 8007ca2:	6338      	str	r0, [r7, #48]	; 0x30
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	6812      	ldr	r2, [r2, #0]
 8007caa:	601a      	str	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	3301      	adds	r3, #1
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	6892      	ldr	r2, [r2, #8]
 8007cba:	fb02 f303 	mul.w	r3, r2, r3
 8007cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d3e5      	bcc.n	8007c90 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x50>
                }
                break;
 8007cc4:	e060      	b.n	8007d88 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cca:	e01e      	b.n	8007d0a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xca>
                    float val = (float)matrix->buffer[ix];
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	61bb      	str	r3, [r7, #24]
                    input->data.int8[input_idx++] = static_cast<int8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, true));
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	edd3 7a03 	vldr	s15, [r3, #12]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	eef0 0a67 	vmov.f32	s1, s15
 8007cec:	ed97 0a06 	vldr	s0, [r7, #24]
 8007cf0:	f7ff ff51 	bl	8007b96 <_ZL17pre_cast_quantizefflb>
                    input->data.int8[input_idx++] = static_cast<int8_t>(
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	1c59      	adds	r1, r3, #1
 8007cfc:	6339      	str	r1, [r7, #48]	; 0x30
 8007cfe:	4413      	add	r3, r2
 8007d00:	b242      	sxtb	r2, r0
 8007d02:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	3301      	adds	r3, #1
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	6892      	ldr	r2, [r2, #8]
 8007d12:	fb02 f303 	mul.w	r3, r2, r3
 8007d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d3d7      	bcc.n	8007ccc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8c>
                }
                break;
 8007d1c:	e034      	b.n	8007d88 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteUInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007d1e:	2300      	movs	r3, #0
 8007d20:	623b      	str	r3, [r7, #32]
 8007d22:	e01e      	b.n	8007d62 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x122>
                    float val = (float)matrix->buffer[ix];
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	617b      	str	r3, [r7, #20]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	edd3 7a03 	vldr	s15, [r3, #12]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	eef0 0a67 	vmov.f32	s1, s15
 8007d44:	ed97 0a05 	vldr	s0, [r7, #20]
 8007d48:	f7ff ff25 	bl	8007b96 <_ZL17pre_cast_quantizefflb>
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d52:	1c59      	adds	r1, r3, #1
 8007d54:	6339      	str	r1, [r7, #48]	; 0x30
 8007d56:	4413      	add	r3, r2
 8007d58:	b2c2      	uxtb	r2, r0
 8007d5a:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	623b      	str	r3, [r7, #32]
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	6892      	ldr	r2, [r2, #8]
 8007d6a:	fb02 f303 	mul.w	r3, r2, r3
 8007d6e:	6a3a      	ldr	r2, [r7, #32]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d3d7      	bcc.n	8007d24 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xe4>
                break;
 8007d74:	e008      	b.n	8007d88 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4814      	ldr	r0, [pc, #80]	; (8007dd0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x190>)
 8007d7e:	f010 f93a 	bl	8017ff6 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 8007d82:	f06f 030c 	mvn.w	r3, #12
 8007d86:	e01e      	b.n	8007dc6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    for (size_t i = 0; i < input_block_ids_size; i++) {
 8007d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	f4ff af62 	bcc.w	8007c5c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1c>
            }
        }
    }

    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	089b      	lsrs	r3, r3, #2
 8007d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d00f      	beq.n	8007dc4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d00a      	beq.n	8007dc4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
            (int)input->bytes, (int)matrix_els);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	699b      	ldr	r3, [r3, #24]
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
 8007db2:	4619      	mov	r1, r3
 8007db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db6:	461a      	mov	r2, r3
 8007db8:	4806      	ldr	r0, [pc, #24]	; (8007dd4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x194>)
 8007dba:	f010 f91c 	bl	8017ff6 <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
 8007dbe:	f06f 0317 	mvn.w	r3, #23
 8007dc2:	e000      	b.n	8007dc6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    }

    return EI_IMPULSE_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3738      	adds	r7, #56	; 0x38
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	08023004 	.word	0x08023004
 8007dd4:	08023028 	.word	0x08023028

08007dd8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	6892      	ldr	r2, [r2, #8]
 8007dea:	fb02 f303 	mul.w	r3, r2, r3
 8007dee:	617b      	str	r3, [r7, #20]

    switch (output->type) {
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b09      	cmp	r3, #9
 8007df6:	d026      	beq.n	8007e46 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x6e>
 8007df8:	2b09      	cmp	r3, #9
 8007dfa:	f300 8093 	bgt.w	8007f24 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d002      	beq.n	8007e08 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x30>
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d057      	beq.n	8007eb6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xde>
 8007e06:	e08d      	b.n	8007f24 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	089b      	lsrs	r3, r3, #2
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d00e      	beq.n	8007e32 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x5a>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes / 4, (int)matrix_els);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	da00      	bge.n	8007e1e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x46>
 8007e1c:	3303      	adds	r3, #3
 8007e1e:	109b      	asrs	r3, r3, #2
 8007e20:	4619      	mov	r1, r3
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	461a      	mov	r2, r3
 8007e26:	4846      	ldr	r0, [pc, #280]	; (8007f40 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007e28:	f010 f8e5 	bl	8017ff6 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007e2c:	f06f 0317 	mvn.w	r3, #23
 8007e30:	e082      	b.n	8007f38 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            memcpy(output_matrix->buffer, output->data.f, output->bytes);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6859      	ldr	r1, [r3, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f017 fe34 	bl	801faac <memcpy>
            break;
 8007e44:	e077      	b.n	8007f36 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteInt8: {
            if (output->bytes != matrix_els) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d00a      	beq.n	8007e66 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x8e>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007e54:	4619      	mov	r1, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4839      	ldr	r0, [pc, #228]	; (8007f40 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007e5c:	f010 f8cb 	bl	8017ff6 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007e60:	f06f 0317 	mvn.w	r3, #23
 8007e64:	e068      	b.n	8007f38 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e66:	2300      	movs	r3, #0
 8007e68:	61fb      	str	r3, [r7, #28]
 8007e6a:	e01e      	b.n	8007eaa <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd2>
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	4413      	add	r3, r2
 8007e74:	f993 3000 	ldrsb.w	r3, [r3]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	ee07 3a90 	vmov	s15, r3
 8007e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e92:	edc7 7a04 	vstr	s15, [r7, #16]
                output_matrix->buffer[ix] = value;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	61fb      	str	r3, [r7, #28]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d3db      	bcc.n	8007e6c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x94>
            }
            break;
 8007eb4:	e03f      	b.n	8007f36 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteUInt8: {
            if (output->bytes != matrix_els) {
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d00a      	beq.n	8007ed6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xfe>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	481d      	ldr	r0, [pc, #116]	; (8007f40 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007ecc:	f010 f893 	bl	8017ff6 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007ed0:	f06f 0317 	mvn.w	r3, #23
 8007ed4:	e030      	b.n	8007f38 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	61bb      	str	r3, [r7, #24]
 8007eda:	e01d      	b.n	8007f18 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x140>
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	edd3 7a03 	vldr	s15, [r3, #12]
 8007efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f00:	edc7 7a03 	vstr	s15, [r7, #12]
                output_matrix->buffer[ix] = value;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	3301      	adds	r3, #1
 8007f16:	61bb      	str	r3, [r7, #24]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d3dc      	bcc.n	8007edc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x104>
            }
            break;
 8007f22:	e008      	b.n	8007f36 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        default: {
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4806      	ldr	r0, [pc, #24]	; (8007f44 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x16c>)
 8007f2c:	f010 f863 	bl	8017ff6 <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
 8007f30:	f06f 030d 	mvn.w	r3, #13
 8007f34:	e000      	b.n	8007f38 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
        }
    }

    return EI_IMPULSE_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3720      	adds	r7, #32
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	080230b0 	.word	0x080230b0
 8007f44:	080230f4 	.word	0x080230f4

08007f48 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08c      	sub	sp, #48	; 0x30
 8007f4c:	af02      	add	r7, sp, #8
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	603b      	str	r3, [r7, #0]
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	789b      	ldrb	r3, [r3, #2]
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	f040 81ab 	bne.w	80082bc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x374>
        switch (block_config->object_detection_last_layer) {
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	2b09      	cmp	r3, #9
 8007f70:	f200 8192 	bhi.w	8008298 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x350>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x34>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08008017 	.word	0x08008017
 8007f80:	08007fa5 	.word	0x08007fa5
 8007f84:	08008023 	.word	0x08008023
 8007f88:	080080ed 	.word	0x080080ed
 8007f8c:	08008023 	.word	0x08008023
 8007f90:	08008105 	.word	0x08008105
 8007f94:	0800814d 	.word	0x0800814d
 8007f98:	0800814d 	.word	0x0800814d
 8007f9c:	080081f3 	.word	0x080081f3
 8007fa0:	080081f3 	.word	0x080081f3
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b09      	cmp	r3, #9
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	74fb      	strb	r3, [r7, #19]
                if (int8_output) {
 8007fb2:	7cfb      	ldrb	r3, [r7, #19]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01d      	beq.n	8007ff4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xac>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	ee07 3a90 	vmov	s15, r3
 8007fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007fd2:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	eef0 0a47 	vmov.f32	s1, s14
 8007fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8007fe4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff fcbe 	bl	8007968 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
                        impulse->fomo_output_size, impulse->fomo_output_size);
                }
                break;
 8007ff2:	e1b1      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685a      	ldr	r2, [r3, #4]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007ffc:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	460b      	mov	r3, r1
 8008006:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7ff fc9e 	bl	800794a <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 800800e:	4603      	mov	r3, r0
 8008010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8008014:	e1a0      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 8008016:	48a5      	ldr	r0, [pc, #660]	; (80082ac <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
 8008018:	f00f ffed 	bl	8017ff6 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800801c:	f06f 0309 	mvn.w	r3, #9
 8008020:	e19c      	b.n	800835c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x414>
            }
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                int version = impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI ?
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8008028:	2b05      	cmp	r3, #5
 800802a:	d101      	bne.n	8008030 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xe8>
 800802c:	2305      	movs	r3, #5
 800802e:	e000      	b.n	8008032 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xea>
 8008030:	2306      	movs	r3, #6
 8008032:	617b      	str	r3, [r7, #20]
                    5 : 6;

                if (output->type == kTfLiteInt8) {
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b09      	cmp	r3, #9
 800803a:	d11b      	bne.n	8008074 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x12c>
                    fill_res = fill_result_struct_quantized_yolov5(
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        version,
                        output->data.int8,
                        output->params.zero_point,
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 8008044:	ee07 3a90 	vmov	s15, r3
 8008048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	eef0 0a47 	vmov.f32	s1, s14
 800805c:	eeb0 0a67 	vmov.f32	s0, s15
 8008060:	4613      	mov	r3, r2
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f002 fe2d 	bl	800acc6 <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffj>
 800806c:	4603      	mov	r3, r0
 800806e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8008072:	e171      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
                else if (output->type == kTfLiteUInt8) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d11b      	bne.n	80080b4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x16c>
                    fill_res = fill_result_struct_quantized_yolov5(
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 8008084:	ee07 3a90 	vmov	s15, r3
 8008088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	eef0 0a47 	vmov.f32	s1, s14
 800809c:	eeb0 0a67 	vmov.f32	s0, s15
 80080a0:	4613      	mov	r3, r2
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f002 fe20 	bl	800acec <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffj>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80080b2:	e151      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
                else if (output->type == kTfLiteFloat32) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d10e      	bne.n	80080da <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x192>
                    fill_res = fill_result_struct_f32_yolov5(
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_yolov5(
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4613      	mov	r3, r2
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f7ff fd17 	bl	8007b00 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfj>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80080d8:	e13e      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	4619      	mov	r1, r3
 80080e0:	4873      	ldr	r0, [pc, #460]	; (80082b0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
 80080e2:	f00f ff88 	bl	8017ff6 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80080e6:	f06f 0309 	mvn.w	r3, #9
 80080ea:	e137      	b.n	800835c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x414>
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    fill_res = fill_result_struct_f32_yolox(
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.f,
                        impulse->tflite_output_features_count);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_yolox(
 80080f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f7ff fd11 	bl	8007b1e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfj>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                #endif
                break;
 8008102:	e129      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
            case EI_CLASSIFIER_LAST_LAYER_YOLOV7: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    size_t output_feature_count = 1;
 8008104:	2301      	movs	r3, #1
 8008106:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 8008108:	2300      	movs	r3, #0
 800810a:	61fb      	str	r3, [r7, #28]
 800810c:	e00d      	b.n	800812a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1e2>
                        output_feature_count *= output->dims->data[ix];
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	461a      	mov	r2, r3
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	fb02 f303 	mul.w	r3, r2, r3
 8008122:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	3301      	adds	r3, #1
 8008128:	61fb      	str	r3, [r7, #28]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	429a      	cmp	r2, r3
 8008134:	dbeb      	blt.n	800810e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1c6>
                    }
                    fill_res = fill_result_struct_f32_yolov7(
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7ff fcfc 	bl	8007b3c <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>
 8008144:	4603      	mov	r3, r0
 8008146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        impulse,
                        result,
                        output->data.f,
                        output_feature_count);
                #endif
                break;
 800814a:	e105      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_SSD:
            case EI_CLASSIFIER_LAST_LAYER_TAO_RETINANET: {

                if (output->type == kTfLiteInt8) {
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b09      	cmp	r3, #9
 8008152:	d118      	bne.n	8008186 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x23e>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800815c:	ee07 3a90 	vmov	s15, r3
 8008160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800816e:	eef0 0a47 	vmov.f32	s1, s14
 8008172:	eeb0 0a67 	vmov.f32	s0, s15
 8008176:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f002 fdca 	bl	800ad12 <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffj>
 800817e:	4603      	mov	r3, r0
 8008180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8008184:	e0e8      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
                else if (output->type == kTfLiteUInt8) {
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b03      	cmp	r3, #3
 800818c:	d118      	bne.n	80081c0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x278>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 80081a8:	eef0 0a47 	vmov.f32	s1, s14
 80081ac:	eeb0 0a67 	vmov.f32	s0, s15
 80081b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f002 fdc0 	bl	800ad38 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffj>
 80081b8:	4603      	mov	r3, r0
 80081ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80081be:	e0cb      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
                else if (output->type == kTfLiteFloat32) {
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d10b      	bne.n	80081e0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x298>
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 80081d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7ff fcc1 	bl	8007b5a <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfj>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80081de:	e0bb      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	4619      	mov	r1, r3
 80081e6:	4833      	ldr	r0, [pc, #204]	; (80082b4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>)
 80081e8:	f00f ff05 	bl	8017ff6 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80081ec:	f06f 0309 	mvn.w	r3, #9
 80081f0:	e0b4      	b.n	800835c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x414>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV3:
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV4: {

                if (output->type == kTfLiteInt8) {
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b09      	cmp	r3, #9
 80081f8:	d118      	bne.n	800822c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2e4>
                    fill_res = fill_result_struct_quantized_tao_yolo(
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolo(
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolo(
 8008214:	eef0 0a47 	vmov.f32	s1, s14
 8008218:	eeb0 0a67 	vmov.f32	s0, s15
 800821c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f002 fd9d 	bl	800ad5e <_Z37fill_result_struct_quantized_tao_yoloIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffj>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 800822a:	e095      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
                else if (output->type == kTfLiteUInt8) {
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2b03      	cmp	r3, #3
 8008232:	d118      	bne.n	8008266 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x31e>
                    fill_res = fill_result_struct_quantized_tao_yolo(
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolo(
 800823c:	ee07 3a90 	vmov	s15, r3
 8008240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolo(
 800824e:	eef0 0a47 	vmov.f32	s1, s14
 8008252:	eeb0 0a67 	vmov.f32	s0, s15
 8008256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f002 fd93 	bl	800ad84 <_Z37fill_result_struct_quantized_tao_yoloIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffj>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8008264:	e078      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
                else if (output->type == kTfLiteFloat32) {
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d10b      	bne.n	8008286 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x33e>
                    fill_res = fill_result_struct_f32_tao_yolo(
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_yolo(
 8008276:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f7ff fc7d 	bl	8007b78 <_ZL31fill_result_struct_f32_tao_yoloPK10ei_impulseP19ei_impulse_result_tPfj>
 800827e:	4603      	mov	r3, r0
 8008280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8008284:	e068      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	4619      	mov	r1, r3
 800828c:	4809      	ldr	r0, [pc, #36]	; (80082b4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>)
 800828e:	f00f feb2 	bl	8017ff6 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8008292:	f06f 0309 	mvn.w	r3, #9
 8008296:	e061      	b.n	800835c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x414>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 800829e:	4619      	mov	r1, r3
 80082a0:	4805      	ldr	r0, [pc, #20]	; (80082b8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x370>)
 80082a2:	f00f fea8 	bl	8017ff6 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80082a6:	f06f 0309 	mvn.w	r3, #9
 80082aa:	e057      	b.n	800835c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x414>
 80082ac:	0802311c 	.word	0x0802311c
 80082b0:	08023164 	.word	0x08023164
 80082b4:	0802319c 	.word	0x0802319c
 80082b8:	080231d0 	.word	0x080231d0
            }
        }
    }
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	789b      	ldrb	r3, [r3, #2]
 80082c0:	2b05      	cmp	r3, #5
 80082c2:	d113      	bne.n	80082ec <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3a4>
    {
        if (!result->copy_output) {
 80082c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80082ca:	f083 0301 	eor.w	r3, r3, #1
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d041      	beq.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
            fill_res = fill_result_visual_ad_struct_f32(impulse, result, output->data.f, debug);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80082dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff fc00 	bl	8007ae4 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 80082e4:	4603      	mov	r3, r0
 80082e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082ea:	e035      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
        }
    }
    // if we copy the output, we don't need to process it as classification
    else
    {
        if (!result->copy_output) {
 80082ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ee:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80082f2:	f083 0301 	eor.w	r3, r3, #1
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d02d      	beq.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
            bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	2b09      	cmp	r3, #9
 8008302:	bf0c      	ite	eq
 8008304:	2301      	moveq	r3, #1
 8008306:	2300      	movne	r3, #0
 8008308:	76fb      	strb	r3, [r7, #27]
            if (int8_output) {
 800830a:	7efb      	ldrb	r3, [r7, #27]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d018      	beq.n	8008342 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3fa>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	ee07 3a90 	vmov	s15, r3
 800831c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	ed93 7a03 	vldr	s14, [r3, #12]
 8008326:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800832a:	eef0 0a47 	vmov.f32	s1, s14
 800832e:	eeb0 0a67 	vmov.f32	s0, s15
 8008332:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff fb2b 	bl	8007990 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 800833a:	4603      	mov	r3, r0
 800833c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008340:	e00a      	b.n	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x410>
            }
            else {
                fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800834a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7ff fb7d 	bl	8007a4c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 8008352:	4603      	mov	r3, r0
 8008354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    return fill_res;
 8008358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800835c:	4618      	mov	r0, r3
 800835e:	3728      	adds	r7, #40	; 0x28
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>:
    uint64_t *ctx_start_us,
    TfLiteTensor* input,
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	617b      	str	r3, [r7, #20]

    *ctx_start_us = ei_read_timer_us();
 8008378:	f00f fe2c 	bl	8017fd4 <_Z16ei_read_timer_usv>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	4829      	ldr	r0, [pc, #164]	; (8008430 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xcc>)
 800838c:	4798      	blx	r3
 800838e:	4603      	mov	r3, r0
 8008390:	74fb      	strb	r3, [r7, #19]
    if (init_status != kTfLiteOk) {
 8008392:	7cfb      	ldrb	r3, [r7, #19]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d007      	beq.n	80083a8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x44>
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
 8008398:	7cfb      	ldrb	r3, [r7, #19]
 800839a:	4619      	mov	r1, r3
 800839c:	4825      	ldr	r0, [pc, #148]	; (8008434 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xd0>)
 800839e:	f00f fe2a 	bl	8017ff6 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 80083a2:	f06f 0305 	mvn.w	r3, #5
 80083a6:	e03f      	b.n	8008428 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    TfLiteStatus status;

    status = graph_config->model_input(0, input);
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	2000      	movs	r0, #0
 80083b0:	4798      	blx	r3
 80083b2:	4603      	mov	r3, r0
 80083b4:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 80083b6:	7cbb      	ldrb	r3, [r7, #18]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x5e>
        return EI_IMPULSE_TFLITE_ERROR;
 80083bc:	f06f 0302 	mvn.w	r3, #2
 80083c0:	e032      	b.n	8008428 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }
    status = graph_config->model_output(block_config->output_data_tensor, output);
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	7a92      	ldrb	r2, [r2, #10]
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	4603      	mov	r3, r0
 80083d2:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 80083d4:	7cbb      	ldrb	r3, [r7, #18]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x7c>
        return EI_IMPULSE_TFLITE_ERROR;
 80083da:	f06f 0302 	mvn.w	r3, #2
 80083de:	e023      	b.n	8008428 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d11d      	bne.n	8008426 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	7b12      	ldrb	r2, [r2, #12]
 80083f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
 80083f8:	4603      	mov	r3, r0
 80083fa:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 80083fc:	7cbb      	ldrb	r3, [r7, #18]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xa4>
            return EI_IMPULSE_TFLITE_ERROR;
 8008402:	f06f 0302 	mvn.w	r3, #2
 8008406:	e00f      	b.n	8008428 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	7ad2      	ldrb	r2, [r2, #11]
 8008410:	6a39      	ldr	r1, [r7, #32]
 8008412:	4610      	mov	r0, r2
 8008414:	4798      	blx	r3
 8008416:	4603      	mov	r3, r0
 8008418:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 800841a:	7cbb      	ldrb	r3, [r7, #18]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
            return EI_IMPULSE_TFLITE_ERROR;
 8008420:	f06f 0302 	mvn.w	r3, #2
 8008424:	e000      	b.n	8008428 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
    }

    return EI_IMPULSE_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	08001741 	.word	0x08001741
 8008434:	08023204 	.word	0x08023204

08008438 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8008438:	b5b0      	push	{r4, r5, r7, lr}
 800843a:	b08e      	sub	sp, #56	; 0x38
 800843c:	af04      	add	r7, sp, #16
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	e9c7 2300 	strd	r2, r3, [r7]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	627b      	str	r3, [r7, #36]	; 0x24

    if (graph_config->model_invoke() != kTfLiteOk) {
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	4798      	blx	r3
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	bf14      	ite	ne
 8008458:	2301      	movne	r3, #1
 800845a:	2300      	moveq	r3, #0
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x30>
        return EI_IMPULSE_TFLITE_ERROR;
 8008462:	f06f 0302 	mvn.w	r3, #2
 8008466:	e04d      	b.n	8008504 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 8008468:	f00f fdb4 	bl	8017fd4 <_Z16ei_read_timer_usv>
 800846c:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8008470:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008478:	1a84      	subs	r4, r0, r2
 800847a:	eb61 0503 	sbc.w	r5, r1, r3
 800847e:	4622      	mov	r2, r4
 8008480:	462b      	mov	r3, r5
 8008482:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008484:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8008488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800848a:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800848e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008492:	f04f 0300 	mov.w	r3, #0
 8008496:	f7f8 fc07 	bl	8000ca8 <__aeabi_ldivmod>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 80084a4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d006      	beq.n	80084ba <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x82>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 80084ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084b2:	4619      	mov	r1, r3
 80084b4:	4815      	ldr	r0, [pc, #84]	; (800850c <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xd4>)
 80084b6:	f00f fd9e 	bl	8017ff6 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 80084ba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80084be:	9302      	str	r3, [sp, #8]
 80084c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084cc:	68b9      	ldr	r1, [r7, #8]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f7ff fd3a 	bl	8007f48 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
 80084d4:	4603      	mov	r3, r0
 80084d6:	75fb      	strb	r3, [r7, #23]
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
 80084d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d002      	beq.n	80084e6 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xae>
        return fill_res;
 80084e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084e4:	e00e      	b.n	8008504 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80084e6:	f00f fd6d 	bl	8017fc4 <_Z29ei_run_impulse_check_canceledv>
 80084ea:	4603      	mov	r3, r0
 80084ec:	f113 0f02 	cmn.w	r3, #2
 80084f0:	bf0c      	ite	eq
 80084f2:	2301      	moveq	r3, #1
 80084f4:	2300      	movne	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xca>
        return EI_IMPULSE_CANCELED;
 80084fc:	f06f 0301 	mvn.w	r3, #1
 8008500:	e000      	b.n	8008504 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    return EI_IMPULSE_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3728      	adds	r7, #40	; 0x28
 8008508:	46bd      	mov	sp, r7
 800850a:	bdb0      	pop	{r4, r5, r7, pc}
 800850c:	08023234 	.word	0x08023234

08008510 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 8008510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008512:	b0d7      	sub	sp, #348	; 0x15c
 8008514:	af06      	add	r7, sp, #24
 8008516:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 800851a:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
 800851e:	6030      	str	r0, [r6, #0]
 8008520:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8008524:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008528:	6001      	str	r1, [r0, #0]
 800852a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800852e:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8008532:	600a      	str	r2, [r1, #0]
 8008534:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008538:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 800853c:	6013      	str	r3, [r2, #0]
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
 800853e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8008542:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 8008546:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 8008550:	f00f fd40 	bl	8017fd4 <_Z16ei_read_timer_usv>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 800855c:	4b65      	ldr	r3, [pc, #404]	; (80086f4 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 800855e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008562:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8008566:	f107 0310 	add.w	r3, r7, #16
 800856a:	2100      	movs	r1, #0
 800856c:	4618      	mov	r0, r3
 800856e:	f001 f9bd 	bl	80098ec <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 8008572:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8008576:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800857a:	f107 0118 	add.w	r1, r7, #24
 800857e:	f107 0310 	add.w	r3, r7, #16
 8008582:	9302      	str	r3, [sp, #8]
 8008584:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	4603      	mov	r3, r0
 8008592:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008596:	f7ff fee5 	bl	8008364 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>
 800859a:	4603      	mov	r3, r0
 800859c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 80085a0:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x9e>
        return init_res;
 80085a8:	f997 4137 	ldrsb.w	r4, [r7, #311]	; 0x137
 80085ac:	e096      	b.n	80086dc <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 80085ae:	f107 0310 	add.w	r3, r7, #16
 80085b2:	4618      	mov	r0, r3
 80085b4:	f002 fbf9 	bl	800adaa <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 80085b8:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130

    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 80085bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80085c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80085cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d4:	4413      	add	r3, r2
 80085d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
 80085da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80085de:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80085e2:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80085e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80085ea:	f5a3 709c 	sub.w	r0, r3, #312	; 0x138
 80085ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80085f8:	6812      	ldr	r2, [r2, #0]
 80085fa:	6800      	ldr	r0, [r0, #0]
 80085fc:	f7ff fb20 	bl	8007c40 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
 8008600:	4603      	mov	r3, r0
 8008602:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    if (input_res != EI_IMPULSE_OK) {
 8008606:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x104>
        return input_res;
 800860e:	f997 412b 	ldrsb.w	r4, [r7, #299]	; 0x12b
 8008612:	e063      	b.n	80086dc <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 8008614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008618:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800861c:	f5a1 709a 	sub.w	r0, r1, #308	; 0x134
 8008620:	f897 1164 	ldrb.w	r1, [r7, #356]	; 0x164
 8008624:	9105      	str	r1, [sp, #20]
 8008626:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800862a:	9104      	str	r1, [sp, #16]
 800862c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008630:	9103      	str	r1, [sp, #12]
 8008632:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8008636:	9102      	str	r1, [sp, #8]
 8008638:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800863c:	9101      	str	r1, [sp, #4]
 800863e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8008642:	9100      	str	r1, [sp, #0]
 8008644:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008648:	6800      	ldr	r0, [r0, #0]
 800864a:	f7ff fef5 	bl	8008438 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>
 800864e:	4603      	mov	r3, r0
 8008650:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    if (result->copy_output) {
 8008654:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008658:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800865c:	2b00      	cmp	r3, #0
 800865e:	d023      	beq.n	80086a8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
 8008660:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008664:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800866c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008670:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4413      	add	r3, r2
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800867e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8008682:	6812      	ldr	r2, [r2, #0]
 8008684:	4413      	add	r3, r2
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff fba2 	bl	8007dd8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
 8008694:	4603      	mov	r3, r0
 8008696:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
        if (output_res != EI_IMPULSE_OK) {
 800869a:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
            return output_res;
 80086a2:	f997 4129 	ldrsb.w	r4, [r7, #297]	; 0x129
 80086a6:	e019      	b.n	80086dc <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
        }
    }

    graph_config->model_reset(ei_aligned_free);
 80086a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	4811      	ldr	r0, [pc, #68]	; (80086f4 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 80086b0:	4798      	blx	r3

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80086b2:	f00f fc8f 	bl	8017fd4 <_Z16ei_read_timer_usv>
 80086b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086ba:	1a84      	subs	r4, r0, r2
 80086bc:	eb61 0503 	sbc.w	r5, r1, r3
 80086c0:	4622      	mov	r2, r4
 80086c2:	462b      	mov	r3, r5
 80086c4:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80086c8:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 80086cc:	f997 312a 	ldrsb.w	r3, [r7, #298]	; 0x12a
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1ca>
        return run_res;
 80086d4:	f997 412a 	ldrsb.w	r4, [r7, #298]	; 0x12a
 80086d8:	e000      	b.n	80086dc <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    return EI_IMPULSE_OK;
 80086da:	2400      	movs	r4, #0
}
 80086dc:	f107 0310 	add.w	r3, r7, #16
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 f918 	bl	8009916 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 80086e6:	4623      	mov	r3, r4
 80086e8:	4618      	mov	r0, r3
 80086ea:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f2:	bf00      	nop
 80086f4:	080017c5 	.word	0x080017c5

080086f8 <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei_feature_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80086f8:	b5b0      	push	{r4, r5, r7, lr}
 80086fa:	b092      	sub	sp, #72	; 0x48
 80086fc:	af04      	add	r7, sp, #16
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	70fb      	strb	r3, [r7, #3]
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 8008706:	2300      	movs	r3, #0
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
 800870a:	e02d      	b.n	8008768 <run_inference+0x70>

        ei_learning_block_t block = impulse->learning_blocks[ix];
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008712:	015b      	lsls	r3, r3, #5
 8008714:	4413      	add	r3, r2
 8008716:	f107 0410 	add.w	r4, r7, #16
 800871a:	461d      	mov	r5, r3
 800871c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800871e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008720:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        result->copy_output = block.keep_output;
 8008728:	7d3a      	ldrb	r2, [r7, #20]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
 8008730:	69bc      	ldr	r4, [r7, #24]
 8008732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	78f9      	ldrb	r1, [r7, #3]
 800873a:	9103      	str	r1, [sp, #12]
 800873c:	9202      	str	r2, [sp, #8]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	9201      	str	r2, [sp, #4]
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	4603      	mov	r3, r0
 8008746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008748:	68b9      	ldr	r1, [r7, #8]
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	47a0      	blx	r4
 800874e:	4603      	mov	r3, r0
 8008750:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (res != EI_IMPULSE_OK) {
 8008754:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <run_inference+0x6a>
            return res;
 800875c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008760:	e016      	b.n	8008790 <run_inference+0x98>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 8008762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008764:	3301      	adds	r3, #1
 8008766:	637b      	str	r3, [r7, #52]	; 0x34
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800876c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800876e:	429a      	cmp	r2, r3
 8008770:	d3cc      	bcc.n	800870c <run_inference+0x14>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8008772:	f00f fc27 	bl	8017fc4 <_Z29ei_run_impulse_check_canceledv>
 8008776:	4603      	mov	r3, r0
 8008778:	f113 0f02 	cmn.w	r3, #2
 800877c:	bf0c      	ite	eq
 800877e:	2301      	moveq	r3, #1
 8008780:	2300      	movne	r3, #0
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <run_inference+0x96>
        return EI_IMPULSE_CANCELED;
 8008788:	f06f 0301 	mvn.w	r3, #1
 800878c:	e000      	b.n	8008790 <run_inference+0x98>
    }

    return EI_IMPULSE_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3738      	adds	r7, #56	; 0x38
 8008794:	46bd      	mov	sp, r7
 8008796:	bdb0      	pop	{r4, r5, r7, pc}

08008798 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	4611      	mov	r1, r2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f002 fbce 	bl	800af4a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	4611      	mov	r1, r2
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff ffe5 	bl	8008798 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4618      	mov	r0, r3
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3310      	adds	r3, #16
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe ff85 	bl	80076f4 <_ZN2ei11ei_signal_tD1Ev>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4618      	mov	r0, r3
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 80087f4:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80087f8:	b0a4      	sub	sp, #144	; 0x90
 80087fa:	af02      	add	r7, sp, #8
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	607a      	str	r2, [r7, #4]
 8008802:	70fb      	strb	r3, [r7, #3]
 8008804:	2600      	movs	r6, #0
    if (can_run_classifier_image_quantized(impulse, block) == EI_IMPULSE_OK) {
        return run_classifier_image_quantized(impulse, signal, result, debug);
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8008806:	f44f 7284 	mov.w	r2, #264	; 0x108
 800880a:	2100      	movs	r1, #0
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f017 f869 	bl	801f8e4 <memset>
    uint32_t block_num = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881a:	4413      	add	r3, r2
 800881c:	677b      	str	r3, [r7, #116]	; 0x74

    // smart pointer to features array
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 800881e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008820:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008824:	d201      	bcs.n	800882a <process_impulse+0x36>
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	e001      	b.n	800882e <process_impulse+0x3a>
 800882a:	f04f 33ff 	mov.w	r3, #4294967295
 800882e:	4618      	mov	r0, r3
 8008830:	f012 fbab 	bl	801af8a <_Znaj>
 8008834:	4603      	mov	r3, r0
 8008836:	461a      	mov	r2, r3
 8008838:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f002 fad0 	bl	800ade4 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>
    ei_feature_t* features = features_ptr.get();
 8008844:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008848:	4618      	mov	r0, r3
 800884a:	f002 faf9 	bl	800ae40 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>
 800884e:	6738      	str	r0, [r7, #112]	; 0x70

    // have it outside of the loop to avoid going out of scope
    std::unique_ptr<ei::matrix_t> *matrix_ptrs = new std::unique_ptr<ei::matrix_t>[block_num];
 8008850:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8008852:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008856:	429c      	cmp	r4, r3
 8008858:	d202      	bcs.n	8008860 <process_impulse+0x6c>
 800885a:	1ca3      	adds	r3, r4, #2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	e001      	b.n	8008864 <process_impulse+0x70>
 8008860:	f04f 33ff 	mov.w	r3, #4294967295
 8008864:	4618      	mov	r0, r3
 8008866:	f012 fb90 	bl	801af8a <_Znaj>
 800886a:	4603      	mov	r3, r0
 800886c:	461d      	mov	r5, r3
 800886e:	2304      	movs	r3, #4
 8008870:	602b      	str	r3, [r5, #0]
 8008872:	1d2b      	adds	r3, r5, #4
 8008874:	601c      	str	r4, [r3, #0]
 8008876:	f105 0308 	add.w	r3, r5, #8
 800887a:	1e62      	subs	r2, r4, #1
 800887c:	4614      	mov	r4, r2
 800887e:	4698      	mov	r8, r3
 8008880:	e005      	b.n	800888e <process_impulse+0x9a>
 8008882:	4640      	mov	r0, r8
 8008884:	f002 fb10 	bl	800aea8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>
 8008888:	f108 0804 	add.w	r8, r8, #4
 800888c:	3c01      	subs	r4, #1
 800888e:	2c00      	cmp	r4, #0
 8008890:	daf7      	bge.n	8008882 <process_impulse+0x8e>
 8008892:	f105 0308 	add.w	r3, r5, #8
 8008896:	66fb      	str	r3, [r7, #108]	; 0x6c

    uint64_t dsp_start_us = ei_read_timer_us();
 8008898:	f00f fb9c 	bl	8017fd4 <_Z16ei_read_timer_usv>
 800889c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

    size_t out_features_index = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 80088a6:	2300      	movs	r3, #0
 80088a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088ac:	e0f9      	b.n	8008aa2 <process_impulse+0x2ae>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80088b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088b6:	4613      	mov	r3, r2
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	4413      	add	r3, r2
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	440b      	add	r3, r1
 80088c0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80088c4:	461d      	mov	r5, r3
 80088c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80088ce:	e884 0003 	stmia.w	r4, {r0, r1}
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
 80088d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088da:	18d4      	adds	r4, r2, r3
 80088dc:	2010      	movs	r0, #16
 80088de:	f012 fb43 	bl	801af68 <_Znwj>
 80088e2:	4603      	mov	r3, r0
 80088e4:	461d      	mov	r5, r3
 80088e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088e8:	2300      	movs	r3, #0
 80088ea:	2101      	movs	r1, #1
 80088ec:	4628      	mov	r0, r5
 80088ee:	f7f9 f8c8 	bl	8001a82 <_ZN2ei9ei_matrixC1EmmPf>
 80088f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80088f6:	4629      	mov	r1, r5
 80088f8:	4618      	mov	r0, r3
 80088fa:	f002 faf5 	bl	800aee8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80088fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008902:	4619      	mov	r1, r3
 8008904:	4620      	mov	r0, r4
 8008906:	f7ff ff57 	bl	80087b8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 800890a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800890e:	4618      	mov	r0, r3
 8008910:	f002 faf9 	bl	800af06 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
        features[ix].matrix = matrix_ptrs[ix].get();
 8008914:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800891c:	18d1      	adds	r1, r2, r3
 800891e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008926:	18d4      	adds	r4, r2, r3
 8008928:	4608      	mov	r0, r1
 800892a:	f002 fb2a 	bl	800af82 <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>
 800892e:	4603      	mov	r3, r0
 8008930:	6023      	str	r3, [r4, #0]
        features[ix].blockId = block.blockId;
 8008932:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800893a:	4413      	add	r3, r2
 800893c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800893e:	605a      	str	r2, [r3, #4]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 8008940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008946:	441a      	add	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	429a      	cmp	r2, r3
 800894e:	d922      	bls.n	8008996 <process_impulse+0x1a2>
            ei_printf("ERR: Would write outside feature buffer\n");
 8008950:	48a3      	ldr	r0, [pc, #652]	; (8008be0 <process_impulse+0x3ec>)
 8008952:	f00f fb50 	bl	8017ff6 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8008956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d019      	beq.n	8008990 <process_impulse+0x19c>
 800895c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800895e:	3b04      	subs	r3, #4
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008966:	18d4      	adds	r4, r2, r3
 8008968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800896a:	429c      	cmp	r4, r3
 800896c:	d004      	beq.n	8008978 <process_impulse+0x184>
 800896e:	3c04      	subs	r4, #4
 8008970:	4620      	mov	r0, r4
 8008972:	f002 fac8 	bl	800af06 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008976:	e7f7      	b.n	8008968 <process_impulse+0x174>
 8008978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897a:	f1a3 0208 	sub.w	r2, r3, #8
 800897e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008980:	3b04      	subs	r3, #4
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3302      	adds	r3, #2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4619      	mov	r1, r3
 800898a:	4610      	mov	r0, r2
 800898c:	f012 faea 	bl	801af64 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8008990:	f06f 0604 	mvn.w	r6, #4
 8008994:	e117      	b.n	8008bc6 <process_impulse+0x3d2>
            delete[] matrix_ptrs;
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, features[ix].matrix, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8008996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008998:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800899a:	f107 0014 	add.w	r0, r7, #20
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	460b      	mov	r3, r1
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	f7fe ff1b 	bl	80077e0 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), features[ix].matrix, block.config, impulse->frequency);
 80089aa:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80089ac:	f107 0314 	add.w	r3, r7, #20
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe ff45 	bl	8007840 <_ZN14SignalWithAxes10get_signalEv>
 80089b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089be:	4413      	add	r3, r2
 80089c0:	6819      	ldr	r1, [r3, #0]
 80089c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80089ca:	eeb0 0a67 	vmov.f32	s0, s15
 80089ce:	47a0      	blx	r4
 80089d0:	65b8      	str	r0, [r7, #88]	; 0x58
#endif

        if (ret != EIDSP_OK) {
 80089d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d024      	beq.n	8008a22 <process_impulse+0x22e>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 80089d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089da:	4882      	ldr	r0, [pc, #520]	; (8008be4 <process_impulse+0x3f0>)
 80089dc:	f00f fb0b 	bl	8017ff6 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 80089e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d019      	beq.n	8008a1a <process_impulse+0x226>
 80089e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e8:	3b04      	subs	r3, #4
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089f0:	18d4      	adds	r4, r2, r3
 80089f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f4:	429c      	cmp	r4, r3
 80089f6:	d004      	beq.n	8008a02 <process_impulse+0x20e>
 80089f8:	3c04      	subs	r4, #4
 80089fa:	4620      	mov	r0, r4
 80089fc:	f002 fa83 	bl	800af06 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008a00:	e7f7      	b.n	80089f2 <process_impulse+0x1fe>
 8008a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a04:	f1a3 0208 	sub.w	r2, r3, #8
 8008a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a0a:	3b04      	subs	r3, #4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3302      	adds	r3, #2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4619      	mov	r1, r3
 8008a14:	4610      	mov	r0, r2
 8008a16:	f012 faa5 	bl	801af64 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8008a1a:	f06f 0604 	mvn.w	r6, #4
 8008a1e:	2400      	movs	r4, #0
 8008a20:	e032      	b.n	8008a88 <process_impulse+0x294>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8008a22:	f00f facf 	bl	8017fc4 <_Z29ei_run_impulse_check_canceledv>
 8008a26:	4603      	mov	r3, r0
 8008a28:	f113 0f02 	cmn.w	r3, #2
 8008a2c:	bf0c      	ite	eq
 8008a2e:	2301      	moveq	r3, #1
 8008a30:	2300      	movne	r3, #0
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d020      	beq.n	8008a7a <process_impulse+0x286>
            delete[] matrix_ptrs;
 8008a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d019      	beq.n	8008a72 <process_impulse+0x27e>
 8008a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a40:	3b04      	subs	r3, #4
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a48:	18d4      	adds	r4, r2, r3
 8008a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a4c:	429c      	cmp	r4, r3
 8008a4e:	d004      	beq.n	8008a5a <process_impulse+0x266>
 8008a50:	3c04      	subs	r4, #4
 8008a52:	4620      	mov	r0, r4
 8008a54:	f002 fa57 	bl	800af06 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008a58:	e7f7      	b.n	8008a4a <process_impulse+0x256>
 8008a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a5c:	f1a3 0208 	sub.w	r2, r3, #8
 8008a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a62:	3b04      	subs	r3, #4
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3302      	adds	r3, #2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	f012 fa79 	bl	801af64 <_ZdaPvj>
            return EI_IMPULSE_CANCELED;
 8008a72:	f06f 0601 	mvn.w	r6, #1
 8008a76:	2400      	movs	r4, #0
 8008a78:	e006      	b.n	8008a88 <process_impulse+0x294>
        }

        out_features_index += block.n_output_features;
 8008a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008a80:	4413      	add	r3, r2
 8008a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
 8008a86:	2401      	movs	r4, #1
 8008a88:	f107 0314 	add.w	r3, r7, #20
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7ff fea3 	bl	80087d8 <_ZN14SignalWithAxesD1Ev>
 8008a92:	2c01      	cmp	r4, #1
 8008a94:	f040 8097 	bne.w	8008bc6 <process_impulse+0x3d2>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8008a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	f4ff aeff 	bcc.w	80088ae <process_impulse+0xba>
            features[impulse->dsp_blocks_size + ix].blockId = block.blockId;
        }
    }
#endif // EI_CLASSIFIER_SINGLE_FEATURE_INPUT

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8008ab0:	f00f fa90 	bl	8017fd4 <_Z16ei_read_timer_usv>
 8008ab4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008ab8:	ebb0 0a02 	subs.w	sl, r0, r2
 8008abc:	eb61 0b03 	sbc.w	fp, r1, r3
 8008ac0:	4652      	mov	r2, sl
 8008ac2:	465b      	mov	r3, fp
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8008ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ad4:	f04f 0300 	mov.w	r3, #0
 8008ad8:	f7f8 f8e6 	bl	8000ca8 <__aeabi_ldivmod>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d03d      	beq.n	8008b68 <process_impulse+0x374>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008af2:	4619      	mov	r1, r3
 8008af4:	483c      	ldr	r0, [pc, #240]	; (8008be8 <process_impulse+0x3f4>)
 8008af6:	f00f fa7e 	bl	8017ff6 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
 8008afa:	2300      	movs	r3, #0
 8008afc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008afe:	e02f      	b.n	8008b60 <process_impulse+0x36c>
            if (features[ix].matrix == nullptr) {
 8008b00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b06:	4413      	add	r3, r2
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d024      	beq.n	8008b58 <process_impulse+0x364>
                continue;
            }
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8008b0e:	2300      	movs	r3, #0
 8008b10:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b12:	e014      	b.n	8008b3e <process_impulse+0x34a>
                ei_printf_float(features[ix].matrix->buffer[jx]);
 8008b14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b16:	00db      	lsls	r3, r3, #3
 8008b18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b1a:	4413      	add	r3, r2
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	edd3 7a00 	vldr	s15, [r3]
 8008b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b2e:	f00f fa77 	bl	8018020 <_Z15ei_printf_floatf>
                ei_printf(" ");
 8008b32:	482e      	ldr	r0, [pc, #184]	; (8008bec <process_impulse+0x3f8>)
 8008b34:	f00f fa5f 	bl	8017ff6 <_Z9ei_printfPKcz>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8008b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b40:	00db      	lsls	r3, r3, #3
 8008b42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b44:	4413      	add	r3, r2
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d3e1      	bcc.n	8008b14 <process_impulse+0x320>
            }
            ei_printf("\n");
 8008b50:	4827      	ldr	r0, [pc, #156]	; (8008bf0 <process_impulse+0x3fc>)
 8008b52:	f00f fa50 	bl	8017ff6 <_Z9ei_printfPKcz>
 8008b56:	e000      	b.n	8008b5a <process_impulse+0x366>
                continue;
 8008b58:	bf00      	nop
        for (size_t ix = 0; ix < block_num; ix++) {
 8008b5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d3cb      	bcc.n	8008b00 <process_impulse+0x30c>
        }
    }

    if (debug) {
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <process_impulse+0x380>
        ei_printf("Running impulse...\n");
 8008b6e:	4821      	ldr	r0, [pc, #132]	; (8008bf4 <process_impulse+0x400>)
 8008b70:	f00f fa41 	bl	8017ff6 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR res = run_inference(impulse, features, result, debug);
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7ff fdbc 	bl	80086f8 <run_inference>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    delete[] matrix_ptrs;
 8008b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d019      	beq.n	8008bc0 <process_impulse+0x3cc>
 8008b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b8e:	3b04      	subs	r3, #4
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b96:	18d4      	adds	r4, r2, r3
 8008b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9a:	429c      	cmp	r4, r3
 8008b9c:	d004      	beq.n	8008ba8 <process_impulse+0x3b4>
 8008b9e:	3c04      	subs	r4, #4
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f002 f9b0 	bl	800af06 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008ba6:	e7f7      	b.n	8008b98 <process_impulse+0x3a4>
 8008ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008baa:	f1a3 0208 	sub.w	r2, r3, #8
 8008bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3302      	adds	r3, #2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4610      	mov	r0, r2
 8008bbc:	f012 f9d2 	bl	801af64 <_ZdaPvj>

    return res;
 8008bc0:	f997 605f 	ldrsb.w	r6, [r7, #95]	; 0x5f
 8008bc4:	e000      	b.n	8008bc8 <process_impulse+0x3d4>
            return EI_IMPULSE_DSP_ERROR;
 8008bc6:	bf00      	nop
}
 8008bc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f002 f918 	bl	800ae02 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>
 8008bd2:	4633      	mov	r3, r6
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3788      	adds	r7, #136	; 0x88
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8008bde:	bf00      	nop
 8008be0:	080232a8 	.word	0x080232a8
 8008be4:	080232d4 	.word	0x080232d4
 8008be8:	080232fc 	.word	0x080232fc
 8008bec:	08023310 	.word	0x08023310
 8008bf0:	08023000 	.word	0x08023000
 8008bf4:	08023314 	.word	0x08023314

08008bf8 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b0a6      	sub	sp, #152	; 0x98
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	4613      	mov	r3, r2
 8008c04:	71fb      	strb	r3, [r7, #7]
    const ei_impulse_t impulse = ei_default_impulse;
 8008c06:	4a0a      	ldr	r2, [pc, #40]	; (8008c30 <run_classifier+0x38>)
 8008c08:	f107 0310 	add.w	r3, r7, #16
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	2288      	movs	r2, #136	; 0x88
 8008c10:	4618      	mov	r0, r3
 8008c12:	f016 ff4b 	bl	801faac <memcpy>
    return process_impulse(&impulse, signal, result, debug);
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	f107 0010 	add.w	r0, r7, #16
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	68f9      	ldr	r1, [r7, #12]
 8008c20:	f7ff fde8 	bl	80087f4 <process_impulse>
 8008c24:	4603      	mov	r3, r0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3798      	adds	r7, #152	; 0x98
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	08025ee4 	.word	0x08025ee4

08008c34 <_Z16get_feature_datajjPf>:

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USER CODE BEGIN PV */
float features[4];
int get_feature_data(size_t offset, size_t length, float *out_ptr){
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4a06      	ldr	r2, [pc, #24]	; (8008c60 <_Z16get_feature_datajjPf+0x2c>)
 8008c46:	1899      	adds	r1, r3, r2
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f016 ff2c 	bl	801faac <memcpy>
    return 0;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20000c24 	.word	0x20000c24

08008c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b0ce      	sub	sp, #312	; 0x138
 8008c68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008c6a:	f007 fcec 	bl	8010646 <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 8008c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fd31 	bl	80076da <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length=sizeof(features)/sizeof(features[0]);
 8008c78:	2304      	movs	r3, #4
 8008c7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  signal.get_data = &get_feature_data;
 8008c7e:	4bb8      	ldr	r3, [pc, #736]	; (8008f60 <main+0x2fc>)
 8008c80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c84:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8008c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 ff94 	bl	800abbc <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008c94:	f000 f9c8 	bl	8009028 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008c98:	f000 fbca 	bl	8009430 <_ZL12MX_GPIO_Initv>
  MX_DFSDM1_Init();
 8008c9c:	f000 fa36 	bl	800910c <_ZL14MX_DFSDM1_Initv>
  MX_I2C2_Init();
 8008ca0:	f000 fa72 	bl	8009188 <_ZL12MX_I2C2_Initv>
  MX_QUADSPI_Init();
 8008ca4:	f000 fabe 	bl	8009224 <_ZL15MX_QUADSPI_Initv>
  MX_SPI3_Init();
 8008ca8:	f000 fae6 	bl	8009278 <_ZL12MX_SPI3_Initv>
  MX_USART1_UART_Init();
 8008cac:	f000 fb26 	bl	80092fc <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 8008cb0:	f000 fb58 	bl	8009364 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8008cb4:	f000 fb8a 	bl	80093cc <_ZL22MX_USB_OTG_FS_PCD_Initv>
  /* USER CODE BEGIN 2 */
  LoadCellL.begin();
 8008cb8:	48aa      	ldr	r0, [pc, #680]	; (8008f64 <main+0x300>)
 8008cba:	f7f8 fabc 	bl	8001236 <_ZN9HX711_ADC5beginEv>
    LoadCellF.begin();
 8008cbe:	48aa      	ldr	r0, [pc, #680]	; (8008f68 <main+0x304>)
 8008cc0:	f7f8 fab9 	bl	8001236 <_ZN9HX711_ADC5beginEv>
    LoadCellR.begin();
 8008cc4:	48a9      	ldr	r0, [pc, #676]	; (8008f6c <main+0x308>)
 8008cc6:	f7f8 fab6 	bl	8001236 <_ZN9HX711_ADC5beginEv>
    LoadCellB.begin();
 8008cca:	48a9      	ldr	r0, [pc, #676]	; (8008f70 <main+0x30c>)
 8008ccc:	f7f8 fab3 	bl	8001236 <_ZN9HX711_ADC5beginEv>

    calibrationValueL = 43.06;
 8008cd0:	4ba8      	ldr	r3, [pc, #672]	; (8008f74 <main+0x310>)
 8008cd2:	4aa9      	ldr	r2, [pc, #676]	; (8008f78 <main+0x314>)
 8008cd4:	601a      	str	r2, [r3, #0]
    calibrationValueF = -46.38;
 8008cd6:	4ba9      	ldr	r3, [pc, #676]	; (8008f7c <main+0x318>)
 8008cd8:	4aa9      	ldr	r2, [pc, #676]	; (8008f80 <main+0x31c>)
 8008cda:	601a      	str	r2, [r3, #0]
    calibrationValueR = -45.18;
 8008cdc:	4ba9      	ldr	r3, [pc, #676]	; (8008f84 <main+0x320>)
 8008cde:	4aaa      	ldr	r2, [pc, #680]	; (8008f88 <main+0x324>)
 8008ce0:	601a      	str	r2, [r3, #0]
    calibrationValueB = -53.89;
 8008ce2:	4baa      	ldr	r3, [pc, #680]	; (8008f8c <main+0x328>)
 8008ce4:	4aaa      	ldr	r2, [pc, #680]	; (8008f90 <main+0x32c>)
 8008ce6:	601a      	str	r2, [r3, #0]
    unsigned long stabilizingtime = 2000;
 8008ce8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008cec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    bool _tare = true;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    LoadCellL.start(stabilizingtime, _tare);
 8008cf6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008d00:	4898      	ldr	r0, [pc, #608]	; (8008f64 <main+0x300>)
 8008d02:	f7f8 faa7 	bl	8001254 <_ZN9HX711_ADC5startEmb>
    LoadCellF.start(stabilizingtime, _tare);
 8008d06:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008d10:	4895      	ldr	r0, [pc, #596]	; (8008f68 <main+0x304>)
 8008d12:	f7f8 fa9f 	bl	8001254 <_ZN9HX711_ADC5startEmb>
    LoadCellR.start(stabilizingtime, _tare);
 8008d16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008d20:	4892      	ldr	r0, [pc, #584]	; (8008f6c <main+0x308>)
 8008d22:	f7f8 fa97 	bl	8001254 <_ZN9HX711_ADC5startEmb>
    LoadCellB.start(stabilizingtime, _tare);
 8008d26:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008d30:	488f      	ldr	r0, [pc, #572]	; (8008f70 <main+0x30c>)
 8008d32:	f7f8 fa8f 	bl	8001254 <_ZN9HX711_ADC5startEmb>
    if (LoadCellL.getTareTimeoutFlag()) {
 8008d36:	488b      	ldr	r0, [pc, #556]	; (8008f64 <main+0x300>)
 8008d38:	f7f8 fcaa 	bl	8001690 <_ZN9HX711_ADC18getTareTimeoutFlagEv>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <main+0xee>
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"Timeout, check Left MCU>HX711  wiring and pin designations\n", 52, HAL_MAX_DELAY);
 8008d42:	f04f 33ff 	mov.w	r3, #4294967295
 8008d46:	2234      	movs	r2, #52	; 0x34
 8008d48:	4992      	ldr	r1, [pc, #584]	; (8008f94 <main+0x330>)
 8008d4a:	4893      	ldr	r0, [pc, #588]	; (8008f98 <main+0x334>)
 8008d4c:	f00a f8a7 	bl	8012e9e <HAL_UART_Transmit>
        while (1);
 8008d50:	e7fe      	b.n	8008d50 <main+0xec>
      }
    else {
        LoadCellL.setCalFactor(calibrationValueL);
 8008d52:	4b88      	ldr	r3, [pc, #544]	; (8008f74 <main+0x310>)
 8008d54:	edd3 7a00 	vldr	s15, [r3]
 8008d58:	eeb0 0a67 	vmov.f32	s0, s15
 8008d5c:	4881      	ldr	r0, [pc, #516]	; (8008f64 <main+0x300>)
 8008d5e:	f7f8 faed 	bl	800133c <_ZN9HX711_ADC12setCalFactorEf>
        HAL_UART_Transmit(&huart1, (uint8_t*)"Startup Of left sensors is complete\n", 30, HAL_MAX_DELAY);
 8008d62:	f04f 33ff 	mov.w	r3, #4294967295
 8008d66:	221e      	movs	r2, #30
 8008d68:	498c      	ldr	r1, [pc, #560]	; (8008f9c <main+0x338>)
 8008d6a:	488b      	ldr	r0, [pc, #556]	; (8008f98 <main+0x334>)
 8008d6c:	f00a f897 	bl	8012e9e <HAL_UART_Transmit>
      }
    if (LoadCellR.getTareTimeoutFlag()) {
 8008d70:	487e      	ldr	r0, [pc, #504]	; (8008f6c <main+0x308>)
 8008d72:	f7f8 fc8d 	bl	8001690 <_ZN9HX711_ADC18getTareTimeoutFlagEv>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d007      	beq.n	8008d8c <main+0x128>
    	  HAL_UART_Transmit(&huart1, (uint8_t*)"Timeout, check Right MCU>HX711 wiring and pin designations\n", 52, HAL_MAX_DELAY);
 8008d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d80:	2234      	movs	r2, #52	; 0x34
 8008d82:	4987      	ldr	r1, [pc, #540]	; (8008fa0 <main+0x33c>)
 8008d84:	4884      	ldr	r0, [pc, #528]	; (8008f98 <main+0x334>)
 8008d86:	f00a f88a 	bl	8012e9e <HAL_UART_Transmit>
          while (1);
 8008d8a:	e7fe      	b.n	8008d8a <main+0x126>
        }
      else {
          LoadCellR.setCalFactor(calibrationValueR);
 8008d8c:	4b7d      	ldr	r3, [pc, #500]	; (8008f84 <main+0x320>)
 8008d8e:	edd3 7a00 	vldr	s15, [r3]
 8008d92:	eeb0 0a67 	vmov.f32	s0, s15
 8008d96:	4875      	ldr	r0, [pc, #468]	; (8008f6c <main+0x308>)
 8008d98:	f7f8 fad0 	bl	800133c <_ZN9HX711_ADC12setCalFactorEf>
          HAL_UART_Transmit(&huart1, (uint8_t*)"Startup Of right is complete\n", 30, HAL_MAX_DELAY);
 8008d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008da0:	221e      	movs	r2, #30
 8008da2:	4980      	ldr	r1, [pc, #512]	; (8008fa4 <main+0x340>)
 8008da4:	487c      	ldr	r0, [pc, #496]	; (8008f98 <main+0x334>)
 8008da6:	f00a f87a 	bl	8012e9e <HAL_UART_Transmit>
        }
    if (LoadCellF.getTareTimeoutFlag()) {
 8008daa:	486f      	ldr	r0, [pc, #444]	; (8008f68 <main+0x304>)
 8008dac:	f7f8 fc70 	bl	8001690 <_ZN9HX711_ADC18getTareTimeoutFlagEv>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d007      	beq.n	8008dc6 <main+0x162>
    	  HAL_UART_Transmit(&huart1, (uint8_t*)"Timeout, check Front MCU>HX711 wiring and pin designations\n", 52, HAL_MAX_DELAY);
 8008db6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dba:	2234      	movs	r2, #52	; 0x34
 8008dbc:	497a      	ldr	r1, [pc, #488]	; (8008fa8 <main+0x344>)
 8008dbe:	4876      	ldr	r0, [pc, #472]	; (8008f98 <main+0x334>)
 8008dc0:	f00a f86d 	bl	8012e9e <HAL_UART_Transmit>
          while (1);
 8008dc4:	e7fe      	b.n	8008dc4 <main+0x160>
        }
      else {
          LoadCellF.setCalFactor(calibrationValueF);
 8008dc6:	4b6d      	ldr	r3, [pc, #436]	; (8008f7c <main+0x318>)
 8008dc8:	edd3 7a00 	vldr	s15, [r3]
 8008dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8008dd0:	4865      	ldr	r0, [pc, #404]	; (8008f68 <main+0x304>)
 8008dd2:	f7f8 fab3 	bl	800133c <_ZN9HX711_ADC12setCalFactorEf>
          HAL_UART_Transmit(&huart1, (uint8_t*)"Startup of front sensors is complete\n", 30, HAL_MAX_DELAY);
 8008dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dda:	221e      	movs	r2, #30
 8008ddc:	4973      	ldr	r1, [pc, #460]	; (8008fac <main+0x348>)
 8008dde:	486e      	ldr	r0, [pc, #440]	; (8008f98 <main+0x334>)
 8008de0:	f00a f85d 	bl	8012e9e <HAL_UART_Transmit>
        }
    if (LoadCellB.getTareTimeoutFlag()) {
 8008de4:	4862      	ldr	r0, [pc, #392]	; (8008f70 <main+0x30c>)
 8008de6:	f7f8 fc53 	bl	8001690 <_ZN9HX711_ADC18getTareTimeoutFlagEv>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d007      	beq.n	8008e00 <main+0x19c>
    	  HAL_UART_Transmit(&huart1, (uint8_t*)"Timeout, check Back MCU>HX711 wiring and pin designations\n", 52, HAL_MAX_DELAY);
 8008df0:	f04f 33ff 	mov.w	r3, #4294967295
 8008df4:	2234      	movs	r2, #52	; 0x34
 8008df6:	496e      	ldr	r1, [pc, #440]	; (8008fb0 <main+0x34c>)
 8008df8:	4867      	ldr	r0, [pc, #412]	; (8008f98 <main+0x334>)
 8008dfa:	f00a f850 	bl	8012e9e <HAL_UART_Transmit>
          while (1);
 8008dfe:	e7fe      	b.n	8008dfe <main+0x19a>
        }
      else {
          LoadCellB.setCalFactor(calibrationValueB);
 8008e00:	4b62      	ldr	r3, [pc, #392]	; (8008f8c <main+0x328>)
 8008e02:	edd3 7a00 	vldr	s15, [r3]
 8008e06:	eeb0 0a67 	vmov.f32	s0, s15
 8008e0a:	4859      	ldr	r0, [pc, #356]	; (8008f70 <main+0x30c>)
 8008e0c:	f7f8 fa96 	bl	800133c <_ZN9HX711_ADC12setCalFactorEf>
          HAL_UART_Transmit(&huart1, (uint8_t*)"Startup of back sensors is complete\n", 30, HAL_MAX_DELAY);
 8008e10:	f04f 33ff 	mov.w	r3, #4294967295
 8008e14:	221e      	movs	r2, #30
 8008e16:	4967      	ldr	r1, [pc, #412]	; (8008fb4 <main+0x350>)
 8008e18:	485f      	ldr	r0, [pc, #380]	; (8008f98 <main+0x334>)
 8008e1a:	f00a f840 	bl	8012e9e <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static bool newDataReady = 0;
	  	  	    const int serialPrintInterval = 0; //increase value to slow down serial print activity
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  	  	    if (LoadCellL.update()&& LoadCellR.update()&& LoadCellF.update()&&LoadCellB.update()) newDataReady = true;
 8008e24:	484f      	ldr	r0, [pc, #316]	; (8008f64 <main+0x300>)
 8008e26:	f7f8 faa2 	bl	800136e <_ZN9HX711_ADC6updateEv>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d013      	beq.n	8008e58 <main+0x1f4>
 8008e30:	484e      	ldr	r0, [pc, #312]	; (8008f6c <main+0x308>)
 8008e32:	f7f8 fa9c 	bl	800136e <_ZN9HX711_ADC6updateEv>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00d      	beq.n	8008e58 <main+0x1f4>
 8008e3c:	484a      	ldr	r0, [pc, #296]	; (8008f68 <main+0x304>)
 8008e3e:	f7f8 fa96 	bl	800136e <_ZN9HX711_ADC6updateEv>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d007      	beq.n	8008e58 <main+0x1f4>
 8008e48:	4849      	ldr	r0, [pc, #292]	; (8008f70 <main+0x30c>)
 8008e4a:	f7f8 fa90 	bl	800136e <_ZN9HX711_ADC6updateEv>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <main+0x1f4>
 8008e54:	2301      	movs	r3, #1
 8008e56:	e000      	b.n	8008e5a <main+0x1f6>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <main+0x200>
 8008e5e:	4b56      	ldr	r3, [pc, #344]	; (8008fb8 <main+0x354>)
 8008e60:	2201      	movs	r2, #1
 8008e62:	701a      	strb	r2, [r3, #0]
	  	  	    if (newDataReady) {
 8008e64:	4b54      	ldr	r3, [pc, #336]	; (8008fb8 <main+0x354>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d03e      	beq.n	8008eea <main+0x286>
	  	  	        if (HAL_GetTick() > t + serialPrintInterval) {
 8008e6c:	f007 fc54 	bl	8010718 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	4b52      	ldr	r3, [pc, #328]	; (8008fbc <main+0x358>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	bf8c      	ite	hi
 8008e7a:	2301      	movhi	r3, #1
 8008e7c:	2300      	movls	r3, #0
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d032      	beq.n	8008eea <main+0x286>
	  	  	          features[0]= LoadCellL.getData();features[1]=LoadCellR.getData();features[2]=LoadCellF.getData();features[3]=LoadCellB.getData();
 8008e84:	4837      	ldr	r0, [pc, #220]	; (8008f64 <main+0x300>)
 8008e86:	f7f8 fabc 	bl	8001402 <_ZN9HX711_ADC7getDataEv>
 8008e8a:	eef0 7a40 	vmov.f32	s15, s0
 8008e8e:	4b4c      	ldr	r3, [pc, #304]	; (8008fc0 <main+0x35c>)
 8008e90:	edc3 7a00 	vstr	s15, [r3]
 8008e94:	4835      	ldr	r0, [pc, #212]	; (8008f6c <main+0x308>)
 8008e96:	f7f8 fab4 	bl	8001402 <_ZN9HX711_ADC7getDataEv>
 8008e9a:	eef0 7a40 	vmov.f32	s15, s0
 8008e9e:	4b48      	ldr	r3, [pc, #288]	; (8008fc0 <main+0x35c>)
 8008ea0:	edc3 7a01 	vstr	s15, [r3, #4]
 8008ea4:	4830      	ldr	r0, [pc, #192]	; (8008f68 <main+0x304>)
 8008ea6:	f7f8 faac 	bl	8001402 <_ZN9HX711_ADC7getDataEv>
 8008eaa:	eef0 7a40 	vmov.f32	s15, s0
 8008eae:	4b44      	ldr	r3, [pc, #272]	; (8008fc0 <main+0x35c>)
 8008eb0:	edc3 7a02 	vstr	s15, [r3, #8]
 8008eb4:	482e      	ldr	r0, [pc, #184]	; (8008f70 <main+0x30c>)
 8008eb6:	f7f8 faa4 	bl	8001402 <_ZN9HX711_ADC7getDataEv>
 8008eba:	eef0 7a40 	vmov.f32	s15, s0
 8008ebe:	4b40      	ldr	r3, [pc, #256]	; (8008fc0 <main+0x35c>)
 8008ec0:	edc3 7a03 	vstr	s15, [r3, #12]

	  	  	        signal.get_data = &get_feature_data;
 8008ec4:	4b26      	ldr	r3, [pc, #152]	; (8008f60 <main+0x2fc>)
 8008ec6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008eca:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f001 fe71 	bl	800abbc <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>

	  	  	          newDataReady = 0;
 8008eda:	4b37      	ldr	r3, [pc, #220]	; (8008fb8 <main+0x354>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	701a      	strb	r2, [r3, #0]
	  	  	          t = HAL_GetTick();
 8008ee0:	f007 fc1a 	bl	8010718 <HAL_GetTick>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	4a35      	ldr	r2, [pc, #212]	; (8008fbc <main+0x358>)
 8008ee8:	6013      	str	r3, [r2, #0]
	  	  	        }
	  	  	      }

	  	  	   //tareLoadCell();
	  	  	   HAL_Delay(2000);
 8008eea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008eee:	f007 fc1f 	bl	8010730 <HAL_Delay>


	  	  		  ei_impulse_result_t result = {0};
 8008ef2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ef6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008efa:	4618      	mov	r0, r3
 8008efc:	f44f 7384 	mov.w	r3, #264	; 0x108
 8008f00:	461a      	mov	r2, r3
 8008f02:	2100      	movs	r1, #0
 8008f04:	f016 fcee 	bl	801f8e4 <memset>
	  	  		EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 8008f08:	4639      	mov	r1, r7
 8008f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0e:	2201      	movs	r2, #1
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7ff fe71 	bl	8008bf8 <run_classifier>
 8008f16:	4603      	mov	r3, r0
 8008f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

	  	  		  ei_printf("run_classifier returned:%d\n",res);
 8008f1c:	f997 3127 	ldrsb.w	r3, [r7, #295]	; 0x127
 8008f20:	4619      	mov	r1, r3
 8008f22:	4828      	ldr	r0, [pc, #160]	; (8008fc4 <main+0x360>)
 8008f24:	f00f f867 	bl	8017ff6 <_Z9ei_printfPKcz>
	  	  		  ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8008f28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f2c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008f30:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008f34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f38:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008f3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008f40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f44:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008f48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f4c:	481e      	ldr	r0, [pc, #120]	; (8008fc8 <main+0x364>)
 8008f4e:	f00f f852 	bl	8017ff6 <_Z9ei_printfPKcz>
	  	  		            result.timing.dsp, result.timing.classification, result.timing.anomaly);

	  	  ei_printf("[");
 8008f52:	481e      	ldr	r0, [pc, #120]	; (8008fcc <main+0x368>)
 8008f54:	f00f f84f 	bl	8017ff6 <_Z9ei_printfPKcz>
	  	   for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008f5e:	e053      	b.n	8009008 <main+0x3a4>
 8008f60:	08008c35 	.word	0x08008c35
 8008f64:	20000c34 	.word	0x20000c34
 8008f68:	20000cd8 	.word	0x20000cd8
 8008f6c:	20000d7c 	.word	0x20000d7c
 8008f70:	20000e20 	.word	0x20000e20
 8008f74:	20000ec8 	.word	0x20000ec8
 8008f78:	422c3d71 	.word	0x422c3d71
 8008f7c:	20000ecc 	.word	0x20000ecc
 8008f80:	c239851f 	.word	0xc239851f
 8008f84:	20000ed0 	.word	0x20000ed0
 8008f88:	c234b852 	.word	0xc234b852
 8008f8c:	20000ed4 	.word	0x20000ed4
 8008f90:	c2578f5c 	.word	0xc2578f5c
 8008f94:	080233b4 	.word	0x080233b4
 8008f98:	20000608 	.word	0x20000608
 8008f9c:	080233f0 	.word	0x080233f0
 8008fa0:	08023418 	.word	0x08023418
 8008fa4:	08023454 	.word	0x08023454
 8008fa8:	08023474 	.word	0x08023474
 8008fac:	080234b0 	.word	0x080234b0
 8008fb0:	080234d8 	.word	0x080234d8
 8008fb4:	08023514 	.word	0x08023514
 8008fb8:	20000ed8 	.word	0x20000ed8
 8008fbc:	20000ec4 	.word	0x20000ec4
 8008fc0:	20000c24 	.word	0x20000c24
 8008fc4:	0802353c 	.word	0x0802353c
 8008fc8:	08023254 	.word	0x08023254
 8008fcc:	08023558 	.word	0x08023558
	  	    ei_printf_float(result.classification[ix].value);
 8008fd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fd4:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8008fd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008fdc:	3301      	adds	r3, #1
 8008fde:	00db      	lsls	r3, r3, #3
 8008fe0:	4413      	add	r3, r2
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	edd3 7a00 	vldr	s15, [r3]
 8008fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8008fec:	f00f f818 	bl	8018020 <_Z15ei_printf_floatf>
	  	    #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	            ei_printf(", ");
	  	    #else
	  	            if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 8008ff0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d002      	beq.n	8008ffe <main+0x39a>
	  	                ei_printf(", ");
 8008ff8:	4809      	ldr	r0, [pc, #36]	; (8009020 <main+0x3bc>)
 8008ffa:	f00e fffc 	bl	8017ff6 <_Z9ei_printfPKcz>
	  	   for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8008ffe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009002:	3301      	adds	r3, #1
 8009004:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009008:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800900c:	2b04      	cmp	r3, #4
 800900e:	d9df      	bls.n	8008fd0 <main+0x36c>
	  	        }
	  	    #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	        ei_printf_float(result.anomaly);
	  	    #endif

	  	        ei_printf("]\n\n\n");
 8009010:	4804      	ldr	r0, [pc, #16]	; (8009024 <main+0x3c0>)
 8009012:	f00e fff0 	bl	8017ff6 <_Z9ei_printfPKcz>
	  	        HAL_Delay(5000);
 8009016:	f241 3088 	movw	r0, #5000	; 0x1388
 800901a:	f007 fb89 	bl	8010730 <HAL_Delay>
  }
 800901e:	e6fe      	b.n	8008e1e <main+0x1ba>
 8009020:	0802355c 	.word	0x0802355c
 8009024:	08023560 	.word	0x08023560

08009028 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b096      	sub	sp, #88	; 0x58
 800902c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800902e:	f107 0314 	add.w	r3, r7, #20
 8009032:	2244      	movs	r2, #68	; 0x44
 8009034:	2100      	movs	r1, #0
 8009036:	4618      	mov	r0, r3
 8009038:	f016 fc54 	bl	801f8e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800903c:	463b      	mov	r3, r7
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	605a      	str	r2, [r3, #4]
 8009044:	609a      	str	r2, [r3, #8]
 8009046:	60da      	str	r2, [r3, #12]
 8009048:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800904a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800904e:	f008 fa47 	bl	80114e0 <HAL_PWREx_ControlVoltageScaling>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	bf14      	ite	ne
 8009058:	2301      	movne	r3, #1
 800905a:	2300      	moveq	r3, #0
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8009062:	f000 fb83 	bl	800976c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8009066:	f008 fa1d 	bl	80114a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800906a:	4b27      	ldr	r3, [pc, #156]	; (8009108 <_Z18SystemClock_Configv+0xe0>)
 800906c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009070:	4a25      	ldr	r2, [pc, #148]	; (8009108 <_Z18SystemClock_Configv+0xe0>)
 8009072:	f023 0318 	bic.w	r3, r3, #24
 8009076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800907a:	2314      	movs	r3, #20
 800907c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800907e:	2301      	movs	r3, #1
 8009080:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009082:	2301      	movs	r3, #1
 8009084:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800908a:	2360      	movs	r3, #96	; 0x60
 800908c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800908e:	2302      	movs	r3, #2
 8009090:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8009092:	2301      	movs	r3, #1
 8009094:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009096:	2301      	movs	r3, #1
 8009098:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800909a:	2328      	movs	r3, #40	; 0x28
 800909c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800909e:	2307      	movs	r3, #7
 80090a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80090a2:	2302      	movs	r3, #2
 80090a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80090a6:	2302      	movs	r3, #2
 80090a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80090aa:	f107 0314 	add.w	r3, r7, #20
 80090ae:	4618      	mov	r0, r3
 80090b0:	f008 fb38 	bl	8011724 <HAL_RCC_OscConfig>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bf14      	ite	ne
 80090ba:	2301      	movne	r3, #1
 80090bc:	2300      	moveq	r3, #0
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80090c4:	f000 fb52 	bl	800976c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80090c8:	230f      	movs	r3, #15
 80090ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80090cc:	2303      	movs	r3, #3
 80090ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80090d0:	2300      	movs	r3, #0
 80090d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80090d4:	2300      	movs	r3, #0
 80090d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80090d8:	2300      	movs	r3, #0
 80090da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80090dc:	463b      	mov	r3, r7
 80090de:	2104      	movs	r1, #4
 80090e0:	4618      	mov	r0, r3
 80090e2:	f008 fefb 	bl	8011edc <HAL_RCC_ClockConfig>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	bf14      	ite	ne
 80090ec:	2301      	movne	r3, #1
 80090ee:	2300      	moveq	r3, #0
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80090f6:	f000 fb39 	bl	800976c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80090fa:	f009 fbfd 	bl	80128f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80090fe:	bf00      	nop
 8009100:	3758      	adds	r7, #88	; 0x58
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	40021000 	.word	0x40021000

0800910c <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8009110:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 8009112:	4a1c      	ldr	r2, [pc, #112]	; (8009184 <_ZL14MX_DFSDM1_Initv+0x78>)
 8009114:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8009116:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 8009118:	2201      	movs	r2, #1
 800911a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800911c:	4b18      	ldr	r3, [pc, #96]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 800911e:	2200      	movs	r2, #0
 8009120:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8009122:	4b17      	ldr	r3, [pc, #92]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 8009124:	2202      	movs	r2, #2
 8009126:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8009128:	4b15      	ldr	r3, [pc, #84]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 800912a:	2200      	movs	r2, #0
 800912c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800912e:	4b14      	ldr	r3, [pc, #80]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 8009130:	2200      	movs	r2, #0
 8009132:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8009134:	4b12      	ldr	r3, [pc, #72]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 8009136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800913a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800913c:	4b10      	ldr	r3, [pc, #64]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 800913e:	2200      	movs	r2, #0
 8009140:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8009142:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 8009144:	2204      	movs	r2, #4
 8009146:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8009148:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 800914a:	2200      	movs	r2, #0
 800914c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 8009150:	2201      	movs	r2, #1
 8009152:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8009154:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 8009156:	2200      	movs	r2, #0
 8009158:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800915a:	4b09      	ldr	r3, [pc, #36]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 800915c:	2200      	movs	r2, #0
 800915e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8009160:	4807      	ldr	r0, [pc, #28]	; (8009180 <_ZL14MX_DFSDM1_Initv+0x74>)
 8009162:	f007 fc1b 	bl	801099c <HAL_DFSDM_ChannelInit>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	bf14      	ite	ne
 800916c:	2301      	movne	r3, #1
 800916e:	2300      	moveq	r3, #0
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <_ZL14MX_DFSDM1_Initv+0x6e>
  {
    Error_Handler();
 8009176:	f000 faf9 	bl	800976c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800917a:	bf00      	nop
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	200004d4 	.word	0x200004d4
 8009184:	40016020 	.word	0x40016020

08009188 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800918c:	4b23      	ldr	r3, [pc, #140]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 800918e:	4a24      	ldr	r2, [pc, #144]	; (8009220 <_ZL12MX_I2C2_Initv+0x98>)
 8009190:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8009192:	4b22      	ldr	r3, [pc, #136]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 8009194:	f640 6214 	movw	r2, #3604	; 0xe14
 8009198:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800919a:	4b20      	ldr	r3, [pc, #128]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 800919c:	2200      	movs	r2, #0
 800919e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80091a0:	4b1e      	ldr	r3, [pc, #120]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 80091a2:	2201      	movs	r2, #1
 80091a4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80091a6:	4b1d      	ldr	r3, [pc, #116]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80091ac:	4b1b      	ldr	r3, [pc, #108]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80091b2:	4b1a      	ldr	r3, [pc, #104]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80091b8:	4b18      	ldr	r3, [pc, #96]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80091be:	4b17      	ldr	r3, [pc, #92]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80091c4:	4815      	ldr	r0, [pc, #84]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 80091c6:	f007 fef2 	bl	8010fae <HAL_I2C_Init>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bf14      	ite	ne
 80091d0:	2301      	movne	r3, #1
 80091d2:	2300      	moveq	r3, #0
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80091da:	f000 fac7 	bl	800976c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80091de:	2100      	movs	r1, #0
 80091e0:	480e      	ldr	r0, [pc, #56]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 80091e2:	f007 ff7f 	bl	80110e4 <HAL_I2CEx_ConfigAnalogFilter>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bf14      	ite	ne
 80091ec:	2301      	movne	r3, #1
 80091ee:	2300      	moveq	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <_ZL12MX_I2C2_Initv+0x72>
  {
    Error_Handler();
 80091f6:	f000 fab9 	bl	800976c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80091fa:	2100      	movs	r1, #0
 80091fc:	4807      	ldr	r0, [pc, #28]	; (800921c <_ZL12MX_I2C2_Initv+0x94>)
 80091fe:	f007 ffbc 	bl	801117a <HAL_I2CEx_ConfigDigitalFilter>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	bf14      	ite	ne
 8009208:	2301      	movne	r3, #1
 800920a:	2300      	moveq	r3, #0
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <_ZL12MX_I2C2_Initv+0x8e>
  {
    Error_Handler();
 8009212:	f000 faab 	bl	800976c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009216:	bf00      	nop
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	2000050c 	.word	0x2000050c
 8009220:	40005800 	.word	0x40005800

08009224 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8009228:	4b11      	ldr	r3, [pc, #68]	; (8009270 <_ZL15MX_QUADSPI_Initv+0x4c>)
 800922a:	4a12      	ldr	r2, [pc, #72]	; (8009274 <_ZL15MX_QUADSPI_Initv+0x50>)
 800922c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800922e:	4b10      	ldr	r3, [pc, #64]	; (8009270 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8009230:	2202      	movs	r2, #2
 8009232:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8009234:	4b0e      	ldr	r3, [pc, #56]	; (8009270 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8009236:	2204      	movs	r2, #4
 8009238:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800923a:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <_ZL15MX_QUADSPI_Initv+0x4c>)
 800923c:	2210      	movs	r2, #16
 800923e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8009242:	2217      	movs	r2, #23
 8009244:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8009246:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8009248:	2200      	movs	r2, #0
 800924a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800924c:	4b08      	ldr	r3, [pc, #32]	; (8009270 <_ZL15MX_QUADSPI_Initv+0x4c>)
 800924e:	2200      	movs	r2, #0
 8009250:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8009252:	4807      	ldr	r0, [pc, #28]	; (8009270 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8009254:	f008 f9aa 	bl	80115ac <HAL_QSPI_Init>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	bf14      	ite	ne
 800925e:	2301      	movne	r3, #1
 8009260:	2300      	moveq	r3, #0
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <_ZL15MX_QUADSPI_Initv+0x48>
  {
    Error_Handler();
 8009268:	f000 fa80 	bl	800976c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800926c:	bf00      	nop
 800926e:	bd80      	pop	{r7, pc}
 8009270:	20000560 	.word	0x20000560
 8009274:	a0001000 	.word	0xa0001000

08009278 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800927c:	4b1d      	ldr	r3, [pc, #116]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 800927e:	4a1e      	ldr	r2, [pc, #120]	; (80092f8 <_ZL12MX_SPI3_Initv+0x80>)
 8009280:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009282:	4b1c      	ldr	r3, [pc, #112]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 8009284:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009288:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800928a:	4b1a      	ldr	r3, [pc, #104]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 800928c:	2200      	movs	r2, #0
 800928e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8009290:	4b18      	ldr	r3, [pc, #96]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 8009292:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009296:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009298:	4b16      	ldr	r3, [pc, #88]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 800929a:	2200      	movs	r2, #0
 800929c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800929e:	4b15      	ldr	r3, [pc, #84]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80092a4:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 80092a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092ac:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80092b2:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80092b8:	4b0e      	ldr	r3, [pc, #56]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092be:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80092c4:	4b0b      	ldr	r3, [pc, #44]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 80092c6:	2207      	movs	r2, #7
 80092c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80092ca:	4b0a      	ldr	r3, [pc, #40]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80092d0:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 80092d2:	2208      	movs	r2, #8
 80092d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80092d6:	4807      	ldr	r0, [pc, #28]	; (80092f4 <_ZL12MX_SPI3_Initv+0x7c>)
 80092d8:	f009 fcf0 	bl	8012cbc <HAL_SPI_Init>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	bf14      	ite	ne
 80092e2:	2301      	movne	r3, #1
 80092e4:	2300      	moveq	r3, #0
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 80092ec:	f000 fa3e 	bl	800976c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80092f0:	bf00      	nop
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	200005a4 	.word	0x200005a4
 80092f8:	40003c00 	.word	0x40003c00

080092fc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009300:	4b16      	ldr	r3, [pc, #88]	; (800935c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009302:	4a17      	ldr	r2, [pc, #92]	; (8009360 <_ZL19MX_USART1_UART_Initv+0x64>)
 8009304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009306:	4b15      	ldr	r3, [pc, #84]	; (800935c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800930c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800930e:	4b13      	ldr	r3, [pc, #76]	; (800935c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009310:	2200      	movs	r2, #0
 8009312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009314:	4b11      	ldr	r3, [pc, #68]	; (800935c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009316:	2200      	movs	r2, #0
 8009318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800931a:	4b10      	ldr	r3, [pc, #64]	; (800935c <_ZL19MX_USART1_UART_Initv+0x60>)
 800931c:	2200      	movs	r2, #0
 800931e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009320:	4b0e      	ldr	r3, [pc, #56]	; (800935c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009322:	220c      	movs	r2, #12
 8009324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009326:	4b0d      	ldr	r3, [pc, #52]	; (800935c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009328:	2200      	movs	r2, #0
 800932a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800932c:	4b0b      	ldr	r3, [pc, #44]	; (800935c <_ZL19MX_USART1_UART_Initv+0x60>)
 800932e:	2200      	movs	r2, #0
 8009330:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009332:	4b0a      	ldr	r3, [pc, #40]	; (800935c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009334:	2200      	movs	r2, #0
 8009336:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009338:	4b08      	ldr	r3, [pc, #32]	; (800935c <_ZL19MX_USART1_UART_Initv+0x60>)
 800933a:	2200      	movs	r2, #0
 800933c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800933e:	4807      	ldr	r0, [pc, #28]	; (800935c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009340:	f009 fd5f 	bl	8012e02 <HAL_UART_Init>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	bf14      	ite	ne
 800934a:	2301      	movne	r3, #1
 800934c:	2300      	moveq	r3, #0
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8009354:	f000 fa0a 	bl	800976c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009358:	bf00      	nop
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20000608 	.word	0x20000608
 8009360:	40013800 	.word	0x40013800

08009364 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009368:	4b16      	ldr	r3, [pc, #88]	; (80093c4 <_ZL19MX_USART3_UART_Initv+0x60>)
 800936a:	4a17      	ldr	r2, [pc, #92]	; (80093c8 <_ZL19MX_USART3_UART_Initv+0x64>)
 800936c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800936e:	4b15      	ldr	r3, [pc, #84]	; (80093c4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009374:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009376:	4b13      	ldr	r3, [pc, #76]	; (80093c4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009378:	2200      	movs	r2, #0
 800937a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800937c:	4b11      	ldr	r3, [pc, #68]	; (80093c4 <_ZL19MX_USART3_UART_Initv+0x60>)
 800937e:	2200      	movs	r2, #0
 8009380:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009382:	4b10      	ldr	r3, [pc, #64]	; (80093c4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009384:	2200      	movs	r2, #0
 8009386:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009388:	4b0e      	ldr	r3, [pc, #56]	; (80093c4 <_ZL19MX_USART3_UART_Initv+0x60>)
 800938a:	220c      	movs	r2, #12
 800938c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800938e:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009390:	2200      	movs	r2, #0
 8009392:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009394:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009396:	2200      	movs	r2, #0
 8009398:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800939a:	4b0a      	ldr	r3, [pc, #40]	; (80093c4 <_ZL19MX_USART3_UART_Initv+0x60>)
 800939c:	2200      	movs	r2, #0
 800939e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80093a0:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <_ZL19MX_USART3_UART_Initv+0x60>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80093a6:	4807      	ldr	r0, [pc, #28]	; (80093c4 <_ZL19MX_USART3_UART_Initv+0x60>)
 80093a8:	f009 fd2b 	bl	8012e02 <HAL_UART_Init>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bf14      	ite	ne
 80093b2:	2301      	movne	r3, #1
 80093b4:	2300      	moveq	r3, #0
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 80093bc:	f000 f9d6 	bl	800976c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80093c0:	bf00      	nop
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	20000690 	.word	0x20000690
 80093c8:	40004800 	.word	0x40004800

080093cc <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093d0:	4b16      	ldr	r3, [pc, #88]	; (800942c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80093d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80093d8:	4b14      	ldr	r3, [pc, #80]	; (800942c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80093da:	2206      	movs	r2, #6
 80093dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093de:	4b13      	ldr	r3, [pc, #76]	; (800942c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80093e0:	2202      	movs	r2, #2
 80093e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093e4:	4b11      	ldr	r3, [pc, #68]	; (800942c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80093e6:	2202      	movs	r2, #2
 80093e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093ea:	4b10      	ldr	r3, [pc, #64]	; (800942c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80093f0:	4b0e      	ldr	r3, [pc, #56]	; (800942c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80093f6:	4b0d      	ldr	r3, [pc, #52]	; (800942c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80093fc:	4b0b      	ldr	r3, [pc, #44]	; (800942c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80093fe:	2200      	movs	r2, #0
 8009400:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009402:	4b0a      	ldr	r3, [pc, #40]	; (800942c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8009404:	2200      	movs	r2, #0
 8009406:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009408:	4b08      	ldr	r3, [pc, #32]	; (800942c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800940a:	2200      	movs	r2, #0
 800940c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800940e:	4807      	ldr	r0, [pc, #28]	; (800942c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8009410:	f007 feff 	bl	8011212 <HAL_PCD_Init>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	bf14      	ite	ne
 800941a:	2301      	movne	r3, #1
 800941c:	2300      	moveq	r3, #0
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8009424:	f000 f9a2 	bl	800976c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8009428:	bf00      	nop
 800942a:	bd80      	pop	{r7, pc}
 800942c:	20000718 	.word	0x20000718

08009430 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b08a      	sub	sp, #40	; 0x28
 8009434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009436:	f107 0314 	add.w	r3, r7, #20
 800943a:	2200      	movs	r2, #0
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	605a      	str	r2, [r3, #4]
 8009440:	609a      	str	r2, [r3, #8]
 8009442:	60da      	str	r2, [r3, #12]
 8009444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009446:	4bbd      	ldr	r3, [pc, #756]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 8009448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944a:	4abc      	ldr	r2, [pc, #752]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 800944c:	f043 0310 	orr.w	r3, r3, #16
 8009450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009452:	4bba      	ldr	r3, [pc, #744]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 8009454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009456:	f003 0310 	and.w	r3, r3, #16
 800945a:	613b      	str	r3, [r7, #16]
 800945c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800945e:	4bb7      	ldr	r3, [pc, #732]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 8009460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009462:	4ab6      	ldr	r2, [pc, #728]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 8009464:	f043 0304 	orr.w	r3, r3, #4
 8009468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800946a:	4bb4      	ldr	r3, [pc, #720]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 800946c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009476:	4bb1      	ldr	r3, [pc, #708]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 8009478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800947a:	4ab0      	ldr	r2, [pc, #704]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 800947c:	f043 0301 	orr.w	r3, r3, #1
 8009480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009482:	4bae      	ldr	r3, [pc, #696]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 8009484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	60bb      	str	r3, [r7, #8]
 800948c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800948e:	4bab      	ldr	r3, [pc, #684]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 8009490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009492:	4aaa      	ldr	r2, [pc, #680]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 8009494:	f043 0302 	orr.w	r3, r3, #2
 8009498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800949a:	4ba8      	ldr	r3, [pc, #672]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 800949c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	607b      	str	r3, [r7, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80094a6:	4ba5      	ldr	r3, [pc, #660]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 80094a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094aa:	4aa4      	ldr	r2, [pc, #656]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 80094ac:	f043 0308 	orr.w	r3, r3, #8
 80094b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80094b2:	4ba2      	ldr	r3, [pc, #648]	; (800973c <_ZL12MX_GPIO_Initv+0x30c>)
 80094b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b6:	f003 0308 	and.w	r3, r3, #8
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80094be:	2200      	movs	r2, #0
 80094c0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80094c4:	489e      	ldr	r0, [pc, #632]	; (8009740 <_ZL12MX_GPIO_Initv+0x310>)
 80094c6:	f007 fd37 	bl	8010f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, sckL_Pin|sckR_Pin|sckF_Pin|sckB_Pin
 80094ca:	2200      	movs	r2, #0
 80094cc:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80094d0:	489c      	ldr	r0, [pc, #624]	; (8009744 <_ZL12MX_GPIO_Initv+0x314>)
 80094d2:	f007 fd31 	bl	8010f38 <HAL_GPIO_WritePin>
                          |VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80094d6:	2200      	movs	r2, #0
 80094d8:	f248 1104 	movw	r1, #33028	; 0x8104
 80094dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80094e0:	f007 fd2a 	bl	8010f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80094e4:	2200      	movs	r2, #0
 80094e6:	f24f 0104 	movw	r1, #61444	; 0xf004
 80094ea:	4897      	ldr	r0, [pc, #604]	; (8009748 <_ZL12MX_GPIO_Initv+0x318>)
 80094ec:	f007 fd24 	bl	8010f38 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80094f0:	2200      	movs	r2, #0
 80094f2:	f241 0181 	movw	r1, #4225	; 0x1081
 80094f6:	4895      	ldr	r0, [pc, #596]	; (800974c <_ZL12MX_GPIO_Initv+0x31c>)
 80094f8:	f007 fd1e 	bl	8010f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80094fc:	2201      	movs	r2, #1
 80094fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009502:	4892      	ldr	r0, [pc, #584]	; (800974c <_ZL12MX_GPIO_Initv+0x31c>)
 8009504:	f007 fd18 	bl	8010f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8009508:	2201      	movs	r2, #1
 800950a:	2120      	movs	r1, #32
 800950c:	488e      	ldr	r0, [pc, #568]	; (8009748 <_ZL12MX_GPIO_Initv+0x318>)
 800950e:	f007 fd13 	bl	8010f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8009512:	2201      	movs	r2, #1
 8009514:	2101      	movs	r1, #1
 8009516:	488a      	ldr	r0, [pc, #552]	; (8009740 <_ZL12MX_GPIO_Initv+0x310>)
 8009518:	f007 fd0e 	bl	8010f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800951c:	f240 1315 	movw	r3, #277	; 0x115
 8009520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009522:	2301      	movs	r3, #1
 8009524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009526:	2300      	movs	r3, #0
 8009528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800952a:	2300      	movs	r3, #0
 800952c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800952e:	f107 0314 	add.w	r3, r7, #20
 8009532:	4619      	mov	r1, r3
 8009534:	4882      	ldr	r0, [pc, #520]	; (8009740 <_ZL12MX_GPIO_Initv+0x310>)
 8009536:	f007 fb3d 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800953a:	236a      	movs	r3, #106	; 0x6a
 800953c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800953e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009544:	2300      	movs	r3, #0
 8009546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009548:	f107 0314 	add.w	r3, r7, #20
 800954c:	4619      	mov	r1, r3
 800954e:	487c      	ldr	r0, [pc, #496]	; (8009740 <_ZL12MX_GPIO_Initv+0x310>)
 8009550:	f007 fb30 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8009554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800955a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800955e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009560:	2300      	movs	r3, #0
 8009562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8009564:	f107 0314 	add.w	r3, r7, #20
 8009568:	4619      	mov	r1, r3
 800956a:	4876      	ldr	r0, [pc, #472]	; (8009744 <_ZL12MX_GPIO_Initv+0x314>)
 800956c:	f007 fb22 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin;
 8009570:	2303      	movs	r3, #3
 8009572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8009574:	230b      	movs	r3, #11
 8009576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009578:	2300      	movs	r3, #0
 800957a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800957c:	f107 0314 	add.w	r3, r7, #20
 8009580:	4619      	mov	r1, r3
 8009582:	4870      	ldr	r0, [pc, #448]	; (8009744 <_ZL12MX_GPIO_Initv+0x314>)
 8009584:	f007 fb16 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : sckL_Pin sckR_Pin sckF_Pin sckB_Pin
                           VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = sckL_Pin|sckR_Pin|sckF_Pin|sckB_Pin
 8009588:	f44f 731f 	mov.w	r3, #636	; 0x27c
 800958c:	617b      	str	r3, [r7, #20]
                          |VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800958e:	2301      	movs	r3, #1
 8009590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009592:	2300      	movs	r3, #0
 8009594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009596:	2300      	movs	r3, #0
 8009598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800959a:	f107 0314 	add.w	r3, r7, #20
 800959e:	4619      	mov	r1, r3
 80095a0:	4868      	ldr	r0, [pc, #416]	; (8009744 <_ZL12MX_GPIO_Initv+0x314>)
 80095a2:	f007 fb07 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80095a6:	2303      	movs	r3, #3
 80095a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095aa:	2302      	movs	r3, #2
 80095ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095b2:	2303      	movs	r3, #3
 80095b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80095b6:	2308      	movs	r3, #8
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095ba:	f107 0314 	add.w	r3, r7, #20
 80095be:	4619      	mov	r1, r3
 80095c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095c4:	f007 faf6 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80095c8:	f248 1304 	movw	r3, #33028	; 0x8104
 80095cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80095ce:	2301      	movs	r3, #1
 80095d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095d6:	2300      	movs	r3, #0
 80095d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095da:	f107 0314 	add.w	r3, r7, #20
 80095de:	4619      	mov	r1, r3
 80095e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095e4:	f007 fae6 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : dtR_Pin dtL_Pin */
  GPIO_InitStruct.Pin = dtR_Pin|dtL_Pin;
 80095e8:	2318      	movs	r3, #24
 80095ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095ec:	2300      	movs	r3, #0
 80095ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095f0:	2300      	movs	r3, #0
 80095f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095f4:	f107 0314 	add.w	r3, r7, #20
 80095f8:	4619      	mov	r1, r3
 80095fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095fe:	f007 fad9 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8009602:	23e0      	movs	r3, #224	; 0xe0
 8009604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009606:	2302      	movs	r3, #2
 8009608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800960a:	2300      	movs	r3, #0
 800960c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800960e:	2303      	movs	r3, #3
 8009610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009612:	2305      	movs	r3, #5
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009616:	f107 0314 	add.w	r3, r7, #20
 800961a:	4619      	mov	r1, r3
 800961c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009620:	f007 fac8 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8009624:	2301      	movs	r3, #1
 8009626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009628:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800962c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800962e:	2300      	movs	r3, #0
 8009630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8009632:	f107 0314 	add.w	r3, r7, #20
 8009636:	4619      	mov	r1, r3
 8009638:	4843      	ldr	r0, [pc, #268]	; (8009748 <_ZL12MX_GPIO_Initv+0x318>)
 800963a:	f007 fabb 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : dtF_Pin dtB_Pin */
  GPIO_InitStruct.Pin = dtF_Pin|dtB_Pin;
 800963e:	2312      	movs	r3, #18
 8009640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009642:	2300      	movs	r3, #0
 8009644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009646:	2300      	movs	r3, #0
 8009648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800964a:	f107 0314 	add.w	r3, r7, #20
 800964e:	4619      	mov	r1, r3
 8009650:	483d      	ldr	r0, [pc, #244]	; (8009748 <_ZL12MX_GPIO_Initv+0x318>)
 8009652:	f007 faaf 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8009656:	f24f 0324 	movw	r3, #61476	; 0xf024
 800965a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800965c:	2301      	movs	r3, #1
 800965e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009660:	2300      	movs	r3, #0
 8009662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009664:	2300      	movs	r3, #0
 8009666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009668:	f107 0314 	add.w	r3, r7, #20
 800966c:	4619      	mov	r1, r3
 800966e:	4836      	ldr	r0, [pc, #216]	; (8009748 <_ZL12MX_GPIO_Initv+0x318>)
 8009670:	f007 faa0 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8009674:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8009678:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800967a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800967e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009680:	2300      	movs	r3, #0
 8009682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009684:	f107 0314 	add.w	r3, r7, #20
 8009688:	4619      	mov	r1, r3
 800968a:	4830      	ldr	r0, [pc, #192]	; (800974c <_ZL12MX_GPIO_Initv+0x31c>)
 800968c:	f007 fa92 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8009690:	f243 0381 	movw	r3, #12417	; 0x3081
 8009694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009696:	2301      	movs	r3, #1
 8009698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800969a:	2300      	movs	r3, #0
 800969c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800969e:	2300      	movs	r3, #0
 80096a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80096a2:	f107 0314 	add.w	r3, r7, #20
 80096a6:	4619      	mov	r1, r3
 80096a8:	4828      	ldr	r0, [pc, #160]	; (800974c <_ZL12MX_GPIO_Initv+0x31c>)
 80096aa:	f007 fa83 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80096ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80096b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80096b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80096b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096be:	f107 0314 	add.w	r3, r7, #20
 80096c2:	4619      	mov	r1, r3
 80096c4:	481f      	ldr	r0, [pc, #124]	; (8009744 <_ZL12MX_GPIO_Initv+0x314>)
 80096c6:	f007 fa75 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80096ca:	2302      	movs	r3, #2
 80096cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ce:	2302      	movs	r3, #2
 80096d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096d6:	2303      	movs	r3, #3
 80096d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80096da:	2305      	movs	r3, #5
 80096dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80096de:	f107 0314 	add.w	r3, r7, #20
 80096e2:	4619      	mov	r1, r3
 80096e4:	4819      	ldr	r0, [pc, #100]	; (800974c <_ZL12MX_GPIO_Initv+0x31c>)
 80096e6:	f007 fa65 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80096ea:	2378      	movs	r3, #120	; 0x78
 80096ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ee:	2302      	movs	r3, #2
 80096f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096f6:	2303      	movs	r3, #3
 80096f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80096fa:	2307      	movs	r3, #7
 80096fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80096fe:	f107 0314 	add.w	r3, r7, #20
 8009702:	4619      	mov	r1, r3
 8009704:	4811      	ldr	r0, [pc, #68]	; (800974c <_ZL12MX_GPIO_Initv+0x31c>)
 8009706:	f007 fa55 	bl	8010bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800970a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800970e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009710:	2312      	movs	r3, #18
 8009712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009714:	2300      	movs	r3, #0
 8009716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009718:	2303      	movs	r3, #3
 800971a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800971c:	2304      	movs	r3, #4
 800971e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009720:	f107 0314 	add.w	r3, r7, #20
 8009724:	4619      	mov	r1, r3
 8009726:	4808      	ldr	r0, [pc, #32]	; (8009748 <_ZL12MX_GPIO_Initv+0x318>)
 8009728:	f007 fa44 	bl	8010bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800972c:	2200      	movs	r2, #0
 800972e:	2100      	movs	r1, #0
 8009730:	2017      	movs	r0, #23
 8009732:	f007 f8fc 	bl	801092e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009736:	2017      	movs	r0, #23
 8009738:	e00a      	b.n	8009750 <_ZL12MX_GPIO_Initv+0x320>
 800973a:	bf00      	nop
 800973c:	40021000 	.word	0x40021000
 8009740:	48001000 	.word	0x48001000
 8009744:	48000800 	.word	0x48000800
 8009748:	48000400 	.word	0x48000400
 800974c:	48000c00 	.word	0x48000c00
 8009750:	f007 f909 	bl	8010966 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009754:	2200      	movs	r2, #0
 8009756:	2100      	movs	r1, #0
 8009758:	2028      	movs	r0, #40	; 0x28
 800975a:	f007 f8e8 	bl	801092e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800975e:	2028      	movs	r0, #40	; 0x28
 8009760:	f007 f901 	bl	8010966 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009764:	bf00      	nop
 8009766:	3728      	adds	r7, #40	; 0x28
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800976c:	b480      	push	{r7}
 800976e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009770:	b672      	cpsid	i
}
 8009772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009774:	e7fe      	b.n	8009774 <Error_Handler+0x8>

08009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8009776:	b480      	push	{r7}
 8009778:	b083      	sub	sp, #12
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	109b      	asrs	r3, r3, #2
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8009796:	b580      	push	{r7, lr}
 8009798:	b082      	sub	sp, #8
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f001 fbf9 	bl	800af9c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>
 80097aa:	4603      	mov	r3, r0
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	603b      	str	r3, [r7, #0]
#else
      explicit
      vector(size_type __n, const bool& __value = bool(),
	     const allocator_type& __a = allocator_type())
#endif
      : _Base(__a)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 fbf4 	bl	800afb4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>
      {
	_M_initialize(__n);
 80097cc:	68b9      	ldr	r1, [r7, #8]
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f001 fc13 	bl	800affa <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>
	_M_initialize_value(__value);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	4619      	mov	r1, r3
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f001 fc49 	bl	800b072 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>
      }
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>:
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      ~vector() _GLIBCXX_NOEXCEPT { }
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 fbf4 	bl	800afe2 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4618      	mov	r0, r3
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>:
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      reference
      operator[](size_type __n)
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
      { return begin()[__n]; }
 8009810:	f107 0310 	add.w	r3, r7, #16
 8009814:	68b9      	ldr	r1, [r7, #8]
 8009816:	4618      	mov	r0, r3
 8009818:	f001 fc4e 	bl	800b0b8 <_ZNSt6vectorIbN2ei7EiAllocIbEEE5beginEv>
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f107 0110 	add.w	r1, r7, #16
 8009824:	4618      	mov	r0, r3
 8009826:	f7f8 f8c5 	bl	80019b4 <_ZNKSt13_Bit_iteratorixEi>
 800982a:	bf00      	nop
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff ffed 	bl	8009834 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 800985a:	4603      	mov	r3, r0
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009860:	6838      	ldr	r0, [r7, #0]
 8009862:	f7ff ffe7 	bl	8009834 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009866:	4603      	mov	r3, r0
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800986e:	f107 030c 	add.w	r3, r7, #12
 8009872:	4618      	mov	r0, r3
 8009874:	f7ff ffde 	bl	8009834 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009878:	4603      	mov	r3, r0
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	601a      	str	r2, [r3, #0]
    }
 8009880:	bf00      	nop
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8009888:	b5b0      	push	{r4, r5, r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009892:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7f6 fe67 	bl	8000568 <__aeabi_f2d>
 800989a:	4604      	mov	r4, r0
 800989c:	460d      	mov	r5, r1
 800989e:	6838      	ldr	r0, [r7, #0]
 80098a0:	f7f6 fe50 	bl	8000544 <__aeabi_i2d>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	ec43 2b11 	vmov	d1, r2, r3
 80098ac:	ec45 4b10 	vmov	d0, r4, r5
 80098b0:	f011 fb7e 	bl	801afb0 <pow>
 80098b4:	eeb0 7a40 	vmov.f32	s14, s0
 80098b8:	eef0 7a60 	vmov.f32	s15, s1
    }
 80098bc:	eeb0 0a47 	vmov.f32	s0, s14
 80098c0:	eef0 0a67 	vmov.f32	s1, s15
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bdb0      	pop	{r4, r5, r7, pc}

080098ca <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	68b9      	ldr	r1, [r7, #8]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	4618      	mov	r0, r3
 80098de:	f001 fc27 	bl	800b130 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
	unique_ptr(pointer __p,
 80098ec:	b590      	push	{r4, r7, lr}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 80098f8:	68fc      	ldr	r4, [r7, #12]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 fc0d 	bl	800b11a <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8009900:	4603      	mov	r3, r0
 8009902:	461a      	mov	r2, r3
 8009904:	68b9      	ldr	r1, [r7, #8]
 8009906:	4620      	mov	r0, r4
 8009908:	f7ff ffdf 	bl	80098ca <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	bd90      	pop	{r4, r7, pc}

08009916 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
      ~unique_ptr() noexcept
 8009916:	b590      	push	{r4, r7, lr}
 8009918:	b085      	sub	sp, #20
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4618      	mov	r0, r3
 8009922:	f001 fc1b 	bl	800b15c <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8009926:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00b      	beq.n	8009948 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f001 fc20 	bl	800b176 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8009936:	4603      	mov	r3, r0
 8009938:	681c      	ldr	r4, [r3, #0]
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f001 f9b8 	bl	800acb0 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8009940:	4603      	mov	r3, r0
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4618      	mov	r0, r3
 8009946:	47a0      	blx	r4
	__ptr = pointer();
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
      }
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	bd90      	pop	{r4, r7, pc}

08009958 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8009958:	b590      	push	{r4, r7, lr}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8009962:	687c      	ldr	r4, [r7, #4]
 8009964:	463b      	mov	r3, r7
 8009966:	4618      	mov	r0, r3
 8009968:	f001 f9a2 	bl	800acb0 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 800996c:	4603      	mov	r3, r0
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4619      	mov	r1, r3
 8009972:	4620      	mov	r0, r4
 8009974:	f001 fc0c 	bl	800b190 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>
      }
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	bd90      	pop	{r4, r7, pc}

08009980 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	ed93 7a00 	vldr	s14, [r3]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	edd3 7a00 	vldr	s15, [r3]
 8009996:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800999a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999e:	d501      	bpl.n	80099a4 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	e000      	b.n	80099a6 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80099a4:	687b      	ldr	r3, [r7, #4]
    }
 80099a6:	4618      	mov	r0, r3
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b084      	sub	sp, #16
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	f107 030c 	add.w	r3, r7, #12
 80099c0:	4611      	mov	r1, r2
 80099c2:	4618      	mov	r0, r3
 80099c4:	f001 fc03 	bl	800b1ce <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	1d1a      	adds	r2, r3, #4
 80099de:	f107 030c 	add.w	r3, r7, #12
 80099e2:	4611      	mov	r1, r2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f001 fbf2 	bl	800b1ce <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80099f4:	b590      	push	{r4, r7, lr}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f001 fbf5 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009a04:	4603      	mov	r3, r0
 8009a06:	681c      	ldr	r4, [r3, #0]
 8009a08:	6838      	ldr	r0, [r7, #0]
 8009a0a:	f001 fbf0 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	429c      	cmp	r4, r3
 8009a14:	bf14      	ite	ne
 8009a16:	2301      	movne	r3, #1
 8009a18:	2300      	moveq	r3, #0
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd90      	pop	{r4, r7, pc}

08009a24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	1d1a      	adds	r2, r3, #4
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	601a      	str	r2, [r3, #0]
	return *this;
 8009a36:	687b      	ldr	r3, [r7, #4]
      }
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4618      	mov	r0, r3
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8009a5c:	b590      	push	{r4, r7, lr}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8009a68:	68fc      	ldr	r4, [r7, #12]
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	68b8      	ldr	r0, [r7, #8]
 8009a6e:	f001 fbc9 	bl	800b204 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>
 8009a72:	4603      	mov	r3, r0
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	4619      	mov	r1, r3
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f001 fbe1 	bl	800b240 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>
      { _M_default_initialize(__n); }
 8009a7e:	68b9      	ldr	r1, [r7, #8]
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f001 fbf1 	bl	800b268 <_ZNSt6vectorIfN2ei7EiAllocIfEEE21_M_default_initializeEj>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd90      	pop	{r4, r7, pc}

08009a90 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009a90:	b5b0      	push	{r4, r5, r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681c      	ldr	r4, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 fbf8 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 8009aa8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009aaa:	461a      	mov	r2, r3
 8009aac:	4629      	mov	r1, r5
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f001 fbfd 	bl	800b2ae <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      }
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 f815 	bl	8009ae6 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bdb0      	pop	{r4, r5, r7, pc}

08009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
      }
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8009afe:	461a      	mov	r2, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f001 fbef 	bl	800b2e4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      }
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	f107 030c 	add.w	r3, r7, #12
 8009b1e:	4611      	mov	r1, r2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f001 fbf2 	bl	800b30a <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	1d1a      	adds	r2, r3, #4
 8009b3c:	f107 030c 	add.w	r3, r7, #12
 8009b40:	4611      	mov	r1, r2
 8009b42:	4618      	mov	r0, r3
 8009b44:	f001 fbe1 	bl	800b30a <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009b52:	b590      	push	{r4, r7, lr}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 fbe4 	bl	800b32a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009b62:	4603      	mov	r3, r0
 8009b64:	681c      	ldr	r4, [r3, #0]
 8009b66:	6838      	ldr	r0, [r7, #0]
 8009b68:	f001 fbdf 	bl	800b32a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	429c      	cmp	r4, r3
 8009b72:	bf14      	ite	ne
 8009b74:	2301      	movne	r3, #1
 8009b76:	2300      	moveq	r3, #0
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd90      	pop	{r4, r7, pc}

08009b82 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	1d1a      	adds	r2, r3, #4
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	601a      	str	r2, [r3, #0]
	return *this;
 8009b94:	687b      	ldr	r3, [r7, #4]
      }
 8009b96:	4618      	mov	r0, r3
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009ba2:	b480      	push	{r7}
 8009ba4:	b083      	sub	sp, #12
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEvT_S9_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8009bba:	b590      	push	{r4, r7, lr}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 8009bc4:	f7f7 fd71 	bl	80016aa <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 8009bc8:	4622      	mov	r2, r4
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f001 fbb7 	bl	800b340 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 8009bd2:	bf00      	nop
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd90      	pop	{r4, r7, pc}

08009bda <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b082      	sub	sp, #8
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f001 f9d7 	bl	800af9c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>:
   *  @return  Iterator referencing the first instance of the largest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
 8009bf8:	b590      	push	{r4, r7, lr}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__max_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 8009c02:	f7f7 fd52 	bl	80016aa <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__max_element(__first, __last,
 8009c06:	4622      	mov	r2, r4
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f001 fbea 	bl	800b3e4 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>
 8009c10:	4603      	mov	r3, r0
    }
 8009c12:	4618      	mov	r0, r3
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd90      	pop	{r4, r7, pc}

08009c1a <_ZNSt6vectorIiN2ei7EiAllocIiEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009c1a:	b5b0      	push	{r4, r5, r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681c      	ldr	r4, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f001 fc2d 	bl	800b48c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 8009c32:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009c34:	461a      	mov	r2, r3
 8009c36:	4629      	mov	r1, r5
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f001 fc32 	bl	800b4a2 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_>
      }
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 f805 	bl	8009c50 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEED1Ev>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bdb0      	pop	{r4, r5, r7, pc}

08009c50 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	689a      	ldr	r2, [r3, #8]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8009c68:	461a      	mov	r2, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 fc34 	bl	800b4d8 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij>
      }
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8009c7a:	b480      	push	{r7}
 8009c7c:	b083      	sub	sp, #12
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
      }
 8009c8e:	4618      	mov	r0, r3
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1ERKS3_>:
      vector(const vector& __x)
 8009c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c9c:	b085      	sub	sp, #20
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8009ca4:	687c      	ldr	r4, [r7, #4]
 8009ca6:	6838      	ldr	r0, [r7, #0]
 8009ca8:	f7ff fd65 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8009cac:	4605      	mov	r5, r0
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 fc30 	bl	800b516 <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f001 fc20 	bl	800b4fe <_ZN9__gnu_cxx14__alloc_traitsIN2ei7EiAllocIfEEfE17_S_select_on_copyERKS3_>
 8009cbe:	f107 030c 	add.w	r3, r7, #12
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f001 faba 	bl	800b240 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8009ccc:	6838      	ldr	r0, [r7, #0]
 8009cce:	f7ff ff1f 	bl	8009b10 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	6838      	ldr	r0, [r7, #0]
 8009cd6:	f7ff ff2b 	bl	8009b30 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 8009cda:	4606      	mov	r6, r0
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 fad8 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 8009ce8:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8009cea:	4622      	mov	r2, r4
 8009cec:	4631      	mov	r1, r6
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f001 fc1c 	bl	800b52c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_>
 8009cf4:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	605a      	str	r2, [r3, #4]
      }
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d04 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8009d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	60f8      	str	r0, [r7, #12]
 8009d0e:	60b9      	str	r1, [r7, #8]
 8009d10:	607a      	str	r2, [r7, #4]
 8009d12:	603b      	str	r3, [r7, #0]
      {
	if (_M_empty())
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7f7 fea2 	bl	8001a60 <_ZNKSt14_Function_base8_M_emptyEv>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	  __throw_bad_function_call();
 8009d22:	f011 f937 	bl	801af94 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	68dc      	ldr	r4, [r3, #12]
 8009d2a:	68fd      	ldr	r5, [r7, #12]
 8009d2c:	f107 0308 	add.w	r3, r7, #8
 8009d30:	4618      	mov	r0, r3
 8009d32:	f001 fc2c 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8009d36:	4606      	mov	r6, r0
 8009d38:	1d3b      	adds	r3, r7, #4
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f001 fc27 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8009d40:	4680      	mov	r8, r0
 8009d42:	463b      	mov	r3, r7
 8009d44:	4618      	mov	r0, r3
 8009d46:	f001 fc2d 	bl	800b5a4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	4642      	mov	r2, r8
 8009d4e:	4631      	mov	r1, r6
 8009d50:	4628      	mov	r0, r5
 8009d52:	47a0      	blx	r4
 8009d54:	4603      	mov	r3, r0
      }
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d60 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7f6 fbeb 	bl	8000544 <__aeabi_i2d>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	ec43 2b17 	vmov	d7, r2, r3
 8009d76:	eeb0 0a47 	vmov.f32	s0, s14
 8009d7a:	eef0 0a67 	vmov.f32	s1, s15
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f001 fc13 	bl	800b5ba <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>
	{ }
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689a      	ldr	r2, [r3, #8]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8009db6:	461a      	mov	r2, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f001 fc12 	bl	800b5e2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      }
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009dc8:	b5b0      	push	{r4, r5, r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681c      	ldr	r4, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f001 fc14 	bl	800b608 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8009de0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009de2:	461a      	mov	r2, r3
 8009de4:	4629      	mov	r1, r5
 8009de6:	4620      	mov	r0, r4
 8009de8:	f001 fc19 	bl	800b61e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      }
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7ff ffd5 	bl	8009d9e <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bdb0      	pop	{r4, r5, r7, pc}

08009dfe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b082      	sub	sp, #8
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d00d      	beq.n	8009e30 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	f001 fc19 	bl	800b654 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
				     __x);
	    ++this->_M_impl._M_finish;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f103 0208 	add.w	r2, r3, #8
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8009e2e:	e008      	b.n	8009e42 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f81a 	bl	8009e6a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 8009e36:	4603      	mov	r3, r0
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 fc33 	bl	800b6a8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 8009e42:	bf00      	nop
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	f107 030c 	add.w	r3, r7, #12
 8009e58:	4611      	mov	r1, r2
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f001 fce0 	bl	800b820 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b084      	sub	sp, #16
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	1d1a      	adds	r2, r3, #4
 8009e76:	f107 030c 	add.w	r3, r7, #12
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 fccf 	bl	800b820 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>:
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8009e8c:	b590      	push	{r4, r7, lr}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	713a      	strb	r2, [r7, #4]
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f001 fcd1 	bl	800b840 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 8009e9e:	4622      	mov	r2, r4
 8009ea0:	68b9      	ldr	r1, [r7, #8]
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f001 fcdf 	bl	800b866 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 8009ea8:	bf00      	nop
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd90      	pop	{r4, r7, pc}

08009eb0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	10db      	asrs	r3, r3, #3
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	00db      	lsls	r3, r3, #3
 8009ee2:	4413      	add	r3, r2
      }
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <_ZSt11min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>:
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
				__gnu_cxx::__ops::__iter_less_iter());
 8009efa:	f7f7 fbd6 	bl	80016aa <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 8009efe:	4622      	mov	r2, r4
 8009f00:	6839      	ldr	r1, [r7, #0]
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 fcdc 	bl	800b8c0 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>
 8009f08:	4603      	mov	r3, r0
    }
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd90      	pop	{r4, r7, pc}

08009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>:
      resize(size_type __new_size)
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b082      	sub	sp, #8
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff fc2a 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8009f22:	4602      	mov	r2, r0
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	4293      	cmp	r3, r2
 8009f28:	bf8c      	ite	hi
 8009f2a:	2301      	movhi	r3, #1
 8009f2c:	2300      	movls	r3, #0
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff fc1e 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	1a9b      	subs	r3, r3, r2
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 fcf2 	bl	800b92c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>
      }
 8009f48:	e014      	b.n	8009f74 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x62>
	else if (__new_size < size())
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff fc13 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8009f50:	4602      	mov	r2, r0
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	4293      	cmp	r3, r2
 8009f56:	bf34      	ite	cc
 8009f58:	2301      	movcc	r3, #1
 8009f5a:	2300      	movcs	r3, #0
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d008      	beq.n	8009f74 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x62>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 fd9a 	bl	800baa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>
      }
 8009f74:	bf00      	nop
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>:
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      operator[](size_type __n) const noexcept
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 f805 	bl	8009f9a <_ZNSt14__array_traitsISt5arrayIfLj6EELj2EE6_S_refERA2_KS1_j>
 8009f90:	4603      	mov	r3, r0
      }
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <_ZNSt14__array_traitsISt5arrayIfLj6EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009f9a:	b480      	push	{r7}
 8009f9c:	b083      	sub	sp, #12
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	4413      	add	r3, r2
 8009fac:	00db      	lsls	r3, r3, #3
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	b590      	push	{r4, r7, lr}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	f107 0418 	add.w	r4, r7, #24
 8009fca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 8009fce:	2306      	movs	r3, #6
 8009fd0:	603b      	str	r3, [r7, #0]
        h.resize(n);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009fd6:	f7ff ff9c 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009fde:	f7ff ff98 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	607b      	str	r3, [r7, #4]
 8009fe6:	e02a      	b.n	800a03e <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 8009fe8:	2100      	movs	r1, #0
 8009fea:	f107 0018 	add.w	r0, r7, #24
 8009fee:	f7ff ffc5 	bl	8009f7c <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	f001 fd75 	bl	800baea <_ZNKSt5arrayIfLj6EEixEj>
 800a000:	4604      	mov	r4, r0
 800a002:	6879      	ldr	r1, [r7, #4]
 800a004:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a006:	f7ff fd5e 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a00a:	4602      	mov	r2, r0
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a010:	2101      	movs	r1, #1
 800a012:	f107 0018 	add.w	r0, r7, #24
 800a016:	f7ff ffb1 	bl	8009f7c <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	3b01      	subs	r3, #1
 800a022:	4619      	mov	r1, r3
 800a024:	f001 fd61 	bl	800baea <_ZNKSt5arrayIfLj6EEixEj>
 800a028:	4604      	mov	r4, r0
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a02e:	f7ff fd4a 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a032:	4602      	mov	r2, r0
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3301      	adds	r3, #1
 800a03c:	607b      	str	r3, [r7, #4]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d3d0      	bcc.n	8009fe8 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a046:	bf00      	nop
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a052:	b004      	add	sp, #16
 800a054:	4770      	bx	lr

0800a056 <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	4618      	mov	r0, r3
 800a066:	f000 f805 	bl	800a074 <_ZNSt14__array_traitsISt5arrayIfLj10EELj2EE6_S_refERA2_KS1_j>
 800a06a:	4603      	mov	r3, r0
      }
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <_ZNSt14__array_traitsISt5arrayIfLj10EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	4413      	add	r3, r2
 800a08c:	4618      	mov	r0, r3
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a098:	b084      	sub	sp, #16
 800a09a:	b590      	push	{r4, r7, lr}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	f107 0418 	add.w	r4, r7, #24
 800a0a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a0a8:	230a      	movs	r3, #10
 800a0aa:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a0b0:	f7ff ff2f 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a0b8:	f7ff ff2b 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a0bc:	2300      	movs	r3, #0
 800a0be:	607b      	str	r3, [r7, #4]
 800a0c0:	e02a      	b.n	800a118 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	f107 0018 	add.w	r0, r7, #24
 800a0c8:	f7ff ffc5 	bl	800a056 <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	f001 fd17 	bl	800bb08 <_ZNKSt5arrayIfLj10EEixEj>
 800a0da:	4604      	mov	r4, r0
 800a0dc:	6879      	ldr	r1, [r7, #4]
 800a0de:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a0e0:	f7ff fcf1 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a0ea:	2101      	movs	r1, #1
 800a0ec:	f107 0018 	add.w	r0, r7, #24
 800a0f0:	f7ff ffb1 	bl	800a056 <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	f001 fd03 	bl	800bb08 <_ZNKSt5arrayIfLj10EEixEj>
 800a102:	4604      	mov	r4, r0
 800a104:	6879      	ldr	r1, [r7, #4]
 800a106:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a108:	f7ff fcdd 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a10c:	4602      	mov	r2, r0
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	3301      	adds	r3, #1
 800a116:	607b      	str	r3, [r7, #4]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d3d0      	bcc.n	800a0c2 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a120:	bf00      	nop
 800a122:	bf00      	nop
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a12c:	b004      	add	sp, #16
 800a12e:	4770      	bx	lr

0800a130 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 f805 	bl	800a14e <_ZNSt14__array_traitsISt5arrayIfLj14EELj2EE6_S_refERA2_KS1_j>
 800a144:	4603      	mov	r3, r0
      }
 800a146:	4618      	mov	r0, r3
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <_ZNSt14__array_traitsISt5arrayIfLj14EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a14e:	b480      	push	{r7}
 800a150:	b083      	sub	sp, #12
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	4613      	mov	r3, r2
 800a15c:	00db      	lsls	r3, r3, #3
 800a15e:	1a9b      	subs	r3, r3, r2
 800a160:	00db      	lsls	r3, r3, #3
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	4413      	add	r3, r2
 800a166:	4618      	mov	r0, r3
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a172:	b084      	sub	sp, #16
 800a174:	b590      	push	{r4, r7, lr}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	f107 0418 	add.w	r4, r7, #24
 800a17e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a182:	230e      	movs	r3, #14
 800a184:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800a18c:	f7ff fec1 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800a196:	f7ff febc 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a19a:	2300      	movs	r3, #0
 800a19c:	607b      	str	r3, [r7, #4]
 800a19e:	e02c      	b.n	800a1fa <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	f107 0018 	add.w	r0, r7, #24
 800a1a6:	f7ff ffc3 	bl	800a130 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	f001 fcb7 	bl	800bb26 <_ZNKSt5arrayIfLj14EEixEj>
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	6879      	ldr	r1, [r7, #4]
 800a1bc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800a1c0:	f7ff fc81 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	f107 0018 	add.w	r0, r7, #24
 800a1d0:	f7ff ffae 	bl	800a130 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>
 800a1d4:	683a      	ldr	r2, [r7, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	4619      	mov	r1, r3
 800a1de:	f001 fca2 	bl	800bb26 <_ZNKSt5arrayIfLj14EEixEj>
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800a1ea:	f7ff fc6c 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	6823      	ldr	r3, [r4, #0]
 800a1f2:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	607b      	str	r3, [r7, #4]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d3ce      	bcc.n	800a1a0 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a202:	bf00      	nop
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a20e:	b004      	add	sp, #16
 800a210:	4770      	bx	lr

0800a212 <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a212:	b580      	push	{r7, lr}
 800a214:	b082      	sub	sp, #8
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	4618      	mov	r0, r3
 800a222:	f000 f805 	bl	800a230 <_ZNSt14__array_traitsISt5arrayIfLj18EELj2EE6_S_refERA2_KS1_j>
 800a226:	4603      	mov	r3, r0
      }
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <_ZNSt14__array_traitsISt5arrayIfLj18EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	4613      	mov	r3, r2
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	4413      	add	r3, r2
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	4413      	add	r3, r2
 800a248:	4618      	mov	r0, r3
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a254:	b084      	sub	sp, #16
 800a256:	b590      	push	{r4, r7, lr}
 800a258:	b083      	sub	sp, #12
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	f107 0418 	add.w	r4, r7, #24
 800a260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a264:	2312      	movs	r3, #18
 800a266:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a26e:	f7ff fe50 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800a278:	f7ff fe4b 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a27c:	2300      	movs	r3, #0
 800a27e:	607b      	str	r3, [r7, #4]
 800a280:	e02c      	b.n	800a2dc <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a282:	2100      	movs	r1, #0
 800a284:	f107 0018 	add.w	r0, r7, #24
 800a288:	f7ff ffc3 	bl	800a212 <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	3b01      	subs	r3, #1
 800a294:	4619      	mov	r1, r3
 800a296:	f001 fc55 	bl	800bb44 <_ZNKSt5arrayIfLj18EEixEj>
 800a29a:	4604      	mov	r4, r0
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a2a2:	f7ff fc10 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	f107 0018 	add.w	r0, r7, #24
 800a2b2:	f7ff ffae 	bl	800a212 <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	4619      	mov	r1, r3
 800a2c0:	f001 fc40 	bl	800bb44 <_ZNKSt5arrayIfLj18EEixEj>
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800a2cc:	f7ff fbfb 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	607b      	str	r3, [r7, #4]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d3ce      	bcc.n	800a282 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a2f0:	b004      	add	sp, #16
 800a2f2:	4770      	bx	lr

0800a2f4 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f000 f805 	bl	800a312 <_ZNSt14__array_traitsISt5arrayIfLj4EELj2EE6_S_refERA2_KS1_j>
 800a308:	4603      	mov	r3, r0
      }
 800a30a:	4618      	mov	r0, r3
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <_ZNSt14__array_traitsISt5arrayIfLj4EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a312:	b480      	push	{r7}
 800a314:	b083      	sub	sp, #12
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	4413      	add	r3, r2
 800a324:	4618      	mov	r0, r3
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a330:	b084      	sub	sp, #16
 800a332:	b590      	push	{r4, r7, lr}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	f107 0418 	add.w	r4, r7, #24
 800a33c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a340:	2304      	movs	r3, #4
 800a342:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a348:	f7ff fde3 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a350:	f7ff fddf 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a354:	2300      	movs	r3, #0
 800a356:	607b      	str	r3, [r7, #4]
 800a358:	e02a      	b.n	800a3b0 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a35a:	2100      	movs	r1, #0
 800a35c:	f107 0018 	add.w	r0, r7, #24
 800a360:	f7ff ffc8 	bl	800a2f4 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	3b01      	subs	r3, #1
 800a36c:	4619      	mov	r1, r3
 800a36e:	f001 fbf8 	bl	800bb62 <_ZNKSt5arrayIfLj4EEixEj>
 800a372:	4604      	mov	r4, r0
 800a374:	6879      	ldr	r1, [r7, #4]
 800a376:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a378:	f7ff fba5 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a37c:	4602      	mov	r2, r0
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a382:	2101      	movs	r1, #1
 800a384:	f107 0018 	add.w	r0, r7, #24
 800a388:	f7ff ffb4 	bl	800a2f4 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	3b01      	subs	r3, #1
 800a394:	4619      	mov	r1, r3
 800a396:	f001 fbe4 	bl	800bb62 <_ZNKSt5arrayIfLj4EEixEj>
 800a39a:	4604      	mov	r4, r0
 800a39c:	6879      	ldr	r1, [r7, #4]
 800a39e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a3a0:	f7ff fb91 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	607b      	str	r3, [r7, #4]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d3d0      	bcc.n	800a35a <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a3c4:	b004      	add	sp, #16
 800a3c6:	4770      	bx	lr

0800a3c8 <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 f805 	bl	800a3e6 <_ZNSt14__array_traitsISt5arrayIfLj8EELj2EE6_S_refERA2_KS1_j>
 800a3dc:	4603      	mov	r3, r0
      }
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <_ZNSt14__array_traitsISt5arrayIfLj8EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a3e6:	b480      	push	{r7}
 800a3e8:	b083      	sub	sp, #12
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	015b      	lsls	r3, r3, #5
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a404:	b084      	sub	sp, #16
 800a406:	b590      	push	{r4, r7, lr}
 800a408:	b083      	sub	sp, #12
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	f107 0418 	add.w	r4, r7, #24
 800a410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a414:	2308      	movs	r3, #8
 800a416:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a41c:	f7ff fd79 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a424:	f7ff fd75 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a428:	2300      	movs	r3, #0
 800a42a:	607b      	str	r3, [r7, #4]
 800a42c:	e02a      	b.n	800a484 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a42e:	2100      	movs	r1, #0
 800a430:	f107 0018 	add.w	r0, r7, #24
 800a434:	f7ff ffc8 	bl	800a3c8 <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	3b01      	subs	r3, #1
 800a440:	4619      	mov	r1, r3
 800a442:	f001 fb9d 	bl	800bb80 <_ZNKSt5arrayIfLj8EEixEj>
 800a446:	4604      	mov	r4, r0
 800a448:	6879      	ldr	r1, [r7, #4]
 800a44a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a44c:	f7ff fb3b 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a450:	4602      	mov	r2, r0
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a456:	2101      	movs	r1, #1
 800a458:	f107 0018 	add.w	r0, r7, #24
 800a45c:	f7ff ffb4 	bl	800a3c8 <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	3b01      	subs	r3, #1
 800a468:	4619      	mov	r1, r3
 800a46a:	f001 fb89 	bl	800bb80 <_ZNKSt5arrayIfLj8EEixEj>
 800a46e:	4604      	mov	r4, r0
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a474:	f7ff fb27 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a478:	4602      	mov	r2, r0
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3301      	adds	r3, #1
 800a482:	607b      	str	r3, [r7, #4]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d3d0      	bcc.n	800a42e <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a48c:	bf00      	nop
 800a48e:	bf00      	nop
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a498:	b004      	add	sp, #16
 800a49a:	4770      	bx	lr

0800a49c <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 f805 	bl	800a4ba <_ZNSt14__array_traitsISt5arrayIfLj12EELj2EE6_S_refERA2_KS1_j>
 800a4b0:	4603      	mov	r3, r0
      }
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <_ZNSt14__array_traitsISt5arrayIfLj12EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a4ba:	b480      	push	{r7}
 800a4bc:	b083      	sub	sp, #12
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	005b      	lsls	r3, r3, #1
 800a4ca:	4413      	add	r3, r2
 800a4cc:	011b      	lsls	r3, r3, #4
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a4de:	b084      	sub	sp, #16
 800a4e0:	b590      	push	{r4, r7, lr}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	f107 0418 	add.w	r4, r7, #24
 800a4ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a4f6:	f7ff fd0c 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a4fa:	6839      	ldr	r1, [r7, #0]
 800a4fc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a4fe:	f7ff fd08 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a502:	2300      	movs	r3, #0
 800a504:	607b      	str	r3, [r7, #4]
 800a506:	e02a      	b.n	800a55e <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a508:	2100      	movs	r1, #0
 800a50a:	f107 0018 	add.w	r0, r7, #24
 800a50e:	f7ff ffc5 	bl	800a49c <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	3b01      	subs	r3, #1
 800a51a:	4619      	mov	r1, r3
 800a51c:	f001 fb3f 	bl	800bb9e <_ZNKSt5arrayIfLj12EEixEj>
 800a520:	4604      	mov	r4, r0
 800a522:	6879      	ldr	r1, [r7, #4]
 800a524:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a526:	f7ff face 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a52a:	4602      	mov	r2, r0
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a530:	2101      	movs	r1, #1
 800a532:	f107 0018 	add.w	r0, r7, #24
 800a536:	f7ff ffb1 	bl	800a49c <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	3b01      	subs	r3, #1
 800a542:	4619      	mov	r1, r3
 800a544:	f001 fb2b 	bl	800bb9e <_ZNKSt5arrayIfLj12EEixEj>
 800a548:	4604      	mov	r4, r0
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a54e:	f7ff faba 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a552:	4602      	mov	r2, r0
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	3301      	adds	r3, #1
 800a55c:	607b      	str	r3, [r7, #4]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	429a      	cmp	r2, r3
 800a564:	d3d0      	bcc.n	800a508 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a566:	bf00      	nop
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a572:	b004      	add	sp, #16
 800a574:	4770      	bx	lr

0800a576 <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a576:	b580      	push	{r7, lr}
 800a578:	b082      	sub	sp, #8
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	4618      	mov	r0, r3
 800a586:	f000 f805 	bl	800a594 <_ZNSt14__array_traitsISt5arrayIfLj16EELj2EE6_S_refERA2_KS1_j>
 800a58a:	4603      	mov	r3, r0
      }
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <_ZNSt14__array_traitsISt5arrayIfLj16EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	019b      	lsls	r3, r3, #6
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	b590      	push	{r4, r7, lr}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	f107 0418 	add.w	r4, r7, #24
 800a5be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a5c2:	2310      	movs	r3, #16
 800a5c4:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800a5cc:	f7ff fca1 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a5d6:	f7ff fc9c 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a5da:	2300      	movs	r3, #0
 800a5dc:	607b      	str	r3, [r7, #4]
 800a5de:	e02c      	b.n	800a63a <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	f107 0018 	add.w	r0, r7, #24
 800a5e6:	f7ff ffc6 	bl	800a576 <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	f001 fae2 	bl	800bbbc <_ZNKSt5arrayIfLj16EEixEj>
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800a600:	f7ff fa61 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a604:	4602      	mov	r2, r0
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a60a:	2101      	movs	r1, #1
 800a60c:	f107 0018 	add.w	r0, r7, #24
 800a610:	f7ff ffb1 	bl	800a576 <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	3b01      	subs	r3, #1
 800a61c:	4619      	mov	r1, r3
 800a61e:	f001 facd 	bl	800bbbc <_ZNKSt5arrayIfLj16EEixEj>
 800a622:	4604      	mov	r4, r0
 800a624:	6879      	ldr	r1, [r7, #4]
 800a626:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a62a:	f7ff fa4c 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a62e:	4602      	mov	r2, r0
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3301      	adds	r3, #1
 800a638:	607b      	str	r3, [r7, #4]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d3ce      	bcc.n	800a5e0 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a642:	bf00      	nop
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a64e:	b004      	add	sp, #16
 800a650:	4770      	bx	lr

0800a652 <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a652:	b580      	push	{r7, lr}
 800a654:	b082      	sub	sp, #8
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	4618      	mov	r0, r3
 800a662:	f000 f805 	bl	800a670 <_ZNSt14__array_traitsISt5arrayIfLj20EELj2EE6_S_refERA2_KS1_j>
 800a666:	4603      	mov	r3, r0
      }
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <_ZNSt14__array_traitsISt5arrayIfLj20EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	4613      	mov	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	011b      	lsls	r3, r3, #4
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	4413      	add	r3, r2
 800a688:	4618      	mov	r0, r3
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a694:	b084      	sub	sp, #16
 800a696:	b590      	push	{r4, r7, lr}
 800a698:	b083      	sub	sp, #12
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	f107 0418 	add.w	r4, r7, #24
 800a6a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a6a4:	2314      	movs	r3, #20
 800a6a6:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800a6ae:	f7ff fc30 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a6b8:	f7ff fc2b 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a6bc:	2300      	movs	r3, #0
 800a6be:	607b      	str	r3, [r7, #4]
 800a6c0:	e02c      	b.n	800a71c <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	f107 0018 	add.w	r0, r7, #24
 800a6c8:	f7ff ffc3 	bl	800a652 <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	f001 fa80 	bl	800bbda <_ZNKSt5arrayIfLj20EEixEj>
 800a6da:	4604      	mov	r4, r0
 800a6dc:	6879      	ldr	r1, [r7, #4]
 800a6de:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800a6e2:	f7ff f9f0 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a6ec:	2101      	movs	r1, #1
 800a6ee:	f107 0018 	add.w	r0, r7, #24
 800a6f2:	f7ff ffae 	bl	800a652 <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	4619      	mov	r1, r3
 800a700:	f001 fa6b 	bl	800bbda <_ZNKSt5arrayIfLj20EEixEj>
 800a704:	4604      	mov	r4, r0
 800a706:	6879      	ldr	r1, [r7, #4]
 800a708:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a70c:	f7ff f9db 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a710:	4602      	mov	r2, r0
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	3301      	adds	r3, #1
 800a71a:	607b      	str	r3, [r7, #4]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	429a      	cmp	r2, r3
 800a722:	d3ce      	bcc.n	800a6c2 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a724:	bf00      	nop
 800a726:	bf00      	nop
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a730:	b004      	add	sp, #16
 800a732:	4770      	bx	lr

0800a734 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	4618      	mov	r0, r3
 800a744:	f000 f805 	bl	800a752 <_ZNSt14__array_traitsISt5arrayIfLj2EELj2EE6_S_refERA2_KS1_j>
 800a748:	4603      	mov	r3, r0
      }
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <_ZNSt14__array_traitsISt5arrayIfLj2EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	00db      	lsls	r3, r3, #3
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	4413      	add	r3, r2
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a770:	b590      	push	{r4, r7, lr}
 800a772:	b089      	sub	sp, #36	; 0x24
 800a774:	af00      	add	r7, sp, #0
 800a776:	eeb0 6a40 	vmov.f32	s12, s0
 800a77a:	eef0 6a60 	vmov.f32	s13, s1
 800a77e:	eeb0 7a41 	vmov.f32	s14, s2
 800a782:	eef0 7a61 	vmov.f32	s15, s3
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
 800a78a:	ed87 6a02 	vstr	s12, [r7, #8]
 800a78e:	edc7 6a03 	vstr	s13, [r7, #12]
 800a792:	ed87 7a04 	vstr	s14, [r7, #16]
 800a796:	edc7 7a05 	vstr	s15, [r7, #20]
        size_t n = wav[0].size();
 800a79a:	2302      	movs	r3, #2
 800a79c:	61bb      	str	r3, [r7, #24]
        h.resize(n);
 800a79e:	69b9      	ldr	r1, [r7, #24]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff fbb6 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a7a6:	69b9      	ldr	r1, [r7, #24]
 800a7a8:	6838      	ldr	r0, [r7, #0]
 800a7aa:	f7ff fbb2 	bl	8009f12 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	61fb      	str	r3, [r7, #28]
 800a7b2:	e02c      	b.n	800a80e <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x9e>
            h[i] = wav[0][n - i - 1];
 800a7b4:	f107 0308 	add.w	r3, r7, #8
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7ff ffba 	bl	800a734 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>
 800a7c0:	69ba      	ldr	r2, [r7, #24]
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	f001 fa15 	bl	800bbf8 <_ZNKSt5arrayIfLj2EEixEj>
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	69f9      	ldr	r1, [r7, #28]
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff f977 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a7de:	f107 0308 	add.w	r3, r7, #8
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7ff ffa5 	bl	800a734 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>
 800a7ea:	69ba      	ldr	r2, [r7, #24]
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	f001 fa00 	bl	800bbf8 <_ZNKSt5arrayIfLj2EEixEj>
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	69f9      	ldr	r1, [r7, #28]
 800a7fc:	6838      	ldr	r0, [r7, #0]
 800a7fe:	f7ff f962 	bl	8009ac6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a802:	4602      	mov	r2, r0
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	3301      	adds	r3, #1
 800a80c:	61fb      	str	r3, [r7, #28]
 800a80e:	69fa      	ldr	r2, [r7, #28]
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	429a      	cmp	r2, r3
 800a814:	d3ce      	bcc.n	800a7b4 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x44>
    }
 800a816:	bf00      	nop
 800a818:	bf00      	nop
 800a81a:	3724      	adds	r7, #36	; 0x24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd90      	pop	{r4, r7, pc}

0800a820 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f001 f9f3 	bl	800bc16 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>
	{ }
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4618      	mov	r0, r3
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>:
      push_back(const value_type& __x)
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d00c      	beq.n	800a86a <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	4619      	mov	r1, r3
 800a85a:	f001 f9f0 	bl	800bc3e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	    ++this->_M_impl._M_finish;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	1d1a      	adds	r2, r3, #4
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	605a      	str	r2, [r3, #4]
      }
 800a868:	e008      	b.n	800a87c <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff f8b1 	bl	80099d2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800a870:	4603      	mov	r3, r0
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f001 f9f4 	bl	800bc64 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>
      }
 800a87c:	bf00      	nop
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>:

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800a88e:	6838      	ldr	r0, [r7, #0]
 800a890:	f000 f817 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800a894:	4603      	mov	r3, r0
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f001 fa9f 	bl	800bddc <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_>
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f001 f8f7 	bl	800baa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800a8c2:	b480      	push	{r7}
 800a8c4:	b083      	sub	sp, #12
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7ff ffed 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800a8ee:	6838      	ldr	r0, [r7, #0]
 800a8f0:	f7ff ffe7 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800a8fc:	f107 030c 	add.w	r3, r7, #12
 800a900:	4618      	mov	r0, r3
 800a902:	f7ff ffde 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800a906:	4603      	mov	r3, r0
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	601a      	str	r2, [r3, #0]
    }
 800a90e:	bf00      	nop
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>:
      _S_use_relocate()
 800a916:	b580      	push	{r7, lr}
 800a918:	b082      	sub	sp, #8
 800a91a:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 f805 	bl	800a92c <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800a922:	4603      	mov	r3, r0
      }
 800a924:	4618      	mov	r0, r3
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800a934:	2301      	movs	r3, #1
      }
 800a936:	4618      	mov	r0, r3
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
	...

0800a944 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 800a944:	b5b0      	push	{r4, r5, r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f001 fa72 	bl	800be38 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800a954:	4602      	mov	r2, r0
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	4293      	cmp	r3, r2
 800a95a:	bf8c      	ite	hi
 800a95c:	2301      	movhi	r3, #1
 800a95e:	2300      	movls	r3, #0
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 800a966:	4836      	ldr	r0, [pc, #216]	; (800aa40 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xfc>)
 800a968:	f010 fb11 	bl	801af8e <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f001 fa74 	bl	800be5a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8capacityEv>
 800a972:	4602      	mov	r2, r0
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	4293      	cmp	r3, r2
 800a978:	bf8c      	ite	hi
 800a97a:	2301      	movhi	r3, #1
 800a97c:	2300      	movls	r3, #0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b00      	cmp	r3, #0
 800a982:	d059      	beq.n	800aa38 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xf4>
	{
	  const size_type __old_size = size();
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7fe fef6 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a98a:	60b8      	str	r0, [r7, #8]
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800a98c:	f7ff ffc3 	bl	800a916 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d014      	beq.n	800a9c0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0x7c>
	    {
	      __tmp = this->_M_allocate(__n);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6839      	ldr	r1, [r7, #0]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f001 fa6d 	bl	800be7a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800a9a0:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681c      	ldr	r4, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 fc73 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800a9b2:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f001 fa72 	bl	800bea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800a9be:	e01f      	b.n	800aa00 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xbc>
	    }
	  else
#endif
	    {
	      __tmp = _M_allocate_and_copy(__n,
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f001 fa80 	bl	800beca <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f001 fa7a 	bl	800beca <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	4622      	mov	r2, r4
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 fa83 	bl	800bee8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE20_M_allocate_and_copyISt13move_iteratorIPfEEES6_jT_S8_>
 800a9e2:	60f8      	str	r0, [r7, #12]
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681c      	ldr	r4, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fc52 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800a9f4:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fc57 	bl	800b2ae <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 800aa12:	461a      	mov	r2, r3
 800aa14:	f000 fc66 	bl	800b2e4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	441a      	add	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	441a      	add	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	609a      	str	r2, [r3, #8]
	}
    }
 800aa38:	bf00      	nop
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bdb0      	pop	{r4, r5, r7, pc}
 800aa40:	08023568 	.word	0x08023568

0800aa44 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1IPKfvEET_S7_RKS2_>:
	vector(_InputIterator __first, _InputIterator __last,
 800aa44:	b5b0      	push	{r4, r5, r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
	: _Base(__a)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f001 fa62 	bl	800bf20 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1ERKS2_>
	  _M_range_initialize(__first, __last,
 800aa5c:	68bc      	ldr	r4, [r7, #8]
			      std::__iterator_category(__first));
 800aa5e:	f107 0308 	add.w	r3, r7, #8
 800aa62:	4618      	mov	r0, r3
 800aa64:	f001 fa6b 	bl	800bf3e <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
	  _M_range_initialize(__first, __last,
 800aa68:	462b      	mov	r3, r5
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f001 fa70 	bl	800bf54 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_M_range_initializeIPKfEEvT_S7_St20forward_iterator_tag>
	}
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4618      	mov	r0, r3
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bdb0      	pop	{r4, r5, r7, pc}

0800aa7e <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>:
      vector(initializer_list<value_type> __l,
 800aa7e:	b5b0      	push	{r4, r5, r7, lr}
 800aa80:	b086      	sub	sp, #24
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	60f8      	str	r0, [r7, #12]
 800aa86:	1d38      	adds	r0, r7, #4
 800aa88:	e880 0006 	stmia.w	r0, {r1, r2}
 800aa8c:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6839      	ldr	r1, [r7, #0]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f001 fab5 	bl	800c002 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEEC1ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
 800aa98:	1d3b      	adds	r3, r7, #4
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f001 fa93 	bl	800bfc6 <_ZNKSt16initializer_listIiE5beginEv>
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	1d3b      	adds	r3, r7, #4
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f001 fa9a 	bl	800bfde <_ZNKSt16initializer_listIiE3endEv>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	462b      	mov	r3, r5
 800aaae:	4621      	mov	r1, r4
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f001 fab5 	bl	800c020 <_ZNSt6vectorIiN2ei7EiAllocIiEEE19_M_range_initializeIPKiEEvT_S7_St20forward_iterator_tag>
      }
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bdb0      	pop	{r4, r5, r7, pc}

0800aac0 <_ZNSt6vectorIiN2ei7EiAllocIiEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	f107 030c 	add.w	r3, r7, #12
 800aace:	4611      	mov	r1, r2
 800aad0:	4618      	mov	r0, r3
 800aad2:	f001 fade 	bl	800c092 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	4618      	mov	r0, r3
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <_ZNSt6vectorIiN2ei7EiAllocIiEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	1d1a      	adds	r2, r3, #4
 800aaec:	f107 030c 	add.w	r3, r7, #12
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f001 facd 	bl	800c092 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <_ZN9__gnu_cxxneIPiSt6vectorIiN2ei7EiAllocIiEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ab02:	b590      	push	{r4, r7, lr}
 800ab04:	b083      	sub	sp, #12
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 fad0 	bl	800c0b2 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>
 800ab12:	4603      	mov	r3, r0
 800ab14:	681c      	ldr	r4, [r3, #0]
 800ab16:	6838      	ldr	r0, [r7, #0]
 800ab18:	f001 facb 	bl	800c0b2 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	429c      	cmp	r4, r3
 800ab22:	bf14      	ite	ne
 800ab24:	2301      	movne	r3, #1
 800ab26:	2300      	moveq	r3, #0
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd90      	pop	{r4, r7, pc}

0800ab32 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ab32:	b480      	push	{r7}
 800ab34:	b083      	sub	sp, #12
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	1d1a      	adds	r2, r3, #4
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	601a      	str	r2, [r3, #0]
	return *this;
 800ab44:	687b      	ldr	r3, [r7, #4]
      }
 800ab46:	4618      	mov	r0, r3
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ab52:	b480      	push	{r7}
 800ab54:	b083      	sub	sp, #12
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 800ab6a:	b480      	push	{r7}
 800ab6c:	b083      	sub	sp, #12
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	461a      	mov	r2, r3
 800ab76:	2300      	movs	r3, #0
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	6053      	str	r3, [r2, #4]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	609a      	str	r2, [r3, #8]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4618      	mov	r0, r3
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	6053      	str	r3, [r2, #4]
 800aba2:	6093      	str	r3, [r2, #8]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff ffdf 	bl	800ab6a <_ZNSt14_Function_baseC1Ev>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	60da      	str	r2, [r3, #12]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4618      	mov	r0, r3
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800abc6:	6838      	ldr	r0, [r7, #0]
 800abc8:	f001 fa7e 	bl	800c0c8 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800abcc:	4602      	mov	r2, r0
 800abce:	f107 0308 	add.w	r3, r7, #8
 800abd2:	4611      	mov	r1, r2
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 fa83 	bl	800c0e0 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>
 800abda:	f107 0308 	add.w	r3, r7, #8
 800abde:	6879      	ldr	r1, [r7, #4]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f000 fa79 	bl	800b0d8 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800abe6:	f107 0308 	add.w	r3, r7, #8
 800abea:	4618      	mov	r0, r3
 800abec:	f7fc fd68 	bl	80076c0 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800abf0:	687b      	ldr	r3, [r7, #4]
	}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b086      	sub	sp, #24
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800ac04:	6838      	ldr	r0, [r7, #0]
 800ac06:	f001 fa9d 	bl	800c144 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	f107 0308 	add.w	r3, r7, #8
 800ac10:	4611      	mov	r1, r2
 800ac12:	4618      	mov	r0, r3
 800ac14:	f001 faa2 	bl	800c15c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>
 800ac18:	f107 0308 	add.w	r3, r7, #8
 800ac1c:	6879      	ldr	r1, [r7, #4]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fa5a 	bl	800b0d8 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800ac24:	f107 0308 	add.w	r3, r7, #8
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fc fd49 	bl	80076c0 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800ac2e:	687b      	ldr	r3, [r7, #4]
	}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3718      	adds	r7, #24
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	da01      	bge.n	800ac52 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	e000      	b.n	800ac54 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800ac52:	687b      	ldr	r3, [r7, #4]
    }
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	da01      	bge.n	800ac7a <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	e000      	b.n	800ac7c <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800ac7a:	687b      	ldr	r3, [r7, #4]
    }
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d201      	bcs.n	800aca2 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	e000      	b.n	800aca4 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800aca2:	687b      	ldr	r3, [r7, #4]
    }
 800aca4:	4618      	mov	r0, r3
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4618      	mov	r0, r3
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffj>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 800acc6:	b480      	push	{r7}
 800acc8:	b087      	sub	sp, #28
 800acca:	af00      	add	r7, sp, #0
 800accc:	6178      	str	r0, [r7, #20]
 800acce:	6139      	str	r1, [r7, #16]
 800acd0:	60fa      	str	r2, [r7, #12]
 800acd2:	60bb      	str	r3, [r7, #8]
 800acd4:	ed87 0a01 	vstr	s0, [r7, #4]
 800acd8:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800acdc:	f06f 0314 	mvn.w	r3, #20
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	371c      	adds	r7, #28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffj>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6178      	str	r0, [r7, #20]
 800acf4:	6139      	str	r1, [r7, #16]
 800acf6:	60fa      	str	r2, [r7, #12]
 800acf8:	60bb      	str	r3, [r7, #8]
 800acfa:	ed87 0a01 	vstr	s0, [r7, #4]
 800acfe:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800ad02:	f06f 0314 	mvn.w	r3, #20
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	371c      	adds	r7, #28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffj>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 800ad12:	b480      	push	{r7}
 800ad14:	b087      	sub	sp, #28
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6178      	str	r0, [r7, #20]
 800ad1a:	6139      	str	r1, [r7, #16]
 800ad1c:	60fa      	str	r2, [r7, #12]
 800ad1e:	ed87 0a02 	vstr	s0, [r7, #8]
 800ad22:	edc7 0a01 	vstr	s1, [r7, #4]
 800ad26:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800ad28:	f06f 0314 	mvn.w	r3, #20
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	371c      	adds	r7, #28
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffj>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 800ad38:	b480      	push	{r7}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6178      	str	r0, [r7, #20]
 800ad40:	6139      	str	r1, [r7, #16]
 800ad42:	60fa      	str	r2, [r7, #12]
 800ad44:	ed87 0a02 	vstr	s0, [r7, #8]
 800ad48:	edc7 0a01 	vstr	s1, [r7, #4]
 800ad4c:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800ad4e:	f06f 0314 	mvn.w	r3, #20
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <_Z37fill_result_struct_quantized_tao_yoloIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffj>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolo(const ei_impulse_t *impulse,
 800ad5e:	b480      	push	{r7}
 800ad60:	b087      	sub	sp, #28
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6178      	str	r0, [r7, #20]
 800ad66:	6139      	str	r1, [r7, #16]
 800ad68:	60fa      	str	r2, [r7, #12]
 800ad6a:	ed87 0a02 	vstr	s0, [r7, #8]
 800ad6e:	edc7 0a01 	vstr	s1, [r7, #4]
 800ad72:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800ad74:	f06f 0314 	mvn.w	r3, #20
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	371c      	adds	r7, #28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <_Z37fill_result_struct_quantized_tao_yoloIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffj>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolo(const ei_impulse_t *impulse,
 800ad84:	b480      	push	{r7}
 800ad86:	b087      	sub	sp, #28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6178      	str	r0, [r7, #20]
 800ad8c:	6139      	str	r1, [r7, #16]
 800ad8e:	60fa      	str	r2, [r7, #12]
 800ad90:	ed87 0a02 	vstr	s0, [r7, #8]
 800ad94:	edc7 0a01 	vstr	s1, [r7, #4]
 800ad98:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800ad9a:	f06f 0314 	mvn.w	r3, #20
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	371c      	adds	r7, #28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f001 fa01 	bl	800c1bc <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800adba:	4603      	mov	r3, r0
 800adbc:	4618      	mov	r0, r3
 800adbe:	3708      	adds	r7, #8
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	4611      	mov	r1, r2
 800add4:	4618      	mov	r0, r3
 800add6:	f001 f9ff 	bl	800c1d8 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>:
	       typename _Vp = _Dp,
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	explicit
	unique_ptr(_Up __p) noexcept
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7ff ffe6 	bl	800adc4 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>
        { }
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4618      	mov	r0, r3
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f001 f9f7 	bl	800c200 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800ae12:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d009      	beq.n	800ae30 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f001 f9fc 	bl	800c21a <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>
 800ae22:	4602      	mov	r2, r0
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	f001 fa02 	bl	800c234 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>
	__ptr = pointer();
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]
      }
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>:
	return get()[__i];
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f001 fa01 	bl	800c252 <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800ae50:	4603      	mov	r3, r0
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b082      	sub	sp, #8
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f001 fa02 	bl	800c26e <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7ff ffeb 	bl	800ae5a <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4618      	mov	r0, r3
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b082      	sub	sp, #8
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7ff ffeb 	bl	800ae74 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4618      	mov	r0, r3
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>:
	constexpr unique_ptr() noexcept
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
	: _M_t()
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	601a      	str	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7ff ffe8 	bl	800ae8e <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>
	{ }
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	4611      	mov	r1, r2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 f9d8 	bl	800c28e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4618      	mov	r0, r3
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6839      	ldr	r1, [r7, #0]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7ff ffe6 	bl	800aec8 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 800af06:	b590      	push	{r4, r7, lr}
 800af08:	b085      	sub	sp, #20
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4618      	mov	r0, r3
 800af12:	f001 f9d0 	bl	800c2b6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800af16:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00c      	beq.n	800af3a <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f001 f9d5 	bl	800c2d0 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>
 800af26:	4604      	mov	r4, r0
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f001 f9de 	bl	800c2ea <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>
 800af2e:	4603      	mov	r3, r0
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4619      	mov	r1, r3
 800af34:	4620      	mov	r0, r4
 800af36:	f001 f9e3 	bl	800c300 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
	__ptr = pointer();
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	601a      	str	r2, [r3, #0]
      }
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4618      	mov	r0, r3
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	bd90      	pop	{r4, r7, pc}

0800af4a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b082      	sub	sp, #8
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800af54:	6838      	ldr	r0, [r7, #0]
 800af56:	f001 fa06 	bl	800c366 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>
 800af5a:	4603      	mov	r3, r0
 800af5c:	4619      	mov	r1, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 f9e1 	bl	800c326 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800af64:	6838      	ldr	r0, [r7, #0]
 800af66:	f001 fa13 	bl	800c390 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800af6a:	4603      	mov	r3, r0
 800af6c:	4618      	mov	r0, r3
 800af6e:	f001 fa1c 	bl	800c3aa <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f001 fa0c 	bl	800c390 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
	return *this;
 800af78:	687b      	ldr	r3, [r7, #4]
      }
 800af7a:	4618      	mov	r0, r3
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f001 fa17 	bl	800c3c0 <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800af92:	4603      	mov	r3, r0
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	4618      	mov	r0, r3
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>:
      _Bvector_base(const allocator_type& __a)
 800afb4:	b590      	push	{r4, r7, lr}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800afbe:	687c      	ldr	r4, [r7, #4]
 800afc0:	f107 030c 	add.w	r3, r7, #12
 800afc4:	6839      	ldr	r1, [r7, #0]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f001 fa08 	bl	800c3dc <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>
 800afcc:	f107 030c 	add.w	r3, r7, #12
 800afd0:	4619      	mov	r1, r3
 800afd2:	4620      	mov	r0, r4
 800afd4:	f001 fa0e 	bl	800c3f4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4618      	mov	r0, r3
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd90      	pop	{r4, r7, pc}

0800afe2 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>:
      ~_Bvector_base()
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b082      	sub	sp, #8
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f001 fa10 	bl	800c410 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4618      	mov	r0, r3
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>:
	return std::copy(const_iterator(__last._M_p, 0), __last,
			 iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
 800affa:	b590      	push	{r4, r7, lr}
 800affc:	b089      	sub	sp, #36	; 0x24
 800affe:	af00      	add	r7, sp, #0
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	60b9      	str	r1, [r7, #8]
      {
	if (__n)
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d02f      	beq.n	800b06a <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x70>
	  {
	    _Bit_pointer __q = this->_M_allocate(__n);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	68b9      	ldr	r1, [r7, #8]
 800b00e:	4618      	mov	r0, r3
 800b010:	f001 fa23 	bl	800c45a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>
 800b014:	61f8      	str	r0, [r7, #28]
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 800b016:	68b8      	ldr	r0, [r7, #8]
 800b018:	f001 fa32 	bl	800c480 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 800b01c:	4603      	mov	r3, r0
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	69fa      	ldr	r2, [r7, #28]
 800b022:	441a      	add	r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	611a      	str	r2, [r3, #16]
	    iterator __start = iterator(std::__addressof(*__q), 0);
 800b028:	69f8      	ldr	r0, [r7, #28]
 800b02a:	f001 fa36 	bl	800c49a <_ZSt11__addressofImEPT_RS0_>
 800b02e:	4601      	mov	r1, r0
 800b030:	f107 0314 	add.w	r3, r7, #20
 800b034:	2200      	movs	r2, #0
 800b036:	4618      	mov	r0, r3
 800b038:	f7f6 fc88 	bl	800194c <_ZNSt13_Bit_iteratorC1EPmj>
	    this->_M_impl._M_start = __start;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	461a      	mov	r2, r3
 800b040:	f107 0314 	add.w	r3, r7, #20
 800b044:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b048:	e882 0003 	stmia.w	r2, {r0, r1}
	    this->_M_impl._M_finish = __start + difference_type(__n);
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	68fc      	ldr	r4, [r7, #12]
 800b050:	463b      	mov	r3, r7
 800b052:	f107 0114 	add.w	r1, r7, #20
 800b056:	4618      	mov	r0, r3
 800b058:	f7f6 fcc4 	bl	80019e4 <_ZStplRKSt13_Bit_iteratori>
 800b05c:	f104 0308 	add.w	r3, r4, #8
 800b060:	463a      	mov	r2, r7
 800b062:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b066:	e883 0003 	stmia.w	r3, {r0, r1}
	  }
      }
 800b06a:	bf00      	nop
 800b06c:	3724      	adds	r7, #36	; 0x24
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd90      	pop	{r4, r7, pc}

0800b072 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>:

      void
      _M_initialize_value(bool __x)
 800b072:	b590      	push	{r4, r7, lr}
 800b074:	b085      	sub	sp, #20
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	460b      	mov	r3, r1
 800b07c:	70fb      	strb	r3, [r7, #3]
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	60fb      	str	r3, [r7, #12]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d012      	beq.n	800b0b0 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x3e>
	  __builtin_memset(__p, __x ? ~0 : 0,
 800b08a:	78fb      	ldrb	r3, [r7, #3]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x24>
 800b090:	f04f 34ff 	mov.w	r4, #4294967295
 800b094:	e000      	b.n	800b098 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x26>
 800b096:	2400      	movs	r4, #0
			   (this->_M_impl._M_end_addr() - __p)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f001 fa08 	bl	800c4b0 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	1ad3      	subs	r3, r2, r3
	  __builtin_memset(__p, __x ? ~0 : 0,
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f014 fc1a 	bl	801f8e4 <memset>
			   * sizeof(_Bit_type));
      }
 800b0b0:	bf00      	nop
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd90      	pop	{r4, r7, pc}

0800b0b8 <_ZNSt6vectorIbN2ei7EiAllocIbEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
      { return iterator(this->_M_impl._M_start._M_p, 0); }
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7f6 fc3e 	bl	800194c <_ZNSt13_Bit_iteratorC1EPmj>
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f001 fa02 	bl	800c4f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f103 0208 	add.w	r2, r3, #8
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	3308      	adds	r3, #8
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f001 fa2b 	bl	800c556 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f103 020c 	add.w	r2, r3, #12
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	330c      	adds	r3, #12
 800b10a:	4619      	mov	r1, r3
 800b10c:	4610      	mov	r0, r2
 800b10e:	f001 fa4c 	bl	800c5aa <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800b112:	bf00      	nop
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b11a:	b480      	push	{r7}
 800b11c:	b083      	sub	sp, #12
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4618      	mov	r0, r3
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800b130:	b590      	push	{r4, r7, lr}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800b13c:	68fc      	ldr	r4, [r7, #12]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f001 fa52 	bl	800c5e8 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b144:	4602      	mov	r2, r0
 800b146:	f107 0308 	add.w	r3, r7, #8
 800b14a:	4619      	mov	r1, r3
 800b14c:	4620      	mov	r0, r4
 800b14e:	f001 fa56 	bl	800c5fe <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd90      	pop	{r4, r7, pc}

0800b15c <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4618      	mov	r0, r3
 800b168:	f001 fa62 	bl	800c630 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800b16c:	4603      	mov	r3, r0
 800b16e:	4618      	mov	r0, r3
 800b170:	3708      	adds	r7, #8
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 800b176:	b580      	push	{r7, lr}
 800b178:	b082      	sub	sp, #8
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4618      	mov	r0, r3
 800b182:	f001 fa62 	bl	800c64a <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800b186:	4603      	mov	r3, r0
 800b188:	4618      	mov	r0, r3
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>:
      void reset(pointer __p) noexcept
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7ff ffde 	bl	800b15c <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7ff ffd8 	bl	800b15c <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d006      	beq.n	800b1c6 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_+0x36>
	  _M_deleter()(__old_p);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f001 fa46 	bl	800c64a <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	4798      	blx	r3
      }
 800b1c6:	bf00      	nop
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b1ce:	b480      	push	{r7}
 800b1d0:	b083      	sub	sp, #12
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	601a      	str	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	370c      	adds	r7, #12
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b1ee:	b480      	push	{r7}
 800b1f0:	b083      	sub	sp, #12
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800b20e:	f107 030c 	add.w	r3, r7, #12
 800b212:	4618      	mov	r0, r3
 800b214:	f001 fa26 	bl	800c664 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>
 800b218:	4602      	mov	r2, r0
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4293      	cmp	r3, r2
 800b21e:	bf8c      	ite	hi
 800b220:	2301      	movhi	r3, #1
 800b222:	2300      	movls	r3, #0
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_+0x2c>
	  __throw_length_error(
 800b22a:	4804      	ldr	r0, [pc, #16]	; (800b23c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_+0x38>)
 800b22c:	f00f feaf 	bl	801af8e <_ZSt20__throw_length_errorPKc>
	return __n;
 800b230:	687b      	ldr	r3, [r7, #4]
      }
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	08023578 	.word	0x08023578

0800b240 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6879      	ldr	r1, [r7, #4]
 800b250:	4618      	mov	r0, r3
 800b252:	f001 fa21 	bl	800c698 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800b256:	68b9      	ldr	r1, [r7, #8]
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f001 fa2b 	bl	800c6b4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <_ZNSt6vectorIfN2ei7EiAllocIfEEE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 800b268:	b590      	push	{r4, r7, lr}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 f80d 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800b27e:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800b280:	461a      	mov	r2, r3
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	4620      	mov	r0, r4
 800b286:	f001 fa30 	bl	800c6ea <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
 800b28a:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	605a      	str	r2, [r3, #4]
      }
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	bd90      	pop	{r4, r7, pc}

0800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>:
   * destroy() even if _Tp has a trivial destructor.
   */

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b084      	sub	sp, #16
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	60f8      	str	r0, [r7, #12]
 800b2b6:	60b9      	str	r1, [r7, #8]
 800b2b8:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 800b2ba:	e00a      	b.n	800b2d2 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_+0x24>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f001 fa33 	bl	800c728 <_ZSt11__addressofIfEPT_RS0_>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f001 fa39 	bl	800c73e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>
      for (; __first != __last; ++__first)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	60fb      	str	r3, [r7, #12]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d1f0      	bne.n	800b2bc <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_+0xe>
					      std::__addressof(*__first));
#endif
    }
 800b2da:	bf00      	nop
 800b2dc:	bf00      	nop
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
	if (__p)
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d005      	beq.n	800b302 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	68b9      	ldr	r1, [r7, #8]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f001 fa2c 	bl	800c75a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10deallocateERS2_Pfj>
      }
 800b302:	bf00      	nop
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b30a:	b480      	push	{r7}
 800b30c:	b083      	sub	sp, #12
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	601a      	str	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4618      	mov	r0, r3
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b340:	b5b0      	push	{r4, r5, r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800b34c:	f107 0208 	add.w	r2, r7, #8
 800b350:	f107 030c 	add.w	r3, r7, #12
 800b354:	4611      	mov	r1, r2
 800b356:	4618      	mov	r0, r3
 800b358:	f7fe fb4c 	bl	80099f4 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d017      	beq.n	800b392 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x52>
				std::__lg(__last - __first) * 2,
 800b362:	f107 020c 	add.w	r2, r7, #12
 800b366:	f107 0308 	add.w	r3, r7, #8
 800b36a:	4611      	mov	r1, r2
 800b36c:	4618      	mov	r0, r3
 800b36e:	f001 fa28 	bl	800c7c2 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b372:	4603      	mov	r3, r0
 800b374:	4618      	mov	r0, r3
 800b376:	f7f6 f9b7 	bl	80016e8 <_ZSt4__lgi>
 800b37a:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800b37c:	005a      	lsls	r2, r3, #1
 800b37e:	462b      	mov	r3, r5
 800b380:	68b9      	ldr	r1, [r7, #8]
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f001 fa32 	bl	800c7ec <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800b388:	4622      	mov	r2, r4
 800b38a:	68b9      	ldr	r1, [r7, #8]
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f001 fa64 	bl	800c85a <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800b392:	bf00      	nop
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bdb0      	pop	{r4, r5, r7, pc}

0800b39a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800b39a:	b580      	push	{r7, lr}
 800b39c:	ed2d 8b02 	vpush	{d8}
 800b3a0:	b084      	sub	sp, #16
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	60f8      	str	r0, [r7, #12]
 800b3a6:	60b9      	str	r1, [r7, #8]
 800b3a8:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800b3aa:	f107 0308 	add.w	r3, r7, #8
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fe fbf7 	bl	8009ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	ed93 8a00 	vldr	s16, [r3]
 800b3ba:	1d3b      	adds	r3, r7, #4
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fe fbf0 	bl	8009ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	edd3 7a00 	vldr	s15, [r3]
 800b3c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d0:	bf4c      	ite	mi
 800b3d2:	2301      	movmi	r3, #1
 800b3d4:	2300      	movpl	r3, #0
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	ecbd 8b02 	vpop	{d8}
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>:
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return __first;
 800b3f0:	f107 0208 	add.w	r2, r7, #8
 800b3f4:	f107 030c 	add.w	r3, r7, #12
 800b3f8:	4611      	mov	r1, r2
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f001 fa65 	bl	800c8ca <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x26>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	e01d      	b.n	800b446 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x62>
      _ForwardIterator __result = __first;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b40e:	e00a      	b.n	800b426 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	if (__comp(__result, __first))
 800b410:	1d3b      	adds	r3, r7, #4
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	6979      	ldr	r1, [r7, #20]
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff ffbf 	bl	800b39a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	  __result = __first;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b426:	f107 030c 	add.w	r3, r7, #12
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fe fba9 	bl	8009b82 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800b430:	4602      	mov	r2, r0
 800b432:	f107 0308 	add.w	r3, r7, #8
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f7fe fb8a 	bl	8009b52 <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e5      	bne.n	800b410 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x2c>
      return __result;
 800b444:	697b      	ldr	r3, [r7, #20]
    }
 800b446:	4618      	mov	r0, r3
 800b448:	3718      	adds	r7, #24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800b45a:	f107 030c 	add.w	r3, r7, #12
 800b45e:	4618      	mov	r0, r3
 800b460:	f001 fa4b 	bl	800c8fa <_ZNSt6vectorIiN2ei7EiAllocIiEEE11_S_max_sizeERKS2_>
 800b464:	4602      	mov	r2, r0
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4293      	cmp	r3, r2
 800b46a:	bf8c      	ite	hi
 800b46c:	2301      	movhi	r3, #1
 800b46e:	2300      	movls	r3, #0
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d002      	beq.n	800b47c <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_+0x2c>
	  __throw_length_error(
 800b476:	4804      	ldr	r0, [pc, #16]	; (800b488 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_+0x38>)
 800b478:	f00f fd89 	bl	801af8e <_ZSt20__throw_length_errorPKc>
	return __n;
 800b47c:	687b      	ldr	r3, [r7, #4]
      }
 800b47e:	4618      	mov	r0, r3
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	08023578 	.word	0x08023578

0800b48c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4618      	mov	r0, r3
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800b4ae:	e00a      	b.n	800b4c6 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_+0x24>
	allocator_traits<_Allocator>::destroy(__alloc,
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f001 fa4a 	bl	800c94a <_ZSt11__addressofIiEPT_RS0_>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f001 fa50 	bl	800c960 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE7destroyIiEEvRS2_PT_>
      for (; __first != __last; ++__first)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	60fb      	str	r3, [r7, #12]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d1f0      	bne.n	800b4b0 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_+0xe>
    }
 800b4ce:	bf00      	nop
 800b4d0:	bf00      	nop
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
	if (__p)
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d005      	beq.n	800b4f6 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	68b9      	ldr	r1, [r7, #8]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f001 fa43 	bl	800c97c <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10deallocateERS2_Pij>
      }
 800b4f6:	bf00      	nop
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <_ZN9__gnu_cxx14__alloc_traitsIN2ei7EiAllocIfEEfE17_S_select_on_copyERKS3_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800b4fe:	b590      	push	{r4, r7, lr}
 800b500:	b083      	sub	sp, #12
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f001 fa47 	bl	800c99a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE37select_on_container_copy_constructionERKS2_>
 800b50c:	bf00      	nop
 800b50e:	4620      	mov	r0, r4
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	bd90      	pop	{r4, r7, pc}

0800b516 <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b516:	b480      	push	{r7}
 800b518:	b083      	sub	sp, #12
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4618      	mov	r0, r3
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_>:
  //  any of the POD optimizations.

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b52c:	b590      	push	{r4, r7, lr}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	617b      	str	r3, [r7, #20]
      __try
	{
	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
	  for (; __first != __last; ++__first, (void)++__cur)
 800b53e:	e016      	b.n	800b56e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800b540:	6978      	ldr	r0, [r7, #20]
 800b542:	f001 f8f1 	bl	800c728 <_ZSt11__addressofIfEPT_RS0_>
 800b546:	4604      	mov	r4, r0
 800b548:	f107 030c 	add.w	r3, r7, #12
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fe fb28 	bl	8009ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b552:	4603      	mov	r3, r0
 800b554:	461a      	mov	r2, r3
 800b556:	4621      	mov	r1, r4
 800b558:	6838      	ldr	r0, [r7, #0]
 800b55a:	f000 fb70 	bl	800bc3e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800b55e:	f107 030c 	add.w	r3, r7, #12
 800b562:	4618      	mov	r0, r3
 800b564:	f7fe fb0d 	bl	8009b82 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	3304      	adds	r3, #4
 800b56c:	617b      	str	r3, [r7, #20]
 800b56e:	f107 0208 	add.w	r2, r7, #8
 800b572:	f107 030c 	add.w	r3, r7, #12
 800b576:	4611      	mov	r1, r2
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fe faea 	bl	8009b52 <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1dd      	bne.n	800b540 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_+0x14>
	  return __cur;
 800b584:	697b      	ldr	r3, [r7, #20]
      __catch(...)
	{
	  std::_Destroy(__result, __cur, __alloc);
	  __throw_exception_again;
	}
    }
 800b586:	4618      	mov	r0, r3
 800b588:	371c      	adds	r7, #28
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd90      	pop	{r4, r7, pc}

0800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b5ba:	b480      	push	{r7}
 800b5bc:	b083      	sub	sp, #12
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	601a      	str	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	605a      	str	r2, [r3, #4]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	609a      	str	r2, [r3, #8]
	{ }
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b084      	sub	sp, #16
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	60f8      	str	r0, [r7, #12]
 800b5ea:	60b9      	str	r1, [r7, #8]
 800b5ec:	607a      	str	r2, [r7, #4]
	if (__p)
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d005      	beq.n	800b600 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f001 f9da 	bl	800c9b4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>
      }
 800b600:	bf00      	nop
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4618      	mov	r0, r3
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b61e:	b580      	push	{r7, lr}
 800b620:	b084      	sub	sp, #16
 800b622:	af00      	add	r7, sp, #0
 800b624:	60f8      	str	r0, [r7, #12]
 800b626:	60b9      	str	r1, [r7, #8]
 800b628:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800b62a:	e00a      	b.n	800b642 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0x24>
	allocator_traits<_Allocator>::destroy(__alloc,
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f001 f9d0 	bl	800c9d2 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800b632:	4603      	mov	r3, r0
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f001 f9d6 	bl	800c9e8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
      for (; __first != __last; ++__first)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	3308      	adds	r3, #8
 800b640:	60fb      	str	r3, [r7, #12]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	429a      	cmp	r2, r3
 800b648:	d1f0      	bne.n	800b62c <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0xe>
    }
 800b64a:	bf00      	nop
 800b64c:	bf00      	nop
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f001 f9cf 	bl	800ca04 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b666:	4603      	mov	r3, r0
 800b668:	461a      	mov	r2, r3
 800b66a:	68b9      	ldr	r1, [r7, #8]
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f001 f9d4 	bl	800ca1a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>
 800b672:	bf00      	nop
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>:
      _S_use_relocate()
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b082      	sub	sp, #8
 800b67e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800b680:	4618      	mov	r0, r3
 800b682:	f000 f805 	bl	800b690 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800b686:	4603      	mov	r3, r0
      }
 800b688:	4618      	mov	r0, r3
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800b698:	2301      	movs	r3, #1
      }
 800b69a:	4618      	mov	r0, r3
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
	...

0800b6a8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800b6a8:	b5b0      	push	{r4, r5, r7, lr}
 800b6aa:	b08c      	sub	sp, #48	; 0x30
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800b6b4:	4a59      	ldr	r2, [pc, #356]	; (800b81c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x174>)
 800b6b6:	2101      	movs	r1, #1
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f001 f9c7 	bl	800ca4c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>
 800b6be:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f7fe fbbc 	bl	8009e4a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	617b      	str	r3, [r7, #20]
 800b6d6:	f107 0214 	add.w	r2, r7, #20
 800b6da:	f107 0308 	add.w	r3, r7, #8
 800b6de:	4611      	mov	r1, r2
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f001 f9fa 	bl	800cada <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f001 fa08 	bl	800cb04 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>
 800b6f4:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800b6fa:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	18d5      	adds	r5, r2, r3
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f001 f97d 	bl	800ca04 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b70a:	4603      	mov	r3, r0
 800b70c:	461a      	mov	r2, r3
 800b70e:	4629      	mov	r1, r5
 800b710:	4620      	mov	r0, r4
 800b712:	f7ff ff9f 	bl	800b654 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800b716:	2300      	movs	r3, #0
 800b718:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800b71a:	f7ff ffae 	bl	800b67a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d027      	beq.n	800b774 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800b724:	f107 0308 	add.w	r3, r7, #8
 800b728:	4618      	mov	r0, r3
 800b72a:	f001 fa13 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800b72e:	4603      	mov	r3, r0
 800b730:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	4618      	mov	r0, r3
 800b736:	f7ff ff67 	bl	800b608 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800b73a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800b73c:	69ba      	ldr	r2, [r7, #24]
 800b73e:	4621      	mov	r1, r4
 800b740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b742:	f001 f9f3 	bl	800cb2c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 800b746:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800b748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74a:	3308      	adds	r3, #8
 800b74c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b74e:	f107 0308 	add.w	r3, r7, #8
 800b752:	4618      	mov	r0, r3
 800b754:	f001 f9fe 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800b758:	4603      	mov	r3, r0
 800b75a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4618      	mov	r0, r3
 800b760:	f7ff ff52 	bl	800b608 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800b764:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b768:	6a39      	ldr	r1, [r7, #32]
 800b76a:	4620      	mov	r0, r4
 800b76c:	f001 f9de 	bl	800cb2c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 800b770:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b772:	e026      	b.n	800b7c2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800b774:	f107 0308 	add.w	r3, r7, #8
 800b778:	4618      	mov	r0, r3
 800b77a:	f001 f9eb 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800b77e:	4603      	mov	r3, r0
 800b780:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff ff3f 	bl	800b608 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800b78a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800b78c:	69ba      	ldr	r2, [r7, #24]
 800b78e:	4621      	mov	r1, r4
 800b790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b792:	f001 f9ea 	bl	800cb6a <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800b796:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800b798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79a:	3308      	adds	r3, #8
 800b79c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800b79e:	f107 0308 	add.w	r3, r7, #8
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f001 f9d6 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7ff ff2a 	bl	800b608 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800b7b4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800b7b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7b8:	6a39      	ldr	r1, [r7, #32]
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f001 f9d5 	bl	800cb6a <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800b7c0:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800b7c2:	f7ff ff5a 	bl	800b67a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	f083 0301 	eor.w	r3, r3, #1
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d009      	beq.n	800b7e6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7ff ff17 	bl	800b608 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	461a      	mov	r2, r3
 800b7de:	6a39      	ldr	r1, [r7, #32]
 800b7e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7e2:	f7ff ff1c 	bl	800b61e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800b7e6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	689a      	ldr	r2, [r3, #8]
 800b7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7f6:	f7ff fef4 	bl	800b5e2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	69ba      	ldr	r2, [r7, #24]
 800b7fe:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b804:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b808:	00db      	lsls	r3, r3, #3
 800b80a:	69ba      	ldr	r2, [r7, #24]
 800b80c:	441a      	add	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	609a      	str	r2, [r3, #8]
    }
 800b812:	bf00      	nop
 800b814:	3730      	adds	r7, #48	; 0x30
 800b816:	46bd      	mov	sp, r7
 800b818:	bdb0      	pop	{r4, r5, r7, pc}
 800b81a:	bf00      	nop
 800b81c:	080235ac 	.word	0x080235ac

0800b820 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	601a      	str	r2, [r3, #0]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4618      	mov	r0, r3
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 800b840:	b5b0      	push	{r4, r5, r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800b848:	1d3b      	adds	r3, r7, #4
 800b84a:	4618      	mov	r0, r3
 800b84c:	f001 f9a6 	bl	800cb9c <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 800b850:	f107 030c 	add.w	r3, r7, #12
 800b854:	4629      	mov	r1, r5
 800b856:	4618      	mov	r0, r3
 800b858:	f001 f9ab 	bl	800cbb2 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 800b85c:	bf00      	nop
 800b85e:	4620      	mov	r0, r4
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bdb0      	pop	{r4, r5, r7, pc}

0800b866 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	60b9      	str	r1, [r7, #8]
 800b870:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800b872:	f107 0208 	add.w	r2, r7, #8
 800b876:	f107 030c 	add.w	r3, r7, #12
 800b87a:	4611      	mov	r1, r2
 800b87c:	4618      	mov	r0, r3
 800b87e:	f001 f9a6 	bl	800cbce <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d017      	beq.n	800b8b8 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x52>
				std::__lg(__last - __first) * 2,
 800b888:	f107 020c 	add.w	r2, r7, #12
 800b88c:	f107 0308 	add.w	r3, r7, #8
 800b890:	4611      	mov	r1, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f001 f921 	bl	800cada <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800b898:	4603      	mov	r3, r0
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7f5 ff24 	bl	80016e8 <_ZSt4__lgi>
 800b8a0:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800b8a2:	005a      	lsls	r2, r3, #1
 800b8a4:	793b      	ldrb	r3, [r7, #4]
 800b8a6:	68b9      	ldr	r1, [r7, #8]
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f001 f9a8 	bl	800cbfe <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800b8ae:	793a      	ldrb	r2, [r7, #4]
 800b8b0:	68b9      	ldr	r1, [r7, #8]
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f001 f9da 	bl	800cc6c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800b8b8:	bf00      	nop
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800b8cc:	f107 0208 	add.w	r2, r7, #8
 800b8d0:	f107 030c 	add.w	r3, r7, #12
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 fff7 	bl	800c8ca <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x26>
	return __first;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	e01d      	b.n	800b922 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x62>
      _ForwardIterator __result = __first;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b8ea:	e00a      	b.n	800b902 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	if (__comp(__first, __result))
 800b8ec:	1d3b      	adds	r3, r7, #4
 800b8ee:	697a      	ldr	r2, [r7, #20]
 800b8f0:	68f9      	ldr	r1, [r7, #12]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff fd51 	bl	800b39a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	  __result = __first;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b902:	f107 030c 	add.w	r3, r7, #12
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe f93b 	bl	8009b82 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800b90c:	4602      	mov	r2, r0
 800b90e:	f107 0308 	add.w	r3, r7, #8
 800b912:	4619      	mov	r1, r3
 800b914:	4610      	mov	r0, r2
 800b916:	f7fe f91c 	bl	8009b52 <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e5      	bne.n	800b8ec <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x2c>
      return __result;
 800b920:	697b      	ldr	r3, [r7, #20]
    }
 800b922:	4618      	mov	r0, r3
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
	...

0800b92c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 800b92c:	b5b0      	push	{r4, r5, r7, lr}
 800b92e:	b088      	sub	sp, #32
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f000 80af 	beq.w	800ba9c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x170>
	{
	  const size_type __size = size();
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7fd ff19 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800b944:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	109b      	asrs	r3, r3, #2
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800b952:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fa6f 	bl	800be38 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800b95a:	4602      	mov	r2, r0
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	4293      	cmp	r3, r2
 800b960:	d808      	bhi.n	800b974 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x48>
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fa68 	bl	800be38 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800b968:	4602      	mov	r2, r0
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	1ad3      	subs	r3, r2, r3
 800b96e:	69ba      	ldr	r2, [r7, #24]
 800b970:	429a      	cmp	r2, r3
 800b972:	d901      	bls.n	800b978 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4c>
 800b974:	2301      	movs	r3, #1
 800b976:	e000      	b.n	800b97a <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4e>
 800b978:	2300      	movs	r3, #0
 800b97a:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 800b97c:	69ba      	ldr	r2, [r7, #24]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	429a      	cmp	r2, r3
 800b982:	d30f      	bcc.n	800b9a4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x78>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7ff fc84 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800b990:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800b992:	461a      	mov	r2, r3
 800b994:	6839      	ldr	r1, [r7, #0]
 800b996:	4620      	mov	r0, r4
 800b998:	f000 fea7 	bl	800c6ea <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
 800b99c:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 800b9a2:	e07b      	b.n	800ba9c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x170>
		_M_check_len(__n, "vector::_M_default_append");
 800b9a4:	4a3f      	ldr	r2, [pc, #252]	; (800baa4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x178>)
 800b9a6:	6839      	ldr	r1, [r7, #0]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f001 f997 	bl	800ccdc <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800b9ae:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6979      	ldr	r1, [r7, #20]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 fa60 	bl	800be7a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800b9ba:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800b9bc:	f7fe ffab 	bl	800a916 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d01c      	beq.n	800ba00 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0xd4>
		      std::__uninitialized_default_n_a(__new_start + __size,
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7ff fc61 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800b9d6:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6839      	ldr	r1, [r7, #0]
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f000 fe84 	bl	800c6ea <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681c      	ldr	r4, [r3, #0]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7ff fc53 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800b9f2:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b9f4:	693a      	ldr	r2, [r7, #16]
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f000 fa52 	bl	800bea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800b9fe:	e030      	b.n	800ba62 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x136>
		  pointer __destroy_from = pointer();
 800ba00:	2300      	movs	r3, #0
 800ba02:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7ff fc42 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800ba14:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800ba16:	461a      	mov	r2, r3
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f000 fe65 	bl	800c6ea <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
		      __destroy_from = __new_start + __size;
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	4413      	add	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681c      	ldr	r4, [r3, #0]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7ff fc2f 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800ba3a:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	4629      	mov	r1, r5
 800ba40:	4620      	mov	r0, r4
 800ba42:	f001 f992 	bl	800cd6a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681c      	ldr	r4, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff fc21 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800ba56:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f7ff fc26 	bl	800b2ae <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	      _M_deallocate(this->_M_impl._M_start,
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800ba74:	461a      	mov	r2, r3
 800ba76:	f7ff fc35 	bl	800b2e4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __new_start;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 800ba80:	69fa      	ldr	r2, [r7, #28]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	693a      	ldr	r2, [r7, #16]
 800ba8a:	441a      	add	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	441a      	add	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	609a      	str	r2, [r3, #8]
    }
 800ba9c:	bf00      	nop
 800ba9e:	3720      	adds	r7, #32
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bdb0      	pop	{r4, r5, r7, pc}
 800baa4:	080235c8 	.word	0x080235c8

0800baa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800baa8:	b590      	push	{r4, r7, lr}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	685a      	ldr	r2, [r3, #4]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	109b      	asrs	r3, r3, #2
 800babc:	60fb      	str	r3, [r7, #12]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00e      	beq.n	800bae2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4618      	mov	r0, r3
 800bacc:	f7ff fbe4 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bad0:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800bad2:	461a      	mov	r2, r3
 800bad4:	4621      	mov	r1, r4
 800bad6:	6838      	ldr	r0, [r7, #0]
 800bad8:	f7ff fbe9 	bl	800b2ae <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	    this->_M_impl._M_finish = __pos;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	605a      	str	r2, [r3, #4]
      }
 800bae2:	bf00      	nop
 800bae4:	3714      	adds	r7, #20
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd90      	pop	{r4, r7, pc}

0800baea <_ZNKSt5arrayIfLj6EEixEj>:
      operator[](size_type __n) const noexcept
 800baea:	b580      	push	{r7, lr}
 800baec:	b082      	sub	sp, #8
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f001 f94f 	bl	800cd9c <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800bafe:	4603      	mov	r3, r0
      }
 800bb00:	4618      	mov	r0, r3
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <_ZNKSt5arrayIfLj10EEixEj>:
      operator[](size_type __n) const noexcept
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f001 f94f 	bl	800cdba <_ZNSt14__array_traitsIfLj10EE6_S_refERA10_Kfj>
 800bb1c:	4603      	mov	r3, r0
      }
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <_ZNKSt5arrayIfLj14EEixEj>:
      operator[](size_type __n) const noexcept
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b082      	sub	sp, #8
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 f94f 	bl	800cdd8 <_ZNSt14__array_traitsIfLj14EE6_S_refERA14_Kfj>
 800bb3a:	4603      	mov	r3, r0
      }
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <_ZNKSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) const noexcept
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f001 f94f 	bl	800cdf6 <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 800bb58:	4603      	mov	r3, r0
      }
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <_ZNKSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) const noexcept
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b082      	sub	sp, #8
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f001 f94f 	bl	800ce14 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 800bb76:	4603      	mov	r3, r0
      }
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <_ZNKSt5arrayIfLj8EEixEj>:
      operator[](size_type __n) const noexcept
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6839      	ldr	r1, [r7, #0]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f001 f94f 	bl	800ce32 <_ZNSt14__array_traitsIfLj8EE6_S_refERA8_Kfj>
 800bb94:	4603      	mov	r3, r0
      }
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <_ZNKSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) const noexcept
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b082      	sub	sp, #8
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
 800bba6:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f001 f94f 	bl	800ce50 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 800bbb2:	4603      	mov	r3, r0
      }
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <_ZNKSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) const noexcept
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6839      	ldr	r1, [r7, #0]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f001 f94f 	bl	800ce6e <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 800bbd0:	4603      	mov	r3, r0
      }
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <_ZNKSt5arrayIfLj20EEixEj>:
      operator[](size_type __n) const noexcept
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f001 f94f 	bl	800ce8c <_ZNSt14__array_traitsIfLj20EE6_S_refERA20_Kfj>
 800bbee:	4603      	mov	r3, r0
      }
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <_ZNKSt5arrayIfLj2EEixEj>:
      operator[](size_type __n) const noexcept
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f001 f94f 	bl	800ceaa <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 800bc0c:	4603      	mov	r3, r0
      }
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800bc16:	b480      	push	{r7}
 800bc18:	b083      	sub	sp, #12
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	601a      	str	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	605a      	str	r2, [r3, #4]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	609a      	str	r2, [r3, #8]
	{ }
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4618      	mov	r0, r3
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	60f8      	str	r0, [r7, #12]
 800bc46:	60b9      	str	r1, [r7, #8]
 800bc48:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f001 f93c 	bl	800cec8 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800bc50:	4603      	mov	r3, r0
 800bc52:	461a      	mov	r2, r3
 800bc54:	68b9      	ldr	r1, [r7, #8]
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f001 f941 	bl	800cede <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJRKfEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>
 800bc5c:	bf00      	nop
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800bc64:	b5b0      	push	{r4, r5, r7, lr}
 800bc66:	b08c      	sub	sp, #48	; 0x30
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800bc70:	4a59      	ldr	r2, [pc, #356]	; (800bdd8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x174>)
 800bc72:	2101      	movs	r1, #1
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f001 f831 	bl	800ccdc <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800bc7a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f7fd fe92 	bl	80099b2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	617b      	str	r3, [r7, #20]
 800bc92:	f107 0214 	add.w	r2, r7, #20
 800bc96:	f107 0308 	add.w	r3, r7, #8
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 fd90 	bl	800c7c2 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800bca2:	4603      	mov	r3, r0
 800bca4:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 f8e5 	bl	800be7a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800bcb0:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800bcb6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800bcbc:	69ba      	ldr	r2, [r7, #24]
 800bcbe:	18d5      	adds	r5, r2, r3
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f001 f901 	bl	800cec8 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	461a      	mov	r2, r3
 800bcca:	4629      	mov	r1, r5
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7ff ffb6 	bl	800bc3e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  __new_finish = pointer();
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800bcd6:	f7fe fe1e 	bl	800a916 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d027      	beq.n	800bd30 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bce0:	f107 0308 	add.w	r3, r7, #8
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7ff fa82 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800bcea:	4603      	mov	r3, r0
 800bcec:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7ff fad1 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bcf6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bcf8:	69ba      	ldr	r2, [r7, #24]
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcfe:	f000 f8d0 	bl	800bea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800bd02:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800bd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd06:	3304      	adds	r3, #4
 800bd08:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bd0a:	f107 0308 	add.w	r3, r7, #8
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff fa6d 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800bd14:	4603      	mov	r3, r0
 800bd16:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7ff fabc 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bd20:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bd22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd24:	6a39      	ldr	r1, [r7, #32]
 800bd26:	4620      	mov	r0, r4
 800bd28:	f000 f8bb 	bl	800bea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800bd2c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bd2e:	e026      	b.n	800bd7e <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800bd30:	f107 0308 	add.w	r3, r7, #8
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7ff fa5a 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff faa9 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bd46:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800bd48:	69ba      	ldr	r2, [r7, #24]
 800bd4a:	4621      	mov	r1, r4
 800bd4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd4e:	f001 f80c 	bl	800cd6a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800bd52:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800bd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd56:	3304      	adds	r3, #4
 800bd58:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800bd5a:	f107 0308 	add.w	r3, r7, #8
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7ff fa45 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800bd64:	4603      	mov	r3, r0
 800bd66:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7ff fa94 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bd70:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800bd72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd74:	6a39      	ldr	r1, [r7, #32]
 800bd76:	4620      	mov	r0, r4
 800bd78:	f000 fff7 	bl	800cd6a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800bd7c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800bd7e:	f7fe fdca 	bl	800a916 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800bd82:	4603      	mov	r3, r0
 800bd84:	f083 0301 	eor.w	r3, r3, #1
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d009      	beq.n	800bda2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7ff fa81 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bd96:	4603      	mov	r3, r0
 800bd98:	461a      	mov	r2, r3
 800bd9a:	6a39      	ldr	r1, [r7, #32]
 800bd9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd9e:	f7ff fa86 	bl	800b2ae <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      _M_deallocate(__old_start,
 800bda2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	689a      	ldr	r2, [r3, #8]
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800bdae:	461a      	mov	r2, r3
 800bdb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdb2:	f7ff fa97 	bl	800b2e4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	69ba      	ldr	r2, [r7, #24]
 800bdba:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	69ba      	ldr	r2, [r7, #24]
 800bdc8:	441a      	add	r2, r3
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	609a      	str	r2, [r3, #8]
    }
 800bdce:	bf00      	nop
 800bdd0:	3730      	adds	r7, #48	; 0x30
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bdb0      	pop	{r4, r5, r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	080235ac 	.word	0x080235ac

0800bddc <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800bddc:	b5b0      	push	{r4, r5, r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	685a      	ldr	r2, [r3, #4]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d011      	beq.n	800be16 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800bdf2:	687c      	ldr	r4, [r7, #4]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	685d      	ldr	r5, [r3, #4]
 800bdf8:	6838      	ldr	r0, [r7, #0]
 800bdfa:	f001 f886 	bl	800cf0a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800bdfe:	4603      	mov	r3, r0
 800be00:	461a      	mov	r2, r3
 800be02:	4629      	mov	r1, r5
 800be04:	4620      	mov	r0, r4
 800be06:	f001 f88b 	bl	800cf20 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	    ++this->_M_impl._M_finish;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	1d1a      	adds	r2, r3, #4
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	605a      	str	r2, [r3, #4]
      }
 800be14:	e00c      	b.n	800be30 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f7fd fddb 	bl	80099d2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800be1c:	4604      	mov	r4, r0
 800be1e:	6838      	ldr	r0, [r7, #0]
 800be20:	f001 f873 	bl	800cf0a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800be24:	4603      	mov	r3, r0
 800be26:	461a      	mov	r2, r3
 800be28:	4621      	mov	r1, r4
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f001 f88c 	bl	800cf48 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>
      }
 800be30:	bf00      	nop
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bdb0      	pop	{r4, r5, r7, pc}

0800be38 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4618      	mov	r0, r3
 800be44:	f7ff fb67 	bl	800b516 <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be48:	4603      	mov	r3, r0
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 fc0a 	bl	800c664 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>
 800be50:	4603      	mov	r3, r0
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800be5a:	b480      	push	{r7}
 800be5c:	b083      	sub	sp, #12
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	109b      	asrs	r3, r3, #2
 800be6e:	4618      	mov	r0, r3
 800be70:	370c      	adds	r7, #12
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr

0800be7a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b082      	sub	sp, #8
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
 800be82:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d006      	beq.n	800be98 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj+0x1e>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	4618      	mov	r0, r3
 800be90:	f001 f916 	bl	800d0c0 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8allocateERS2_j>
 800be94:	4603      	mov	r3, r0
 800be96:	e000      	b.n	800be9a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj+0x20>
 800be98:	2300      	movs	r3, #0
      }
 800be9a:	4618      	mov	r0, r3
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800bea2:	b590      	push	{r4, r7, lr}
 800bea4:	b087      	sub	sp, #28
 800bea6:	af02      	add	r7, sp, #8
 800bea8:	60f8      	str	r0, [r7, #12]
 800beaa:	60b9      	str	r1, [r7, #8]
 800beac:	607a      	str	r2, [r7, #4]
 800beae:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800beb0:	f88d 4000 	strb.w	r4, [sp]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	68b9      	ldr	r1, [r7, #8]
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f001 f90e 	bl	800d0dc <_ZNSt6vectorIfN2ei7EiAllocIfEEE14_S_do_relocateEPfS4_S4_RS2_St17integral_constantIbLb1EE>
 800bec0:	4603      	mov	r3, r0
      }
 800bec2:	4618      	mov	r0, r3
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd90      	pop	{r4, r7, pc}

0800beca <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800bed2:	f107 030c 	add.w	r3, r7, #12
 800bed6:	6879      	ldr	r1, [r7, #4]
 800bed8:	4618      	mov	r0, r3
 800beda:	f001 f911 	bl	800d100 <_ZNSt13move_iteratorIPfEC1ES0_>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE20_M_allocate_and_copyISt13move_iteratorIPfEEES6_jT_S8_>:
	_M_allocate_and_copy(size_type __n,
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
 800bef4:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	68b9      	ldr	r1, [r7, #8]
 800befa:	4618      	mov	r0, r3
 800befc:	f7ff ffbd 	bl	800be7a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800bf00:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7ff f9c7 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bf0a:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	6839      	ldr	r1, [r7, #0]
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f001 f907 	bl	800d124 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
	      return __result;
 800bf16:	697b      	ldr	r3, [r7, #20]
	}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 fbb2 	bl	800c698 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800bf3e:	b480      	push	{r7}
 800bf40:	b083      	sub	sp, #12
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800bf46:	bf00      	nop
 800bf48:	4618      	mov	r0, r3
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_M_range_initializeIPKfEEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800bf54:	b590      	push	{r4, r7, lr}
 800bf56:	b087      	sub	sp, #28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
 800bf60:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800bf62:	6879      	ldr	r1, [r7, #4]
 800bf64:	68b8      	ldr	r0, [r7, #8]
 800bf66:	f001 f90e 	bl	800d186 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800bf6e:	68fc      	ldr	r4, [r7, #12]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7ff f990 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	6978      	ldr	r0, [r7, #20]
 800bf7e:	f7ff f941 	bl	800b204 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>
 800bf82:	4603      	mov	r3, r0
 800bf84:	4619      	mov	r1, r3
 800bf86:	4620      	mov	r0, r4
 800bf88:	f7ff ff77 	bl	800be7a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	441a      	add	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7ff f976 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bfac:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800bfae:	4622      	mov	r2, r4
 800bfb0:	6879      	ldr	r1, [r7, #4]
 800bfb2:	68b8      	ldr	r0, [r7, #8]
 800bfb4:	f001 f8fb 	bl	800d1ae <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
 800bfb8:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	605a      	str	r2, [r3, #4]
	}
 800bfbe:	bf00      	nop
 800bfc0:	371c      	adds	r7, #28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd90      	pop	{r4, r7, pc}

0800bfc6 <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800bfc6:	b480      	push	{r7}
 800bfc8:	b083      	sub	sp, #12
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800bfde:	b590      	push	{r4, r7, lr}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff ffed 	bl	800bfc6 <_ZNKSt16initializer_listIiE5beginEv>
 800bfec:	4604      	mov	r4, r0
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f001 f8ff 	bl	800d1f2 <_ZNKSt16initializer_listIiE4sizeEv>
 800bff4:	4603      	mov	r3, r0
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4423      	add	r3, r4
 800bffa:	4618      	mov	r0, r3
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd90      	pop	{r4, r7, pc}

0800c002 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	4618      	mov	r0, r3
 800c012:	f000 fc8c 	bl	800c92e <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE12_Vector_implC1ERKS2_>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4618      	mov	r0, r3
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <_ZNSt6vectorIiN2ei7EiAllocIiEEE19_M_range_initializeIPKiEEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800c020:	b590      	push	{r4, r7, lr}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
 800c02c:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800c02e:	6879      	ldr	r1, [r7, #4]
 800c030:	68b8      	ldr	r0, [r7, #8]
 800c032:	f001 f8ea 	bl	800d20a <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800c036:	4603      	mov	r3, r0
 800c038:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800c03a:	68fc      	ldr	r4, [r7, #12]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff fa24 	bl	800b48c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800c044:	4603      	mov	r3, r0
 800c046:	4619      	mov	r1, r3
 800c048:	6978      	ldr	r0, [r7, #20]
 800c04a:	f7ff fa01 	bl	800b450 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_>
 800c04e:	4603      	mov	r3, r0
 800c050:	4619      	mov	r1, r3
 800c052:	4620      	mov	r0, r4
 800c054:	f001 f8ed 	bl	800d232 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj>
 800c058:	4602      	mov	r2, r0
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	441a      	add	r2, r3
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	4618      	mov	r0, r3
 800c074:	f7ff fa0a 	bl	800b48c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800c078:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800c07a:	4622      	mov	r2, r4
 800c07c:	6879      	ldr	r1, [r7, #4]
 800c07e:	68b8      	ldr	r0, [r7, #8]
 800c080:	f001 f8eb 	bl	800d25a <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_>
 800c084:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	605a      	str	r2, [r3, #4]
	}
 800c08a:	bf00      	nop
 800c08c:	371c      	adds	r7, #28
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd90      	pop	{r4, r7, pc}

0800c092 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c092:	b480      	push	{r7}
 800c094:	b083      	sub	sp, #12
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c0b2:	b480      	push	{r7}
 800c0b4:	b083      	sub	sp, #12
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
	...

0800c0e0 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>:
	function(_Functor&& __f)
 800c0e0:	b590      	push	{r4, r7, lr}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	6013      	str	r3, [r2, #0]
 800c0f2:	6053      	str	r3, [r2, #4]
 800c0f4:	6093      	str	r3, [r2, #8]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fe fd36 	bl	800ab6a <_ZNSt14_Function_baseC1Ev>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4618      	mov	r0, r3
 800c10a:	f001 f8d7 	bl	800d2bc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00e      	beq.n	800c132 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x52>
	      _My_handler::_M_init_functor(_M_functor,
 800c114:	687c      	ldr	r4, [r7, #4]
 800c116:	6838      	ldr	r0, [r7, #0]
 800c118:	f7ff ffd6 	bl	800c0c8 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c11c:	4603      	mov	r3, r0
 800c11e:	4619      	mov	r1, r3
 800c120:	4620      	mov	r0, r4
 800c122:	f001 f8db 	bl	800d2dc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a04      	ldr	r2, [pc, #16]	; (800c13c <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x5c>)
 800c12a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a04      	ldr	r2, [pc, #16]	; (800c140 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x60>)
 800c130:	609a      	str	r2, [r3, #8]
	}
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4618      	mov	r0, r3
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd90      	pop	{r4, r7, pc}
 800c13c:	0800d301 	.word	0x0800d301
 800c140:	0800d343 	.word	0x0800d343

0800c144 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4618      	mov	r0, r3
 800c150:	370c      	adds	r7, #12
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
	...

0800c15c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>:
	function(_Functor&& __f)
 800c15c:	b590      	push	{r4, r7, lr}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	461a      	mov	r2, r3
 800c16a:	2300      	movs	r3, #0
 800c16c:	6013      	str	r3, [r2, #0]
 800c16e:	6053      	str	r3, [r2, #4]
 800c170:	6093      	str	r3, [r2, #8]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4618      	mov	r0, r3
 800c176:	f7fe fcf8 	bl	800ab6a <_ZNSt14_Function_baseC1Ev>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800c180:	6838      	ldr	r0, [r7, #0]
 800c182:	f001 f8fd 	bl	800d380 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00e      	beq.n	800c1aa <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800c18c:	687c      	ldr	r4, [r7, #4]
 800c18e:	6838      	ldr	r0, [r7, #0]
 800c190:	f7ff ffd8 	bl	800c144 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800c194:	4603      	mov	r3, r0
 800c196:	4619      	mov	r1, r3
 800c198:	4620      	mov	r0, r4
 800c19a:	f001 f8fc 	bl	800d396 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a04      	ldr	r2, [pc, #16]	; (800c1b4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x58>)
 800c1a2:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4a04      	ldr	r2, [pc, #16]	; (800c1b8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x5c>)
 800c1a8:	609a      	str	r2, [r3, #8]
	}
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd90      	pop	{r4, r7, pc}
 800c1b4:	0800d3bb 	.word	0x0800d3bb
 800c1b8:	0800d3fd 	.word	0x0800d3fd

0800c1bc <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f001 f937 	bl	800d43a <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f001 f935 	bl	800d454 <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f808 	bl	800c200 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f001 f92f 	bl	800d46e <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c210:	4603      	mov	r3, r0
 800c212:	4618      	mov	r0, r3
 800c214:	3708      	adds	r7, #8
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}

0800c21a <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 800c21a:	b580      	push	{r7, lr}
 800c21c:	b082      	sub	sp, #8
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4618      	mov	r0, r3
 800c226:	f001 f92f 	bl	800d488 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>
 800c22a:	4603      	mov	r3, r0
 800c22c:	4618      	mov	r0, r3
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>:
	operator()(_Up* __ptr) const
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d002      	beq.n	800c24a <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_+0x16>
 800c244:	6838      	ldr	r0, [r7, #0]
 800c246:	f00e fe8b 	bl	801af60 <_ZdaPv>
	}
 800c24a:	bf00      	nop
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f001 f920 	bl	800d4a2 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800c262:	4603      	mov	r3, r0
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4618      	mov	r0, r3
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800c26e:	b580      	push	{r7, lr}
 800c270:	b082      	sub	sp, #8
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f001 f920 	bl	800d4bc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4618      	mov	r0, r3
 800c280:	f001 f928 	bl	800d4d4 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4618      	mov	r0, r3
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c28e:	b580      	push	{r7, lr}
 800c290:	b082      	sub	sp, #8
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
 800c296:	6039      	str	r1, [r7, #0]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe fddd 	bl	800ae5a <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f808 	bl	800c2b6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	6013      	str	r3, [r2, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b082      	sub	sp, #8
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f001 f915 	bl	800d4f0 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 f858 	bl	800c390 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800c2ea:	b480      	push	{r7}
 800c2ec:	b083      	sub	sp, #12
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>:
      operator()(_Tp* __ptr) const
 800c300:	b590      	push	{r4, r7, lr}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c30a:	683c      	ldr	r4, [r7, #0]
 800c30c:	2c00      	cmp	r4, #0
 800c30e:	d006      	beq.n	800c31e <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_+0x1e>
 800c310:	4620      	mov	r0, r4
 800c312:	f7f5 fbe1 	bl	8001ad8 <_ZN2ei9ei_matrixD1Ev>
 800c316:	2110      	movs	r1, #16
 800c318:	4620      	mov	r0, r4
 800c31a:	f00e fe1f 	bl	801af5c <_ZdlPvj>
      }
 800c31e:	bf00      	nop
 800c320:	370c      	adds	r7, #12
 800c322:	46bd      	mov	sp, r7
 800c324:	bd90      	pop	{r4, r7, pc}

0800c326 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>:
      void reset(pointer __p) noexcept
 800c326:	b580      	push	{r7, lr}
 800c328:	b084      	sub	sp, #16
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f7ff ffc0 	bl	800c2b6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c336:	4603      	mov	r3, r0
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f7ff ffba 	bl	800c2b6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c342:	4602      	mov	r2, r0
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d007      	beq.n	800c35e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_+0x38>
	  _M_deleter()(__old_p);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f81e 	bl	800c390 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800c354:	4603      	mov	r3, r0
 800c356:	68f9      	ldr	r1, [r7, #12]
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff ffd1 	bl	800c300 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
      }
 800c35e:	bf00      	nop
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>:
      pointer release() noexcept
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7ff ffa1 	bl	800c2b6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c374:	4603      	mov	r3, r0
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f7ff ff9b 	bl	800c2b6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c380:	4603      	mov	r3, r0
 800c382:	2200      	movs	r2, #0
 800c384:	601a      	str	r2, [r3, #0]
	return __p;
 800c386:	68fb      	ldr	r3, [r7, #12]
      }
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f001 f8b5 	bl	800d50a <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3708      	adds	r7, #8
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c3aa:	b480      	push	{r7}
 800c3ac:	b083      	sub	sp, #12
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f001 f8a9 	bl	800d522 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>:
struct EiAlloc
{
    typedef T value_type;
    EiAlloc() = default;
    template <class U>
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>:
	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
	: _Bit_alloc_type(__a)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4618      	mov	r0, r3
 800c402:	f001 f89b 	bl	800d53c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
	{ }
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>:
      _M_deallocate()
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d018      	beq.n	800c452 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4618      	mov	r0, r3
 800c424:	f000 f844 	bl	800c4b0 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800c428:	4602      	mov	r2, r0
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	109b      	asrs	r3, r3, #2
 800c432:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 800c434:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	691a      	ldr	r2, [r3, #16]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 800c440:	4413      	add	r3, r2
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	4619      	mov	r1, r3
 800c446:	f000 ff2a 	bl	800d29e <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
	    _M_impl._M_reset();
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f001 f88a 	bl	800d566 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>
      }
 800c452:	bf00      	nop
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c45a:	b590      	push	{r4, r7, lr}
 800c45c:	b083      	sub	sp, #12
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
 800c462:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 800c464:	687c      	ldr	r4, [r7, #4]
 800c466:	6838      	ldr	r0, [r7, #0]
 800c468:	f000 f80a 	bl	800c480 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 800c46c:	4603      	mov	r3, r0
 800c46e:	4619      	mov	r1, r3
 800c470:	4620      	mov	r0, r4
 800c472:	f001 f88d 	bl	800d590 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 800c476:	4603      	mov	r3, r0
 800c478:	4618      	mov	r0, r3
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd90      	pop	{r4, r7, pc}

0800c480 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>:
      _S_nword(size_t __n)
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	331f      	adds	r3, #31
 800c48c:	095b      	lsrs	r3, r3, #5
 800c48e:	4618      	mov	r0, r3
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c49a:	b480      	push	{r7}
 800c49c:	b083      	sub	sp, #12
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d008      	beq.n	800c4d2 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	691b      	ldr	r3, [r3, #16]
 800c4c4:	3b04      	subs	r3, #4
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7ff ffe7 	bl	800c49a <_ZSt11__addressofImEPT_RS0_>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	e000      	b.n	800c4d4 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 800c4d2:	2300      	movs	r3, #0
	}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b084      	sub	sp, #16
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f7ff ffed 	bl	800c4dc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c502:	4602      	mov	r2, r0
 800c504:	f107 0308 	add.w	r3, r7, #8
 800c508:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c50c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800c510:	6838      	ldr	r0, [r7, #0]
 800c512:	f7ff ffe3 	bl	800c4dc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c516:	4602      	mov	r2, r0
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c51e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800c522:	f107 0308 	add.w	r3, r7, #8
 800c526:	4618      	mov	r0, r3
 800c528:	f7ff ffd8 	bl	800c4dc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c52c:	4602      	mov	r2, r0
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c534:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800c538:	bf00      	nop
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4618      	mov	r0, r3
 800c54c:	370c      	adds	r7, #12
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800c556:	b580      	push	{r7, lr}
 800c558:	b084      	sub	sp, #16
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7ff ffed 	bl	800c540 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c566:	4603      	mov	r3, r0
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c56c:	6838      	ldr	r0, [r7, #0]
 800c56e:	f7ff ffe7 	bl	800c540 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c572:	4603      	mov	r3, r0
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c57a:	f107 030c 	add.w	r3, r7, #12
 800c57e:	4618      	mov	r0, r3
 800c580:	f7ff ffde 	bl	800c540 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c584:	4603      	mov	r3, r0
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	601a      	str	r2, [r3, #0]
    }
 800c58c:	bf00      	nop
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b084      	sub	sp, #16
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f7ff ffed 	bl	800c594 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c5c0:	6838      	ldr	r0, [r7, #0]
 800c5c2:	f7ff ffe7 	bl	800c594 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c5ce:	f107 030c 	add.w	r3, r7, #12
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7ff ffde 	bl	800c594 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	601a      	str	r2, [r3, #0]
    }
 800c5e0:	bf00      	nop
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 800c5fe:	b5b0      	push	{r4, r5, r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	60f8      	str	r0, [r7, #12]
 800c606:	60b9      	str	r1, [r7, #8]
 800c608:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800c60a:	68fc      	ldr	r4, [r7, #12]
 800c60c:	68b8      	ldr	r0, [r7, #8]
 800c60e:	f000 ffcd 	bl	800d5ac <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800c612:	4605      	mov	r5, r0
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7ff ffe7 	bl	800c5e8 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c61a:	4603      	mov	r3, r0
 800c61c:	461a      	mov	r2, r3
 800c61e:	4629      	mov	r1, r5
 800c620:	4620      	mov	r0, r4
 800c622:	f000 ffce 	bl	800d5c2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bdb0      	pop	{r4, r5, r7, pc}

0800c630 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 ffdf 	bl	800d5fe <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c640:	4603      	mov	r3, r0
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4618      	mov	r0, r3
 800c656:	f000 ffde 	bl	800d616 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800c65a:	4603      	mov	r3, r0
 800c65c:	4618      	mov	r0, r3
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800c66c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c670:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 ffdc 	bl	800d630 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8max_sizeERKS2_>
 800c678:	4603      	mov	r3, r0
 800c67a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800c67c:	f107 0208 	add.w	r2, r7, #8
 800c680:	f107 030c 	add.w	r3, r7, #12
 800c684:	4611      	mov	r1, r2
 800c686:	4618      	mov	r0, r3
 800c688:	f7fb fac6 	bl	8007c18 <_ZSt3minIjERKT_S2_S2_>
 800c68c:	4603      	mov	r3, r0
 800c68e:	681b      	ldr	r3, [r3, #0]
      }
 800c690:	4618      	mov	r0, r3
 800c692:	3710      	adds	r7, #16
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff fab6 	bl	800bc16 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>
	{ }
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7ff fbda 	bl	800be7a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	441a      	add	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	609a      	str	r2, [r3, #8]
      }
 800c6e2:	bf00      	nop
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>:
  // __uninitialized_default_n_a
  // Fills [first, first + n) with value_types constructed by the allocator
  // alloc, with no arguments passed to the construct call.
  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b086      	sub	sp, #24
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	60f8      	str	r0, [r7, #12]
 800c6f2:	60b9      	str	r1, [r7, #8]
 800c6f4:	607a      	str	r2, [r7, #4]
				_Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	617b      	str	r3, [r7, #20]
      __try
	{
	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
	  for (; __n > 0; --__n, (void) ++__cur)
 800c6fa:	e00d      	b.n	800c718 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_+0x2e>
	    __traits::construct(__alloc, std::__addressof(*__cur));
 800c6fc:	6978      	ldr	r0, [r7, #20]
 800c6fe:	f000 f813 	bl	800c728 <_ZSt11__addressofIfEPT_RS0_>
 800c702:	4603      	mov	r3, r0
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 ff9f 	bl	800d64a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  for (; __n > 0; --__n, (void) ++__cur)
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	3b01      	subs	r3, #1
 800c710:	60bb      	str	r3, [r7, #8]
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	3304      	adds	r3, #4
 800c716:	617b      	str	r3, [r7, #20]
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1ee      	bne.n	800c6fc <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_+0x12>
	  return __cur;
 800c71e:	697b      	ldr	r3, [r7, #20]
      __catch(...)
	{
	  std::_Destroy(__first, __cur, __alloc);
	  __throw_exception_again;
	}
    }
 800c720:	4618      	mov	r0, r3
 800c722:	3718      	adds	r7, #24
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4618      	mov	r0, r3
 800c734:	370c      	adds	r7, #12
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800c73e:	b580      	push	{r7, lr}
 800c740:	b082      	sub	sp, #8
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800c748:	2200      	movs	r2, #0
 800c74a:	6839      	ldr	r1, [r7, #0]
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 ff89 	bl	800d664 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10_S_destroyIS2_fEEvRT_PT0_z>
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10deallocateERS2_Pfj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b084      	sub	sp, #16
 800c75e:	af00      	add	r7, sp, #0
 800c760:	60f8      	str	r0, [r7, #12]
 800c762:	60b9      	str	r1, [r7, #8]
 800c764:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	68b9      	ldr	r1, [r7, #8]
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f000 ff89 	bl	800d682 <_ZN2ei7EiAllocIfE10deallocateEPfj>
 800c770:	bf00      	nop
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800c780:	1d3b      	adds	r3, r7, #4
 800c782:	4618      	mov	r0, r3
 800c784:	f7fe fd33 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c788:	4603      	mov	r3, r0
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4618      	mov	r0, r3
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES2_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7ff ffea 	bl	800c778 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	1a9b      	subs	r3, r3, r2
 800c7aa:	109b      	asrs	r3, r3, #2
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	1d3b      	adds	r3, r7, #4
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 ff72 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c7c2:	b590      	push	{r4, r7, lr}
 800c7c4:	b083      	sub	sp, #12
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7fe fd0e 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	681c      	ldr	r4, [r3, #0]
 800c7d6:	6838      	ldr	r0, [r7, #0]
 800c7d8:	f7fe fd09 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	1ae3      	subs	r3, r4, r3
 800c7e2:	109b      	asrs	r3, r3, #2
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd90      	pop	{r4, r7, pc}

0800c7ec <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800c7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ee:	b087      	sub	sp, #28
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
 800c7f8:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800c7fa:	e01b      	b.n	800c834 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d106      	bne.n	800c810 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800c802:	4633      	mov	r3, r6
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	68b9      	ldr	r1, [r7, #8]
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f000 ff5f 	bl	800d6cc <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>
 800c80e:	e021      	b.n	800c854 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x68>
	  --__depth_limit;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	3b01      	subs	r3, #1
 800c814:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800c816:	462a      	mov	r2, r5
 800c818:	68b9      	ldr	r1, [r7, #8]
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 ff6d 	bl	800d6fa <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>
 800c820:	4603      	mov	r3, r0
 800c822:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800c824:	4623      	mov	r3, r4
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	68b9      	ldr	r1, [r7, #8]
 800c82a:	6978      	ldr	r0, [r7, #20]
 800c82c:	f7ff ffde 	bl	800c7ec <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>
	  __last = __cut;
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800c834:	f107 020c 	add.w	r2, r7, #12
 800c838:	f107 0308 	add.w	r3, r7, #8
 800c83c:	4611      	mov	r1, r2
 800c83e:	4618      	mov	r0, r3
 800c840:	f7ff ffbf 	bl	800c7c2 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c844:	4603      	mov	r3, r0
 800c846:	2b10      	cmp	r3, #16
 800c848:	bfcc      	ite	gt
 800c84a:	2301      	movgt	r3, #1
 800c84c:	2300      	movle	r3, #0
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1d3      	bne.n	800c7fc <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x10>
    }
 800c854:	371c      	adds	r7, #28
 800c856:	46bd      	mov	sp, r7
 800c858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c85a <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800c85a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c85c:	b085      	sub	sp, #20
 800c85e:	af00      	add	r7, sp, #0
 800c860:	60f8      	str	r0, [r7, #12]
 800c862:	60b9      	str	r1, [r7, #8]
 800c864:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800c866:	f107 020c 	add.w	r2, r7, #12
 800c86a:	f107 0308 	add.w	r3, r7, #8
 800c86e:	4611      	mov	r1, r2
 800c870:	4618      	mov	r0, r3
 800c872:	f7ff ffa6 	bl	800c7c2 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c876:	4603      	mov	r3, r0
 800c878:	2b10      	cmp	r3, #16
 800c87a:	bfcc      	ite	gt
 800c87c:	2301      	movgt	r3, #1
 800c87e:	2300      	movle	r3, #0
 800c880:	b2db      	uxtb	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d018      	beq.n	800c8b8 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800c886:	f107 030c 	add.w	r3, r7, #12
 800c88a:	2110      	movs	r1, #16
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 ff05 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800c892:	4603      	mov	r3, r0
 800c894:	4632      	mov	r2, r6
 800c896:	4619      	mov	r1, r3
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f000 ff6e 	bl	800d77a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800c89e:	f107 030c 	add.w	r3, r7, #12
 800c8a2:	2110      	movs	r1, #16
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 fef9 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	462a      	mov	r2, r5
 800c8ae:	68b9      	ldr	r1, [r7, #8]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f000 ffc8 	bl	800d846 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800c8b6:	e004      	b.n	800c8c2 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800c8b8:	4622      	mov	r2, r4
 800c8ba:	68b9      	ldr	r1, [r7, #8]
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f000 ff5c 	bl	800d77a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800c8c2:	bf00      	nop
 800c8c4:	3714      	adds	r7, #20
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8ca <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c8ca:	b590      	push	{r4, r7, lr}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7fe fd28 	bl	800b32a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	681c      	ldr	r4, [r3, #0]
 800c8de:	6838      	ldr	r0, [r7, #0]
 800c8e0:	f7fe fd23 	bl	800b32a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	429c      	cmp	r4, r3
 800c8ea:	bf0c      	ite	eq
 800c8ec:	2301      	moveq	r3, #1
 800c8ee:	2300      	movne	r3, #0
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	370c      	adds	r7, #12
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd90      	pop	{r4, r7, pc}

0800c8fa <_ZNSt6vectorIiN2ei7EiAllocIiEEE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800c902:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c906:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 ffc1 	bl	800d890 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8max_sizeERKS2_>
 800c90e:	4603      	mov	r3, r0
 800c910:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800c912:	f107 0208 	add.w	r2, r7, #8
 800c916:	f107 030c 	add.w	r3, r7, #12
 800c91a:	4611      	mov	r1, r2
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fb f97b 	bl	8007c18 <_ZSt3minIjERKT_S2_S2_>
 800c922:	4603      	mov	r3, r0
 800c924:	681b      	ldr	r3, [r3, #0]
      }
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800c92e:	b580      	push	{r7, lr}
 800c930:	b082      	sub	sp, #8
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 ffb5 	bl	800d8aa <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE17_Vector_impl_dataC1Ev>
	{ }
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <_ZSt11__addressofIiEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c94a:	b480      	push	{r7}
 800c94c:	b083      	sub	sp, #12
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4618      	mov	r0, r3
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE7destroyIiEEvRS2_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800c96a:	2200      	movs	r2, #0
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 ffc2 	bl	800d8f8 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10_S_destroyIS2_iEEvRT_PT0_z>
 800c974:	bf00      	nop
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10deallocateERS2_Pij>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	68b9      	ldr	r1, [r7, #8]
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f000 ffc2 	bl	800d916 <_ZN2ei7EiAllocIiE10deallocateEPij>
 800c992:	bf00      	nop
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const _Alloc& __rhs)
 800c99a:	b590      	push	{r4, r7, lr}
 800c99c:	b083      	sub	sp, #12
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
      { return _S_select(__rhs, 0); }
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 ffc3 	bl	800d930 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9_S_selectIKS2_EET_RS6_z>
 800c9aa:	bf00      	nop
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd90      	pop	{r4, r7, pc}

0800c9b4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	68b9      	ldr	r1, [r7, #8]
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f000 ffbd 	bl	800d944 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>
 800c9ca:	bf00      	nop
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c9d2:	b480      	push	{r7}
 800c9d4:	b083      	sub	sp, #12
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 ffb1 	bl	800d95e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>
 800c9fc:	bf00      	nop
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800ca1a:	b590      	push	{r4, r7, lr}
 800ca1c:	b085      	sub	sp, #20
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	60f8      	str	r0, [r7, #12]
 800ca22:	60b9      	str	r1, [r7, #8]
 800ca24:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7ff ffec 	bl	800ca04 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	4619      	mov	r1, r3
 800ca32:	2008      	movs	r0, #8
 800ca34:	f7f4 fe67 	bl	8001706 <_ZnwjPv>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	4622      	mov	r2, r4
 800ca3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca40:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800ca44:	bf00      	nop
 800ca46:	3714      	adds	r7, #20
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd90      	pop	{r4, r7, pc}

0800ca4c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ca4c:	b590      	push	{r4, r7, lr}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f000 ff8f 	bl	800d97c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800ca5e:	4604      	mov	r4, r0
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f7fd fa25 	bl	8009eb0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ca66:	4603      	mov	r3, r0
 800ca68:	1ae2      	subs	r2, r4, r3
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	bf34      	ite	cc
 800ca70:	2301      	movcc	r3, #1
 800ca72:	2300      	movcs	r3, #0
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d002      	beq.n	800ca80 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f00e fa87 	bl	801af8e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f7fd fa15 	bl	8009eb0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ca86:	4604      	mov	r4, r0
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f7fd fa11 	bl	8009eb0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	613b      	str	r3, [r7, #16]
 800ca92:	f107 0208 	add.w	r2, r7, #8
 800ca96:	f107 0310 	add.w	r3, r7, #16
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe f8f3 	bl	800ac88 <_ZSt3maxIjERKT_S2_S2_>
 800caa2:	4603      	mov	r3, r0
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4423      	add	r3, r4
 800caa8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f7fd fa00 	bl	8009eb0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800cab0:	4602      	mov	r2, r0
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d306      	bcc.n	800cac6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x7a>
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f000 ff5f 	bl	800d97c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800cabe:	4602      	mov	r2, r0
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d904      	bls.n	800cad0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x84>
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 ff58 	bl	800d97c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800cacc:	4603      	mov	r3, r0
 800cace:	e000      	b.n	800cad2 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x86>
 800cad0:	697b      	ldr	r3, [r7, #20]
      }
 800cad2:	4618      	mov	r0, r3
 800cad4:	371c      	adds	r7, #28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd90      	pop	{r4, r7, pc}

0800cada <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cada:	b590      	push	{r4, r7, lr}
 800cadc:	b083      	sub	sp, #12
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 f835 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800caea:	4603      	mov	r3, r0
 800caec:	681c      	ldr	r4, [r3, #0]
 800caee:	6838      	ldr	r0, [r7, #0]
 800caf0:	f000 f830 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800caf4:	4603      	mov	r3, r0
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	1ae3      	subs	r3, r4, r3
 800cafa:	10db      	asrs	r3, r3, #3
 800cafc:	4618      	mov	r0, r3
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd90      	pop	{r4, r7, pc}

0800cb04 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d006      	beq.n	800cb22 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x1e>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6839      	ldr	r1, [r7, #0]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f000 ff40 	bl	800d99e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	e000      	b.n	800cb24 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x20>
 800cb22:	2300      	movs	r3, #0
      }
 800cb24:	4618      	mov	r0, r3
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800cb2c:	b590      	push	{r4, r7, lr}
 800cb2e:	b087      	sub	sp, #28
 800cb30:	af02      	add	r7, sp, #8
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
 800cb38:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cb3a:	f88d 4000 	strb.w	r4, [sp]
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	68b9      	ldr	r1, [r7, #8]
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f000 ff38 	bl	800d9ba <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>
 800cb4a:	4603      	mov	r3, r0
      }
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd90      	pop	{r4, r7, pc}

0800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800cb6a:	b590      	push	{r4, r7, lr}
 800cb6c:	b085      	sub	sp, #20
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	60f8      	str	r0, [r7, #12]
 800cb72:	60b9      	str	r1, [r7, #8]
 800cb74:	607a      	str	r2, [r7, #4]
 800cb76:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f000 ff30 	bl	800d9de <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800cb7e:	4604      	mov	r4, r0
 800cb80:	68b8      	ldr	r0, [r7, #8]
 800cb82:	f000 ff2c 	bl	800d9de <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800cb86:	4601      	mov	r1, r0
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f000 ff35 	bl	800d9fc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>
 800cb92:	4603      	mov	r3, r0
    }
 800cb94:	4618      	mov	r0, r3
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd90      	pop	{r4, r7, pc}

0800cb9c <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4618      	mov	r0, r3
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b082      	sub	sp, #8
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 800cbbc:	463b      	mov	r3, r7
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7ff ffec 	bl	800cb9c <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cbce:	b590      	push	{r4, r7, lr}
 800cbd0:	b083      	sub	sp, #12
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff ffbb 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	681c      	ldr	r4, [r3, #0]
 800cbe2:	6838      	ldr	r0, [r7, #0]
 800cbe4:	f7ff ffb6 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	429c      	cmp	r4, r3
 800cbee:	bf14      	ite	ne
 800cbf0:	2301      	movne	r3, #1
 800cbf2:	2300      	moveq	r3, #0
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd90      	pop	{r4, r7, pc}

0800cbfe <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b086      	sub	sp, #24
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	60f8      	str	r0, [r7, #12]
 800cc06:	60b9      	str	r1, [r7, #8]
 800cc08:	607a      	str	r2, [r7, #4]
 800cc0a:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800cc0c:	e01b      	b.n	800cc46 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d106      	bne.n	800cc22 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800cc14:	783b      	ldrb	r3, [r7, #0]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	68b9      	ldr	r1, [r7, #8]
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f000 ff1f 	bl	800da5e <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
 800cc20:	e021      	b.n	800cc66 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  --__depth_limit;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800cc28:	783a      	ldrb	r2, [r7, #0]
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f000 ff2d 	bl	800da8c <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>
 800cc32:	4603      	mov	r3, r0
 800cc34:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800cc36:	783b      	ldrb	r3, [r7, #0]
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	68b9      	ldr	r1, [r7, #8]
 800cc3c:	6978      	ldr	r0, [r7, #20]
 800cc3e:	f7ff ffde 	bl	800cbfe <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  __last = __cut;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800cc46:	f107 020c 	add.w	r2, r7, #12
 800cc4a:	f107 0308 	add.w	r3, r7, #8
 800cc4e:	4611      	mov	r1, r2
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7ff ff42 	bl	800cada <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b10      	cmp	r3, #16
 800cc5a:	bfcc      	ite	gt
 800cc5c:	2301      	movgt	r3, #1
 800cc5e:	2300      	movle	r3, #0
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d1d3      	bne.n	800cc0e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x10>
    }
 800cc66:	3718      	adds	r7, #24
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800cc78:	f107 020c 	add.w	r2, r7, #12
 800cc7c:	f107 0308 	add.w	r3, r7, #8
 800cc80:	4611      	mov	r1, r2
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7ff ff29 	bl	800cada <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b10      	cmp	r3, #16
 800cc8c:	bfcc      	ite	gt
 800cc8e:	2301      	movgt	r3, #1
 800cc90:	2300      	movle	r3, #0
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d018      	beq.n	800ccca <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800cc98:	f107 030c 	add.w	r3, r7, #12
 800cc9c:	2110      	movs	r1, #16
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f000 ff36 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800cca4:	4603      	mov	r3, r0
 800cca6:	793a      	ldrb	r2, [r7, #4]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f000 ff48 	bl	800db40 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800ccb0:	f107 030c 	add.w	r3, r7, #12
 800ccb4:	2110      	movs	r1, #16
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f000 ff2a 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	793a      	ldrb	r2, [r7, #4]
 800ccc0:	68b9      	ldr	r1, [r7, #8]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 ffa9 	bl	800dc1a <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800ccc8:	e004      	b.n	800ccd4 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800ccca:	793a      	ldrb	r2, [r7, #4]
 800cccc:	68b9      	ldr	r1, [r7, #8]
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f000 ff36 	bl	800db40 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800ccd4:	bf00      	nop
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ccdc:	b590      	push	{r4, r7, lr}
 800ccde:	b087      	sub	sp, #28
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f7ff f8a5 	bl	800be38 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800ccee:	4604      	mov	r4, r0
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f7fc fd40 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	1ae2      	subs	r2, r4, r3
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	bf34      	ite	cc
 800cd00:	2301      	movcc	r3, #1
 800cd02:	2300      	movcs	r3, #0
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d002      	beq.n	800cd10 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f00e f93f 	bl	801af8e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f7fc fd30 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800cd16:	4604      	mov	r4, r0
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f7fc fd2c 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	613b      	str	r3, [r7, #16]
 800cd22:	f107 0208 	add.w	r2, r7, #8
 800cd26:	f107 0310 	add.w	r3, r7, #16
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fd ffab 	bl	800ac88 <_ZSt3maxIjERKT_S2_S2_>
 800cd32:	4603      	mov	r3, r0
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4423      	add	r3, r4
 800cd38:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f7fc fd1b 	bl	8009776 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800cd40:	4602      	mov	r2, r0
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d306      	bcc.n	800cd56 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x7a>
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f7ff f875 	bl	800be38 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d904      	bls.n	800cd60 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x84>
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f7ff f86e 	bl	800be38 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	e000      	b.n	800cd62 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x86>
 800cd60:	697b      	ldr	r3, [r7, #20]
      }
 800cd62:	4618      	mov	r0, r3
 800cd64:	371c      	adds	r7, #28
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd90      	pop	{r4, r7, pc}

0800cd6a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800cd6a:	b590      	push	{r4, r7, lr}
 800cd6c:	b085      	sub	sp, #20
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	60f8      	str	r0, [r7, #12]
 800cd72:	60b9      	str	r1, [r7, #8]
 800cd74:	607a      	str	r2, [r7, #4]
 800cd76:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f7ff f8a6 	bl	800beca <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800cd7e:	4604      	mov	r4, r0
 800cd80:	68b8      	ldr	r0, [r7, #8]
 800cd82:	f7ff f8a2 	bl	800beca <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800cd86:	4601      	mov	r1, r0
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	f000 f9c9 	bl	800d124 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
 800cd92:	4603      	mov	r3, r0
    }
 800cd94:	4618      	mov	r0, r3
 800cd96:	3714      	adds	r7, #20
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd90      	pop	{r4, r7, pc}

0800cd9c <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	4413      	add	r3, r2
 800cdae:	4618      	mov	r0, r3
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <_ZNSt14__array_traitsIfLj10EE6_S_refERA10_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800cdba:	b480      	push	{r7}
 800cdbc:	b083      	sub	sp, #12
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	4413      	add	r3, r2
 800cdcc:	4618      	mov	r0, r3
 800cdce:	370c      	adds	r7, #12
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <_ZNSt14__array_traitsIfLj14EE6_S_refERA14_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	4413      	add	r3, r2
 800cdea:	4618      	mov	r0, r3
 800cdec:	370c      	adds	r7, #12
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr

0800cdf6 <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800cdf6:	b480      	push	{r7}
 800cdf8:	b083      	sub	sp, #12
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	4413      	add	r3, r2
 800ce08:	4618      	mov	r0, r3
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	4413      	add	r3, r2
 800ce26:	4618      	mov	r0, r3
 800ce28:	370c      	adds	r7, #12
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <_ZNSt14__array_traitsIfLj8EE6_S_refERA8_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ce32:	b480      	push	{r7}
 800ce34:	b083      	sub	sp, #12
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	4413      	add	r3, r2
 800ce44:	4618      	mov	r0, r3
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	4413      	add	r3, r2
 800ce62:	4618      	mov	r0, r3
 800ce64:	370c      	adds	r7, #12
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr

0800ce6e <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ce6e:	b480      	push	{r7}
 800ce70:	b083      	sub	sp, #12
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	4413      	add	r3, r2
 800ce80:	4618      	mov	r0, r3
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <_ZNSt14__array_traitsIfLj20EE6_S_refERA20_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	4618      	mov	r0, r3
 800cea0:	370c      	adds	r7, #12
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr

0800ceaa <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ceaa:	b480      	push	{r7}
 800ceac:	b083      	sub	sp, #12
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	4413      	add	r3, r2
 800cebc:	4618      	mov	r0, r3
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4618      	mov	r0, r3
 800ced4:	370c      	adds	r7, #12
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr

0800cede <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJRKfEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800cede:	b590      	push	{r4, r7, lr}
 800cee0:	b085      	sub	sp, #20
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	60b9      	str	r1, [r7, #8]
 800cee8:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f7ff ffec 	bl	800cec8 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800cef0:	4603      	mov	r3, r0
 800cef2:	681c      	ldr	r4, [r3, #0]
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	4619      	mov	r1, r3
 800cef8:	2004      	movs	r0, #4
 800cefa:	f7f4 fc04 	bl	8001706 <_ZnwjPv>
 800cefe:	4603      	mov	r3, r0
 800cf00:	601c      	str	r4, [r3, #0]
	}
 800cf02:	bf00      	nop
 800cf04:	3714      	adds	r7, #20
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd90      	pop	{r4, r7, pc}

0800cf0a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cf0a:	b480      	push	{r7}
 800cf0c:	b083      	sub	sp, #12
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4618      	mov	r0, r3
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f7ff ffec 	bl	800cf0a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800cf32:	4603      	mov	r3, r0
 800cf34:	461a      	mov	r2, r3
 800cf36:	68b9      	ldr	r1, [r7, #8]
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f000 fe93 	bl	800dc64 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJfEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>
 800cf3e:	bf00      	nop
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
	...

0800cf48 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800cf48:	b5b0      	push	{r4, r5, r7, lr}
 800cf4a:	b08c      	sub	sp, #48	; 0x30
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800cf54:	4a59      	ldr	r2, [pc, #356]	; (800d0bc <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x174>)
 800cf56:	2101      	movs	r1, #1
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7ff febf 	bl	800ccdc <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800cf5e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800cf6c:	68f8      	ldr	r0, [r7, #12]
 800cf6e:	f7fc fd20 	bl	80099b2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800cf72:	4603      	mov	r3, r0
 800cf74:	617b      	str	r3, [r7, #20]
 800cf76:	f107 0214 	add.w	r2, r7, #20
 800cf7a:	f107 0308 	add.w	r3, r7, #8
 800cf7e:	4611      	mov	r1, r2
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7ff fc1e 	bl	800c7c2 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800cf86:	4603      	mov	r3, r0
 800cf88:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fe ff73 	bl	800be7a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800cf94:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800cf9a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800cfa0:	69ba      	ldr	r2, [r7, #24]
 800cfa2:	18d5      	adds	r5, r2, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7ff ffb0 	bl	800cf0a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	461a      	mov	r2, r3
 800cfae:	4629      	mov	r1, r5
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f7ff ffb5 	bl	800cf20 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  __new_finish = pointer();
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800cfba:	f7fd fcac 	bl	800a916 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d027      	beq.n	800d014 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800cfc4:	f107 0308 	add.w	r3, r7, #8
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7fe f910 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7fe f95f 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800cfda:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800cfdc:	69ba      	ldr	r2, [r7, #24]
 800cfde:	4621      	mov	r1, r4
 800cfe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfe2:	f7fe ff5e 	bl	800bea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800cfe6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	3304      	adds	r3, #4
 800cfec:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800cfee:	f107 0308 	add.w	r3, r7, #8
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe f8fb 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cff8:	4603      	mov	r3, r0
 800cffa:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fe f94a 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d004:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d008:	6a39      	ldr	r1, [r7, #32]
 800d00a:	4620      	mov	r0, r4
 800d00c:	f7fe ff49 	bl	800bea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800d010:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d012:	e026      	b.n	800d062 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800d014:	f107 0308 	add.w	r3, r7, #8
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fe f8e8 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d01e:	4603      	mov	r3, r0
 800d020:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	4618      	mov	r0, r3
 800d026:	f7fe f937 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d02a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800d02c:	69ba      	ldr	r2, [r7, #24]
 800d02e:	4621      	mov	r1, r4
 800d030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d032:	f7ff fe9a 	bl	800cd6a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d036:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800d038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03a:	3304      	adds	r3, #4
 800d03c:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800d03e:	f107 0308 	add.w	r3, r7, #8
 800d042:	4618      	mov	r0, r3
 800d044:	f7fe f8d3 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d048:	4603      	mov	r3, r0
 800d04a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4618      	mov	r0, r3
 800d050:	f7fe f922 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d054:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800d056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d058:	6a39      	ldr	r1, [r7, #32]
 800d05a:	4620      	mov	r0, r4
 800d05c:	f7ff fe85 	bl	800cd6a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d060:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800d062:	f7fd fc58 	bl	800a916 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800d066:	4603      	mov	r3, r0
 800d068:	f083 0301 	eor.w	r3, r3, #1
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d009      	beq.n	800d086 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	4618      	mov	r0, r3
 800d076:	f7fe f90f 	bl	800b298 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d07a:	4603      	mov	r3, r0
 800d07c:	461a      	mov	r2, r3
 800d07e:	6a39      	ldr	r1, [r7, #32]
 800d080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d082:	f7fe f914 	bl	800b2ae <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      _M_deallocate(__old_start,
 800d086:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	689a      	ldr	r2, [r3, #8]
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800d092:	461a      	mov	r2, r3
 800d094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d096:	f7fe f925 	bl	800b2e4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	69ba      	ldr	r2, [r7, #24]
 800d09e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0a4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	69ba      	ldr	r2, [r7, #24]
 800d0ac:	441a      	add	r2, r3
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	609a      	str	r2, [r3, #8]
    }
 800d0b2:	bf00      	nop
 800d0b4:	3730      	adds	r7, #48	; 0x30
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bdb0      	pop	{r4, r5, r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	080235ac 	.word	0x080235ac

0800d0c0 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d0ca:	6839      	ldr	r1, [r7, #0]
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 fddf 	bl	800dc90 <_ZN2ei7EiAllocIfE8allocateEj>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3708      	adds	r7, #8
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <_ZNSt6vectorIfN2ei7EiAllocIfEEE14_S_do_relocateEPfS4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
 800d0e8:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	68b9      	ldr	r1, [r7, #8]
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f000 fdde 	bl	800dcb2 <_ZSt12__relocate_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d0f6:	4603      	mov	r3, r0
      }
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800d10a:	463b      	mov	r3, r7
 800d10c:	4618      	mov	r0, r3
 800d10e:	f000 fded 	bl	800dcec <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>
 800d112:	4603      	mov	r3, r0
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	601a      	str	r2, [r3, #0]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4618      	mov	r0, r3
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d124:	b590      	push	{r4, r7, lr}
 800d126:	b087      	sub	sp, #28
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
 800d130:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d136:	e016      	b.n	800d166 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d138:	6978      	ldr	r0, [r7, #20]
 800d13a:	f7ff faf5 	bl	800c728 <_ZSt11__addressofIfEPT_RS0_>
 800d13e:	4604      	mov	r4, r0
 800d140:	f107 030c 	add.w	r3, r7, #12
 800d144:	4618      	mov	r0, r3
 800d146:	f000 fdfd 	bl	800dd44 <_ZNKSt13move_iteratorIPfEdeEv>
 800d14a:	4603      	mov	r3, r0
 800d14c:	461a      	mov	r2, r3
 800d14e:	4621      	mov	r1, r4
 800d150:	6838      	ldr	r0, [r7, #0]
 800d152:	f7ff fee5 	bl	800cf20 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d156:	f107 030c 	add.w	r3, r7, #12
 800d15a:	4618      	mov	r0, r3
 800d15c:	f000 fde2 	bl	800dd24 <_ZNSt13move_iteratorIPfEppEv>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	3304      	adds	r3, #4
 800d164:	617b      	str	r3, [r7, #20]
 800d166:	f107 0208 	add.w	r2, r7, #8
 800d16a:	f107 030c 	add.w	r3, r7, #12
 800d16e:	4611      	mov	r1, r2
 800d170:	4618      	mov	r0, r3
 800d172:	f000 fdc6 	bl	800dd02 <_ZStneIPfEbRKSt13move_iteratorIT_ES5_>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1dd      	bne.n	800d138 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d17c:	697b      	ldr	r3, [r7, #20]
    }
 800d17e:	4618      	mov	r0, r3
 800d180:	371c      	adds	r7, #28
 800d182:	46bd      	mov	sp, r7
 800d184:	bd90      	pop	{r4, r7, pc}

0800d186 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800d186:	b5b0      	push	{r4, r5, r7, lr}
 800d188:	b082      	sub	sp, #8
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800d190:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d192:	1d3b      	adds	r3, r7, #4
 800d194:	4618      	mov	r0, r3
 800d196:	f7fe fed2 	bl	800bf3e <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d19a:	462a      	mov	r2, r5
 800d19c:	6839      	ldr	r1, [r7, #0]
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f000 fddc 	bl	800dd5c <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d1a4:	4603      	mov	r3, r0
    }
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bdb0      	pop	{r4, r5, r7, pc}

0800d1ae <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b086      	sub	sp, #24
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	60f8      	str	r0, [r7, #12]
 800d1b6:	60b9      	str	r1, [r7, #8]
 800d1b8:	607a      	str	r2, [r7, #4]
 800d1ba:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d1c0:	e00e      	b.n	800d1e0 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x32>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d1c2:	6978      	ldr	r0, [r7, #20]
 800d1c4:	f7ff fab0 	bl	800c728 <_ZSt11__addressofIfEPT_RS0_>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	6838      	ldr	r0, [r7, #0]
 800d1d0:	f7fe fd35 	bl	800bc3e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	60fb      	str	r3, [r7, #12]
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	3304      	adds	r3, #4
 800d1de:	617b      	str	r3, [r7, #20]
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d1ec      	bne.n	800d1c2 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d1e8:	697b      	ldr	r3, [r7, #20]
    }
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3718      	adds	r7, #24
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 800d1f2:	b480      	push	{r7}
 800d1f4:	b083      	sub	sp, #12
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	4618      	mov	r0, r3
 800d200:	370c      	adds	r7, #12
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr

0800d20a <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 800d20a:	b5b0      	push	{r4, r5, r7, lr}
 800d20c:	b082      	sub	sp, #8
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800d214:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d216:	1d3b      	adds	r3, r7, #4
 800d218:	4618      	mov	r0, r3
 800d21a:	f000 fdaf 	bl	800dd7c <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d21e:	462a      	mov	r2, r5
 800d220:	6839      	ldr	r1, [r7, #0]
 800d222:	4620      	mov	r0, r4
 800d224:	f000 fdb5 	bl	800dd92 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d228:	4603      	mov	r3, r0
    }
 800d22a:	4618      	mov	r0, r3
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bdb0      	pop	{r4, r5, r7, pc}

0800d232 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800d232:	b580      	push	{r7, lr}
 800d234:	b082      	sub	sp, #8
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d006      	beq.n	800d250 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj+0x1e>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	4618      	mov	r0, r3
 800d248:	f000 fdb3 	bl	800ddb2 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8allocateERS2_j>
 800d24c:	4603      	mov	r3, r0
 800d24e:	e000      	b.n	800d252 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj+0x20>
 800d250:	2300      	movs	r3, #0
      }
 800d252:	4618      	mov	r0, r3
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b086      	sub	sp, #24
 800d25e:	af00      	add	r7, sp, #0
 800d260:	60f8      	str	r0, [r7, #12]
 800d262:	60b9      	str	r1, [r7, #8]
 800d264:	607a      	str	r2, [r7, #4]
 800d266:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d26c:	e00e      	b.n	800d28c <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_+0x32>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d26e:	6978      	ldr	r0, [r7, #20]
 800d270:	f7ff fb6b 	bl	800c94a <_ZSt11__addressofIiEPT_RS0_>
 800d274:	4603      	mov	r3, r0
 800d276:	68fa      	ldr	r2, [r7, #12]
 800d278:	4619      	mov	r1, r3
 800d27a:	6838      	ldr	r0, [r7, #0]
 800d27c:	f000 fb29 	bl	800d8d2 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE9constructIiJRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	3304      	adds	r3, #4
 800d284:	60fb      	str	r3, [r7, #12]
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	3304      	adds	r3, #4
 800d28a:	617b      	str	r3, [r7, #20]
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	429a      	cmp	r2, r3
 800d292:	d1ec      	bne.n	800d26e <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d294:	697b      	ldr	r3, [r7, #20]
    }
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b084      	sub	sp, #16
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	60b9      	str	r1, [r7, #8]
 800d2a8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	68b9      	ldr	r1, [r7, #8]
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f000 fd8d 	bl	800ddce <_ZN2ei7EiAllocImE10deallocateEPmj>
 800d2b4:	bf00      	nop
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	bf14      	ite	ne
 800d2ca:	2301      	movne	r3, #1
 800d2cc:	2300      	moveq	r3, #0
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d2dc:	b590      	push	{r4, r7, lr}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d2e6:	6838      	ldr	r0, [r7, #0]
 800d2e8:	f7fe feee 	bl	800c0c8 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	4622      	mov	r2, r4
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 fd78 	bl	800dde8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d2f8:	bf00      	nop
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd90      	pop	{r4, r7, pc}

0800d300 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d302:	b085      	sub	sp, #20
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	607a      	str	r2, [r7, #4]
 800d30c:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f000 fd83 	bl	800de1a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800d314:	4604      	mov	r4, r0
 800d316:	68b8      	ldr	r0, [r7, #8]
 800d318:	f7fe f939 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d31c:	4605      	mov	r5, r0
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7fe f935 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d324:	4606      	mov	r6, r0
 800d326:	6838      	ldr	r0, [r7, #0]
 800d328:	f7fe f93c 	bl	800b5a4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d32c:	4603      	mov	r3, r0
 800d32e:	4632      	mov	r2, r6
 800d330:	4629      	mov	r1, r5
 800d332:	4620      	mov	r0, r4
 800d334:	f000 fd82 	bl	800de3c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800d338:	4603      	mov	r3, r0
      }
 800d33a:	4618      	mov	r0, r3
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d342 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d342:	b590      	push	{r4, r7, lr}
 800d344:	b085      	sub	sp, #20
 800d346:	af00      	add	r7, sp, #0
 800d348:	60f8      	str	r0, [r7, #12]
 800d34a:	60b9      	str	r1, [r7, #8]
 800d34c:	4613      	mov	r3, r2
 800d34e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d350:	79fb      	ldrb	r3, [r7, #7]
 800d352:	2b01      	cmp	r3, #1
 800d354:	d109      	bne.n	800d36a <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f000 fd95 	bl	800de86 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800d35c:	4604      	mov	r4, r0
 800d35e:	68b8      	ldr	r0, [r7, #8]
 800d360:	f000 fd5b 	bl	800de1a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800d364:	4603      	mov	r3, r0
 800d366:	6023      	str	r3, [r4, #0]
	    break;
 800d368:	e005      	b.n	800d376 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d36a:	79fb      	ldrb	r3, [r7, #7]
 800d36c:	461a      	mov	r2, r3
 800d36e:	68b9      	ldr	r1, [r7, #8]
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f000 fd95 	bl	800dea0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800d376:	2300      	movs	r3, #0
      }
 800d378:	4618      	mov	r0, r3
 800d37a:	3714      	adds	r7, #20
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd90      	pop	{r4, r7, pc}

0800d380 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
	  { return true; }
 800d388:	2301      	movs	r3, #1
 800d38a:	4618      	mov	r0, r3
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d396:	b590      	push	{r4, r7, lr}
 800d398:	b083      	sub	sp, #12
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
 800d39e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d3a0:	6838      	ldr	r0, [r7, #0]
 800d3a2:	f7fe fecf 	bl	800c144 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	4622      	mov	r2, r4
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 fdb1 	bl	800df14 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d3b2:	bf00      	nop
 800d3b4:	370c      	adds	r7, #12
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd90      	pop	{r4, r7, pc}

0800d3ba <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d3ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3bc:	b085      	sub	sp, #20
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	60f8      	str	r0, [r7, #12]
 800d3c2:	60b9      	str	r1, [r7, #8]
 800d3c4:	607a      	str	r2, [r7, #4]
 800d3c6:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f000 fdbc 	bl	800df46 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	68b8      	ldr	r0, [r7, #8]
 800d3d2:	f7fe f8dc 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7fe f8d8 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d3de:	4606      	mov	r6, r0
 800d3e0:	6838      	ldr	r0, [r7, #0]
 800d3e2:	f7fe f8df 	bl	800b5a4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	4629      	mov	r1, r5
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f000 fdbb 	bl	800df68 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800d3f2:	4603      	mov	r3, r0
      }
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3714      	adds	r7, #20
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3fc <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d3fc:	b590      	push	{r4, r7, lr}
 800d3fe:	b085      	sub	sp, #20
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	4613      	mov	r3, r2
 800d408:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d40a:	79fb      	ldrb	r3, [r7, #7]
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d109      	bne.n	800d424 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d410:	68f8      	ldr	r0, [r7, #12]
 800d412:	f000 fdce 	bl	800dfb2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800d416:	4604      	mov	r4, r0
 800d418:	68b8      	ldr	r0, [r7, #8]
 800d41a:	f000 fd94 	bl	800df46 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800d41e:	4603      	mov	r3, r0
 800d420:	6023      	str	r3, [r4, #0]
	    break;
 800d422:	e005      	b.n	800d430 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d424:	79fb      	ldrb	r3, [r7, #7]
 800d426:	461a      	mov	r2, r3
 800d428:	68b9      	ldr	r1, [r7, #8]
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f000 fdce 	bl	800dfcc <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800d430:	2300      	movs	r3, #0
      }
 800d432:	4618      	mov	r0, r3
 800d434:	3714      	adds	r7, #20
 800d436:	46bd      	mov	sp, r7
 800d438:	bd90      	pop	{r4, r7, pc}

0800d43a <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b082      	sub	sp, #8
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	4618      	mov	r0, r3
 800d446:	f000 fdfb 	bl	800e040 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d44a:	4603      	mov	r3, r0
 800d44c:	4618      	mov	r0, r3
 800d44e:	3708      	adds	r7, #8
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	4618      	mov	r0, r3
 800d460:	f000 fdfa 	bl	800e058 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	4618      	mov	r0, r3
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d46e:	b580      	push	{r7, lr}
 800d470:	b082      	sub	sp, #8
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4618      	mov	r0, r3
 800d47a:	f000 fdfd 	bl	800e078 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d47e:	4603      	mov	r3, r0
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>:
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4618      	mov	r0, r3
 800d494:	f000 fdfc 	bl	800e090 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800d498:	4603      	mov	r3, r0
 800d49a:	4618      	mov	r0, r3
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b082      	sub	sp, #8
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 fdfb 	bl	800e0a8 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3708      	adds	r7, #8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>:
      _Tuple_impl()
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 fdfb 	bl	800e0c0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>:
      constexpr _Head_base()
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 fdeb 	bl	800e0d6 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d500:	4603      	mov	r3, r0
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b082      	sub	sp, #8
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 fdeb 	bl	800e0ee <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d518:	4603      	mov	r3, r0
 800d51a:	4618      	mov	r0, r3
 800d51c:	3708      	adds	r7, #8
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d522:	b580      	push	{r7, lr}
 800d524:	b082      	sub	sp, #8
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f000 fdea 	bl	800e106 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d532:	4603      	mov	r3, r0
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	4618      	mov	r0, r3
 800d548:	f7f4 f9f1 	bl	800192e <_ZNSt13_Bit_iteratorC1Ev>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	3308      	adds	r3, #8
 800d550:	4618      	mov	r0, r3
 800d552:	f7f4 f9ec 	bl	800192e <_ZNSt13_Bit_iteratorC1Ev>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	611a      	str	r2, [r3, #16]
	{ }
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4618      	mov	r0, r3
 800d560:	3708      	adds	r7, #8
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 800d566:	b5b0      	push	{r4, r5, r7, lr}
 800d568:	b088      	sub	sp, #32
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
	{ *this = _Bvector_impl_data(); }
 800d56e:	f107 030c 	add.w	r3, r7, #12
 800d572:	4618      	mov	r0, r3
 800d574:	f7ff ffe2 	bl	800d53c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	461d      	mov	r5, r3
 800d57c:	f107 040c 	add.w	r4, r7, #12
 800d580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	602b      	str	r3, [r5, #0]
 800d588:	bf00      	nop
 800d58a:	3720      	adds	r7, #32
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bdb0      	pop	{r4, r5, r7, pc}

0800d590 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d59a:	6839      	ldr	r1, [r7, #0]
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 fdbe 	bl	800e11e <_ZN2ei7EiAllocImE8allocateEj>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	370c      	adds	r7, #12
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800d5c2:	b590      	push	{r4, r7, lr}
 800d5c4:	b085      	sub	sp, #20
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	60f8      	str	r0, [r7, #12]
 800d5ca:	60b9      	str	r1, [r7, #8]
 800d5cc:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800d5ce:	68fc      	ldr	r4, [r7, #12]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f7ff f809 	bl	800c5e8 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	4619      	mov	r1, r3
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f000 fdbc 	bl	800e158 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	1d1c      	adds	r4, r3, #4
 800d5e4:	68b8      	ldr	r0, [r7, #8]
 800d5e6:	f7ff ffe1 	bl	800d5ac <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	f000 fdc5 	bl	800e17e <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
	{ }
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3714      	adds	r7, #20
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd90      	pop	{r4, r7, pc}

0800d5fe <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b082      	sub	sp, #8
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 fdca 	bl	800e1a0 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 800d60c:	4603      	mov	r3, r0
 800d60e:	4618      	mov	r0, r3
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4618      	mov	r0, r3
 800d622:	f000 fdcb 	bl	800e1bc <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d626:	4603      	mov	r3, r0
 800d628:	4618      	mov	r0, r3
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8max_sizeERKS2_>:
      max_size(const _Alloc& __a) noexcept
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800d638:	2100      	movs	r1, #0
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fdca 	bl	800e1d4 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE11_S_max_sizeIKS2_EEjRT_z>
 800d640:	4603      	mov	r3, r0
 800d642:	4618      	mov	r0, r3
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b082      	sub	sp, #8
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	6039      	str	r1, [r7, #0]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800d654:	6839      	ldr	r1, [r7, #0]
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 fdc7 	bl	800e1ea <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>
 800d65c:	bf00      	nop
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10_S_destroyIS2_fEEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800d664:	b40e      	push	{r1, r2, r3}
 800d666:	b580      	push	{r7, lr}
 800d668:	b083      	sub	sp, #12
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800d66e:	6978      	ldr	r0, [r7, #20]
 800d670:	f000 fdcd 	bl	800e20e <_ZSt8_DestroyIfEvPT_>
 800d674:	bf00      	nop
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d67e:	b003      	add	sp, #12
 800d680:	4770      	bx	lr

0800d682 <_ZN2ei7EiAllocIfE10deallocateEPfj>:
        get_allocs()[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 800d682:	b580      	push	{r7, lr}
 800d684:	b084      	sub	sp, #16
 800d686:	af00      	add	r7, sp, #0
 800d688:	60f8      	str	r0, [r7, #12]
 800d68a:	60b9      	str	r1, [r7, #8]
 800d68c:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = get_allocs().find(p);
        ei_dsp_free(p,size_p->second);
        get_allocs().erase(size_p);
#else
        ei_dsp_free(p,0);
 800d68e:	68b8      	ldr	r0, [r7, #8]
 800d690:	f00a fde4 	bl	801825c <_Z7ei_freePv>
#endif
    }
 800d694:	bf00      	nop
 800d696:	3710      	adds	r7, #16
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	4413      	add	r3, r2
 800d6b0:	60fb      	str	r3, [r7, #12]
 800d6b2:	f107 020c 	add.w	r2, r7, #12
 800d6b6:	f107 0308 	add.w	r3, r7, #8
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fd fd86 	bl	800b1ce <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3710      	adds	r7, #16
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800d6cc:	b590      	push	{r4, r7, lr}
 800d6ce:	b085      	sub	sp, #20
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
 800d6d8:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800d6da:	4623      	mov	r3, r4
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	68b9      	ldr	r1, [r7, #8]
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 fd9e 	bl	800e222 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800d6e6:	463b      	mov	r3, r7
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	68b9      	ldr	r1, [r7, #8]
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f000 fdcb 	bl	800e288 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>
    }
 800d6f2:	bf00      	nop
 800d6f4:	3714      	adds	r7, #20
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd90      	pop	{r4, r7, pc}

0800d6fa <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800d6fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6fc:	b089      	sub	sp, #36	; 0x24
 800d6fe:	af02      	add	r7, sp, #8
 800d700:	60f8      	str	r0, [r7, #12]
 800d702:	60b9      	str	r1, [r7, #8]
 800d704:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800d706:	f107 020c 	add.w	r2, r7, #12
 800d70a:	f107 0308 	add.w	r3, r7, #8
 800d70e:	4611      	mov	r1, r2
 800d710:	4618      	mov	r0, r3
 800d712:	f7ff f856 	bl	800c7c2 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d716:	4603      	mov	r3, r0
 800d718:	0fda      	lsrs	r2, r3, #31
 800d71a:	4413      	add	r3, r2
 800d71c:	105b      	asrs	r3, r3, #1
 800d71e:	461a      	mov	r2, r3
 800d720:	f107 030c 	add.w	r3, r7, #12
 800d724:	4611      	mov	r1, r2
 800d726:	4618      	mov	r0, r3
 800d728:	f7ff ffb8 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800d72c:	4603      	mov	r3, r0
 800d72e:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800d730:	f107 030c 	add.w	r3, r7, #12
 800d734:	2101      	movs	r1, #1
 800d736:	4618      	mov	r0, r3
 800d738:	f7ff ffb0 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800d73c:	4604      	mov	r4, r0
 800d73e:	f107 0308 	add.w	r3, r7, #8
 800d742:	2101      	movs	r1, #1
 800d744:	4618      	mov	r0, r3
 800d746:	f000 fdc6 	bl	800e2d6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmiEi>
 800d74a:	4603      	mov	r3, r0
 800d74c:	f88d 5000 	strb.w	r5, [sp]
 800d750:	697a      	ldr	r2, [r7, #20]
 800d752:	4621      	mov	r1, r4
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f000 fdfc 	bl	800e352 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800d75a:	f107 030c 	add.w	r3, r7, #12
 800d75e:	2101      	movs	r1, #1
 800d760:	4618      	mov	r0, r3
 800d762:	f7ff ff9b 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800d766:	4633      	mov	r3, r6
 800d768:	68fa      	ldr	r2, [r7, #12]
 800d76a:	68b9      	ldr	r1, [r7, #8]
 800d76c:	f000 fe46 	bl	800e3fc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>
 800d770:	4603      	mov	r3, r0
    }
 800d772:	4618      	mov	r0, r3
 800d774:	371c      	adds	r7, #28
 800d776:	46bd      	mov	sp, r7
 800d778:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d77a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800d77a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d77c:	b087      	sub	sp, #28
 800d77e:	af00      	add	r7, sp, #0
 800d780:	60f8      	str	r0, [r7, #12]
 800d782:	60b9      	str	r1, [r7, #8]
 800d784:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800d786:	f107 0208 	add.w	r2, r7, #8
 800d78a:	f107 030c 	add.w	r3, r7, #12
 800d78e:	4611      	mov	r1, r2
 800d790:	4618      	mov	r0, r3
 800d792:	f000 fe7b 	bl	800e48c <_ZN9__gnu_cxxeqIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d150      	bne.n	800d83e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xc4>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800d79c:	f107 030c 	add.w	r3, r7, #12
 800d7a0:	2101      	movs	r1, #1
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7ff ff7a 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	617b      	str	r3, [r7, #20]
 800d7ac:	e03b      	b.n	800d826 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xac>
	  if (__comp(__i, __first))
 800d7ae:	1d3b      	adds	r3, r7, #4
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	6979      	ldr	r1, [r7, #20]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f000 fda7 	bl	800e308 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d026      	beq.n	800d80e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800d7c0:	f107 0314 	add.w	r3, r7, #20
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7fc f93d 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fd f878 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800d7d8:	f107 0314 	add.w	r3, r7, #20
 800d7dc:	2101      	movs	r1, #1
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7ff ff5c 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	6979      	ldr	r1, [r7, #20]
 800d7ea:	68f8      	ldr	r0, [r7, #12]
 800d7ec:	f000 fe66 	bl	800e4bc <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET0_T_SA_S9_>
	      *__first = _GLIBCXX_MOVE(__val);
 800d7f0:	f107 0310 	add.w	r3, r7, #16
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7fd f864 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	f107 030c 	add.w	r3, r7, #12
 800d800:	4618      	mov	r0, r3
 800d802:	f7fc f91f 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800d806:	4602      	mov	r2, r0
 800d808:	6823      	ldr	r3, [r4, #0]
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	e006      	b.n	800d81c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800d80e:	4630      	mov	r0, r6
 800d810:	f7f3 ff5f 	bl	80016d2 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800d814:	4629      	mov	r1, r5
 800d816:	6978      	ldr	r0, [r7, #20]
 800d818:	f000 fe68 	bl	800e4ec <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800d81c:	f107 0314 	add.w	r3, r7, #20
 800d820:	4618      	mov	r0, r3
 800d822:	f7fc f8ff 	bl	8009a24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800d826:	f107 0208 	add.w	r2, r7, #8
 800d82a:	f107 0314 	add.w	r3, r7, #20
 800d82e:	4611      	mov	r1, r2
 800d830:	4618      	mov	r0, r3
 800d832:	f7fc f8df 	bl	80099f4 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d1b8      	bne.n	800d7ae <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x34>
 800d83c:	e000      	b.n	800d840 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xc6>
      if (__first == __last) return;
 800d83e:	bf00      	nop
    }
 800d840:	371c      	adds	r7, #28
 800d842:	46bd      	mov	sp, r7
 800d844:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d846 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800d846:	b5b0      	push	{r4, r5, r7, lr}
 800d848:	b086      	sub	sp, #24
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	60f8      	str	r0, [r7, #12]
 800d84e:	60b9      	str	r1, [r7, #8]
 800d850:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	617b      	str	r3, [r7, #20]
 800d856:	e00b      	b.n	800d870 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800d858:	4628      	mov	r0, r5
 800d85a:	f7f3 ff3a 	bl	80016d2 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800d85e:	4621      	mov	r1, r4
 800d860:	6978      	ldr	r0, [r7, #20]
 800d862:	f000 fe43 	bl	800e4ec <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800d866:	f107 0314 	add.w	r3, r7, #20
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fc f8da 	bl	8009a24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800d870:	f107 0208 	add.w	r2, r7, #8
 800d874:	f107 0314 	add.w	r3, r7, #20
 800d878:	4611      	mov	r1, r2
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fc f8ba 	bl	80099f4 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1e8      	bne.n	800d858 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x12>
    }
 800d886:	bf00      	nop
 800d888:	bf00      	nop
 800d88a:	3718      	adds	r7, #24
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bdb0      	pop	{r4, r5, r7, pc}

0800d890 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8max_sizeERKS2_>:
      max_size(const _Alloc& __a) noexcept
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800d898:	2100      	movs	r1, #0
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f000 fe71 	bl	800e582 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE11_S_max_sizeIKS2_EEjRT_z>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800d8aa:	b480      	push	{r7}
 800d8ac:	b083      	sub	sp, #12
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	601a      	str	r2, [r3, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	605a      	str	r2, [r3, #4]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	609a      	str	r2, [r3, #8]
	{ }
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE9constructIiJRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b084      	sub	sp, #16
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	60b9      	str	r1, [r7, #8]
 800d8dc:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 fe5a 	bl	800e598 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	68b9      	ldr	r1, [r7, #8]
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f000 fe5f 	bl	800e5ae <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE12_S_constructIiJRKiEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>
 800d8f0:	bf00      	nop
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10_S_destroyIS2_iEEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800d8f8:	b40e      	push	{r1, r2, r3}
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b083      	sub	sp, #12
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800d902:	6978      	ldr	r0, [r7, #20]
 800d904:	f000 fe69 	bl	800e5da <_ZSt8_DestroyIiEvPT_>
 800d908:	bf00      	nop
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d912:	b003      	add	sp, #12
 800d914:	4770      	bx	lr

0800d916 <_ZN2ei7EiAllocIiE10deallocateEPij>:
    void deallocate(T *p, size_t n) noexcept
 800d916:	b580      	push	{r7, lr}
 800d918:	b084      	sub	sp, #16
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	60f8      	str	r0, [r7, #12]
 800d91e:	60b9      	str	r1, [r7, #8]
 800d920:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800d922:	68b8      	ldr	r0, [r7, #8]
 800d924:	f00a fc9a 	bl	801825c <_Z7ei_freePv>
    }
 800d928:	bf00      	nop
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9_S_selectIKS2_EET_RS6_z>:
	_S_select(_Alloc2& __a, ...)
 800d930:	b40f      	push	{r0, r1, r2, r3}
 800d932:	b480      	push	{r7}
 800d934:	af00      	add	r7, sp, #0
	{ return __a; }
 800d936:	bf00      	nop
 800d938:	4618      	mov	r0, r3
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	b004      	add	sp, #16
 800d942:	4770      	bx	lr

0800d944 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>:
    void deallocate(T *p, size_t n) noexcept
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800d950:	68b8      	ldr	r0, [r7, #8]
 800d952:	f00a fc83 	bl	801825c <_Z7ei_freePv>
    }
 800d956:	bf00      	nop
 800d958:	3710      	adds	r7, #16
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800d95e:	b40e      	push	{r1, r2, r3}
 800d960:	b580      	push	{r7, lr}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800d968:	6978      	ldr	r0, [r7, #20]
 800d96a:	f000 fe40 	bl	800e5ee <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>
 800d96e:	bf00      	nop
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d978:	b003      	add	sp, #12
 800d97a:	4770      	bx	lr

0800d97c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4618      	mov	r0, r3
 800d988:	f000 fe55 	bl	800e636 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800d98c:	4603      	mov	r3, r0
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 fe37 	bl	800e602 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>
 800d994:	4603      	mov	r3, r0
 800d996:	4618      	mov	r0, r3
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>:
      allocate(_Alloc& __a, size_type __n)
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b082      	sub	sp, #8
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d9a8:	6839      	ldr	r1, [r7, #0]
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 fe4e 	bl	800e64c <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800d9ba:	b580      	push	{r7, lr}
 800d9bc:	b084      	sub	sp, #16
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	60f8      	str	r0, [r7, #12]
 800d9c2:	60b9      	str	r1, [r7, #8]
 800d9c4:	607a      	str	r2, [r7, #4]
 800d9c6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	68b9      	ldr	r1, [r7, #8]
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f000 fe4d 	bl	800e66e <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800d9d4:	4603      	mov	r3, r0
      }
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b084      	sub	sp, #16
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800d9e6:	f107 030c 	add.w	r3, r7, #12
 800d9ea:	6879      	ldr	r1, [r7, #4]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f000 fe5b 	bl	800e6a8 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d9fc:	b590      	push	{r4, r7, lr}
 800d9fe:	b087      	sub	sp, #28
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	607a      	str	r2, [r7, #4]
 800da08:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800da0e:	e016      	b.n	800da3e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800da10:	6978      	ldr	r0, [r7, #20]
 800da12:	f7fe ffde 	bl	800c9d2 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800da16:	4604      	mov	r4, r0
 800da18:	f107 030c 	add.w	r3, r7, #12
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 fe77 	bl	800e710 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>
 800da22:	4603      	mov	r3, r0
 800da24:	461a      	mov	r2, r3
 800da26:	4621      	mov	r1, r4
 800da28:	6838      	ldr	r0, [r7, #0]
 800da2a:	f000 fe7d 	bl	800e728 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800da2e:	f107 030c 	add.w	r3, r7, #12
 800da32:	4618      	mov	r0, r3
 800da34:	f000 fe5b 	bl	800e6ee <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	3308      	adds	r3, #8
 800da3c:	617b      	str	r3, [r7, #20]
 800da3e:	f107 0208 	add.w	r2, r7, #8
 800da42:	f107 030c 	add.w	r3, r7, #12
 800da46:	4611      	mov	r1, r2
 800da48:	4618      	mov	r0, r3
 800da4a:	f000 fe3f 	bl	800e6cc <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 800da4e:	4603      	mov	r3, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1dd      	bne.n	800da10 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x14>
	  return __cur;
 800da54:	697b      	ldr	r3, [r7, #20]
    }
 800da56:	4618      	mov	r0, r3
 800da58:	371c      	adds	r7, #28
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd90      	pop	{r4, r7, pc}

0800da5e <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800da5e:	b580      	push	{r7, lr}
 800da60:	b084      	sub	sp, #16
 800da62:	af00      	add	r7, sp, #0
 800da64:	60f8      	str	r0, [r7, #12]
 800da66:	60b9      	str	r1, [r7, #8]
 800da68:	607a      	str	r2, [r7, #4]
 800da6a:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800da6c:	783b      	ldrb	r3, [r7, #0]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	68b9      	ldr	r1, [r7, #8]
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	f000 fe6b 	bl	800e74e <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800da78:	463b      	mov	r3, r7
 800da7a:	461a      	mov	r2, r3
 800da7c:	68b9      	ldr	r1, [r7, #8]
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f000 fe98 	bl	800e7b4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
    }
 800da84:	bf00      	nop
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800da8c:	b590      	push	{r4, r7, lr}
 800da8e:	b089      	sub	sp, #36	; 0x24
 800da90:	af02      	add	r7, sp, #8
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800da98:	f107 020c 	add.w	r2, r7, #12
 800da9c:	f107 0308 	add.w	r3, r7, #8
 800daa0:	4611      	mov	r1, r2
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7ff f819 	bl	800cada <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800daa8:	4603      	mov	r3, r0
 800daaa:	0fda      	lsrs	r2, r3, #31
 800daac:	4413      	add	r3, r2
 800daae:	105b      	asrs	r3, r3, #1
 800dab0:	461a      	mov	r2, r3
 800dab2:	f107 030c 	add.w	r3, r7, #12
 800dab6:	4611      	mov	r1, r2
 800dab8:	4618      	mov	r0, r3
 800daba:	f000 f829 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dabe:	4603      	mov	r3, r0
 800dac0:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800dac2:	f107 030c 	add.w	r3, r7, #12
 800dac6:	2101      	movs	r1, #1
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 f821 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dace:	4604      	mov	r4, r0
 800dad0:	f107 0308 	add.w	r3, r7, #8
 800dad4:	2101      	movs	r1, #1
 800dad6:	4618      	mov	r0, r3
 800dad8:	f000 fe93 	bl	800e802 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>
 800dadc:	4602      	mov	r2, r0
 800dade:	793b      	ldrb	r3, [r7, #4]
 800dae0:	f88d 3000 	strb.w	r3, [sp]
 800dae4:	4613      	mov	r3, r2
 800dae6:	697a      	ldr	r2, [r7, #20]
 800dae8:	4621      	mov	r1, r4
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f000 febe 	bl	800e86c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800daf0:	f107 030c 	add.w	r3, r7, #12
 800daf4:	2101      	movs	r1, #1
 800daf6:	4618      	mov	r0, r3
 800daf8:	f000 f80a 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dafc:	793b      	ldrb	r3, [r7, #4]
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	68b9      	ldr	r1, [r7, #8]
 800db02:	f000 ff08 	bl	800e916 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>
 800db06:	4603      	mov	r3, r0
    }
 800db08:	4618      	mov	r0, r3
 800db0a:	371c      	adds	r7, #28
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd90      	pop	{r4, r7, pc}

0800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	00db      	lsls	r3, r3, #3
 800db22:	4413      	add	r3, r2
 800db24:	60fb      	str	r3, [r7, #12]
 800db26:	f107 020c 	add.w	r2, r7, #12
 800db2a:	f107 0308 	add.w	r3, r7, #8
 800db2e:	4611      	mov	r1, r2
 800db30:	4618      	mov	r0, r3
 800db32:	f7fd fe75 	bl	800b820 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800db40:	b5b0      	push	{r4, r5, r7, lr}
 800db42:	b088      	sub	sp, #32
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800db4c:	f107 0208 	add.w	r2, r7, #8
 800db50:	f107 030c 	add.w	r3, r7, #12
 800db54:	4611      	mov	r1, r2
 800db56:	4618      	mov	r0, r3
 800db58:	f000 ff25 	bl	800e9a6 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d157      	bne.n	800dc12 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd2>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800db62:	f107 030c 	add.w	r3, r7, #12
 800db66:	2101      	movs	r1, #1
 800db68:	4618      	mov	r0, r3
 800db6a:	f7ff ffd1 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800db6e:	4603      	mov	r3, r0
 800db70:	61fb      	str	r3, [r7, #28]
 800db72:	e042      	b.n	800dbfa <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xba>
	  if (__comp(__i, __first))
 800db74:	1d3b      	adds	r3, r7, #4
 800db76:	68fa      	ldr	r2, [r7, #12]
 800db78:	69f9      	ldr	r1, [r7, #28]
 800db7a:	4618      	mov	r0, r3
 800db7c:	f000 fe5a 	bl	800e834 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800db80:	4603      	mov	r3, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	d02d      	beq.n	800dbe2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xa2>
		__val = _GLIBCXX_MOVE(*__i);
 800db86:	f107 031c 	add.w	r3, r7, #28
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 ff34 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800db90:	4603      	mov	r3, r0
 800db92:	4618      	mov	r0, r3
 800db94:	f000 ff3c 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800db98:	4602      	mov	r2, r0
 800db9a:	f107 0314 	add.w	r3, r7, #20
 800db9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dba2:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800dba6:	f107 031c 	add.w	r3, r7, #28
 800dbaa:	2101      	movs	r1, #1
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7ff ffaf 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	69f9      	ldr	r1, [r7, #28]
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f000 ff34 	bl	800ea26 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>
	      *__first = _GLIBCXX_MOVE(__val);
 800dbbe:	f107 0314 	add.w	r3, r7, #20
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f000 ff24 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800dbc8:	4604      	mov	r4, r0
 800dbca:	f107 030c 	add.w	r3, r7, #12
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f000 ff12 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dbdc:	e883 0003 	stmia.w	r3, {r0, r1}
 800dbe0:	e006      	b.n	800dbf0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xb0>
	    std::__unguarded_linear_insert(__i,
 800dbe2:	7938      	ldrb	r0, [r7, #4]
 800dbe4:	f000 ff37 	bl	800ea56 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 800dbe8:	4629      	mov	r1, r5
 800dbea:	69f8      	ldr	r0, [r7, #28]
 800dbec:	f000 ff47 	bl	800ea7e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800dbf0:	f107 031c 	add.w	r3, r7, #28
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f000 feee 	bl	800e9d6 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800dbfa:	f107 0208 	add.w	r2, r7, #8
 800dbfe:	f107 031c 	add.w	r3, r7, #28
 800dc02:	4611      	mov	r1, r2
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7fe ffe2 	bl	800cbce <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d1b1      	bne.n	800db74 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x34>
 800dc10:	e000      	b.n	800dc14 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd4>
      if (__first == __last) return;
 800dc12:	bf00      	nop
    }
 800dc14:	3720      	adds	r7, #32
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bdb0      	pop	{r4, r5, r7, pc}

0800dc1a <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800dc1a:	b590      	push	{r4, r7, lr}
 800dc1c:	b087      	sub	sp, #28
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	60f8      	str	r0, [r7, #12]
 800dc22:	60b9      	str	r1, [r7, #8]
 800dc24:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	617b      	str	r3, [r7, #20]
 800dc2a:	e00b      	b.n	800dc44 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x2a>
	std::__unguarded_linear_insert(__i,
 800dc2c:	7938      	ldrb	r0, [r7, #4]
 800dc2e:	f000 ff12 	bl	800ea56 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 800dc32:	4621      	mov	r1, r4
 800dc34:	6978      	ldr	r0, [r7, #20]
 800dc36:	f000 ff22 	bl	800ea7e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800dc3a:	f107 0314 	add.w	r3, r7, #20
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 fec9 	bl	800e9d6 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800dc44:	f107 0208 	add.w	r2, r7, #8
 800dc48:	f107 0314 	add.w	r3, r7, #20
 800dc4c:	4611      	mov	r1, r2
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fe ffbd 	bl	800cbce <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1e8      	bne.n	800dc2c <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x12>
    }
 800dc5a:	bf00      	nop
 800dc5c:	bf00      	nop
 800dc5e:	371c      	adds	r7, #28
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd90      	pop	{r4, r7, pc}

0800dc64 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJfEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800dc64:	b590      	push	{r4, r7, lr}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff f94a 	bl	800cf0a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800dc76:	4603      	mov	r3, r0
 800dc78:	681c      	ldr	r4, [r3, #0]
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	2004      	movs	r0, #4
 800dc80:	f7f3 fd41 	bl	8001706 <_ZnwjPv>
 800dc84:	4603      	mov	r3, r0
 800dc86:	601c      	str	r4, [r3, #0]
	}
 800dc88:	bf00      	nop
 800dc8a:	3714      	adds	r7, #20
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd90      	pop	{r4, r7, pc}

0800dc90 <_ZN2ei7EiAllocIfE8allocateEj>:
    T *allocate(size_t n)
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f00a fac1 	bl	8018228 <_Z9ei_mallocj>
 800dca6:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800dca8:	68bb      	ldr	r3, [r7, #8]
    }
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <_ZSt12__relocate_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800dcb2:	b5b0      	push	{r4, r5, r7, lr}
 800dcb4:	b084      	sub	sp, #16
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	60f8      	str	r0, [r7, #12]
 800dcba:	60b9      	str	r1, [r7, #8]
 800dcbc:	607a      	str	r2, [r7, #4]
 800dcbe:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f000 ff31 	bl	800eb28 <_ZSt12__niter_baseIPfET_S1_>
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	68b8      	ldr	r0, [r7, #8]
 800dcca:	f000 ff2d 	bl	800eb28 <_ZSt12__niter_baseIPfET_S1_>
 800dcce:	4605      	mov	r5, r0
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 ff29 	bl	800eb28 <_ZSt12__niter_baseIPfET_S1_>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	4629      	mov	r1, r5
 800dcdc:	4620      	mov	r0, r4
 800dcde:	f000 ff2e 	bl	800eb3e <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800dce2:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bdb0      	pop	{r4, r5, r7, pc}

0800dcec <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <_ZStneIPfEbRKSt13move_iteratorIT_ES5_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800dd0c:	6839      	ldr	r1, [r7, #0]
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 ff3b 	bl	800eb8a <_ZSteqIPfEbRKSt13move_iteratorIT_ES5_>
 800dd14:	4603      	mov	r3, r0
 800dd16:	f083 0301 	eor.w	r3, r3, #1
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <_ZNSt13move_iteratorIPfEppEv>:
      operator++()
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	1d1a      	adds	r2, r3, #4
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	601a      	str	r2, [r3, #0]
	return *this;
 800dd36:	687b      	ldr	r3, [r7, #4]
      }
 800dd38:	4618      	mov	r0, r3
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <_ZNKSt13move_iteratorIPfEdeEv>:
      operator*() const
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4618      	mov	r0, r3
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr

0800dd5c <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	1ad3      	subs	r3, r2, r3
 800dd6e:	109b      	asrs	r3, r3, #2
    }
 800dd70:	4618      	mov	r0, r3
 800dd72:	3714      	adds	r7, #20
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800dd84:	bf00      	nop
 800dd86:	4618      	mov	r0, r3
 800dd88:	370c      	adds	r7, #12
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800dd92:	b480      	push	{r7}
 800dd94:	b085      	sub	sp, #20
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	60f8      	str	r0, [r7, #12]
 800dd9a:	60b9      	str	r1, [r7, #8]
 800dd9c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	109b      	asrs	r3, r3, #2
    }
 800dda6:	4618      	mov	r0, r3
 800dda8:	3714      	adds	r7, #20
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b082      	sub	sp, #8
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ddbc:	6839      	ldr	r1, [r7, #0]
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 fef9 	bl	800ebb6 <_ZN2ei7EiAllocIiE8allocateEj>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <_ZN2ei7EiAllocImE10deallocateEPmj>:
    void deallocate(T *p, size_t n) noexcept
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b084      	sub	sp, #16
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	60f8      	str	r0, [r7, #12]
 800ddd6:	60b9      	str	r1, [r7, #8]
 800ddd8:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800ddda:	68b8      	ldr	r0, [r7, #8]
 800dddc:	f00a fa3e 	bl	801825c <_Z7ei_freePv>
    }
 800dde0:	bf00      	nop
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800dde8:	b590      	push	{r4, r7, lr}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800ddf4:	68b8      	ldr	r0, [r7, #8]
 800ddf6:	f7fe f967 	bl	800c0c8 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	681c      	ldr	r4, [r3, #0]
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f7f3 fe05 	bl	8001a0e <_ZNSt9_Any_data9_M_accessEv>
 800de04:	4603      	mov	r3, r0
 800de06:	4619      	mov	r1, r3
 800de08:	2004      	movs	r0, #4
 800de0a:	f7f3 fc7c 	bl	8001706 <_ZnwjPv>
 800de0e:	4603      	mov	r3, r0
 800de10:	601c      	str	r4, [r3, #0]
	  }
 800de12:	bf00      	nop
 800de14:	3714      	adds	r7, #20
 800de16:	46bd      	mov	sp, r7
 800de18:	bd90      	pop	{r4, r7, pc}

0800de1a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b084      	sub	sp, #16
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 fed8 	bl	800ebd8 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 800de28:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f000 fee0 	bl	800ebf0 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 800de30:	4603      	mov	r3, r0
 800de32:	bf00      	nop
	}
 800de34:	4618      	mov	r0, r3
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800de3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de40:	b086      	sub	sp, #24
 800de42:	af02      	add	r7, sp, #8
 800de44:	60f8      	str	r0, [r7, #12]
 800de46:	60b9      	str	r1, [r7, #8]
 800de48:	607a      	str	r2, [r7, #4]
 800de4a:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f000 feda 	bl	800ec06 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800de52:	4604      	mov	r4, r0
 800de54:	68b8      	ldr	r0, [r7, #8]
 800de56:	f7fd fb9a 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800de5a:	4605      	mov	r5, r0
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7fd fb96 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800de62:	4606      	mov	r6, r0
 800de64:	6838      	ldr	r0, [r7, #0]
 800de66:	f7fd fb9d 	bl	800b5a4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800de6a:	4603      	mov	r3, r0
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	4633      	mov	r3, r6
 800de70:	462a      	mov	r2, r5
 800de72:	4621      	mov	r1, r4
 800de74:	4640      	mov	r0, r8
 800de76:	f000 fed1 	bl	800ec1c <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 800de7a:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 800de7c:	4618      	mov	r0, r3
 800de7e:	3710      	adds	r7, #16
 800de80:	46bd      	mov	sp, r7
 800de82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de86 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 800de86:	b580      	push	{r7, lr}
 800de88:	b082      	sub	sp, #8
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f7f3 fdbd 	bl	8001a0e <_ZNSt9_Any_data9_M_accessEv>
 800de94:	4603      	mov	r3, r0
 800de96:	4618      	mov	r0, r3
 800de98:	3708      	adds	r7, #8
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
	...

0800dea0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800dea0:	b590      	push	{r4, r7, lr}
 800dea2:	b085      	sub	sp, #20
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	4613      	mov	r3, r2
 800deac:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800deae:	79fb      	ldrb	r3, [r7, #7]
 800deb0:	2b03      	cmp	r3, #3
 800deb2:	d82a      	bhi.n	800df0a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800deb4:	a201      	add	r2, pc, #4	; (adr r2, 800debc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800deb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deba:	bf00      	nop
 800debc:	0800decd 	.word	0x0800decd
 800dec0:	0800dedb 	.word	0x0800dedb
 800dec4:	0800deef 	.word	0x0800deef
 800dec8:	0800df01 	.word	0x0800df01
	      __dest._M_access<const type_info*>() = nullptr;
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f000 f937 	bl	800e140 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2200      	movs	r2, #0
 800ded6:	601a      	str	r2, [r3, #0]
	      break;
 800ded8:	e017      	b.n	800df0a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f7ff ffd3 	bl	800de86 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800dee0:	4604      	mov	r4, r0
 800dee2:	68b8      	ldr	r0, [r7, #8]
 800dee4:	f7ff ff99 	bl	800de1a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800dee8:	4603      	mov	r3, r0
 800deea:	6023      	str	r3, [r4, #0]
	      break;
 800deec:	e00d      	b.n	800df0a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800deee:	68b8      	ldr	r0, [r7, #8]
 800def0:	f7ff ff93 	bl	800de1a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800def4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800def6:	4619      	mov	r1, r3
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f000 feb3 	bl	800ec64 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800defe:	e004      	b.n	800df0a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800df00:	4621      	mov	r1, r4
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f000 fec0 	bl	800ec88 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800df08:	bf00      	nop
	  return false;
 800df0a:	2300      	movs	r3, #0
	}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3714      	adds	r7, #20
 800df10:	46bd      	mov	sp, r7
 800df12:	bd90      	pop	{r4, r7, pc}

0800df14 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800df14:	b590      	push	{r4, r7, lr}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800df20:	68b8      	ldr	r0, [r7, #8]
 800df22:	f7fe f90f 	bl	800c144 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800df26:	4604      	mov	r4, r0
 800df28:	68f8      	ldr	r0, [r7, #12]
 800df2a:	f7f3 fd70 	bl	8001a0e <_ZNSt9_Any_data9_M_accessEv>
 800df2e:	4603      	mov	r3, r0
 800df30:	4619      	mov	r1, r3
 800df32:	2004      	movs	r0, #4
 800df34:	f7f3 fbe7 	bl	8001706 <_ZnwjPv>
 800df38:	4602      	mov	r2, r0
 800df3a:	6823      	ldr	r3, [r4, #0]
 800df3c:	6013      	str	r3, [r2, #0]
	  }
 800df3e:	bf00      	nop
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	bd90      	pop	{r4, r7, pc}

0800df46 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800df46:	b580      	push	{r7, lr}
 800df48:	b084      	sub	sp, #16
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 fea6 	bl	800eca0 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800df54:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f000 feae 	bl	800ecb8 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 800df5c:	4603      	mov	r3, r0
 800df5e:	bf00      	nop
	}
 800df60:	4618      	mov	r0, r3
 800df62:	3710      	adds	r7, #16
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df6c:	b086      	sub	sp, #24
 800df6e:	af02      	add	r7, sp, #8
 800df70:	60f8      	str	r0, [r7, #12]
 800df72:	60b9      	str	r1, [r7, #8]
 800df74:	607a      	str	r2, [r7, #4]
 800df76:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f000 fea8 	bl	800ecce <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800df7e:	4604      	mov	r4, r0
 800df80:	68b8      	ldr	r0, [r7, #8]
 800df82:	f7fd fb04 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800df86:	4605      	mov	r5, r0
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f7fd fb00 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800df8e:	4606      	mov	r6, r0
 800df90:	6838      	ldr	r0, [r7, #0]
 800df92:	f7fd fb07 	bl	800b5a4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800df96:	4603      	mov	r3, r0
 800df98:	9300      	str	r3, [sp, #0]
 800df9a:	4633      	mov	r3, r6
 800df9c:	462a      	mov	r2, r5
 800df9e:	4621      	mov	r1, r4
 800dfa0:	4640      	mov	r0, r8
 800dfa2:	f000 fe9f 	bl	800ece4 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 800dfa6:	4603      	mov	r3, r0
    }
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dfb2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b082      	sub	sp, #8
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7f3 fd27 	bl	8001a0e <_ZNSt9_Any_data9_M_accessEv>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3708      	adds	r7, #8
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
	...

0800dfcc <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800dfcc:	b590      	push	{r4, r7, lr}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800dfda:	79fb      	ldrb	r3, [r7, #7]
 800dfdc:	2b03      	cmp	r3, #3
 800dfde:	d82a      	bhi.n	800e036 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800dfe0:	a201      	add	r2, pc, #4	; (adr r2, 800dfe8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800dfe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe6:	bf00      	nop
 800dfe8:	0800dff9 	.word	0x0800dff9
 800dfec:	0800e007 	.word	0x0800e007
 800dff0:	0800e01b 	.word	0x0800e01b
 800dff4:	0800e02d 	.word	0x0800e02d
	      __dest._M_access<const type_info*>() = nullptr;
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f000 f8a1 	bl	800e140 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800dffe:	4603      	mov	r3, r0
 800e000:	2200      	movs	r2, #0
 800e002:	601a      	str	r2, [r3, #0]
	      break;
 800e004:	e017      	b.n	800e036 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f7ff ffd3 	bl	800dfb2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800e00c:	4604      	mov	r4, r0
 800e00e:	68b8      	ldr	r0, [r7, #8]
 800e010:	f7ff ff99 	bl	800df46 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800e014:	4603      	mov	r3, r0
 800e016:	6023      	str	r3, [r4, #0]
	      break;
 800e018:	e00d      	b.n	800e036 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800e01a:	68b8      	ldr	r0, [r7, #8]
 800e01c:	f7ff ff93 	bl	800df46 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800e020:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800e022:	4619      	mov	r1, r3
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f000 fe81 	bl	800ed2c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800e02a:	e004      	b.n	800e036 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800e02c:	4621      	mov	r1, r4
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f000 fe8e 	bl	800ed50 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e034:	bf00      	nop
	  return false;
 800e036:	2300      	movs	r3, #0
	}
 800e038:	4618      	mov	r0, r3
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd90      	pop	{r4, r7, pc}

0800e040 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 fe8d 	bl	800ed68 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 800e04e:	4603      	mov	r3, r0
 800e050:	4618      	mov	r0, r3
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f000 fe8f 	bl	800ed84 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4618      	mov	r0, r3
 800e06a:	f000 fe97 	bl	800ed9c <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4618      	mov	r0, r3
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f000 fe99 	bl	800edb8 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>
 800e086:	4603      	mov	r3, r0
 800e088:	4618      	mov	r0, r3
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fe9a 	bl	800edd2 <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 fe9a 	bl	800edea <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>:
      constexpr _Head_base()
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	370c      	adds	r7, #12
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr

0800e0d6 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 fe90 	bl	800ee04 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3708      	adds	r7, #8
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b082      	sub	sp, #8
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 fe91 	bl	800ee1e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	4618      	mov	r0, r3
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e106:	b580      	push	{r7, lr}
 800e108:	b082      	sub	sp, #8
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 fe91 	bl	800ee36 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>
 800e114:	4603      	mov	r3, r0
 800e116:	4618      	mov	r0, r3
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 800e11e:	b580      	push	{r7, lr}
 800e120:	b084      	sub	sp, #16
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800e12e:	68f8      	ldr	r0, [r7, #12]
 800e130:	f00a f87a 	bl	8018228 <_Z9ei_mallocj>
 800e134:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800e136:	68bb      	ldr	r3, [r7, #8]
    }
 800e138:	4618      	mov	r0, r3
 800e13a:	3710      	adds	r7, #16
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7f3 fc60 	bl	8001a0e <_ZNSt9_Any_data9_M_accessEv>
 800e14e:	4603      	mov	r3, r0
 800e150:	4618      	mov	r0, r3
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 800e158:	b590      	push	{r4, r7, lr}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800e162:	687c      	ldr	r4, [r7, #4]
 800e164:	6838      	ldr	r0, [r7, #0]
 800e166:	f7fe fa3f 	bl	800c5e8 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e16a:	4603      	mov	r3, r0
 800e16c:	4619      	mov	r1, r3
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 fe6e 	bl	800ee50 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
	{ }
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4618      	mov	r0, r3
 800e178:	370c      	adds	r7, #12
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd90      	pop	{r4, r7, pc}

0800e17e <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800e17e:	b580      	push	{r7, lr}
 800e180:	b082      	sub	sp, #8
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
 800e186:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e188:	6838      	ldr	r0, [r7, #0]
 800e18a:	f7ff fa0f 	bl	800d5ac <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800e18e:	4603      	mov	r3, r0
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	601a      	str	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4618      	mov	r0, r3
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	3304      	adds	r3, #4
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f000 fe60 	bl	800ee72 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 fe5f 	bl	800ee88 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE11_S_max_sizeIKS2_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800e1d4:	b40f      	push	{r0, r1, r2, r3}
 800e1d6:	b480      	push	{r7}
 800e1d8:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800e1da:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
	}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	b004      	add	sp, #16
 800e1e8:	4770      	bx	lr

0800e1ea <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b082      	sub	sp, #8
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
 800e1f2:	6039      	str	r1, [r7, #0]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	2004      	movs	r0, #4
 800e1fa:	f7f3 fa84 	bl	8001706 <_ZnwjPv>
 800e1fe:	4603      	mov	r3, r0
 800e200:	f04f 0200 	mov.w	r2, #0
 800e204:	601a      	str	r2, [r3, #0]
	}
 800e206:	bf00      	nop
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <_ZSt8_DestroyIfEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 800e20e:	b480      	push	{r7}
 800e210:	b083      	sub	sp, #12
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 800e216:	bf00      	nop
 800e218:	370c      	adds	r7, #12
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr

0800e222 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800e222:	b580      	push	{r7, lr}
 800e224:	b086      	sub	sp, #24
 800e226:	af00      	add	r7, sp, #0
 800e228:	60f8      	str	r0, [r7, #12]
 800e22a:	60b9      	str	r1, [r7, #8]
 800e22c:	607a      	str	r2, [r7, #4]
 800e22e:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800e230:	463b      	mov	r3, r7
 800e232:	461a      	mov	r2, r3
 800e234:	68b9      	ldr	r1, [r7, #8]
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f000 fe33 	bl	800eea2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	617b      	str	r3, [r7, #20]
 800e240:	e013      	b.n	800e26a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x48>
	if (__comp(__i, __first))
 800e242:	463b      	mov	r3, r7
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	6979      	ldr	r1, [r7, #20]
 800e248:	4618      	mov	r0, r3
 800e24a:	f000 f85d 	bl	800e308 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	d005      	beq.n	800e260 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800e254:	463b      	mov	r3, r7
 800e256:	697a      	ldr	r2, [r7, #20]
 800e258:	68b9      	ldr	r1, [r7, #8]
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f000 fe8f 	bl	800ef7e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e260:	f107 0314 	add.w	r3, r7, #20
 800e264:	4618      	mov	r0, r3
 800e266:	f7fb fbdd 	bl	8009a24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800e26a:	1d3a      	adds	r2, r7, #4
 800e26c:	f107 0314 	add.w	r3, r7, #20
 800e270:	4611      	mov	r1, r2
 800e272:	4618      	mov	r0, r3
 800e274:	f000 fe6b 	bl	800ef4e <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1e1      	bne.n	800e242 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x20>
    }
 800e27e:	bf00      	nop
 800e280:	bf00      	nop
 800e282:	3718      	adds	r7, #24
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800e294:	e00a      	b.n	800e2ac <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x24>
	{
	  --__last;
 800e296:	f107 0308 	add.w	r3, r7, #8
 800e29a:	4618      	mov	r0, r3
 800e29c:	f000 feaf 	bl	800effe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	68b9      	ldr	r1, [r7, #8]
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f000 fe69 	bl	800ef7e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>
      while (__last - __first > 1)
 800e2ac:	f107 020c 	add.w	r2, r7, #12
 800e2b0:	f107 0308 	add.w	r3, r7, #8
 800e2b4:	4611      	mov	r1, r2
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fe fa83 	bl	800c7c2 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	bfcc      	ite	gt
 800e2c2:	2301      	movgt	r3, #1
 800e2c4:	2300      	movle	r3, #0
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1e4      	bne.n	800e296 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xe>
	}
    }
 800e2cc:	bf00      	nop
 800e2ce:	bf00      	nop
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b084      	sub	sp, #16
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
 800e2de:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	425b      	negs	r3, r3
 800e2ea:	4413      	add	r3, r2
 800e2ec:	60fb      	str	r3, [r7, #12]
 800e2ee:	f107 020c 	add.w	r2, r7, #12
 800e2f2:	f107 0308 	add.w	r3, r7, #8
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7fc ff68 	bl	800b1ce <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	4618      	mov	r0, r3
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800e308:	b580      	push	{r7, lr}
 800e30a:	ed2d 8b02 	vpush	{d8}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800e318:	f107 0308 	add.w	r3, r7, #8
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fb fb91 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e322:	4603      	mov	r3, r0
 800e324:	ed93 8a00 	vldr	s16, [r3]
 800e328:	1d3b      	adds	r3, r7, #4
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fb fb8a 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e330:	4603      	mov	r3, r0
 800e332:	edd3 7a00 	vldr	s15, [r3]
 800e336:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33e:	bf4c      	ite	mi
 800e340:	2301      	movmi	r3, #1
 800e342:	2300      	movpl	r3, #0
 800e344:	b2db      	uxtb	r3, r3
 800e346:	4618      	mov	r0, r3
 800e348:	3710      	adds	r7, #16
 800e34a:	46bd      	mov	sp, r7
 800e34c:	ecbd 8b02 	vpop	{d8}
 800e350:	bd80      	pop	{r7, pc}

0800e352 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800e352:	b580      	push	{r7, lr}
 800e354:	b084      	sub	sp, #16
 800e356:	af00      	add	r7, sp, #0
 800e358:	60f8      	str	r0, [r7, #12]
 800e35a:	60b9      	str	r1, [r7, #8]
 800e35c:	607a      	str	r2, [r7, #4]
 800e35e:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	68b9      	ldr	r1, [r7, #8]
 800e364:	f107 0018 	add.w	r0, r7, #24
 800e368:	f7ff ffce 	bl	800e308 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d020      	beq.n	800e3b4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x62>
	  if (__comp(__b, __c))
 800e372:	683a      	ldr	r2, [r7, #0]
 800e374:	6879      	ldr	r1, [r7, #4]
 800e376:	f107 0018 	add.w	r0, r7, #24
 800e37a:	f7ff ffc5 	bl	800e308 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d004      	beq.n	800e38e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800e384:	6879      	ldr	r1, [r7, #4]
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f000 fe49 	bl	800f01e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e38c:	e032      	b.n	800e3f4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	  else if (__comp(__a, __c))
 800e38e:	683a      	ldr	r2, [r7, #0]
 800e390:	68b9      	ldr	r1, [r7, #8]
 800e392:	f107 0018 	add.w	r0, r7, #24
 800e396:	f7ff ffb7 	bl	800e308 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d004      	beq.n	800e3aa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x58>
	    std::iter_swap(__result, __c);
 800e3a0:	6839      	ldr	r1, [r7, #0]
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f000 fe3b 	bl	800f01e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e3a8:	e024      	b.n	800e3f4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800e3aa:	68b9      	ldr	r1, [r7, #8]
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f000 fe36 	bl	800f01e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e3b2:	e01f      	b.n	800e3f4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__a, __c))
 800e3b4:	683a      	ldr	r2, [r7, #0]
 800e3b6:	68b9      	ldr	r1, [r7, #8]
 800e3b8:	f107 0018 	add.w	r0, r7, #24
 800e3bc:	f7ff ffa4 	bl	800e308 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d004      	beq.n	800e3d0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x7e>
	std::iter_swap(__result, __a);
 800e3c6:	68b9      	ldr	r1, [r7, #8]
 800e3c8:	68f8      	ldr	r0, [r7, #12]
 800e3ca:	f000 fe28 	bl	800f01e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e3ce:	e011      	b.n	800e3f4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__b, __c))
 800e3d0:	683a      	ldr	r2, [r7, #0]
 800e3d2:	6879      	ldr	r1, [r7, #4]
 800e3d4:	f107 0018 	add.w	r0, r7, #24
 800e3d8:	f7ff ff96 	bl	800e308 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d004      	beq.n	800e3ec <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x9a>
	std::iter_swap(__result, __c);
 800e3e2:	6839      	ldr	r1, [r7, #0]
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f000 fe1a 	bl	800f01e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e3ea:	e003      	b.n	800e3f4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	std::iter_swap(__result, __b);
 800e3ec:	6879      	ldr	r1, [r7, #4]
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f000 fe15 	bl	800f01e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e3f4:	bf00      	nop
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
 800e408:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800e40a:	e004      	b.n	800e416 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
	    ++__first;
 800e40c:	f107 030c 	add.w	r3, r7, #12
 800e410:	4618      	mov	r0, r3
 800e412:	f7fb fb07 	bl	8009a24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
	  while (__comp(__first, __pivot))
 800e416:	463b      	mov	r3, r7
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	68f9      	ldr	r1, [r7, #12]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff ff73 	bl	800e308 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d1f1      	bne.n	800e40c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x10>
	  --__last;
 800e428:	f107 0308 	add.w	r3, r7, #8
 800e42c:	4618      	mov	r0, r3
 800e42e:	f000 fde6 	bl	800effe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  while (__comp(__pivot, __last))
 800e432:	e004      	b.n	800e43e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x42>
	    --__last;
 800e434:	f107 0308 	add.w	r3, r7, #8
 800e438:	4618      	mov	r0, r3
 800e43a:	f000 fde0 	bl	800effe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  while (__comp(__pivot, __last))
 800e43e:	463b      	mov	r3, r7
 800e440:	68ba      	ldr	r2, [r7, #8]
 800e442:	6879      	ldr	r1, [r7, #4]
 800e444:	4618      	mov	r0, r3
 800e446:	f7ff ff5f 	bl	800e308 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d1f1      	bne.n	800e434 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x38>
	  if (!(__first < __last))
 800e450:	f107 0208 	add.w	r2, r7, #8
 800e454:	f107 030c 	add.w	r3, r7, #12
 800e458:	4611      	mov	r1, r2
 800e45a:	4618      	mov	r0, r3
 800e45c:	f000 fd77 	bl	800ef4e <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e460:	4603      	mov	r3, r0
 800e462:	f083 0301 	eor.w	r3, r3, #1
 800e466:	b2db      	uxtb	r3, r3
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d001      	beq.n	800e470 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x74>
	    return __first;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	e009      	b.n	800e484 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x88>
	  std::iter_swap(__first, __last);
 800e470:	68b9      	ldr	r1, [r7, #8]
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f000 fdd3 	bl	800f01e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
	  ++__first;
 800e478:	f107 030c 	add.w	r3, r7, #12
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fb fad1 	bl	8009a24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
	  while (__comp(__first, __pivot))
 800e482:	e7c8      	b.n	800e416 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
    }
 800e484:	4618      	mov	r0, r3
 800e486:	3710      	adds	r7, #16
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <_ZN9__gnu_cxxeqIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e48c:	b590      	push	{r4, r7, lr}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f7fc fea9 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800e49c:	4603      	mov	r3, r0
 800e49e:	681c      	ldr	r4, [r3, #0]
 800e4a0:	6838      	ldr	r0, [r7, #0]
 800e4a2:	f7fc fea4 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	429c      	cmp	r4, r3
 800e4ac:	bf0c      	ite	eq
 800e4ae:	2301      	moveq	r3, #1
 800e4b0:	2300      	movne	r3, #0
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd90      	pop	{r4, r7, pc}

0800e4bc <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET0_T_SA_S9_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800e4bc:	b590      	push	{r4, r7, lr}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f000 fdbf 	bl	800f04c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	68b8      	ldr	r0, [r7, #8]
 800e4d2:	f000 fdbb 	bl	800f04c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	4619      	mov	r1, r3
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f000 fdc0 	bl	800f062 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET1_T0_SA_S9_>
 800e4e2:	4603      	mov	r3, r0
    }
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3714      	adds	r7, #20
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd90      	pop	{r4, r7, pc}

0800e4ec <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800e4ec:	b590      	push	{r4, r7, lr}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800e4f6:	1d3b      	adds	r3, r7, #4
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fb faa3 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e4fe:	4603      	mov	r3, r0
 800e500:	4618      	mov	r0, r3
 800e502:	f7fc f9de 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e506:	4603      	mov	r3, r0
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	60bb      	str	r3, [r7, #8]
      --__next;
 800e510:	f107 0308 	add.w	r3, r7, #8
 800e514:	4618      	mov	r0, r3
 800e516:	f000 fd72 	bl	800effe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
      while (__comp(__val, __next))
 800e51a:	e017      	b.n	800e54c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 800e51c:	f107 0308 	add.w	r3, r7, #8
 800e520:	4618      	mov	r0, r3
 800e522:	f7fb fa8f 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e526:	4603      	mov	r3, r0
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fc f9ca 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e52e:	4604      	mov	r4, r0
 800e530:	1d3b      	adds	r3, r7, #4
 800e532:	4618      	mov	r0, r3
 800e534:	f7fb fa86 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e538:	4602      	mov	r2, r0
 800e53a:	6823      	ldr	r3, [r4, #0]
 800e53c:	6013      	str	r3, [r2, #0]
	  __last = __next;
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	607b      	str	r3, [r7, #4]
	  --__next;
 800e542:	f107 0308 	add.w	r3, r7, #8
 800e546:	4618      	mov	r0, r3
 800e548:	f000 fd59 	bl	800effe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
      while (__comp(__val, __next))
 800e54c:	f107 010c 	add.w	r1, r7, #12
 800e550:	463b      	mov	r3, r7
 800e552:	68ba      	ldr	r2, [r7, #8]
 800e554:	4618      	mov	r0, r3
 800e556:	f000 fda5 	bl	800f0a4 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEEbRT_T0_>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1dd      	bne.n	800e51c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 800e560:	f107 030c 	add.w	r3, r7, #12
 800e564:	4618      	mov	r0, r3
 800e566:	f7fc f9ac 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e56a:	4604      	mov	r4, r0
 800e56c:	1d3b      	adds	r3, r7, #4
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fb fa68 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e574:	4602      	mov	r2, r0
 800e576:	6823      	ldr	r3, [r4, #0]
 800e578:	6013      	str	r3, [r2, #0]
    }
 800e57a:	bf00      	nop
 800e57c:	3714      	adds	r7, #20
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd90      	pop	{r4, r7, pc}

0800e582 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE11_S_max_sizeIKS2_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800e582:	b40f      	push	{r0, r1, r2, r3}
 800e584:	b480      	push	{r7}
 800e586:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800e588:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
	}
 800e58c:	4618      	mov	r0, r3
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	b004      	add	sp, #16
 800e596:	4770      	bx	lr

0800e598 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	370c      	adds	r7, #12
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr

0800e5ae <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE12_S_constructIiJRKiEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800e5ae:	b590      	push	{r4, r7, lr}
 800e5b0:	b085      	sub	sp, #20
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	60f8      	str	r0, [r7, #12]
 800e5b6:	60b9      	str	r1, [r7, #8]
 800e5b8:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7ff ffec 	bl	800e598 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	681c      	ldr	r4, [r3, #0]
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	2004      	movs	r0, #4
 800e5ca:	f7f3 f89c 	bl	8001706 <_ZnwjPv>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	601c      	str	r4, [r3, #0]
	}
 800e5d2:	bf00      	nop
 800e5d4:	3714      	adds	r7, #20
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd90      	pop	{r4, r7, pc}

0800e5da <_ZSt8_DestroyIiEvPT_>:
    _Destroy(_Tp* __pointer)
 800e5da:	b480      	push	{r7}
 800e5dc:	b083      	sub	sp, #12
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
    }
 800e5e2:	bf00      	nop
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>:
    _Destroy(_Tp* __pointer)
 800e5ee:	b480      	push	{r7}
 800e5f0:	b083      	sub	sp, #12
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
    }
 800e5f6:	bf00      	nop
 800e5f8:	370c      	adds	r7, #12
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800e602:	b580      	push	{r7, lr}
 800e604:	b084      	sub	sp, #16
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800e60a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e60e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f000 fd67 	bl	800f0e4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>
 800e616:	4603      	mov	r3, r0
 800e618:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800e61a:	f107 0208 	add.w	r2, r7, #8
 800e61e:	f107 030c 	add.w	r3, r7, #12
 800e622:	4611      	mov	r1, r2
 800e624:	4618      	mov	r0, r3
 800e626:	f7f9 faf7 	bl	8007c18 <_ZSt3minIjERKT_S2_S2_>
 800e62a:	4603      	mov	r3, r0
 800e62c:	681b      	ldr	r3, [r3, #0]
      }
 800e62e:	4618      	mov	r0, r3
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800e636:	b480      	push	{r7}
 800e638:	b083      	sub	sp, #12
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4618      	mov	r0, r3
 800e642:	370c      	adds	r7, #12
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>:
    T *allocate(size_t n)
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	00db      	lsls	r3, r3, #3
 800e65a:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800e65c:	68f8      	ldr	r0, [r7, #12]
 800e65e:	f009 fde3 	bl	8018228 <_Z9ei_mallocj>
 800e662:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800e664:	68bb      	ldr	r3, [r7, #8]
    }
 800e666:	4618      	mov	r0, r3
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}

0800e66e <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800e66e:	b5b0      	push	{r4, r5, r7, lr}
 800e670:	b084      	sub	sp, #16
 800e672:	af00      	add	r7, sp, #0
 800e674:	60f8      	str	r0, [r7, #12]
 800e676:	60b9      	str	r1, [r7, #8]
 800e678:	607a      	str	r2, [r7, #4]
 800e67a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f000 fd3e 	bl	800f0fe <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800e682:	4604      	mov	r4, r0
 800e684:	68b8      	ldr	r0, [r7, #8]
 800e686:	f000 fd3a 	bl	800f0fe <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800e68a:	4605      	mov	r5, r0
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fd36 	bl	800f0fe <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800e692:	4602      	mov	r2, r0
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	4629      	mov	r1, r5
 800e698:	4620      	mov	r0, r4
 800e69a:	f000 fd3b 	bl	800f114 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800e69e:	4603      	mov	r3, r0
    }
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bdb0      	pop	{r4, r5, r7, pc}

0800e6a8 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800e6b2:	463b      	mov	r3, r7
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f000 fd53 	bl	800f160 <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	601a      	str	r2, [r3, #0]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3708      	adds	r7, #8
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800e6d6:	6839      	ldr	r1, [r7, #0]
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 fd4c 	bl	800f176 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	f083 0301 	eor.w	r3, r3, #1
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>:
      operator++()
 800e6ee:	b480      	push	{r7}
 800e6f0:	b083      	sub	sp, #12
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f103 0208 	add.w	r2, r3, #8
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	601a      	str	r2, [r3, #0]
	return *this;
 800e702:	687b      	ldr	r3, [r7, #4]
      }
 800e704:	4618      	mov	r0, r3
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr

0800e710 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>:
      operator*() const
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4618      	mov	r0, r3
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr

0800e728 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 fd34 	bl	800f1a2 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e73a:	4603      	mov	r3, r0
 800e73c:	461a      	mov	r2, r3
 800e73e:	68b9      	ldr	r1, [r7, #8]
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f000 fd39 	bl	800f1b8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>
 800e746:	bf00      	nop
 800e748:	3710      	adds	r7, #16
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800e74e:	b580      	push	{r7, lr}
 800e750:	b086      	sub	sp, #24
 800e752:	af00      	add	r7, sp, #0
 800e754:	60f8      	str	r0, [r7, #12]
 800e756:	60b9      	str	r1, [r7, #8]
 800e758:	607a      	str	r2, [r7, #4]
 800e75a:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800e75c:	463b      	mov	r3, r7
 800e75e:	461a      	mov	r2, r3
 800e760:	68b9      	ldr	r1, [r7, #8]
 800e762:	68f8      	ldr	r0, [r7, #12]
 800e764:	f000 fd41 	bl	800f1ea <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	617b      	str	r3, [r7, #20]
 800e76c:	e013      	b.n	800e796 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x48>
	if (__comp(__i, __first))
 800e76e:	463b      	mov	r3, r7
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	6979      	ldr	r1, [r7, #20]
 800e774:	4618      	mov	r0, r3
 800e776:	f000 f85d 	bl	800e834 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d005      	beq.n	800e78c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800e780:	463b      	mov	r3, r7
 800e782:	697a      	ldr	r2, [r7, #20]
 800e784:	68b9      	ldr	r1, [r7, #8]
 800e786:	68f8      	ldr	r0, [r7, #12]
 800e788:	f000 fda6 	bl	800f2d8 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e78c:	f107 0314 	add.w	r3, r7, #20
 800e790:	4618      	mov	r0, r3
 800e792:	f000 f920 	bl	800e9d6 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800e796:	1d3a      	adds	r2, r7, #4
 800e798:	f107 0314 	add.w	r3, r7, #20
 800e79c:	4611      	mov	r1, r2
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 fd82 	bl	800f2a8 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d1e1      	bne.n	800e76e <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x20>
    }
 800e7aa:	bf00      	nop
 800e7ac:	bf00      	nop
 800e7ae:	3718      	adds	r7, #24
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]
      while (__last - __first > 1)
 800e7c0:	e00a      	b.n	800e7d8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x24>
	  --__last;
 800e7c2:	f107 0308 	add.w	r3, r7, #8
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f000 fdd2 	bl	800f370 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	68b9      	ldr	r1, [r7, #8]
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f000 fd80 	bl	800f2d8 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 800e7d8:	f107 020c 	add.w	r2, r7, #12
 800e7dc:	f107 0308 	add.w	r3, r7, #8
 800e7e0:	4611      	mov	r1, r2
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fe f979 	bl	800cada <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	bfcc      	ite	gt
 800e7ee:	2301      	movgt	r3, #1
 800e7f0:	2300      	movle	r3, #0
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1e4      	bne.n	800e7c2 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xe>
    }
 800e7f8:	bf00      	nop
 800e7fa:	bf00      	nop
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}

0800e802 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800e802:	b580      	push	{r7, lr}
 800e804:	b084      	sub	sp, #16
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
 800e80a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	00db      	lsls	r3, r3, #3
 800e814:	425b      	negs	r3, r3
 800e816:	4413      	add	r3, r2
 800e818:	60fb      	str	r3, [r7, #12]
 800e81a:	f107 020c 	add.w	r2, r7, #12
 800e81e:	f107 0308 	add.w	r3, r7, #8
 800e822:	4611      	mov	r1, r2
 800e824:	4618      	mov	r0, r3
 800e826:	f7fc fffb 	bl	800b820 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	4618      	mov	r0, r3
 800e82e:	3710      	adds	r7, #16
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 800e834:	b5b0      	push	{r4, r5, r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 800e840:	68fc      	ldr	r4, [r7, #12]
 800e842:	f107 0308 	add.w	r3, r7, #8
 800e846:	4618      	mov	r0, r3
 800e848:	f000 f8d6 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800e84c:	4605      	mov	r5, r0
 800e84e:	1d3b      	adds	r3, r7, #4
 800e850:	4618      	mov	r0, r3
 800e852:	f000 f8d1 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800e856:	4603      	mov	r3, r0
 800e858:	461a      	mov	r2, r3
 800e85a:	4629      	mov	r1, r5
 800e85c:	4620      	mov	r0, r4
 800e85e:	f7f5 fac5 	bl	8003dec <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800e862:	4603      	mov	r3, r0
 800e864:	4618      	mov	r0, r3
 800e866:	3710      	adds	r7, #16
 800e868:	46bd      	mov	sp, r7
 800e86a:	bdb0      	pop	{r4, r5, r7, pc}

0800e86c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
 800e878:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	68b9      	ldr	r1, [r7, #8]
 800e87e:	f107 0018 	add.w	r0, r7, #24
 800e882:	f7ff ffd7 	bl	800e834 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d020      	beq.n	800e8ce <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x62>
	  if (__comp(__b, __c))
 800e88c:	683a      	ldr	r2, [r7, #0]
 800e88e:	6879      	ldr	r1, [r7, #4]
 800e890:	f107 0018 	add.w	r0, r7, #24
 800e894:	f7ff ffce 	bl	800e834 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d004      	beq.n	800e8a8 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800e89e:	6879      	ldr	r1, [r7, #4]
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f000 fd76 	bl	800f392 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800e8a6:	e032      	b.n	800e90e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	  else if (__comp(__a, __c))
 800e8a8:	683a      	ldr	r2, [r7, #0]
 800e8aa:	68b9      	ldr	r1, [r7, #8]
 800e8ac:	f107 0018 	add.w	r0, r7, #24
 800e8b0:	f7ff ffc0 	bl	800e834 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d004      	beq.n	800e8c4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x58>
	    std::iter_swap(__result, __c);
 800e8ba:	6839      	ldr	r1, [r7, #0]
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f000 fd68 	bl	800f392 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800e8c2:	e024      	b.n	800e90e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800e8c4:	68b9      	ldr	r1, [r7, #8]
 800e8c6:	68f8      	ldr	r0, [r7, #12]
 800e8c8:	f000 fd63 	bl	800f392 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800e8cc:	e01f      	b.n	800e90e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__a, __c))
 800e8ce:	683a      	ldr	r2, [r7, #0]
 800e8d0:	68b9      	ldr	r1, [r7, #8]
 800e8d2:	f107 0018 	add.w	r0, r7, #24
 800e8d6:	f7ff ffad 	bl	800e834 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d004      	beq.n	800e8ea <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x7e>
	std::iter_swap(__result, __a);
 800e8e0:	68b9      	ldr	r1, [r7, #8]
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	f000 fd55 	bl	800f392 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800e8e8:	e011      	b.n	800e90e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__b, __c))
 800e8ea:	683a      	ldr	r2, [r7, #0]
 800e8ec:	6879      	ldr	r1, [r7, #4]
 800e8ee:	f107 0018 	add.w	r0, r7, #24
 800e8f2:	f7ff ff9f 	bl	800e834 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d004      	beq.n	800e906 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x9a>
	std::iter_swap(__result, __c);
 800e8fc:	6839      	ldr	r1, [r7, #0]
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f000 fd47 	bl	800f392 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800e904:	e003      	b.n	800e90e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	std::iter_swap(__result, __b);
 800e906:	6879      	ldr	r1, [r7, #4]
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f000 fd42 	bl	800f392 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800e90e:	bf00      	nop
 800e910:	3710      	adds	r7, #16
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800e916:	b580      	push	{r7, lr}
 800e918:	b084      	sub	sp, #16
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	60f8      	str	r0, [r7, #12]
 800e91e:	60b9      	str	r1, [r7, #8]
 800e920:	607a      	str	r2, [r7, #4]
 800e922:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800e924:	e004      	b.n	800e930 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x1a>
	    ++__first;
 800e926:	f107 030c 	add.w	r3, r7, #12
 800e92a:	4618      	mov	r0, r3
 800e92c:	f000 f853 	bl	800e9d6 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800e930:	463b      	mov	r3, r7
 800e932:	687a      	ldr	r2, [r7, #4]
 800e934:	68f9      	ldr	r1, [r7, #12]
 800e936:	4618      	mov	r0, r3
 800e938:	f7ff ff7c 	bl	800e834 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d1f1      	bne.n	800e926 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x10>
	  --__last;
 800e942:	f107 0308 	add.w	r3, r7, #8
 800e946:	4618      	mov	r0, r3
 800e948:	f000 fd12 	bl	800f370 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800e94c:	e004      	b.n	800e958 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x42>
	    --__last;
 800e94e:	f107 0308 	add.w	r3, r7, #8
 800e952:	4618      	mov	r0, r3
 800e954:	f000 fd0c 	bl	800f370 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800e958:	463b      	mov	r3, r7
 800e95a:	68ba      	ldr	r2, [r7, #8]
 800e95c:	6879      	ldr	r1, [r7, #4]
 800e95e:	4618      	mov	r0, r3
 800e960:	f7ff ff68 	bl	800e834 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800e964:	4603      	mov	r3, r0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d1f1      	bne.n	800e94e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x38>
	  if (!(__first < __last))
 800e96a:	f107 0208 	add.w	r2, r7, #8
 800e96e:	f107 030c 	add.w	r3, r7, #12
 800e972:	4611      	mov	r1, r2
 800e974:	4618      	mov	r0, r3
 800e976:	f000 fc97 	bl	800f2a8 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800e97a:	4603      	mov	r3, r0
 800e97c:	f083 0301 	eor.w	r3, r3, #1
 800e980:	b2db      	uxtb	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	d001      	beq.n	800e98a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x74>
	    return __first;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	e009      	b.n	800e99e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x88>
	  std::iter_swap(__first, __last);
 800e98a:	68b9      	ldr	r1, [r7, #8]
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	f000 fd00 	bl	800f392 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
	  ++__first;
 800e992:	f107 030c 	add.w	r3, r7, #12
 800e996:	4618      	mov	r0, r3
 800e998:	f000 f81d 	bl	800e9d6 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800e99c:	e7c8      	b.n	800e930 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x1a>
    }
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e9a6:	b590      	push	{r4, r7, lr}
 800e9a8:	b083      	sub	sp, #12
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
 800e9ae:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f7fe f8cf 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	681c      	ldr	r4, [r3, #0]
 800e9ba:	6838      	ldr	r0, [r7, #0]
 800e9bc:	f7fe f8ca 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	429c      	cmp	r4, r3
 800e9c6:	bf0c      	ite	eq
 800e9c8:	2301      	moveq	r3, #1
 800e9ca:	2300      	movne	r3, #0
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	370c      	adds	r7, #12
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd90      	pop	{r4, r7, pc}

0800e9d6 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e9d6:	b480      	push	{r7}
 800e9d8:	b083      	sub	sp, #12
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f103 0208 	add.w	r2, r3, #8
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	601a      	str	r2, [r3, #0]
	return *this;
 800e9ea:	687b      	ldr	r3, [r7, #4]
      }
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	370c      	adds	r7, #12
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4618      	mov	r0, r3
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	370c      	adds	r7, #12
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr

0800ea26 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800ea26:	b590      	push	{r4, r7, lr}
 800ea28:	b085      	sub	sp, #20
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	60f8      	str	r0, [r7, #12]
 800ea2e:	60b9      	str	r1, [r7, #8]
 800ea30:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f000 fcc4 	bl	800f3c0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800ea38:	4604      	mov	r4, r0
 800ea3a:	68b8      	ldr	r0, [r7, #8]
 800ea3c:	f000 fcc0 	bl	800f3c0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800ea40:	4603      	mov	r3, r0
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	4619      	mov	r1, r3
 800ea46:	4620      	mov	r0, r4
 800ea48:	f000 fcc5 	bl	800f3d6 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>
 800ea4c:	4603      	mov	r3, r0
    }
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3714      	adds	r7, #20
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd90      	pop	{r4, r7, pc}

0800ea56 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 800ea56:	b590      	push	{r4, r7, lr}
 800ea58:	b085      	sub	sp, #20
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800ea5e:	1d3b      	adds	r3, r7, #4
 800ea60:	4618      	mov	r0, r3
 800ea62:	f000 fcd9 	bl	800f418 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800ea66:	4602      	mov	r2, r0
 800ea68:	f107 030c 	add.w	r3, r7, #12
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f000 fcdd 	bl	800f42e <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 800ea74:	bf00      	nop
 800ea76:	4620      	mov	r0, r4
 800ea78:	3714      	adds	r7, #20
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd90      	pop	{r4, r7, pc}

0800ea7e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800ea7e:	b590      	push	{r4, r7, lr}
 800ea80:	b087      	sub	sp, #28
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
 800ea86:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800ea88:	1d3b      	adds	r3, r7, #4
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7ff ffb4 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ea90:	4603      	mov	r3, r0
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7ff ffbc 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	f107 0310 	add.w	r3, r7, #16
 800ea9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eaa2:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	60fb      	str	r3, [r7, #12]
      --__next;
 800eaaa:	f107 030c 	add.w	r3, r7, #12
 800eaae:	4618      	mov	r0, r3
 800eab0:	f000 fc5e 	bl	800f370 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800eab4:	e01a      	b.n	800eaec <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x6e>
	  *__last = _GLIBCXX_MOVE(*__next);
 800eab6:	f107 030c 	add.w	r3, r7, #12
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7ff ff9c 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800eac0:	4603      	mov	r3, r0
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7ff ffa4 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800eac8:	4604      	mov	r4, r0
 800eaca:	1d3b      	adds	r3, r7, #4
 800eacc:	4618      	mov	r0, r3
 800eace:	f7ff ff93 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ead2:	4603      	mov	r3, r0
 800ead4:	4622      	mov	r2, r4
 800ead6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eada:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	607b      	str	r3, [r7, #4]
	  --__next;
 800eae2:	f107 030c 	add.w	r3, r7, #12
 800eae6:	4618      	mov	r0, r3
 800eae8:	f000 fc42 	bl	800f370 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800eaec:	f107 0110 	add.w	r1, r7, #16
 800eaf0:	463b      	mov	r3, r7
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f000 fca8 	bl	800f44a <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d1da      	bne.n	800eab6 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 800eb00:	f107 0310 	add.w	r3, r7, #16
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff ff83 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	1d3b      	adds	r3, r7, #4
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7ff ff72 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800eb14:	4603      	mov	r3, r0
 800eb16:	4622      	mov	r2, r4
 800eb18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eb1c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800eb20:	bf00      	nop
 800eb22:	371c      	adds	r7, #28
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd90      	pop	{r4, r7, pc}

0800eb28 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	4618      	mov	r0, r3
 800eb34:	370c      	adds	r7, #12
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800eb3e:	b590      	push	{r4, r7, lr}
 800eb40:	b087      	sub	sp, #28
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	60f8      	str	r0, [r7, #12]
 800eb46:	60b9      	str	r1, [r7, #8]
 800eb48:	607a      	str	r2, [r7, #4]
 800eb4a:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800eb50:	e012      	b.n	800eb78 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800eb52:	6978      	ldr	r0, [r7, #20]
 800eb54:	f7fd fde8 	bl	800c728 <_ZSt11__addressofIfEPT_RS0_>
 800eb58:	4604      	mov	r4, r0
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f7fd fde4 	bl	800c728 <_ZSt11__addressofIfEPT_RS0_>
 800eb60:	4603      	mov	r3, r0
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	4619      	mov	r1, r3
 800eb66:	4620      	mov	r0, r4
 800eb68:	f000 fc85 	bl	800f476 <_ZSt19__relocate_object_aIffN2ei7EiAllocIfEEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	3304      	adds	r3, #4
 800eb70:	60fb      	str	r3, [r7, #12]
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	3304      	adds	r3, #4
 800eb76:	617b      	str	r3, [r7, #20]
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d1e8      	bne.n	800eb52 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_+0x14>
      return __cur;
 800eb80:	697b      	ldr	r3, [r7, #20]
    }
 800eb82:	4618      	mov	r0, r3
 800eb84:	371c      	adds	r7, #28
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd90      	pop	{r4, r7, pc}

0800eb8a <_ZSteqIPfEbRKSt13move_iteratorIT_ES5_>:
    operator==(const move_iterator<_Iterator>& __x,
 800eb8a:	b590      	push	{r4, r7, lr}
 800eb8c:	b083      	sub	sp, #12
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
 800eb92:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f000 fc89 	bl	800f4ac <_ZNKSt13move_iteratorIPfE4baseEv>
 800eb9a:	4604      	mov	r4, r0
 800eb9c:	6838      	ldr	r0, [r7, #0]
 800eb9e:	f000 fc85 	bl	800f4ac <_ZNKSt13move_iteratorIPfE4baseEv>
 800eba2:	4603      	mov	r3, r0
 800eba4:	429c      	cmp	r4, r3
 800eba6:	bf0c      	ite	eq
 800eba8:	2301      	moveq	r3, #1
 800ebaa:	2300      	movne	r3, #0
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	4618      	mov	r0, r3
 800ebb0:	370c      	adds	r7, #12
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd90      	pop	{r4, r7, pc}

0800ebb6 <_ZN2ei7EiAllocIiE8allocateEj>:
    T *allocate(size_t n)
 800ebb6:	b580      	push	{r7, lr}
 800ebb8:	b084      	sub	sp, #16
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
 800ebbe:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f009 fb2e 	bl	8018228 <_Z9ei_mallocj>
 800ebcc:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800ebce:	68bb      	ldr	r3, [r7, #8]
    }
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f7f2 ff1f 	bl	8001a24 <_ZNKSt9_Any_data9_M_accessEv>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	370c      	adds	r7, #12
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr

0800ec06 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ec06:	b480      	push	{r7}
 800ec08:	b083      	sub	sp, #12
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4618      	mov	r0, r3
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800ec1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec1e:	b085      	sub	sp, #20
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	7338      	strb	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	607a      	str	r2, [r7, #4]
 800ec28:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800ec2a:	68b8      	ldr	r0, [r7, #8]
 800ec2c:	f7ff ffeb 	bl	800ec06 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ec30:	4603      	mov	r3, r0
 800ec32:	681c      	ldr	r4, [r3, #0]
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7fc fcaa 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	681d      	ldr	r5, [r3, #0]
 800ec3e:	6838      	ldr	r0, [r7, #0]
 800ec40:	f7fc fca5 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ec44:	4603      	mov	r3, r0
 800ec46:	681e      	ldr	r6, [r3, #0]
 800ec48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec4a:	f7fc fcab 	bl	800b5a4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	461a      	mov	r2, r3
 800ec54:	4631      	mov	r1, r6
 800ec56:	4628      	mov	r0, r5
 800ec58:	47a0      	blx	r4
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3714      	adds	r7, #20
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec64 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800ec64:	b590      	push	{r4, r7, lr}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800ec6e:	6838      	ldr	r0, [r7, #0]
 800ec70:	f000 fc28 	bl	800f4c4 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800ec74:	4603      	mov	r3, r0
 800ec76:	4622      	mov	r2, r4
 800ec78:	4619      	mov	r1, r3
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 fc2d 	bl	800f4da <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd90      	pop	{r4, r7, pc}

0800ec88 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 fc3a 	bl	800f50c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 800ec98:	bf00      	nop
 800ec9a:	3708      	adds	r7, #8
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f7f2 febb 	bl	8001a24 <_ZNKSt9_Any_data9_M_accessEv>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	370c      	adds	r7, #12
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eccc:	4770      	bx	lr

0800ecce <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ecce:	b480      	push	{r7}
 800ecd0:	b083      	sub	sp, #12
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800ece4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	7338      	strb	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800ecf2:	68b8      	ldr	r0, [r7, #8]
 800ecf4:	f7ff ffeb 	bl	800ecce <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800ecf8:	4606      	mov	r6, r0
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f7fc fc47 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ed00:	4603      	mov	r3, r0
 800ed02:	681c      	ldr	r4, [r3, #0]
 800ed04:	6838      	ldr	r0, [r7, #0]
 800ed06:	f7fc fc42 	bl	800b58e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	681d      	ldr	r5, [r3, #0]
 800ed0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed10:	f7fc fc48 	bl	800b5a4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800ed14:	4603      	mov	r3, r0
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	462a      	mov	r2, r5
 800ed1a:	4621      	mov	r1, r4
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	f7f8 fd7c 	bl	800781a <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 800ed22:	4603      	mov	r3, r0
 800ed24:	4618      	mov	r0, r3
 800ed26:	3714      	adds	r7, #20
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed2c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800ed2c:	b590      	push	{r4, r7, lr}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800ed36:	6838      	ldr	r0, [r7, #0]
 800ed38:	f000 fbf4 	bl	800f524 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	4622      	mov	r2, r4
 800ed40:	4619      	mov	r1, r3
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 fbf9 	bl	800f53a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800ed48:	bf00      	nop
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd90      	pop	{r4, r7, pc}

0800ed50 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 fc06 	bl	800f56c <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 800ed60:	bf00      	nop
 800ed62:	3708      	adds	r7, #8
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	3304      	adds	r3, #4
 800ed74:	4618      	mov	r0, r3
 800ed76:	f000 fc05 	bl	800f584 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>:
      _Tuple_impl()
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 fc04 	bl	800f59a <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>:
      constexpr _Head_base()
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4618      	mov	r0, r3
 800edae:	370c      	adds	r7, #12
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 fbf4 	bl	800f5b0 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>
 800edc8:	4603      	mov	r3, r0
 800edca:	4618      	mov	r0, r3
 800edcc:	3708      	adds	r7, #8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b082      	sub	sp, #8
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 fbf3 	bl	800f5c6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>
 800ede0:	4603      	mov	r3, r0
 800ede2:	4618      	mov	r0, r3
 800ede4:	3708      	adds	r7, #8
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800edea:	b580      	push	{r7, lr}
 800edec:	b082      	sub	sp, #8
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f000 fbf2 	bl	800f5de <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>
 800edfa:	4603      	mov	r3, r0
 800edfc:	4618      	mov	r0, r3
 800edfe:	3708      	adds	r7, #8
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f000 fbf0 	bl	800f5f4 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>
 800ee14:	4603      	mov	r3, r0
 800ee16:	4618      	mov	r0, r3
 800ee18:	3708      	adds	r7, #8
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b082      	sub	sp, #8
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f000 fbef 	bl	800f60a <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b082      	sub	sp, #8
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f000 fbed 	bl	800f620 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>
 800ee46:	4603      	mov	r3, r0
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800ee5a:	6838      	ldr	r0, [r7, #0]
 800ee5c:	f7fd fbc4 	bl	800c5e8 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ee60:	4603      	mov	r3, r0
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	601a      	str	r2, [r3, #0]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}

0800ee72 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ee72:	b480      	push	{r7}
 800ee74:	b083      	sub	sp, #12
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4618      	mov	r0, r3
 800ee94:	f000 fbcf 	bl	800f636 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3708      	adds	r7, #8
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}

0800eea2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800eea2:	b590      	push	{r4, r7, lr}
 800eea4:	b089      	sub	sp, #36	; 0x24
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	60f8      	str	r0, [r7, #12]
 800eeaa:	60b9      	str	r1, [r7, #8]
 800eeac:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800eeae:	f107 020c 	add.w	r2, r7, #12
 800eeb2:	f107 0308 	add.w	r3, r7, #8
 800eeb6:	4611      	mov	r1, r2
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fd fc82 	bl	800c7c2 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	bfd4      	ite	le
 800eec4:	2301      	movle	r3, #1
 800eec6:	2300      	movgt	r3, #0
 800eec8:	b2db      	uxtb	r3, r3
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d139      	bne.n	800ef42 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 800eece:	f107 020c 	add.w	r2, r7, #12
 800eed2:	f107 0308 	add.w	r3, r7, #8
 800eed6:	4611      	mov	r1, r2
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7fd fc72 	bl	800c7c2 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800eede:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	3b02      	subs	r3, #2
 800eee4:	0fda      	lsrs	r2, r3, #31
 800eee6:	4413      	add	r3, r2
 800eee8:	105b      	asrs	r3, r3, #1
 800eeea:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800eeec:	f107 030c 	add.w	r3, r7, #12
 800eef0:	69f9      	ldr	r1, [r7, #28]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fe fbd2 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800eef8:	4603      	mov	r3, r0
 800eefa:	617b      	str	r3, [r7, #20]
 800eefc:	f107 0314 	add.w	r3, r7, #20
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fa fd9f 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800ef06:	4603      	mov	r3, r0
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7fb fcda 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800ef14:	f107 0310 	add.w	r3, r7, #16
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fb fcd2 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	edd3 7a00 	vldr	s15, [r3]
 800ef24:	4623      	mov	r3, r4
 800ef26:	eeb0 0a67 	vmov.f32	s0, s15
 800ef2a:	69ba      	ldr	r2, [r7, #24]
 800ef2c:	69f9      	ldr	r1, [r7, #28]
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f000 fb8c 	bl	800f64c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
	  if (__parent == 0)
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d005      	beq.n	800ef46 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa4>
	  __parent--;
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	3b01      	subs	r3, #1
 800ef3e:	61fb      	str	r3, [r7, #28]
      while (true)
 800ef40:	e7d4      	b.n	800eeec <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x4a>
	return;
 800ef42:	bf00      	nop
 800ef44:	e000      	b.n	800ef48 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa6>
	    return;
 800ef46:	bf00      	nop
    }
 800ef48:	3724      	adds	r7, #36	; 0x24
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd90      	pop	{r4, r7, pc}

0800ef4e <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ef4e:	b590      	push	{r4, r7, lr}
 800ef50:	b083      	sub	sp, #12
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
 800ef56:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f7fc f948 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	681c      	ldr	r4, [r3, #0]
 800ef62:	6838      	ldr	r0, [r7, #0]
 800ef64:	f7fc f943 	bl	800b1ee <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	429c      	cmp	r4, r3
 800ef6e:	bf34      	ite	cc
 800ef70:	2301      	movcc	r3, #1
 800ef72:	2300      	movcs	r3, #0
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	4618      	mov	r0, r3
 800ef78:	370c      	adds	r7, #12
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd90      	pop	{r4, r7, pc}

0800ef7e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800ef7e:	b5b0      	push	{r4, r5, r7, lr}
 800ef80:	b086      	sub	sp, #24
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	60f8      	str	r0, [r7, #12]
 800ef86:	60b9      	str	r1, [r7, #8]
 800ef88:	607a      	str	r2, [r7, #4]
 800ef8a:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800ef8c:	1d3b      	adds	r3, r7, #4
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7fa fd58 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800ef94:	4603      	mov	r3, r0
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fb fc93 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 800efa2:	f107 030c 	add.w	r3, r7, #12
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fa fd4c 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800efac:	4603      	mov	r3, r0
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fb fc87 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800efb4:	4604      	mov	r4, r0
 800efb6:	1d3b      	adds	r3, r7, #4
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fa fd43 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800efbe:	4602      	mov	r2, r0
 800efc0:	6823      	ldr	r3, [r4, #0]
 800efc2:	6013      	str	r3, [r2, #0]
			 _DistanceType(__last - __first),
 800efc4:	f107 020c 	add.w	r2, r7, #12
 800efc8:	f107 0308 	add.w	r3, r7, #8
 800efcc:	4611      	mov	r1, r2
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fd fbf7 	bl	800c7c2 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800efd4:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800efd6:	f107 0314 	add.w	r3, r7, #20
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fb fc71 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800efe0:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800efe2:	edd3 7a00 	vldr	s15, [r3]
 800efe6:	462b      	mov	r3, r5
 800efe8:	eeb0 0a67 	vmov.f32	s0, s15
 800efec:	4622      	mov	r2, r4
 800efee:	2100      	movs	r1, #0
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f000 fb2b 	bl	800f64c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
    }
 800eff6:	bf00      	nop
 800eff8:	3718      	adds	r7, #24
 800effa:	46bd      	mov	sp, r7
 800effc:	bdb0      	pop	{r4, r5, r7, pc}

0800effe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800effe:	b480      	push	{r7}
 800f000:	b083      	sub	sp, #12
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	1f1a      	subs	r2, r3, #4
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	601a      	str	r2, [r3, #0]
	return *this;
 800f010:	687b      	ldr	r3, [r7, #4]
      }
 800f012:	4618      	mov	r0, r3
 800f014:	370c      	adds	r7, #12
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr

0800f01e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f01e:	b590      	push	{r4, r7, lr}
 800f020:	b083      	sub	sp, #12
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
 800f026:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f028:	1d3b      	adds	r3, r7, #4
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fa fd0a 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f030:	4604      	mov	r4, r0
 800f032:	463b      	mov	r3, r7
 800f034:	4618      	mov	r0, r3
 800f036:	f7fa fd05 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f03a:	4603      	mov	r3, r0
 800f03c:	4619      	mov	r1, r3
 800f03e:	4620      	mov	r0, r4
 800f040:	f7fb fc4a 	bl	800a8d8 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800f044:	bf00      	nop
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd90      	pop	{r4, r7, pc}

0800f04c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800f04c:	b480      	push	{r7}
 800f04e:	b083      	sub	sp, #12
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4618      	mov	r0, r3
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET1_T0_SA_S9_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f062:	b5b0      	push	{r4, r5, r7, lr}
 800f064:	b084      	sub	sp, #16
 800f066:	af00      	add	r7, sp, #0
 800f068:	60f8      	str	r0, [r7, #12]
 800f06a:	60b9      	str	r1, [r7, #8]
 800f06c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f06e:	68f8      	ldr	r0, [r7, #12]
 800f070:	f7fd fb82 	bl	800c778 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f074:	4604      	mov	r4, r0
 800f076:	68b8      	ldr	r0, [r7, #8]
 800f078:	f7fd fb7e 	bl	800c778 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f07c:	4605      	mov	r5, r0
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7fd fb7a 	bl	800c778 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f084:	4603      	mov	r3, r0
 800f086:	461a      	mov	r2, r3
 800f088:	4629      	mov	r1, r5
 800f08a:	4620      	mov	r0, r4
 800f08c:	f000 fb90 	bl	800f7b0 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800f090:	4603      	mov	r3, r0
 800f092:	4619      	mov	r1, r3
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7fd fb7d 	bl	800c794 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES2_ET_S9_T0_>
 800f09a:	4603      	mov	r3, r0
    }
 800f09c:	4618      	mov	r0, r3
 800f09e:	3710      	adds	r7, #16
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bdb0      	pop	{r4, r5, r7, pc}

0800f0a4 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	ed2d 8b02 	vpush	{d8}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	60f8      	str	r0, [r7, #12]
 800f0b0:	60b9      	str	r1, [r7, #8]
 800f0b2:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	ed93 8a00 	vldr	s16, [r3]
 800f0ba:	1d3b      	adds	r3, r7, #4
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7fa fcc1 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	edd3 7a00 	vldr	s15, [r3]
 800f0c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d0:	bf4c      	ite	mi
 800f0d2:	2301      	movmi	r3, #1
 800f0d4:	2300      	movpl	r3, #0
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3710      	adds	r7, #16
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	ecbd 8b02 	vpop	{d8}
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>:
      max_size(const _Alloc& __a) noexcept
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 fb6e 	bl	800f7d0 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3708      	adds	r7, #8
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 800f0fe:	b480      	push	{r7}
 800f100:	b083      	sub	sp, #12
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4618      	mov	r0, r3
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800f114:	b590      	push	{r4, r7, lr}
 800f116:	b087      	sub	sp, #28
 800f118:	af00      	add	r7, sp, #0
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800f126:	e012      	b.n	800f14e <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800f128:	6978      	ldr	r0, [r7, #20]
 800f12a:	f7fd fc52 	bl	800c9d2 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800f12e:	4604      	mov	r4, r0
 800f130:	68f8      	ldr	r0, [r7, #12]
 800f132:	f7fd fc4e 	bl	800c9d2 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800f136:	4603      	mov	r3, r0
 800f138:	683a      	ldr	r2, [r7, #0]
 800f13a:	4619      	mov	r1, r3
 800f13c:	4620      	mov	r0, r4
 800f13e:	f000 fb52 	bl	800f7e6 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	3308      	adds	r3, #8
 800f146:	60fb      	str	r3, [r7, #12]
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	3308      	adds	r3, #8
 800f14c:	617b      	str	r3, [r7, #20]
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	429a      	cmp	r2, r3
 800f154:	d1e8      	bne.n	800f128 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x14>
      return __cur;
 800f156:	697b      	ldr	r3, [r7, #20]
    }
 800f158:	4618      	mov	r0, r3
 800f15a:	371c      	adds	r7, #28
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd90      	pop	{r4, r7, pc}

0800f160 <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4618      	mov	r0, r3
 800f16c:	370c      	adds	r7, #12
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr

0800f176 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 800f176:	b590      	push	{r4, r7, lr}
 800f178:	b083      	sub	sp, #12
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
 800f17e:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 fb4b 	bl	800f81c <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800f186:	4604      	mov	r4, r0
 800f188:	6838      	ldr	r0, [r7, #0]
 800f18a:	f000 fb47 	bl	800f81c <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800f18e:	4603      	mov	r3, r0
 800f190:	429c      	cmp	r4, r3
 800f192:	bf0c      	ite	eq
 800f194:	2301      	moveq	r3, #1
 800f196:	2300      	movne	r3, #0
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	4618      	mov	r0, r3
 800f19c:	370c      	adds	r7, #12
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd90      	pop	{r4, r7, pc}

0800f1a2 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f1a2:	b480      	push	{r7}
 800f1a4:	b083      	sub	sp, #12
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	370c      	adds	r7, #12
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800f1b8:	b590      	push	{r4, r7, lr}
 800f1ba:	b085      	sub	sp, #20
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f7ff ffec 	bl	800f1a2 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	2008      	movs	r0, #8
 800f1d2:	f7f2 fa98 	bl	8001706 <_ZnwjPv>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	4622      	mov	r2, r4
 800f1da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1de:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800f1e2:	bf00      	nop
 800f1e4:	3714      	adds	r7, #20
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd90      	pop	{r4, r7, pc}

0800f1ea <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b08a      	sub	sp, #40	; 0x28
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	60f8      	str	r0, [r7, #12]
 800f1f2:	60b9      	str	r1, [r7, #8]
 800f1f4:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800f1f6:	f107 020c 	add.w	r2, r7, #12
 800f1fa:	f107 0308 	add.w	r3, r7, #8
 800f1fe:	4611      	mov	r1, r2
 800f200:	4618      	mov	r0, r3
 800f202:	f7fd fc6a 	bl	800cada <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f206:	4603      	mov	r3, r0
 800f208:	2b01      	cmp	r3, #1
 800f20a:	bfd4      	ite	le
 800f20c:	2301      	movle	r3, #1
 800f20e:	2300      	movgt	r3, #0
 800f210:	b2db      	uxtb	r3, r3
 800f212:	2b00      	cmp	r3, #0
 800f214:	d142      	bne.n	800f29c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb2>
      const _DistanceType __len = __last - __first;
 800f216:	f107 020c 	add.w	r2, r7, #12
 800f21a:	f107 0308 	add.w	r3, r7, #8
 800f21e:	4611      	mov	r1, r2
 800f220:	4618      	mov	r0, r3
 800f222:	f7fd fc5a 	bl	800cada <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f226:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 800f228:	6a3b      	ldr	r3, [r7, #32]
 800f22a:	3b02      	subs	r3, #2
 800f22c:	0fda      	lsrs	r2, r3, #31
 800f22e:	4413      	add	r3, r2
 800f230:	105b      	asrs	r3, r3, #1
 800f232:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800f234:	f107 030c 	add.w	r3, r7, #12
 800f238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fe fc68 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800f240:	4603      	mov	r3, r0
 800f242:	61fb      	str	r3, [r7, #28]
 800f244:	f107 031c 	add.w	r3, r7, #28
 800f248:	4618      	mov	r0, r3
 800f24a:	f7ff fbd5 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f24e:	4603      	mov	r3, r0
 800f250:	4618      	mov	r0, r3
 800f252:	f7ff fbdd 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f256:	4602      	mov	r2, r0
 800f258:	f107 0314 	add.w	r3, r7, #20
 800f25c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f260:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800f264:	f107 0314 	add.w	r3, r7, #20
 800f268:	4618      	mov	r0, r3
 800f26a:	f7ff fbd1 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f26e:	4603      	mov	r3, r0
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	ed93 7a00 	vldr	s14, [r3]
 800f276:	edd3 7a01 	vldr	s15, [r3, #4]
 800f27a:	7813      	ldrb	r3, [r2, #0]
 800f27c:	eeb0 0a47 	vmov.f32	s0, s14
 800f280:	eef0 0a67 	vmov.f32	s1, s15
 800f284:	6a3a      	ldr	r2, [r7, #32]
 800f286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f000 fad3 	bl	800f834 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
	  if (__parent == 0)
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	2b00      	cmp	r3, #0
 800f292:	d005      	beq.n	800f2a0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb6>
	  __parent--;
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	3b01      	subs	r3, #1
 800f298:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 800f29a:	e7cb      	b.n	800f234 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x4a>
	return;
 800f29c:	bf00      	nop
 800f29e:	e000      	b.n	800f2a2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb8>
	    return;
 800f2a0:	bf00      	nop
    }
 800f2a2:	3728      	adds	r7, #40	; 0x28
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f2a8:	b590      	push	{r4, r7, lr}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7fd fc4e 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	681c      	ldr	r4, [r3, #0]
 800f2bc:	6838      	ldr	r0, [r7, #0]
 800f2be:	f7fd fc49 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	429c      	cmp	r4, r3
 800f2c8:	bf34      	ite	cc
 800f2ca:	2301      	movcc	r3, #1
 800f2cc:	2300      	movcs	r3, #0
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	370c      	adds	r7, #12
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd90      	pop	{r4, r7, pc}

0800f2d8 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f2d8:	b590      	push	{r4, r7, lr}
 800f2da:	b087      	sub	sp, #28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
 800f2e4:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800f2e6:	1d3b      	adds	r3, r7, #4
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7ff fb85 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff fb8d 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f2f6:	4602      	mov	r2, r0
 800f2f8:	f107 0310 	add.w	r3, r7, #16
 800f2fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f300:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 800f304:	f107 030c 	add.w	r3, r7, #12
 800f308:	4618      	mov	r0, r3
 800f30a:	f7ff fb75 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f30e:	4603      	mov	r3, r0
 800f310:	4618      	mov	r0, r3
 800f312:	f7ff fb7d 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f316:	4604      	mov	r4, r0
 800f318:	1d3b      	adds	r3, r7, #4
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7ff fb6c 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f320:	4603      	mov	r3, r0
 800f322:	4622      	mov	r2, r4
 800f324:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f328:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 800f32c:	f107 020c 	add.w	r2, r7, #12
 800f330:	f107 0308 	add.w	r3, r7, #8
 800f334:	4611      	mov	r1, r2
 800f336:	4618      	mov	r0, r3
 800f338:	f7fd fbcf 	bl	800cada <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f33c:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800f33e:	f107 0310 	add.w	r3, r7, #16
 800f342:	4618      	mov	r0, r3
 800f344:	f7ff fb64 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f348:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800f34a:	683a      	ldr	r2, [r7, #0]
 800f34c:	ed93 7a00 	vldr	s14, [r3]
 800f350:	edd3 7a01 	vldr	s15, [r3, #4]
 800f354:	7813      	ldrb	r3, [r2, #0]
 800f356:	eeb0 0a47 	vmov.f32	s0, s14
 800f35a:	eef0 0a67 	vmov.f32	s1, s15
 800f35e:	4622      	mov	r2, r4
 800f360:	2100      	movs	r1, #0
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f000 fa66 	bl	800f834 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
    }
 800f368:	bf00      	nop
 800f36a:	371c      	adds	r7, #28
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd90      	pop	{r4, r7, pc}

0800f370 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f1a3 0208 	sub.w	r2, r3, #8
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	601a      	str	r2, [r3, #0]
	return *this;
 800f384:	687b      	ldr	r3, [r7, #4]
      }
 800f386:	4618      	mov	r0, r3
 800f388:	370c      	adds	r7, #12
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr

0800f392 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f392:	b590      	push	{r4, r7, lr}
 800f394:	b083      	sub	sp, #12
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
 800f39a:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f39c:	1d3b      	adds	r3, r7, #4
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7ff fb2a 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	463b      	mov	r3, r7
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7ff fb25 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	f000 fb01 	bl	800f9ba <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 800f3b8:	bf00      	nop
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd90      	pop	{r4, r7, pc}

0800f3c0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>:
    __miter_base(_Iterator __it)
 800f3c0:	b480      	push	{r7}
 800f3c2:	b083      	sub	sp, #12
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	370c      	adds	r7, #12
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr

0800f3d6 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f3d6:	b5b0      	push	{r4, r5, r7, lr}
 800f3d8:	b084      	sub	sp, #16
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	60f8      	str	r0, [r7, #12]
 800f3de:	60b9      	str	r1, [r7, #8]
 800f3e0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f000 fb10 	bl	800fa08 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	68b8      	ldr	r0, [r7, #8]
 800f3ec:	f000 fb0c 	bl	800fa08 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f3f0:	4605      	mov	r5, r0
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 fb08 	bl	800fa08 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	4629      	mov	r1, r5
 800f3fe:	4620      	mov	r0, r4
 800f400:	f000 fb10 	bl	800fa24 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800f404:	4603      	mov	r3, r0
 800f406:	4619      	mov	r1, r3
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 fb1b 	bl	800fa44 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>
 800f40e:	4603      	mov	r3, r0
    }
 800f410:	4618      	mov	r0, r3
 800f412:	3710      	adds	r7, #16
 800f414:	46bd      	mov	sp, r7
 800f416:	bdb0      	pop	{r4, r5, r7, pc}

0800f418 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4618      	mov	r0, r3
 800f424:	370c      	adds	r7, #12
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr

0800f42e <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 800f42e:	b580      	push	{r7, lr}
 800f430:	b082      	sub	sp, #8
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
 800f436:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fd fbae 	bl	800cb9c <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	4618      	mov	r0, r3
 800f444:	3708      	adds	r7, #8
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 800f44a:	b590      	push	{r4, r7, lr}
 800f44c:	b085      	sub	sp, #20
 800f44e:	af00      	add	r7, sp, #0
 800f450:	60f8      	str	r0, [r7, #12]
 800f452:	60b9      	str	r1, [r7, #8]
 800f454:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 800f456:	68fc      	ldr	r4, [r7, #12]
 800f458:	1d3b      	adds	r3, r7, #4
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7ff facc 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f460:	4603      	mov	r3, r0
 800f462:	461a      	mov	r2, r3
 800f464:	68b9      	ldr	r1, [r7, #8]
 800f466:	4620      	mov	r0, r4
 800f468:	f7f4 fcc0 	bl	8003dec <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800f46c:	4603      	mov	r3, r0
 800f46e:	4618      	mov	r0, r3
 800f470:	3714      	adds	r7, #20
 800f472:	46bd      	mov	sp, r7
 800f474:	bd90      	pop	{r4, r7, pc}

0800f476 <_ZSt19__relocate_object_aIffN2ei7EiAllocIfEEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800f476:	b580      	push	{r7, lr}
 800f478:	b084      	sub	sp, #16
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	60f8      	str	r0, [r7, #12]
 800f47e:	60b9      	str	r1, [r7, #8]
 800f480:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800f482:	68b8      	ldr	r0, [r7, #8]
 800f484:	f7fb fa1d 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f488:	4603      	mov	r3, r0
 800f48a:	461a      	mov	r2, r3
 800f48c:	68f9      	ldr	r1, [r7, #12]
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7fd fd46 	bl	800cf20 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800f494:	68b8      	ldr	r0, [r7, #8]
 800f496:	f7fd f947 	bl	800c728 <_ZSt11__addressofIfEPT_RS0_>
 800f49a:	4603      	mov	r3, r0
 800f49c:	4619      	mov	r1, r3
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7fd f94d 	bl	800c73e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>
    }
 800f4a4:	bf00      	nop
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	370c      	adds	r7, #12
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f4c4:	b480      	push	{r7}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	370c      	adds	r7, #12
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr

0800f4da <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f4da:	b590      	push	{r4, r7, lr}
 800f4dc:	b085      	sub	sp, #20
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	60f8      	str	r0, [r7, #12]
 800f4e2:	60b9      	str	r1, [r7, #8]
 800f4e4:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f4e6:	68b8      	ldr	r0, [r7, #8]
 800f4e8:	f7ff ffec 	bl	800f4c4 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	681c      	ldr	r4, [r3, #0]
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f7f2 fa8c 	bl	8001a0e <_ZNSt9_Any_data9_M_accessEv>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	2004      	movs	r0, #4
 800f4fc:	f7f2 f903 	bl	8001706 <_ZnwjPv>
 800f500:	4603      	mov	r3, r0
 800f502:	601c      	str	r4, [r3, #0]
	  }
 800f504:	bf00      	nop
 800f506:	3714      	adds	r7, #20
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd90      	pop	{r4, r7, pc}

0800f50c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f7f2 fa7a 	bl	8001a0e <_ZNSt9_Any_data9_M_accessEv>
 800f51a:	4603      	mov	r3, r0
 800f51c:	4618      	mov	r0, r3
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f524:	b480      	push	{r7}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4618      	mov	r0, r3
 800f530:	370c      	adds	r7, #12
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr

0800f53a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f53a:	b590      	push	{r4, r7, lr}
 800f53c:	b085      	sub	sp, #20
 800f53e:	af00      	add	r7, sp, #0
 800f540:	60f8      	str	r0, [r7, #12]
 800f542:	60b9      	str	r1, [r7, #8]
 800f544:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f546:	68b8      	ldr	r0, [r7, #8]
 800f548:	f7ff ffec 	bl	800f524 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800f54c:	4604      	mov	r4, r0
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	f7f2 fa5d 	bl	8001a0e <_ZNSt9_Any_data9_M_accessEv>
 800f554:	4603      	mov	r3, r0
 800f556:	4619      	mov	r1, r3
 800f558:	2004      	movs	r0, #4
 800f55a:	f7f2 f8d4 	bl	8001706 <_ZnwjPv>
 800f55e:	4602      	mov	r2, r0
 800f560:	6823      	ldr	r3, [r4, #0]
 800f562:	6013      	str	r3, [r2, #0]
	  }
 800f564:	bf00      	nop
 800f566:	3714      	adds	r7, #20
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd90      	pop	{r4, r7, pc}

0800f56c <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f7f2 fa4a 	bl	8001a0e <_ZNSt9_Any_data9_M_accessEv>
 800f57a:	4603      	mov	r3, r0
 800f57c:	4618      	mov	r0, r3
 800f57e:	3708      	adds	r7, #8
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	4618      	mov	r0, r3
 800f590:	370c      	adds	r7, #12
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>:
      constexpr _Head_base()
 800f59a:	b480      	push	{r7}
 800f59c:	b083      	sub	sp, #12
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	370c      	adds	r7, #12
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr

0800f5b0 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	370c      	adds	r7, #12
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr

0800f5c6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f5c6:	b580      	push	{r7, lr}
 800f5c8:	b082      	sub	sp, #8
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f000 fa4f 	bl	800fa72 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3708      	adds	r7, #8
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800f5de:	b480      	push	{r7}
 800f5e0:	b083      	sub	sp, #12
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4618      	mov	r0, r3
 800f600:	370c      	adds	r7, #12
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f60a:	b480      	push	{r7}
 800f60c:	b083      	sub	sp, #12
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4618      	mov	r0, r3
 800f616:	370c      	adds	r7, #12
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4618      	mov	r0, r3
 800f62c:	370c      	adds	r7, #12
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr

0800f636 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f636:	b480      	push	{r7}
 800f638:	b083      	sub	sp, #12
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	6078      	str	r0, [r7, #4]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4618      	mov	r0, r3
 800f642:	370c      	adds	r7, #12
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr

0800f64c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800f64c:	b5b0      	push	{r4, r5, r7, lr}
 800f64e:	b08e      	sub	sp, #56	; 0x38
 800f650:	af00      	add	r7, sp, #0
 800f652:	6178      	str	r0, [r7, #20]
 800f654:	6139      	str	r1, [r7, #16]
 800f656:	60fa      	str	r2, [r7, #12]
 800f658:	ed87 0a02 	vstr	s0, [r7, #8]
 800f65c:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800f666:	e042      	b.n	800f6ee <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 800f668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f66a:	3301      	adds	r3, #1
 800f66c:	005b      	lsls	r3, r3, #1
 800f66e:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800f670:	f107 0314 	add.w	r3, r7, #20
 800f674:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f676:	4618      	mov	r0, r3
 800f678:	f7fe f810 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f67c:	4604      	mov	r4, r0
 800f67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f680:	1e5a      	subs	r2, r3, #1
 800f682:	f107 0314 	add.w	r3, r7, #20
 800f686:	4611      	mov	r1, r2
 800f688:	4618      	mov	r0, r3
 800f68a:	f7fe f807 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f68e:	4602      	mov	r2, r0
 800f690:	1d3b      	adds	r3, r7, #4
 800f692:	4621      	mov	r1, r4
 800f694:	4618      	mov	r0, r3
 800f696:	f7fe fe37 	bl	800e308 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d002      	beq.n	800f6a6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x5a>
	    __secondChild--;
 800f6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a2:	3b01      	subs	r3, #1
 800f6a4:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800f6a6:	f107 0314 	add.w	r3, r7, #20
 800f6aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fd fff5 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	623b      	str	r3, [r7, #32]
 800f6b6:	f107 0320 	add.w	r3, r7, #32
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fa f9c2 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fb f8fd 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f6c8:	4604      	mov	r4, r0
 800f6ca:	f107 0314 	add.w	r3, r7, #20
 800f6ce:	6939      	ldr	r1, [r7, #16]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7fd ffe3 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	627b      	str	r3, [r7, #36]	; 0x24
 800f6da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fa f9b0 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild;
 800f6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ec:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3b01      	subs	r3, #1
 800f6f2:	0fda      	lsrs	r2, r3, #31
 800f6f4:	4413      	add	r3, r2
 800f6f6:	105b      	asrs	r3, r3, #1
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	dbb3      	blt.n	800f668 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f003 0301 	and.w	r3, r3, #1
 800f706:	2b00      	cmp	r3, #0
 800f708:	d133      	bne.n	800f772 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x126>
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	3b02      	subs	r3, #2
 800f70e:	0fda      	lsrs	r2, r3, #31
 800f710:	4413      	add	r3, r2
 800f712:	105b      	asrs	r3, r3, #1
 800f714:	461a      	mov	r2, r3
 800f716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f718:	4293      	cmp	r3, r2
 800f71a:	d12a      	bne.n	800f772 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 800f71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f71e:	3301      	adds	r3, #1
 800f720:	005b      	lsls	r3, r3, #1
 800f722:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800f724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f726:	1e5a      	subs	r2, r3, #1
 800f728:	f107 0314 	add.w	r3, r7, #20
 800f72c:	4611      	mov	r1, r2
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fd ffb4 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f734:	4603      	mov	r3, r0
 800f736:	62bb      	str	r3, [r7, #40]	; 0x28
 800f738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fa f981 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f742:	4603      	mov	r3, r0
 800f744:	4618      	mov	r0, r3
 800f746:	f7fb f8bc 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f74a:	4604      	mov	r4, r0
 800f74c:	f107 0314 	add.w	r3, r7, #20
 800f750:	6939      	ldr	r1, [r7, #16]
 800f752:	4618      	mov	r0, r3
 800f754:	f7fd ffa2 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f758:	4603      	mov	r3, r0
 800f75a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f75c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f760:	4618      	mov	r0, r3
 800f762:	f7fa f96f 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f766:	4602      	mov	r2, r0
 800f768:	6823      	ldr	r3, [r4, #0]
 800f76a:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild - 1;
 800f76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f76e:	3b01      	subs	r3, #1
 800f770:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 800f772:	1d3b      	adds	r3, r7, #4
 800f774:	4618      	mov	r0, r3
 800f776:	f000 f987 	bl	800fa88 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 800f77a:	f107 031c 	add.w	r3, r7, #28
 800f77e:	4629      	mov	r1, r5
 800f780:	4618      	mov	r0, r3
 800f782:	f7f1 ff9a 	bl	80016ba <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800f786:	f107 0308 	add.w	r3, r7, #8
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fb f899 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f790:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800f792:	edd3 7a00 	vldr	s15, [r3]
 800f796:	f107 031c 	add.w	r3, r7, #28
 800f79a:	eeb0 0a67 	vmov.f32	s0, s15
 800f79e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7a0:	6939      	ldr	r1, [r7, #16]
 800f7a2:	6978      	ldr	r0, [r7, #20]
 800f7a4:	f000 f97b 	bl	800fa9e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>
    }
 800f7a8:	bf00      	nop
 800f7aa:	3738      	adds	r7, #56	; 0x38
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bdb0      	pop	{r4, r5, r7, pc}

0800f7b0 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	68b9      	ldr	r1, [r7, #8]
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f000 f9d9 	bl	800fb78 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3710      	adds	r7, #16
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800f7d0:	b40f      	push	{r0, r1, r2, r3}
 800f7d2:	b480      	push	{r7}
 800f7d4:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800f7d6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
	}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	b004      	add	sp, #16
 800f7e4:	4770      	bx	lr

0800f7e6 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b084      	sub	sp, #16
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	60f8      	str	r0, [r7, #12]
 800f7ee:	60b9      	str	r1, [r7, #8]
 800f7f0:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800f7f2:	68b8      	ldr	r0, [r7, #8]
 800f7f4:	f7ff f90c 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	68f9      	ldr	r1, [r7, #12]
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f7fe ff92 	bl	800e728 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800f804:	68b8      	ldr	r0, [r7, #8]
 800f806:	f7fd f8e4 	bl	800c9d2 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800f80a:	4603      	mov	r3, r0
 800f80c:	4619      	mov	r1, r3
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f7fd f8ea 	bl	800c9e8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
    }
 800f814:	bf00      	nop
 800f816:	3710      	adds	r7, #16
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 800f81c:	b480      	push	{r7}
 800f81e:	b083      	sub	sp, #12
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4618      	mov	r0, r3
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800f834:	b590      	push	{r4, r7, lr}
 800f836:	b08f      	sub	sp, #60	; 0x3c
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6178      	str	r0, [r7, #20]
 800f83c:	6139      	str	r1, [r7, #16]
 800f83e:	60fa      	str	r2, [r7, #12]
 800f840:	eeb0 7a40 	vmov.f32	s14, s0
 800f844:	eef0 7a60 	vmov.f32	s15, s1
 800f848:	703b      	strb	r3, [r7, #0]
 800f84a:	ed87 7a01 	vstr	s14, [r7, #4]
 800f84e:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800f85a:	e045      	b.n	800f8e8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xb4>
	  __secondChild = 2 * (__secondChild + 1);
 800f85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f85e:	3301      	adds	r3, #1
 800f860:	005b      	lsls	r3, r3, #1
 800f862:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800f864:	f107 0314 	add.w	r3, r7, #20
 800f868:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fe f950 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800f870:	4604      	mov	r4, r0
 800f872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f874:	1e5a      	subs	r2, r3, #1
 800f876:	f107 0314 	add.w	r3, r7, #20
 800f87a:	4611      	mov	r1, r2
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fe f947 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800f882:	4602      	mov	r2, r0
 800f884:	463b      	mov	r3, r7
 800f886:	4621      	mov	r1, r4
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fe ffd3 	bl	800e834 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d002      	beq.n	800f89a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x66>
	    __secondChild--;
 800f894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f896:	3b01      	subs	r3, #1
 800f898:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800f89a:	f107 0314 	add.w	r3, r7, #20
 800f89e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fe f935 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	623b      	str	r3, [r7, #32]
 800f8aa:	f107 0320 	add.w	r3, r7, #32
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7ff f8a2 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7ff f8aa 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f8bc:	4604      	mov	r4, r0
 800f8be:	f107 0314 	add.w	r3, r7, #20
 800f8c2:	6939      	ldr	r1, [r7, #16]
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7fe f923 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	627b      	str	r3, [r7, #36]	; 0x24
 800f8ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7ff f890 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	4622      	mov	r2, r4
 800f8dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8e0:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 800f8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e6:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	0fda      	lsrs	r2, r3, #31
 800f8ee:	4413      	add	r3, r2
 800f8f0:	105b      	asrs	r3, r3, #1
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	dbb0      	blt.n	800f85c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x28>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f003 0301 	and.w	r3, r3, #1
 800f900:	2b00      	cmp	r3, #0
 800f902:	d136      	bne.n	800f972 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	3b02      	subs	r3, #2
 800f908:	0fda      	lsrs	r2, r3, #31
 800f90a:	4413      	add	r3, r2
 800f90c:	105b      	asrs	r3, r3, #1
 800f90e:	461a      	mov	r2, r3
 800f910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f912:	4293      	cmp	r3, r2
 800f914:	d12d      	bne.n	800f972 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
	  __secondChild = 2 * (__secondChild + 1);
 800f916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f918:	3301      	adds	r3, #1
 800f91a:	005b      	lsls	r3, r3, #1
 800f91c:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800f91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f920:	1e5a      	subs	r2, r3, #1
 800f922:	f107 0314 	add.w	r3, r7, #20
 800f926:	4611      	mov	r1, r2
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fe f8f1 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800f92e:	4603      	mov	r3, r0
 800f930:	62bb      	str	r3, [r7, #40]	; 0x28
 800f932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f936:	4618      	mov	r0, r3
 800f938:	f7ff f85e 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f93c:	4603      	mov	r3, r0
 800f93e:	4618      	mov	r0, r3
 800f940:	f7ff f866 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f944:	4604      	mov	r4, r0
 800f946:	f107 0314 	add.w	r3, r7, #20
 800f94a:	6939      	ldr	r1, [r7, #16]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fe f8df 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800f952:	4603      	mov	r3, r0
 800f954:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7ff f84c 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f960:	4603      	mov	r3, r0
 800f962:	4622      	mov	r2, r4
 800f964:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f968:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 800f96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f96e:	3b01      	subs	r3, #1
 800f970:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 800f972:	463b      	mov	r3, r7
 800f974:	4618      	mov	r0, r3
 800f976:	f7ff fd4f 	bl	800f418 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800f97a:	4602      	mov	r2, r0
 800f97c:	f107 031c 	add.w	r3, r7, #28
 800f980:	4611      	mov	r1, r2
 800f982:	4618      	mov	r0, r3
 800f984:	f000 f908 	bl	800fb98 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800f988:	1d3b      	adds	r3, r7, #4
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7ff f840 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f990:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800f992:	f107 021c 	add.w	r2, r7, #28
 800f996:	ed93 7a00 	vldr	s14, [r3]
 800f99a:	edd3 7a01 	vldr	s15, [r3, #4]
 800f99e:	4613      	mov	r3, r2
 800f9a0:	eeb0 0a47 	vmov.f32	s0, s14
 800f9a4:	eef0 0a67 	vmov.f32	s1, s15
 800f9a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9aa:	6939      	ldr	r1, [r7, #16]
 800f9ac:	6978      	ldr	r0, [r7, #20]
 800f9ae:	f000 f901 	bl	800fbb4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>
    }
 800f9b2:	bf00      	nop
 800f9b4:	373c      	adds	r7, #60	; 0x3c
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd90      	pop	{r4, r7, pc}

0800f9ba <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b084      	sub	sp, #16
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
 800f9c2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7ff f823 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	f107 0308 	add.w	r3, r7, #8
 800f9d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9d4:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800f9d8:	6838      	ldr	r0, [r7, #0]
 800f9da:	f7ff f819 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9e6:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800f9ea:	f107 0308 	add.w	r3, r7, #8
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7ff f80e 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9fc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fa00:	bf00      	nop
 800fa02:	3710      	adds	r7, #16
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800fa10:	1d3b      	adds	r3, r7, #4
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fd f89e 	bl	800cb54 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3708      	adds	r7, #8
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	68b9      	ldr	r1, [r7, #8]
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f000 f934 	bl	800fca2 <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3710      	adds	r7, #16
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>:
    __niter_wrap(_From __from, _To __res)
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f7ff ffda 	bl	800fa08 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800fa54:	4602      	mov	r2, r0
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	1a9b      	subs	r3, r3, r2
 800fa5a:	10db      	asrs	r3, r3, #3
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	1d3b      	adds	r3, r7, #4
 800fa60:	4611      	mov	r1, r2
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fe f854 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3708      	adds	r7, #8
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa72:	b480      	push	{r7}
 800fa74:	b083      	sub	sp, #12
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	370c      	adds	r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800fa88:	b480      	push	{r7}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	4618      	mov	r0, r3
 800fa94:	370c      	adds	r7, #12
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr

0800fa9e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800fa9e:	b590      	push	{r4, r7, lr}
 800faa0:	b08b      	sub	sp, #44	; 0x2c
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6178      	str	r0, [r7, #20]
 800faa6:	6139      	str	r1, [r7, #16]
 800faa8:	60fa      	str	r2, [r7, #12]
 800faaa:	ed87 0a02 	vstr	s0, [r7, #8]
 800faae:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	3b01      	subs	r3, #1
 800fab4:	0fda      	lsrs	r2, r3, #31
 800fab6:	4413      	add	r3, r2
 800fab8:	105b      	asrs	r3, r3, #1
 800faba:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800fabc:	e029      	b.n	800fb12 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800fabe:	f107 0314 	add.w	r3, r7, #20
 800fac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7fd fde9 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800faca:	4603      	mov	r3, r0
 800facc:	61bb      	str	r3, [r7, #24]
 800face:	f107 0318 	add.w	r3, r7, #24
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7f9 ffb6 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fad8:	4603      	mov	r3, r0
 800fada:	4618      	mov	r0, r3
 800fadc:	f7fa fef1 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fae0:	4604      	mov	r4, r0
 800fae2:	f107 0314 	add.w	r3, r7, #20
 800fae6:	6939      	ldr	r1, [r7, #16]
 800fae8:	4618      	mov	r0, r3
 800faea:	f7fd fdd7 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800faee:	4603      	mov	r3, r0
 800faf0:	61fb      	str	r3, [r7, #28]
 800faf2:	f107 031c 	add.w	r3, r7, #28
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7f9 ffa4 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fafc:	4602      	mov	r2, r0
 800fafe:	6823      	ldr	r3, [r4, #0]
 800fb00:	6013      	str	r3, [r2, #0]
	  __holeIndex = __parent;
 800fb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb04:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	0fda      	lsrs	r2, r3, #31
 800fb0c:	4413      	add	r3, r2
 800fb0e:	105b      	asrs	r3, r3, #1
 800fb10:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800fb12:	693a      	ldr	r2, [r7, #16]
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	dd11      	ble.n	800fb3e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa0>
 800fb1a:	f107 0314 	add.w	r3, r7, #20
 800fb1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fd fdbb 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fb26:	4601      	mov	r1, r0
 800fb28:	f107 0308 	add.w	r3, r7, #8
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f8c7 	bl	800fcc2 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEfEEbT_RT0_>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d001      	beq.n	800fb3e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa0>
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	e000      	b.n	800fb40 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa2>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d1bc      	bne.n	800fabe <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800fb44:	f107 0308 	add.w	r3, r7, #8
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7fa feba 	bl	800a8c2 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fb4e:	4604      	mov	r4, r0
 800fb50:	f107 0314 	add.w	r3, r7, #20
 800fb54:	6939      	ldr	r1, [r7, #16]
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7fd fda0 	bl	800d69c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	623b      	str	r3, [r7, #32]
 800fb60:	f107 0320 	add.w	r3, r7, #32
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7f9 ff6d 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	6823      	ldr	r3, [r4, #0]
 800fb6e:	6013      	str	r3, [r2, #0]
    }
 800fb70:	bf00      	nop
 800fb72:	372c      	adds	r7, #44	; 0x2c
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd90      	pop	{r4, r7, pc}

0800fb78 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	68b9      	ldr	r1, [r7, #8]
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f000 f8b7 	bl	800fcfc <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 800fb8e:	4603      	mov	r3, r0
    }
 800fb90:	4618      	mov	r0, r3
 800fb92:	3710      	adds	r7, #16
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7fc fff9 	bl	800cb9c <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	4618      	mov	r0, r3
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800fbb4:	b590      	push	{r4, r7, lr}
 800fbb6:	b08b      	sub	sp, #44	; 0x2c
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6178      	str	r0, [r7, #20]
 800fbbc:	6139      	str	r1, [r7, #16]
 800fbbe:	60fa      	str	r2, [r7, #12]
 800fbc0:	eeb0 7a40 	vmov.f32	s14, s0
 800fbc4:	eef0 7a60 	vmov.f32	s15, s1
 800fbc8:	603b      	str	r3, [r7, #0]
 800fbca:	ed87 7a01 	vstr	s14, [r7, #4]
 800fbce:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	3b01      	subs	r3, #1
 800fbd6:	0fda      	lsrs	r2, r3, #31
 800fbd8:	4413      	add	r3, r2
 800fbda:	105b      	asrs	r3, r3, #1
 800fbdc:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800fbde:	e02c      	b.n	800fc3a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x86>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800fbe0:	f107 0314 	add.w	r3, r7, #20
 800fbe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fd ff92 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fbec:	4603      	mov	r3, r0
 800fbee:	61bb      	str	r3, [r7, #24]
 800fbf0:	f107 0318 	add.w	r3, r7, #24
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fe feff 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fe ff07 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fc02:	4604      	mov	r4, r0
 800fc04:	f107 0314 	add.w	r3, r7, #20
 800fc08:	6939      	ldr	r1, [r7, #16]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7fd ff80 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fc10:	4603      	mov	r3, r0
 800fc12:	61fb      	str	r3, [r7, #28]
 800fc14:	f107 031c 	add.w	r3, r7, #28
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fe feed 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	4622      	mov	r2, r4
 800fc22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc26:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2c:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	3b01      	subs	r3, #1
 800fc32:	0fda      	lsrs	r2, r3, #31
 800fc34:	4413      	add	r3, r2
 800fc36:	105b      	asrs	r3, r3, #1
 800fc38:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800fc3a:	693a      	ldr	r2, [r7, #16]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	dd10      	ble.n	800fc64 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb0>
 800fc42:	f107 0314 	add.w	r3, r7, #20
 800fc46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7fd ff61 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fc4e:	4601      	mov	r1, r0
 800fc50:	1d3b      	adds	r3, r7, #4
 800fc52:	461a      	mov	r2, r3
 800fc54:	6838      	ldr	r0, [r7, #0]
 800fc56:	f000 f873 	bl	800fd40 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d001      	beq.n	800fc64 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb0>
 800fc60:	2301      	movs	r3, #1
 800fc62:	e000      	b.n	800fc66 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb2>
 800fc64:	2300      	movs	r3, #0
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d1ba      	bne.n	800fbe0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x2c>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800fc6a:	1d3b      	adds	r3, r7, #4
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7fe fecf 	bl	800ea10 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fc72:	4604      	mov	r4, r0
 800fc74:	f107 0314 	add.w	r3, r7, #20
 800fc78:	6939      	ldr	r1, [r7, #16]
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7fd ff48 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fc80:	4603      	mov	r3, r0
 800fc82:	623b      	str	r3, [r7, #32]
 800fc84:	f107 0320 	add.w	r3, r7, #32
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fe feb5 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	4622      	mov	r2, r4
 800fc92:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc96:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fc9a:	bf00      	nop
 800fc9c:	372c      	adds	r7, #44	; 0x2c
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd90      	pop	{r4, r7, pc}

0800fca2 <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b084      	sub	sp, #16
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	60f8      	str	r0, [r7, #12]
 800fcaa:	60b9      	str	r1, [r7, #8]
 800fcac:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	68b9      	ldr	r1, [r7, #8]
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f000 f85b 	bl	800fd6e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 800fcb8:	4603      	mov	r3, r0
    }
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b084      	sub	sp, #16
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	60f8      	str	r0, [r7, #12]
 800fcca:	60b9      	str	r1, [r7, #8]
 800fccc:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 800fcce:	f107 0308 	add.w	r3, r7, #8
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7f9 feb6 	bl	8009a44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	ed93 7a00 	vldr	s14, [r3]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	edd3 7a00 	vldr	s15, [r3]
 800fce4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcec:	bf4c      	ite	mi
 800fcee:	2301      	movmi	r3, #1
 800fcf0:	2300      	movpl	r3, #0
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3710      	adds	r7, #16
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b086      	sub	sp, #24
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800fd08:	68ba      	ldr	r2, [r7, #8]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	1ad3      	subs	r3, r2, r3
 800fd0e:	109b      	asrs	r3, r3, #2
 800fd10:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800fd12:	697b      	ldr	r3, [r7, #20]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d00a      	beq.n	800fd2e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	425b      	negs	r3, r3
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	18d0      	adds	r0, r2, r3
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	461a      	mov	r2, r3
 800fd28:	68f9      	ldr	r1, [r7, #12]
 800fd2a:	f00f fdc1 	bl	801f8b0 <memmove>
	  return __result - _Num;
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	425b      	negs	r3, r3
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	4413      	add	r3, r2
	}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3718      	adds	r7, #24
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 800fd40:	b590      	push	{r4, r7, lr}
 800fd42:	b085      	sub	sp, #20
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 800fd4c:	68fc      	ldr	r4, [r7, #12]
 800fd4e:	f107 0308 	add.w	r3, r7, #8
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fe fe50 	bl	800e9f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f7f4 f844 	bl	8003dec <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800fd64:	4603      	mov	r3, r0
 800fd66:	4618      	mov	r0, r3
 800fd68:	3714      	adds	r7, #20
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd90      	pop	{r4, r7, pc}

0800fd6e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b086      	sub	sp, #24
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	60f8      	str	r0, [r7, #12]
 800fd76:	60b9      	str	r1, [r7, #8]
 800fd78:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	1ad3      	subs	r3, r2, r3
 800fd80:	10db      	asrs	r3, r3, #3
 800fd82:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d00a      	beq.n	800fda0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	00db      	lsls	r3, r3, #3
 800fd8e:	425b      	negs	r3, r3
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	18d0      	adds	r0, r2, r3
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	00db      	lsls	r3, r3, #3
 800fd98:	461a      	mov	r2, r3
 800fd9a:	68f9      	ldr	r1, [r7, #12]
 800fd9c:	f00f fd88 	bl	801f8b0 <memmove>
	  return __result - _Num;
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	00db      	lsls	r3, r3, #3
 800fda4:	425b      	negs	r3, r3
 800fda6:	687a      	ldr	r2, [r7, #4]
 800fda8:	4413      	add	r3, r2
	}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3718      	adds	r7, #24
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
	...

0800fdb4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b084      	sub	sp, #16
 800fdb8:	af02      	add	r7, sp, #8
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d126      	bne.n	800fe12 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d121      	bne.n	800fe12 <_Z41__static_initialization_and_destruction_0ii+0x5e>
HX711_ADC LoadCellL(dtL_GPIO_Port,dtL_Pin,sckL_GPIO_Port,sckL_Pin);
 800fdce:	2304      	movs	r3, #4
 800fdd0:	9300      	str	r3, [sp, #0]
 800fdd2:	4b12      	ldr	r3, [pc, #72]	; (800fe1c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800fdd4:	2210      	movs	r2, #16
 800fdd6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800fdda:	4811      	ldr	r0, [pc, #68]	; (800fe20 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800fddc:	f7f1 f968 	bl	80010b0 <_ZN9HX711_ADCC1EP12GPIO_TypeDeftS1_t>
HX711_ADC LoadCellF(dtF_GPIO_Port,dtF_Pin,sckF_GPIO_Port,sckF_Pin);
 800fde0:	2310      	movs	r3, #16
 800fde2:	9300      	str	r3, [sp, #0]
 800fde4:	4b0d      	ldr	r3, [pc, #52]	; (800fe1c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800fde6:	2202      	movs	r2, #2
 800fde8:	490e      	ldr	r1, [pc, #56]	; (800fe24 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800fdea:	480f      	ldr	r0, [pc, #60]	; (800fe28 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800fdec:	f7f1 f960 	bl	80010b0 <_ZN9HX711_ADCC1EP12GPIO_TypeDeftS1_t>
HX711_ADC LoadCellR(dtR_GPIO_Port,dtR_Pin,sckR_GPIO_Port,sckR_Pin);
 800fdf0:	2308      	movs	r3, #8
 800fdf2:	9300      	str	r3, [sp, #0]
 800fdf4:	4b09      	ldr	r3, [pc, #36]	; (800fe1c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800fdf6:	2208      	movs	r2, #8
 800fdf8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800fdfc:	480b      	ldr	r0, [pc, #44]	; (800fe2c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800fdfe:	f7f1 f957 	bl	80010b0 <_ZN9HX711_ADCC1EP12GPIO_TypeDeftS1_t>
HX711_ADC LoadCellB(dtB_GPIO_Port,dtB_Pin,sckB_GPIO_Port,sckB_Pin);
 800fe02:	2320      	movs	r3, #32
 800fe04:	9300      	str	r3, [sp, #0]
 800fe06:	4b05      	ldr	r3, [pc, #20]	; (800fe1c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800fe08:	2210      	movs	r2, #16
 800fe0a:	4906      	ldr	r1, [pc, #24]	; (800fe24 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800fe0c:	4808      	ldr	r0, [pc, #32]	; (800fe30 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800fe0e:	f7f1 f94f 	bl	80010b0 <_ZN9HX711_ADCC1EP12GPIO_TypeDeftS1_t>
}
 800fe12:	bf00      	nop
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	48000800 	.word	0x48000800
 800fe20:	20000c34 	.word	0x20000c34
 800fe24:	48000400 	.word	0x48000400
 800fe28:	20000cd8 	.word	0x20000cd8
 800fe2c:	20000d7c 	.word	0x20000d7c
 800fe30:	20000e20 	.word	0x20000e20

0800fe34 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 800fe34:	b580      	push	{r7, lr}
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fe3c:	2001      	movs	r0, #1
 800fe3e:	f7ff ffb9 	bl	800fdb4 <_Z41__static_initialization_and_destruction_0ii>
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fe4a:	4b0f      	ldr	r3, [pc, #60]	; (800fe88 <HAL_MspInit+0x44>)
 800fe4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe4e:	4a0e      	ldr	r2, [pc, #56]	; (800fe88 <HAL_MspInit+0x44>)
 800fe50:	f043 0301 	orr.w	r3, r3, #1
 800fe54:	6613      	str	r3, [r2, #96]	; 0x60
 800fe56:	4b0c      	ldr	r3, [pc, #48]	; (800fe88 <HAL_MspInit+0x44>)
 800fe58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe5a:	f003 0301 	and.w	r3, r3, #1
 800fe5e:	607b      	str	r3, [r7, #4]
 800fe60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800fe62:	4b09      	ldr	r3, [pc, #36]	; (800fe88 <HAL_MspInit+0x44>)
 800fe64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe66:	4a08      	ldr	r2, [pc, #32]	; (800fe88 <HAL_MspInit+0x44>)
 800fe68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe6c:	6593      	str	r3, [r2, #88]	; 0x58
 800fe6e:	4b06      	ldr	r3, [pc, #24]	; (800fe88 <HAL_MspInit+0x44>)
 800fe70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe76:	603b      	str	r3, [r7, #0]
 800fe78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fe7a:	bf00      	nop
 800fe7c:	370c      	adds	r7, #12
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr
 800fe86:	bf00      	nop
 800fe88:	40021000 	.word	0x40021000

0800fe8c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b0ac      	sub	sp, #176	; 0xb0
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800fe98:	2200      	movs	r2, #0
 800fe9a:	601a      	str	r2, [r3, #0]
 800fe9c:	605a      	str	r2, [r3, #4]
 800fe9e:	609a      	str	r2, [r3, #8]
 800fea0:	60da      	str	r2, [r3, #12]
 800fea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800fea4:	f107 0314 	add.w	r3, r7, #20
 800fea8:	2288      	movs	r2, #136	; 0x88
 800feaa:	2100      	movs	r1, #0
 800feac:	4618      	mov	r0, r3
 800feae:	f00f fd19 	bl	801f8e4 <memset>
  if(DFSDM1_Init == 0)
 800feb2:	4b25      	ldr	r3, [pc, #148]	; (800ff48 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d142      	bne.n	800ff40 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800feba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800febe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800fec0:	2300      	movs	r3, #0
 800fec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fec6:	f107 0314 	add.w	r3, r7, #20
 800feca:	4618      	mov	r0, r3
 800fecc:	f002 fa2a 	bl	8012324 <HAL_RCCEx_PeriphCLKConfig>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d001      	beq.n	800feda <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800fed6:	f7f9 fc49 	bl	800976c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800feda:	4b1c      	ldr	r3, [pc, #112]	; (800ff4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800fedc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fede:	4a1b      	ldr	r2, [pc, #108]	; (800ff4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800fee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fee4:	6613      	str	r3, [r2, #96]	; 0x60
 800fee6:	4b19      	ldr	r3, [pc, #100]	; (800ff4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800fee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800feea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800feee:	613b      	str	r3, [r7, #16]
 800fef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800fef2:	4b16      	ldr	r3, [pc, #88]	; (800ff4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800fef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fef6:	4a15      	ldr	r2, [pc, #84]	; (800ff4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800fef8:	f043 0310 	orr.w	r3, r3, #16
 800fefc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fefe:	4b13      	ldr	r3, [pc, #76]	; (800ff4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800ff00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff02:	f003 0310 	and.w	r3, r3, #16
 800ff06:	60fb      	str	r3, [r7, #12]
 800ff08:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800ff0a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800ff0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff12:	2302      	movs	r3, #2
 800ff14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800ff24:	2306      	movs	r3, #6
 800ff26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ff2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ff2e:	4619      	mov	r1, r3
 800ff30:	4807      	ldr	r0, [pc, #28]	; (800ff50 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800ff32:	f000 fe3f 	bl	8010bb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800ff36:	4b04      	ldr	r3, [pc, #16]	; (800ff48 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	4a02      	ldr	r2, [pc, #8]	; (800ff48 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800ff3e:	6013      	str	r3, [r2, #0]
  }

}
 800ff40:	bf00      	nop
 800ff42:	37b0      	adds	r7, #176	; 0xb0
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	20000edc 	.word	0x20000edc
 800ff4c:	40021000 	.word	0x40021000
 800ff50:	48001000 	.word	0x48001000

0800ff54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b0ac      	sub	sp, #176	; 0xb0
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ff60:	2200      	movs	r2, #0
 800ff62:	601a      	str	r2, [r3, #0]
 800ff64:	605a      	str	r2, [r3, #4]
 800ff66:	609a      	str	r2, [r3, #8]
 800ff68:	60da      	str	r2, [r3, #12]
 800ff6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ff6c:	f107 0314 	add.w	r3, r7, #20
 800ff70:	2288      	movs	r2, #136	; 0x88
 800ff72:	2100      	movs	r1, #0
 800ff74:	4618      	mov	r0, r3
 800ff76:	f00f fcb5 	bl	801f8e4 <memset>
  if(hi2c->Instance==I2C2)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	4a21      	ldr	r2, [pc, #132]	; (8010004 <HAL_I2C_MspInit+0xb0>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d13b      	bne.n	800fffc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800ff84:	2380      	movs	r3, #128	; 0x80
 800ff86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ff8c:	f107 0314 	add.w	r3, r7, #20
 800ff90:	4618      	mov	r0, r3
 800ff92:	f002 f9c7 	bl	8012324 <HAL_RCCEx_PeriphCLKConfig>
 800ff96:	4603      	mov	r3, r0
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d001      	beq.n	800ffa0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800ff9c:	f7f9 fbe6 	bl	800976c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ffa0:	4b19      	ldr	r3, [pc, #100]	; (8010008 <HAL_I2C_MspInit+0xb4>)
 800ffa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffa4:	4a18      	ldr	r2, [pc, #96]	; (8010008 <HAL_I2C_MspInit+0xb4>)
 800ffa6:	f043 0302 	orr.w	r3, r3, #2
 800ffaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ffac:	4b16      	ldr	r3, [pc, #88]	; (8010008 <HAL_I2C_MspInit+0xb4>)
 800ffae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffb0:	f003 0302 	and.w	r3, r3, #2
 800ffb4:	613b      	str	r3, [r7, #16]
 800ffb6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800ffb8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ffbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ffc0:	2312      	movs	r3, #18
 800ffc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ffcc:	2303      	movs	r3, #3
 800ffce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800ffd2:	2304      	movs	r3, #4
 800ffd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ffd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ffdc:	4619      	mov	r1, r3
 800ffde:	480b      	ldr	r0, [pc, #44]	; (801000c <HAL_I2C_MspInit+0xb8>)
 800ffe0:	f000 fde8 	bl	8010bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ffe4:	4b08      	ldr	r3, [pc, #32]	; (8010008 <HAL_I2C_MspInit+0xb4>)
 800ffe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffe8:	4a07      	ldr	r2, [pc, #28]	; (8010008 <HAL_I2C_MspInit+0xb4>)
 800ffea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ffee:	6593      	str	r3, [r2, #88]	; 0x58
 800fff0:	4b05      	ldr	r3, [pc, #20]	; (8010008 <HAL_I2C_MspInit+0xb4>)
 800fff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fff8:	60fb      	str	r3, [r7, #12]
 800fffa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800fffc:	bf00      	nop
 800fffe:	37b0      	adds	r7, #176	; 0xb0
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	40005800 	.word	0x40005800
 8010008:	40021000 	.word	0x40021000
 801000c:	48000400 	.word	0x48000400

08010010 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b08a      	sub	sp, #40	; 0x28
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010018:	f107 0314 	add.w	r3, r7, #20
 801001c:	2200      	movs	r2, #0
 801001e:	601a      	str	r2, [r3, #0]
 8010020:	605a      	str	r2, [r3, #4]
 8010022:	609a      	str	r2, [r3, #8]
 8010024:	60da      	str	r2, [r3, #12]
 8010026:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4a17      	ldr	r2, [pc, #92]	; (801008c <HAL_QSPI_MspInit+0x7c>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d128      	bne.n	8010084 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8010032:	4b17      	ldr	r3, [pc, #92]	; (8010090 <HAL_QSPI_MspInit+0x80>)
 8010034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010036:	4a16      	ldr	r2, [pc, #88]	; (8010090 <HAL_QSPI_MspInit+0x80>)
 8010038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801003c:	6513      	str	r3, [r2, #80]	; 0x50
 801003e:	4b14      	ldr	r3, [pc, #80]	; (8010090 <HAL_QSPI_MspInit+0x80>)
 8010040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010046:	613b      	str	r3, [r7, #16]
 8010048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 801004a:	4b11      	ldr	r3, [pc, #68]	; (8010090 <HAL_QSPI_MspInit+0x80>)
 801004c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801004e:	4a10      	ldr	r2, [pc, #64]	; (8010090 <HAL_QSPI_MspInit+0x80>)
 8010050:	f043 0310 	orr.w	r3, r3, #16
 8010054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010056:	4b0e      	ldr	r3, [pc, #56]	; (8010090 <HAL_QSPI_MspInit+0x80>)
 8010058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801005a:	f003 0310 	and.w	r3, r3, #16
 801005e:	60fb      	str	r3, [r7, #12]
 8010060:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8010062:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8010066:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010068:	2302      	movs	r3, #2
 801006a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801006c:	2300      	movs	r3, #0
 801006e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010070:	2303      	movs	r3, #3
 8010072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8010074:	230a      	movs	r3, #10
 8010076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010078:	f107 0314 	add.w	r3, r7, #20
 801007c:	4619      	mov	r1, r3
 801007e:	4805      	ldr	r0, [pc, #20]	; (8010094 <HAL_QSPI_MspInit+0x84>)
 8010080:	f000 fd98 	bl	8010bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8010084:	bf00      	nop
 8010086:	3728      	adds	r7, #40	; 0x28
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	a0001000 	.word	0xa0001000
 8010090:	40021000 	.word	0x40021000
 8010094:	48001000 	.word	0x48001000

08010098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b08a      	sub	sp, #40	; 0x28
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100a0:	f107 0314 	add.w	r3, r7, #20
 80100a4:	2200      	movs	r2, #0
 80100a6:	601a      	str	r2, [r3, #0]
 80100a8:	605a      	str	r2, [r3, #4]
 80100aa:	609a      	str	r2, [r3, #8]
 80100ac:	60da      	str	r2, [r3, #12]
 80100ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a17      	ldr	r2, [pc, #92]	; (8010114 <HAL_SPI_MspInit+0x7c>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d128      	bne.n	801010c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80100ba:	4b17      	ldr	r3, [pc, #92]	; (8010118 <HAL_SPI_MspInit+0x80>)
 80100bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100be:	4a16      	ldr	r2, [pc, #88]	; (8010118 <HAL_SPI_MspInit+0x80>)
 80100c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100c4:	6593      	str	r3, [r2, #88]	; 0x58
 80100c6:	4b14      	ldr	r3, [pc, #80]	; (8010118 <HAL_SPI_MspInit+0x80>)
 80100c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80100ce:	613b      	str	r3, [r7, #16]
 80100d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80100d2:	4b11      	ldr	r3, [pc, #68]	; (8010118 <HAL_SPI_MspInit+0x80>)
 80100d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100d6:	4a10      	ldr	r2, [pc, #64]	; (8010118 <HAL_SPI_MspInit+0x80>)
 80100d8:	f043 0304 	orr.w	r3, r3, #4
 80100dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80100de:	4b0e      	ldr	r3, [pc, #56]	; (8010118 <HAL_SPI_MspInit+0x80>)
 80100e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100e2:	f003 0304 	and.w	r3, r3, #4
 80100e6:	60fb      	str	r3, [r7, #12]
 80100e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80100ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80100ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100f0:	2302      	movs	r3, #2
 80100f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100f4:	2300      	movs	r3, #0
 80100f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80100f8:	2303      	movs	r3, #3
 80100fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80100fc:	2306      	movs	r3, #6
 80100fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010100:	f107 0314 	add.w	r3, r7, #20
 8010104:	4619      	mov	r1, r3
 8010106:	4805      	ldr	r0, [pc, #20]	; (801011c <HAL_SPI_MspInit+0x84>)
 8010108:	f000 fd54 	bl	8010bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 801010c:	bf00      	nop
 801010e:	3728      	adds	r7, #40	; 0x28
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	40003c00 	.word	0x40003c00
 8010118:	40021000 	.word	0x40021000
 801011c:	48000800 	.word	0x48000800

08010120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b0ae      	sub	sp, #184	; 0xb8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010128:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801012c:	2200      	movs	r2, #0
 801012e:	601a      	str	r2, [r3, #0]
 8010130:	605a      	str	r2, [r3, #4]
 8010132:	609a      	str	r2, [r3, #8]
 8010134:	60da      	str	r2, [r3, #12]
 8010136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010138:	f107 031c 	add.w	r3, r7, #28
 801013c:	2288      	movs	r2, #136	; 0x88
 801013e:	2100      	movs	r1, #0
 8010140:	4618      	mov	r0, r3
 8010142:	f00f fbcf 	bl	801f8e4 <memset>
  if(huart->Instance==USART1)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a42      	ldr	r2, [pc, #264]	; (8010254 <HAL_UART_MspInit+0x134>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d13b      	bne.n	80101c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8010150:	2301      	movs	r3, #1
 8010152:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8010154:	2300      	movs	r3, #0
 8010156:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010158:	f107 031c 	add.w	r3, r7, #28
 801015c:	4618      	mov	r0, r3
 801015e:	f002 f8e1 	bl	8012324 <HAL_RCCEx_PeriphCLKConfig>
 8010162:	4603      	mov	r3, r0
 8010164:	2b00      	cmp	r3, #0
 8010166:	d001      	beq.n	801016c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8010168:	f7f9 fb00 	bl	800976c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801016c:	4b3a      	ldr	r3, [pc, #232]	; (8010258 <HAL_UART_MspInit+0x138>)
 801016e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010170:	4a39      	ldr	r2, [pc, #228]	; (8010258 <HAL_UART_MspInit+0x138>)
 8010172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010176:	6613      	str	r3, [r2, #96]	; 0x60
 8010178:	4b37      	ldr	r3, [pc, #220]	; (8010258 <HAL_UART_MspInit+0x138>)
 801017a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801017c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010180:	61bb      	str	r3, [r7, #24]
 8010182:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010184:	4b34      	ldr	r3, [pc, #208]	; (8010258 <HAL_UART_MspInit+0x138>)
 8010186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010188:	4a33      	ldr	r2, [pc, #204]	; (8010258 <HAL_UART_MspInit+0x138>)
 801018a:	f043 0302 	orr.w	r3, r3, #2
 801018e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010190:	4b31      	ldr	r3, [pc, #196]	; (8010258 <HAL_UART_MspInit+0x138>)
 8010192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010194:	f003 0302 	and.w	r3, r3, #2
 8010198:	617b      	str	r3, [r7, #20]
 801019a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 801019c:	23c0      	movs	r3, #192	; 0xc0
 801019e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101a2:	2302      	movs	r3, #2
 80101a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101a8:	2300      	movs	r3, #0
 80101aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101ae:	2303      	movs	r3, #3
 80101b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80101b4:	2307      	movs	r3, #7
 80101b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80101ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80101be:	4619      	mov	r1, r3
 80101c0:	4826      	ldr	r0, [pc, #152]	; (801025c <HAL_UART_MspInit+0x13c>)
 80101c2:	f000 fcf7 	bl	8010bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80101c6:	e040      	b.n	801024a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	4a24      	ldr	r2, [pc, #144]	; (8010260 <HAL_UART_MspInit+0x140>)
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d13b      	bne.n	801024a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80101d2:	2304      	movs	r3, #4
 80101d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80101d6:	2300      	movs	r3, #0
 80101d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80101da:	f107 031c 	add.w	r3, r7, #28
 80101de:	4618      	mov	r0, r3
 80101e0:	f002 f8a0 	bl	8012324 <HAL_RCCEx_PeriphCLKConfig>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d001      	beq.n	80101ee <HAL_UART_MspInit+0xce>
      Error_Handler();
 80101ea:	f7f9 fabf 	bl	800976c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80101ee:	4b1a      	ldr	r3, [pc, #104]	; (8010258 <HAL_UART_MspInit+0x138>)
 80101f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101f2:	4a19      	ldr	r2, [pc, #100]	; (8010258 <HAL_UART_MspInit+0x138>)
 80101f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80101f8:	6593      	str	r3, [r2, #88]	; 0x58
 80101fa:	4b17      	ldr	r3, [pc, #92]	; (8010258 <HAL_UART_MspInit+0x138>)
 80101fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010202:	613b      	str	r3, [r7, #16]
 8010204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010206:	4b14      	ldr	r3, [pc, #80]	; (8010258 <HAL_UART_MspInit+0x138>)
 8010208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801020a:	4a13      	ldr	r2, [pc, #76]	; (8010258 <HAL_UART_MspInit+0x138>)
 801020c:	f043 0308 	orr.w	r3, r3, #8
 8010210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010212:	4b11      	ldr	r3, [pc, #68]	; (8010258 <HAL_UART_MspInit+0x138>)
 8010214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010216:	f003 0308 	and.w	r3, r3, #8
 801021a:	60fb      	str	r3, [r7, #12]
 801021c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 801021e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010226:	2302      	movs	r3, #2
 8010228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801022c:	2300      	movs	r3, #0
 801022e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010232:	2303      	movs	r3, #3
 8010234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010238:	2307      	movs	r3, #7
 801023a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801023e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010242:	4619      	mov	r1, r3
 8010244:	4807      	ldr	r0, [pc, #28]	; (8010264 <HAL_UART_MspInit+0x144>)
 8010246:	f000 fcb5 	bl	8010bb4 <HAL_GPIO_Init>
}
 801024a:	bf00      	nop
 801024c:	37b8      	adds	r7, #184	; 0xb8
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	40013800 	.word	0x40013800
 8010258:	40021000 	.word	0x40021000
 801025c:	48000400 	.word	0x48000400
 8010260:	40004800 	.word	0x40004800
 8010264:	48000c00 	.word	0x48000c00

08010268 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b0ac      	sub	sp, #176	; 0xb0
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010270:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010274:	2200      	movs	r2, #0
 8010276:	601a      	str	r2, [r3, #0]
 8010278:	605a      	str	r2, [r3, #4]
 801027a:	609a      	str	r2, [r3, #8]
 801027c:	60da      	str	r2, [r3, #12]
 801027e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010280:	f107 0314 	add.w	r3, r7, #20
 8010284:	2288      	movs	r2, #136	; 0x88
 8010286:	2100      	movs	r1, #0
 8010288:	4618      	mov	r0, r3
 801028a:	f00f fb2b 	bl	801f8e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010296:	d17c      	bne.n	8010392 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801029c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801029e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80102a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80102a6:	2301      	movs	r3, #1
 80102a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80102aa:	2301      	movs	r3, #1
 80102ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80102ae:	2318      	movs	r3, #24
 80102b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80102b2:	2307      	movs	r3, #7
 80102b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80102b6:	2302      	movs	r3, #2
 80102b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80102ba:	2302      	movs	r3, #2
 80102bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80102be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80102c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80102c4:	f107 0314 	add.w	r3, r7, #20
 80102c8:	4618      	mov	r0, r3
 80102ca:	f002 f82b 	bl	8012324 <HAL_RCCEx_PeriphCLKConfig>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d001      	beq.n	80102d8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80102d4:	f7f9 fa4a 	bl	800976c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102d8:	4b30      	ldr	r3, [pc, #192]	; (801039c <HAL_PCD_MspInit+0x134>)
 80102da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102dc:	4a2f      	ldr	r2, [pc, #188]	; (801039c <HAL_PCD_MspInit+0x134>)
 80102de:	f043 0301 	orr.w	r3, r3, #1
 80102e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80102e4:	4b2d      	ldr	r3, [pc, #180]	; (801039c <HAL_PCD_MspInit+0x134>)
 80102e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102e8:	f003 0301 	and.w	r3, r3, #1
 80102ec:	613b      	str	r3, [r7, #16]
 80102ee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80102f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80102f8:	2300      	movs	r3, #0
 80102fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102fe:	2300      	movs	r3, #0
 8010300:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8010304:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010308:	4619      	mov	r1, r3
 801030a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801030e:	f000 fc51 	bl	8010bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8010312:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801031a:	2302      	movs	r3, #2
 801031c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010320:	2300      	movs	r3, #0
 8010322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010326:	2303      	movs	r3, #3
 8010328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801032c:	230a      	movs	r3, #10
 801032e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010332:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010336:	4619      	mov	r1, r3
 8010338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801033c:	f000 fc3a 	bl	8010bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010340:	4b16      	ldr	r3, [pc, #88]	; (801039c <HAL_PCD_MspInit+0x134>)
 8010342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010344:	4a15      	ldr	r2, [pc, #84]	; (801039c <HAL_PCD_MspInit+0x134>)
 8010346:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801034a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801034c:	4b13      	ldr	r3, [pc, #76]	; (801039c <HAL_PCD_MspInit+0x134>)
 801034e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010354:	60fb      	str	r3, [r7, #12]
 8010356:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010358:	4b10      	ldr	r3, [pc, #64]	; (801039c <HAL_PCD_MspInit+0x134>)
 801035a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801035c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010360:	2b00      	cmp	r3, #0
 8010362:	d114      	bne.n	801038e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010364:	4b0d      	ldr	r3, [pc, #52]	; (801039c <HAL_PCD_MspInit+0x134>)
 8010366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010368:	4a0c      	ldr	r2, [pc, #48]	; (801039c <HAL_PCD_MspInit+0x134>)
 801036a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801036e:	6593      	str	r3, [r2, #88]	; 0x58
 8010370:	4b0a      	ldr	r3, [pc, #40]	; (801039c <HAL_PCD_MspInit+0x134>)
 8010372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010378:	60bb      	str	r3, [r7, #8]
 801037a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 801037c:	f001 f906 	bl	801158c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010380:	4b06      	ldr	r3, [pc, #24]	; (801039c <HAL_PCD_MspInit+0x134>)
 8010382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010384:	4a05      	ldr	r2, [pc, #20]	; (801039c <HAL_PCD_MspInit+0x134>)
 8010386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801038a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 801038c:	e001      	b.n	8010392 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 801038e:	f001 f8fd 	bl	801158c <HAL_PWREx_EnableVddUSB>
}
 8010392:	bf00      	nop
 8010394:	37b0      	adds	r7, #176	; 0xb0
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	40021000 	.word	0x40021000

080103a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80103a0:	b480      	push	{r7}
 80103a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80103a4:	e7fe      	b.n	80103a4 <NMI_Handler+0x4>

080103a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80103a6:	b480      	push	{r7}
 80103a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80103aa:	e7fe      	b.n	80103aa <HardFault_Handler+0x4>

080103ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80103ac:	b480      	push	{r7}
 80103ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80103b0:	e7fe      	b.n	80103b0 <MemManage_Handler+0x4>

080103b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80103b2:	b480      	push	{r7}
 80103b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80103b6:	e7fe      	b.n	80103b6 <BusFault_Handler+0x4>

080103b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80103b8:	b480      	push	{r7}
 80103ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80103bc:	e7fe      	b.n	80103bc <UsageFault_Handler+0x4>

080103be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80103be:	b480      	push	{r7}
 80103c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80103c2:	bf00      	nop
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80103cc:	b480      	push	{r7}
 80103ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80103d0:	bf00      	nop
 80103d2:	46bd      	mov	sp, r7
 80103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d8:	4770      	bx	lr

080103da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80103da:	b480      	push	{r7}
 80103dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80103de:	bf00      	nop
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80103ec:	f000 f980 	bl	80106f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80103f0:	bf00      	nop
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80103f8:	2020      	movs	r0, #32
 80103fa:	f000 fdb5 	bl	8010f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80103fe:	2040      	movs	r0, #64	; 0x40
 8010400:	f000 fdb2 	bl	8010f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8010404:	2080      	movs	r0, #128	; 0x80
 8010406:	f000 fdaf 	bl	8010f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 801040a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801040e:	f000 fdab 	bl	8010f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8010412:	bf00      	nop
 8010414:	bd80      	pop	{r7, pc}

08010416 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8010416:	b580      	push	{r7, lr}
 8010418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 801041a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801041e:	f000 fda3 	bl	8010f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8010422:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010426:	f000 fd9f 	bl	8010f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 801042a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801042e:	f000 fd9b 	bl	8010f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8010432:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010436:	f000 fd97 	bl	8010f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 801043a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801043e:	f000 fd93 	bl	8010f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8010442:	bf00      	nop
 8010444:	bd80      	pop	{r7, pc}

08010446 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010446:	b480      	push	{r7}
 8010448:	af00      	add	r7, sp, #0
  return 1;
 801044a:	2301      	movs	r3, #1
}
 801044c:	4618      	mov	r0, r3
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr

08010456 <_kill>:

int _kill(int pid, int sig)
{
 8010456:	b580      	push	{r7, lr}
 8010458:	b082      	sub	sp, #8
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
 801045e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8010460:	f00f faf8 	bl	801fa54 <__errno>
 8010464:	4603      	mov	r3, r0
 8010466:	2216      	movs	r2, #22
 8010468:	601a      	str	r2, [r3, #0]
  return -1;
 801046a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801046e:	4618      	mov	r0, r3
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}

08010476 <_exit>:

void _exit (int status)
{
 8010476:	b580      	push	{r7, lr}
 8010478:	b082      	sub	sp, #8
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801047e:	f04f 31ff 	mov.w	r1, #4294967295
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7ff ffe7 	bl	8010456 <_kill>
  while (1) {}    /* Make sure we hang here */
 8010488:	e7fe      	b.n	8010488 <_exit+0x12>

0801048a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801048a:	b580      	push	{r7, lr}
 801048c:	b086      	sub	sp, #24
 801048e:	af00      	add	r7, sp, #0
 8010490:	60f8      	str	r0, [r7, #12]
 8010492:	60b9      	str	r1, [r7, #8]
 8010494:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010496:	2300      	movs	r3, #0
 8010498:	617b      	str	r3, [r7, #20]
 801049a:	e00a      	b.n	80104b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801049c:	f3af 8000 	nop.w
 80104a0:	4601      	mov	r1, r0
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	1c5a      	adds	r2, r3, #1
 80104a6:	60ba      	str	r2, [r7, #8]
 80104a8:	b2ca      	uxtb	r2, r1
 80104aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	3301      	adds	r3, #1
 80104b0:	617b      	str	r3, [r7, #20]
 80104b2:	697a      	ldr	r2, [r7, #20]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	dbf0      	blt.n	801049c <_read+0x12>
  }

  return len;
 80104ba:	687b      	ldr	r3, [r7, #4]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3718      	adds	r7, #24
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b086      	sub	sp, #24
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80104d0:	2300      	movs	r3, #0
 80104d2:	617b      	str	r3, [r7, #20]
 80104d4:	e009      	b.n	80104ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	60ba      	str	r2, [r7, #8]
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	4618      	mov	r0, r3
 80104e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	3301      	adds	r3, #1
 80104e8:	617b      	str	r3, [r7, #20]
 80104ea:	697a      	ldr	r2, [r7, #20]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	dbf1      	blt.n	80104d6 <_write+0x12>
  }
  return len;
 80104f2:	687b      	ldr	r3, [r7, #4]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3718      	adds	r7, #24
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <_close>:

int _close(int file)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8010504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010508:	4618      	mov	r0, r3
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr

08010514 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010514:	b480      	push	{r7}
 8010516:	b083      	sub	sp, #12
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010524:	605a      	str	r2, [r3, #4]
  return 0;
 8010526:	2300      	movs	r3, #0
}
 8010528:	4618      	mov	r0, r3
 801052a:	370c      	adds	r7, #12
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr

08010534 <_isatty>:

int _isatty(int file)
{
 8010534:	b480      	push	{r7}
 8010536:	b083      	sub	sp, #12
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801053c:	2301      	movs	r3, #1
}
 801053e:	4618      	mov	r0, r3
 8010540:	370c      	adds	r7, #12
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr

0801054a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801054a:	b480      	push	{r7}
 801054c:	b085      	sub	sp, #20
 801054e:	af00      	add	r7, sp, #0
 8010550:	60f8      	str	r0, [r7, #12]
 8010552:	60b9      	str	r1, [r7, #8]
 8010554:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8010556:	2300      	movs	r3, #0
}
 8010558:	4618      	mov	r0, r3
 801055a:	3714      	adds	r7, #20
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr

08010564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b086      	sub	sp, #24
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801056c:	4a14      	ldr	r2, [pc, #80]	; (80105c0 <_sbrk+0x5c>)
 801056e:	4b15      	ldr	r3, [pc, #84]	; (80105c4 <_sbrk+0x60>)
 8010570:	1ad3      	subs	r3, r2, r3
 8010572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010578:	4b13      	ldr	r3, [pc, #76]	; (80105c8 <_sbrk+0x64>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d102      	bne.n	8010586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010580:	4b11      	ldr	r3, [pc, #68]	; (80105c8 <_sbrk+0x64>)
 8010582:	4a12      	ldr	r2, [pc, #72]	; (80105cc <_sbrk+0x68>)
 8010584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010586:	4b10      	ldr	r3, [pc, #64]	; (80105c8 <_sbrk+0x64>)
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	4413      	add	r3, r2
 801058e:	693a      	ldr	r2, [r7, #16]
 8010590:	429a      	cmp	r2, r3
 8010592:	d207      	bcs.n	80105a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010594:	f00f fa5e 	bl	801fa54 <__errno>
 8010598:	4603      	mov	r3, r0
 801059a:	220c      	movs	r2, #12
 801059c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801059e:	f04f 33ff 	mov.w	r3, #4294967295
 80105a2:	e009      	b.n	80105b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80105a4:	4b08      	ldr	r3, [pc, #32]	; (80105c8 <_sbrk+0x64>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80105aa:	4b07      	ldr	r3, [pc, #28]	; (80105c8 <_sbrk+0x64>)
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4413      	add	r3, r2
 80105b2:	4a05      	ldr	r2, [pc, #20]	; (80105c8 <_sbrk+0x64>)
 80105b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80105b6:	68fb      	ldr	r3, [r7, #12]
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3718      	adds	r7, #24
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	20018000 	.word	0x20018000
 80105c4:	00000400 	.word	0x00000400
 80105c8:	20000ee0 	.word	0x20000ee0
 80105cc:	200012b0 	.word	0x200012b0

080105d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80105d0:	b480      	push	{r7}
 80105d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80105d4:	4b06      	ldr	r3, [pc, #24]	; (80105f0 <SystemInit+0x20>)
 80105d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105da:	4a05      	ldr	r2, [pc, #20]	; (80105f0 <SystemInit+0x20>)
 80105dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80105e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80105e4:	bf00      	nop
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	e000ed00 	.word	0xe000ed00

080105f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80105f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801062c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80105f8:	f7ff ffea 	bl	80105d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80105fc:	480c      	ldr	r0, [pc, #48]	; (8010630 <LoopForever+0x6>)
  ldr r1, =_edata
 80105fe:	490d      	ldr	r1, [pc, #52]	; (8010634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8010600:	4a0d      	ldr	r2, [pc, #52]	; (8010638 <LoopForever+0xe>)
  movs r3, #0
 8010602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010604:	e002      	b.n	801060c <LoopCopyDataInit>

08010606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801060a:	3304      	adds	r3, #4

0801060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010610:	d3f9      	bcc.n	8010606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010612:	4a0a      	ldr	r2, [pc, #40]	; (801063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8010614:	4c0a      	ldr	r4, [pc, #40]	; (8010640 <LoopForever+0x16>)
  movs r3, #0
 8010616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010618:	e001      	b.n	801061e <LoopFillZerobss>

0801061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801061c:	3204      	adds	r2, #4

0801061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010620:	d3fb      	bcc.n	801061a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8010622:	f00f fa1d 	bl	801fa60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8010626:	f7f8 fb1d 	bl	8008c64 <main>

0801062a <LoopForever>:

LoopForever:
    b LoopForever
 801062a:	e7fe      	b.n	801062a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 801062c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8010630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010634:	200004b8 	.word	0x200004b8
  ldr r2, =_sidata
 8010638:	0802d490 	.word	0x0802d490
  ldr r2, =_sbss
 801063c:	200004b8 	.word	0x200004b8
  ldr r4, =_ebss
 8010640:	200012ac 	.word	0x200012ac

08010644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8010644:	e7fe      	b.n	8010644 <ADC1_2_IRQHandler>

08010646 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010646:	b580      	push	{r7, lr}
 8010648:	b082      	sub	sp, #8
 801064a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010650:	2003      	movs	r0, #3
 8010652:	f000 f961 	bl	8010918 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010656:	2000      	movs	r0, #0
 8010658:	f000 f80e 	bl	8010678 <HAL_InitTick>
 801065c:	4603      	mov	r3, r0
 801065e:	2b00      	cmp	r3, #0
 8010660:	d002      	beq.n	8010668 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8010662:	2301      	movs	r3, #1
 8010664:	71fb      	strb	r3, [r7, #7]
 8010666:	e001      	b.n	801066c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8010668:	f7ff fbec 	bl	800fe44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801066c:	79fb      	ldrb	r3, [r7, #7]
}
 801066e:	4618      	mov	r0, r3
 8010670:	3708      	adds	r7, #8
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
	...

08010678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b084      	sub	sp, #16
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8010680:	2300      	movs	r3, #0
 8010682:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8010684:	4b17      	ldr	r3, [pc, #92]	; (80106e4 <HAL_InitTick+0x6c>)
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d023      	beq.n	80106d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 801068c:	4b16      	ldr	r3, [pc, #88]	; (80106e8 <HAL_InitTick+0x70>)
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	4b14      	ldr	r3, [pc, #80]	; (80106e4 <HAL_InitTick+0x6c>)
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	4619      	mov	r1, r3
 8010696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801069a:	fbb3 f3f1 	udiv	r3, r3, r1
 801069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80106a2:	4618      	mov	r0, r3
 80106a4:	f000 f96d 	bl	8010982 <HAL_SYSTICK_Config>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d10f      	bne.n	80106ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2b0f      	cmp	r3, #15
 80106b2:	d809      	bhi.n	80106c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80106b4:	2200      	movs	r2, #0
 80106b6:	6879      	ldr	r1, [r7, #4]
 80106b8:	f04f 30ff 	mov.w	r0, #4294967295
 80106bc:	f000 f937 	bl	801092e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80106c0:	4a0a      	ldr	r2, [pc, #40]	; (80106ec <HAL_InitTick+0x74>)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6013      	str	r3, [r2, #0]
 80106c6:	e007      	b.n	80106d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80106c8:	2301      	movs	r3, #1
 80106ca:	73fb      	strb	r3, [r7, #15]
 80106cc:	e004      	b.n	80106d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80106ce:	2301      	movs	r3, #1
 80106d0:	73fb      	strb	r3, [r7, #15]
 80106d2:	e001      	b.n	80106d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80106d4:	2301      	movs	r3, #1
 80106d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80106d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3710      	adds	r7, #16
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}
 80106e2:	bf00      	nop
 80106e4:	2000017c 	.word	0x2000017c
 80106e8:	20000174 	.word	0x20000174
 80106ec:	20000178 	.word	0x20000178

080106f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80106f0:	b480      	push	{r7}
 80106f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80106f4:	4b06      	ldr	r3, [pc, #24]	; (8010710 <HAL_IncTick+0x20>)
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	461a      	mov	r2, r3
 80106fa:	4b06      	ldr	r3, [pc, #24]	; (8010714 <HAL_IncTick+0x24>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	4413      	add	r3, r2
 8010700:	4a04      	ldr	r2, [pc, #16]	; (8010714 <HAL_IncTick+0x24>)
 8010702:	6013      	str	r3, [r2, #0]
}
 8010704:	bf00      	nop
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	2000017c 	.word	0x2000017c
 8010714:	20000ee4 	.word	0x20000ee4

08010718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010718:	b480      	push	{r7}
 801071a:	af00      	add	r7, sp, #0
  return uwTick;
 801071c:	4b03      	ldr	r3, [pc, #12]	; (801072c <HAL_GetTick+0x14>)
 801071e:	681b      	ldr	r3, [r3, #0]
}
 8010720:	4618      	mov	r0, r3
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	20000ee4 	.word	0x20000ee4

08010730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010738:	f7ff ffee 	bl	8010718 <HAL_GetTick>
 801073c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010748:	d005      	beq.n	8010756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 801074a:	4b0a      	ldr	r3, [pc, #40]	; (8010774 <HAL_Delay+0x44>)
 801074c:	781b      	ldrb	r3, [r3, #0]
 801074e:	461a      	mov	r2, r3
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	4413      	add	r3, r2
 8010754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8010756:	bf00      	nop
 8010758:	f7ff ffde 	bl	8010718 <HAL_GetTick>
 801075c:	4602      	mov	r2, r0
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	1ad3      	subs	r3, r2, r3
 8010762:	68fa      	ldr	r2, [r7, #12]
 8010764:	429a      	cmp	r2, r3
 8010766:	d8f7      	bhi.n	8010758 <HAL_Delay+0x28>
  {
  }
}
 8010768:	bf00      	nop
 801076a:	bf00      	nop
 801076c:	3710      	adds	r7, #16
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	2000017c 	.word	0x2000017c

08010778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010778:	b480      	push	{r7}
 801077a:	b085      	sub	sp, #20
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f003 0307 	and.w	r3, r3, #7
 8010786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010788:	4b0c      	ldr	r3, [pc, #48]	; (80107bc <__NVIC_SetPriorityGrouping+0x44>)
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801078e:	68ba      	ldr	r2, [r7, #8]
 8010790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010794:	4013      	ands	r3, r2
 8010796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80107a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80107a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80107a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80107aa:	4a04      	ldr	r2, [pc, #16]	; (80107bc <__NVIC_SetPriorityGrouping+0x44>)
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	60d3      	str	r3, [r2, #12]
}
 80107b0:	bf00      	nop
 80107b2:	3714      	adds	r7, #20
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	4770      	bx	lr
 80107bc:	e000ed00 	.word	0xe000ed00

080107c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80107c0:	b480      	push	{r7}
 80107c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80107c4:	4b04      	ldr	r3, [pc, #16]	; (80107d8 <__NVIC_GetPriorityGrouping+0x18>)
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	0a1b      	lsrs	r3, r3, #8
 80107ca:	f003 0307 	and.w	r3, r3, #7
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr
 80107d8:	e000ed00 	.word	0xe000ed00

080107dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	4603      	mov	r3, r0
 80107e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80107e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	db0b      	blt.n	8010806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80107ee:	79fb      	ldrb	r3, [r7, #7]
 80107f0:	f003 021f 	and.w	r2, r3, #31
 80107f4:	4907      	ldr	r1, [pc, #28]	; (8010814 <__NVIC_EnableIRQ+0x38>)
 80107f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107fa:	095b      	lsrs	r3, r3, #5
 80107fc:	2001      	movs	r0, #1
 80107fe:	fa00 f202 	lsl.w	r2, r0, r2
 8010802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8010806:	bf00      	nop
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr
 8010812:	bf00      	nop
 8010814:	e000e100 	.word	0xe000e100

08010818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	4603      	mov	r3, r0
 8010820:	6039      	str	r1, [r7, #0]
 8010822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010828:	2b00      	cmp	r3, #0
 801082a:	db0a      	blt.n	8010842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	b2da      	uxtb	r2, r3
 8010830:	490c      	ldr	r1, [pc, #48]	; (8010864 <__NVIC_SetPriority+0x4c>)
 8010832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010836:	0112      	lsls	r2, r2, #4
 8010838:	b2d2      	uxtb	r2, r2
 801083a:	440b      	add	r3, r1
 801083c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010840:	e00a      	b.n	8010858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	b2da      	uxtb	r2, r3
 8010846:	4908      	ldr	r1, [pc, #32]	; (8010868 <__NVIC_SetPriority+0x50>)
 8010848:	79fb      	ldrb	r3, [r7, #7]
 801084a:	f003 030f 	and.w	r3, r3, #15
 801084e:	3b04      	subs	r3, #4
 8010850:	0112      	lsls	r2, r2, #4
 8010852:	b2d2      	uxtb	r2, r2
 8010854:	440b      	add	r3, r1
 8010856:	761a      	strb	r2, [r3, #24]
}
 8010858:	bf00      	nop
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr
 8010864:	e000e100 	.word	0xe000e100
 8010868:	e000ed00 	.word	0xe000ed00

0801086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801086c:	b480      	push	{r7}
 801086e:	b089      	sub	sp, #36	; 0x24
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f003 0307 	and.w	r3, r3, #7
 801087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010880:	69fb      	ldr	r3, [r7, #28]
 8010882:	f1c3 0307 	rsb	r3, r3, #7
 8010886:	2b04      	cmp	r3, #4
 8010888:	bf28      	it	cs
 801088a:	2304      	movcs	r3, #4
 801088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801088e:	69fb      	ldr	r3, [r7, #28]
 8010890:	3304      	adds	r3, #4
 8010892:	2b06      	cmp	r3, #6
 8010894:	d902      	bls.n	801089c <NVIC_EncodePriority+0x30>
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	3b03      	subs	r3, #3
 801089a:	e000      	b.n	801089e <NVIC_EncodePriority+0x32>
 801089c:	2300      	movs	r3, #0
 801089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80108a0:	f04f 32ff 	mov.w	r2, #4294967295
 80108a4:	69bb      	ldr	r3, [r7, #24]
 80108a6:	fa02 f303 	lsl.w	r3, r2, r3
 80108aa:	43da      	mvns	r2, r3
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	401a      	ands	r2, r3
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80108b4:	f04f 31ff 	mov.w	r1, #4294967295
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	fa01 f303 	lsl.w	r3, r1, r3
 80108be:	43d9      	mvns	r1, r3
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80108c4:	4313      	orrs	r3, r2
         );
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3724      	adds	r7, #36	; 0x24
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr
	...

080108d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	3b01      	subs	r3, #1
 80108e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80108e4:	d301      	bcc.n	80108ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80108e6:	2301      	movs	r3, #1
 80108e8:	e00f      	b.n	801090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80108ea:	4a0a      	ldr	r2, [pc, #40]	; (8010914 <SysTick_Config+0x40>)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	3b01      	subs	r3, #1
 80108f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80108f2:	210f      	movs	r1, #15
 80108f4:	f04f 30ff 	mov.w	r0, #4294967295
 80108f8:	f7ff ff8e 	bl	8010818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80108fc:	4b05      	ldr	r3, [pc, #20]	; (8010914 <SysTick_Config+0x40>)
 80108fe:	2200      	movs	r2, #0
 8010900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010902:	4b04      	ldr	r3, [pc, #16]	; (8010914 <SysTick_Config+0x40>)
 8010904:	2207      	movs	r2, #7
 8010906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	3708      	adds	r7, #8
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	e000e010 	.word	0xe000e010

08010918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7ff ff29 	bl	8010778 <__NVIC_SetPriorityGrouping>
}
 8010926:	bf00      	nop
 8010928:	3708      	adds	r7, #8
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801092e:	b580      	push	{r7, lr}
 8010930:	b086      	sub	sp, #24
 8010932:	af00      	add	r7, sp, #0
 8010934:	4603      	mov	r3, r0
 8010936:	60b9      	str	r1, [r7, #8]
 8010938:	607a      	str	r2, [r7, #4]
 801093a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801093c:	2300      	movs	r3, #0
 801093e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010940:	f7ff ff3e 	bl	80107c0 <__NVIC_GetPriorityGrouping>
 8010944:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010946:	687a      	ldr	r2, [r7, #4]
 8010948:	68b9      	ldr	r1, [r7, #8]
 801094a:	6978      	ldr	r0, [r7, #20]
 801094c:	f7ff ff8e 	bl	801086c <NVIC_EncodePriority>
 8010950:	4602      	mov	r2, r0
 8010952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010956:	4611      	mov	r1, r2
 8010958:	4618      	mov	r0, r3
 801095a:	f7ff ff5d 	bl	8010818 <__NVIC_SetPriority>
}
 801095e:	bf00      	nop
 8010960:	3718      	adds	r7, #24
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}

08010966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010966:	b580      	push	{r7, lr}
 8010968:	b082      	sub	sp, #8
 801096a:	af00      	add	r7, sp, #0
 801096c:	4603      	mov	r3, r0
 801096e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010974:	4618      	mov	r0, r3
 8010976:	f7ff ff31 	bl	80107dc <__NVIC_EnableIRQ>
}
 801097a:	bf00      	nop
 801097c:	3708      	adds	r7, #8
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010982:	b580      	push	{r7, lr}
 8010984:	b082      	sub	sp, #8
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7ff ffa2 	bl	80108d4 <SysTick_Config>
 8010990:	4603      	mov	r3, r0
}
 8010992:	4618      	mov	r0, r3
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
	...

0801099c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d101      	bne.n	80109ae <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80109aa:	2301      	movs	r3, #1
 80109ac:	e0ac      	b.n	8010b08 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	4618      	mov	r0, r3
 80109b4:	f000 f8b2 	bl	8010b1c <DFSDM_GetChannelFromInstance>
 80109b8:	4603      	mov	r3, r0
 80109ba:	4a55      	ldr	r2, [pc, #340]	; (8010b10 <HAL_DFSDM_ChannelInit+0x174>)
 80109bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d001      	beq.n	80109c8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80109c4:	2301      	movs	r3, #1
 80109c6:	e09f      	b.n	8010b08 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f7ff fa5f 	bl	800fe8c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80109ce:	4b51      	ldr	r3, [pc, #324]	; (8010b14 <HAL_DFSDM_ChannelInit+0x178>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	3301      	adds	r3, #1
 80109d4:	4a4f      	ldr	r2, [pc, #316]	; (8010b14 <HAL_DFSDM_ChannelInit+0x178>)
 80109d6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80109d8:	4b4e      	ldr	r3, [pc, #312]	; (8010b14 <HAL_DFSDM_ChannelInit+0x178>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	2b01      	cmp	r3, #1
 80109de:	d125      	bne.n	8010a2c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80109e0:	4b4d      	ldr	r3, [pc, #308]	; (8010b18 <HAL_DFSDM_ChannelInit+0x17c>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4a4c      	ldr	r2, [pc, #304]	; (8010b18 <HAL_DFSDM_ChannelInit+0x17c>)
 80109e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80109ea:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80109ec:	4b4a      	ldr	r3, [pc, #296]	; (8010b18 <HAL_DFSDM_ChannelInit+0x17c>)
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	689b      	ldr	r3, [r3, #8]
 80109f4:	4948      	ldr	r1, [pc, #288]	; (8010b18 <HAL_DFSDM_ChannelInit+0x17c>)
 80109f6:	4313      	orrs	r3, r2
 80109f8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80109fa:	4b47      	ldr	r3, [pc, #284]	; (8010b18 <HAL_DFSDM_ChannelInit+0x17c>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	4a46      	ldr	r2, [pc, #280]	; (8010b18 <HAL_DFSDM_ChannelInit+0x17c>)
 8010a00:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8010a04:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	791b      	ldrb	r3, [r3, #4]
 8010a0a:	2b01      	cmp	r3, #1
 8010a0c:	d108      	bne.n	8010a20 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8010a0e:	4b42      	ldr	r3, [pc, #264]	; (8010b18 <HAL_DFSDM_ChannelInit+0x17c>)
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	3b01      	subs	r3, #1
 8010a18:	041b      	lsls	r3, r3, #16
 8010a1a:	493f      	ldr	r1, [pc, #252]	; (8010b18 <HAL_DFSDM_ChannelInit+0x17c>)
 8010a1c:	4313      	orrs	r3, r2
 8010a1e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8010a20:	4b3d      	ldr	r3, [pc, #244]	; (8010b18 <HAL_DFSDM_ChannelInit+0x17c>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a3c      	ldr	r2, [pc, #240]	; (8010b18 <HAL_DFSDM_ChannelInit+0x17c>)
 8010a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010a2a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	681a      	ldr	r2, [r3, #0]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8010a3a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	6819      	ldr	r1, [r3, #0]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8010a4a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8010a50:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	430a      	orrs	r2, r1
 8010a58:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	681a      	ldr	r2, [r3, #0]
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f022 020f 	bic.w	r2, r2, #15
 8010a68:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	6819      	ldr	r1, [r3, #0]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8010a78:	431a      	orrs	r2, r3
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	430a      	orrs	r2, r1
 8010a80:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	689a      	ldr	r2, [r3, #8]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8010a90:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	6899      	ldr	r1, [r3, #8]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aa0:	3b01      	subs	r3, #1
 8010aa2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8010aa4:	431a      	orrs	r2, r3
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	430a      	orrs	r2, r1
 8010aac:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	685a      	ldr	r2, [r3, #4]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f002 0207 	and.w	r2, r2, #7
 8010abc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	6859      	ldr	r1, [r3, #4]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ace:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8010ad0:	431a      	orrs	r2, r3
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	430a      	orrs	r2, r1
 8010ad8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010ae8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2201      	movs	r2, #1
 8010aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	4618      	mov	r0, r3
 8010af8:	f000 f810 	bl	8010b1c <DFSDM_GetChannelFromInstance>
 8010afc:	4602      	mov	r2, r0
 8010afe:	4904      	ldr	r1, [pc, #16]	; (8010b10 <HAL_DFSDM_ChannelInit+0x174>)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8010b06:	2300      	movs	r3, #0
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	20000eec 	.word	0x20000eec
 8010b14:	20000ee8 	.word	0x20000ee8
 8010b18:	40016000 	.word	0x40016000

08010b1c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b085      	sub	sp, #20
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	4a1c      	ldr	r2, [pc, #112]	; (8010b98 <DFSDM_GetChannelFromInstance+0x7c>)
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	d102      	bne.n	8010b32 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	60fb      	str	r3, [r7, #12]
 8010b30:	e02b      	b.n	8010b8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	4a19      	ldr	r2, [pc, #100]	; (8010b9c <DFSDM_GetChannelFromInstance+0x80>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d102      	bne.n	8010b40 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	60fb      	str	r3, [r7, #12]
 8010b3e:	e024      	b.n	8010b8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	4a17      	ldr	r2, [pc, #92]	; (8010ba0 <DFSDM_GetChannelFromInstance+0x84>)
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d102      	bne.n	8010b4e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8010b48:	2302      	movs	r3, #2
 8010b4a:	60fb      	str	r3, [r7, #12]
 8010b4c:	e01d      	b.n	8010b8a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4a14      	ldr	r2, [pc, #80]	; (8010ba4 <DFSDM_GetChannelFromInstance+0x88>)
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d102      	bne.n	8010b5c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8010b56:	2304      	movs	r3, #4
 8010b58:	60fb      	str	r3, [r7, #12]
 8010b5a:	e016      	b.n	8010b8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	4a12      	ldr	r2, [pc, #72]	; (8010ba8 <DFSDM_GetChannelFromInstance+0x8c>)
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d102      	bne.n	8010b6a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8010b64:	2305      	movs	r3, #5
 8010b66:	60fb      	str	r3, [r7, #12]
 8010b68:	e00f      	b.n	8010b8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4a0f      	ldr	r2, [pc, #60]	; (8010bac <DFSDM_GetChannelFromInstance+0x90>)
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	d102      	bne.n	8010b78 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8010b72:	2306      	movs	r3, #6
 8010b74:	60fb      	str	r3, [r7, #12]
 8010b76:	e008      	b.n	8010b8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	4a0d      	ldr	r2, [pc, #52]	; (8010bb0 <DFSDM_GetChannelFromInstance+0x94>)
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d102      	bne.n	8010b86 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8010b80:	2307      	movs	r3, #7
 8010b82:	60fb      	str	r3, [r7, #12]
 8010b84:	e001      	b.n	8010b8a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8010b86:	2303      	movs	r3, #3
 8010b88:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr
 8010b98:	40016000 	.word	0x40016000
 8010b9c:	40016020 	.word	0x40016020
 8010ba0:	40016040 	.word	0x40016040
 8010ba4:	40016080 	.word	0x40016080
 8010ba8:	400160a0 	.word	0x400160a0
 8010bac:	400160c0 	.word	0x400160c0
 8010bb0:	400160e0 	.word	0x400160e0

08010bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b087      	sub	sp, #28
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010bc2:	e17f      	b.n	8010ec4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	681a      	ldr	r2, [r3, #0]
 8010bc8:	2101      	movs	r1, #1
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8010bd0:	4013      	ands	r3, r2
 8010bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	f000 8171 	beq.w	8010ebe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	f003 0303 	and.w	r3, r3, #3
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	d005      	beq.n	8010bf4 <HAL_GPIO_Init+0x40>
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	685b      	ldr	r3, [r3, #4]
 8010bec:	f003 0303 	and.w	r3, r3, #3
 8010bf0:	2b02      	cmp	r3, #2
 8010bf2:	d130      	bne.n	8010c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	689b      	ldr	r3, [r3, #8]
 8010bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	005b      	lsls	r3, r3, #1
 8010bfe:	2203      	movs	r2, #3
 8010c00:	fa02 f303 	lsl.w	r3, r2, r3
 8010c04:	43db      	mvns	r3, r3
 8010c06:	693a      	ldr	r2, [r7, #16]
 8010c08:	4013      	ands	r3, r2
 8010c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	68da      	ldr	r2, [r3, #12]
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	005b      	lsls	r3, r3, #1
 8010c14:	fa02 f303 	lsl.w	r3, r2, r3
 8010c18:	693a      	ldr	r2, [r7, #16]
 8010c1a:	4313      	orrs	r3, r2
 8010c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	693a      	ldr	r2, [r7, #16]
 8010c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c32:	43db      	mvns	r3, r3
 8010c34:	693a      	ldr	r2, [r7, #16]
 8010c36:	4013      	ands	r3, r2
 8010c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	091b      	lsrs	r3, r3, #4
 8010c40:	f003 0201 	and.w	r2, r3, #1
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	fa02 f303 	lsl.w	r3, r2, r3
 8010c4a:	693a      	ldr	r2, [r7, #16]
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	693a      	ldr	r2, [r7, #16]
 8010c54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	f003 0303 	and.w	r3, r3, #3
 8010c5e:	2b03      	cmp	r3, #3
 8010c60:	d118      	bne.n	8010c94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8010c68:	2201      	movs	r2, #1
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8010c70:	43db      	mvns	r3, r3
 8010c72:	693a      	ldr	r2, [r7, #16]
 8010c74:	4013      	ands	r3, r2
 8010c76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	685b      	ldr	r3, [r3, #4]
 8010c7c:	08db      	lsrs	r3, r3, #3
 8010c7e:	f003 0201 	and.w	r2, r3, #1
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	fa02 f303 	lsl.w	r3, r2, r3
 8010c88:	693a      	ldr	r2, [r7, #16]
 8010c8a:	4313      	orrs	r3, r2
 8010c8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	693a      	ldr	r2, [r7, #16]
 8010c92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	f003 0303 	and.w	r3, r3, #3
 8010c9c:	2b03      	cmp	r3, #3
 8010c9e:	d017      	beq.n	8010cd0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	005b      	lsls	r3, r3, #1
 8010caa:	2203      	movs	r2, #3
 8010cac:	fa02 f303 	lsl.w	r3, r2, r3
 8010cb0:	43db      	mvns	r3, r3
 8010cb2:	693a      	ldr	r2, [r7, #16]
 8010cb4:	4013      	ands	r3, r2
 8010cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	689a      	ldr	r2, [r3, #8]
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	005b      	lsls	r3, r3, #1
 8010cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8010cc4:	693a      	ldr	r2, [r7, #16]
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	693a      	ldr	r2, [r7, #16]
 8010cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	f003 0303 	and.w	r3, r3, #3
 8010cd8:	2b02      	cmp	r3, #2
 8010cda:	d123      	bne.n	8010d24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	08da      	lsrs	r2, r3, #3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	3208      	adds	r2, #8
 8010ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	f003 0307 	and.w	r3, r3, #7
 8010cf0:	009b      	lsls	r3, r3, #2
 8010cf2:	220f      	movs	r2, #15
 8010cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8010cf8:	43db      	mvns	r3, r3
 8010cfa:	693a      	ldr	r2, [r7, #16]
 8010cfc:	4013      	ands	r3, r2
 8010cfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	691a      	ldr	r2, [r3, #16]
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	f003 0307 	and.w	r3, r3, #7
 8010d0a:	009b      	lsls	r3, r3, #2
 8010d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d10:	693a      	ldr	r2, [r7, #16]
 8010d12:	4313      	orrs	r3, r2
 8010d14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	08da      	lsrs	r2, r3, #3
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	3208      	adds	r2, #8
 8010d1e:	6939      	ldr	r1, [r7, #16]
 8010d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	005b      	lsls	r3, r3, #1
 8010d2e:	2203      	movs	r2, #3
 8010d30:	fa02 f303 	lsl.w	r3, r2, r3
 8010d34:	43db      	mvns	r3, r3
 8010d36:	693a      	ldr	r2, [r7, #16]
 8010d38:	4013      	ands	r3, r2
 8010d3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	f003 0203 	and.w	r2, r3, #3
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	005b      	lsls	r3, r3, #1
 8010d48:	fa02 f303 	lsl.w	r3, r2, r3
 8010d4c:	693a      	ldr	r2, [r7, #16]
 8010d4e:	4313      	orrs	r3, r2
 8010d50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	693a      	ldr	r2, [r7, #16]
 8010d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f000 80ac 	beq.w	8010ebe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d66:	4b5f      	ldr	r3, [pc, #380]	; (8010ee4 <HAL_GPIO_Init+0x330>)
 8010d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d6a:	4a5e      	ldr	r2, [pc, #376]	; (8010ee4 <HAL_GPIO_Init+0x330>)
 8010d6c:	f043 0301 	orr.w	r3, r3, #1
 8010d70:	6613      	str	r3, [r2, #96]	; 0x60
 8010d72:	4b5c      	ldr	r3, [pc, #368]	; (8010ee4 <HAL_GPIO_Init+0x330>)
 8010d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d76:	f003 0301 	and.w	r3, r3, #1
 8010d7a:	60bb      	str	r3, [r7, #8]
 8010d7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8010d7e:	4a5a      	ldr	r2, [pc, #360]	; (8010ee8 <HAL_GPIO_Init+0x334>)
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	089b      	lsrs	r3, r3, #2
 8010d84:	3302      	adds	r3, #2
 8010d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	f003 0303 	and.w	r3, r3, #3
 8010d92:	009b      	lsls	r3, r3, #2
 8010d94:	220f      	movs	r2, #15
 8010d96:	fa02 f303 	lsl.w	r3, r2, r3
 8010d9a:	43db      	mvns	r3, r3
 8010d9c:	693a      	ldr	r2, [r7, #16]
 8010d9e:	4013      	ands	r3, r2
 8010da0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8010da8:	d025      	beq.n	8010df6 <HAL_GPIO_Init+0x242>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	4a4f      	ldr	r2, [pc, #316]	; (8010eec <HAL_GPIO_Init+0x338>)
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d01f      	beq.n	8010df2 <HAL_GPIO_Init+0x23e>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4a4e      	ldr	r2, [pc, #312]	; (8010ef0 <HAL_GPIO_Init+0x33c>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d019      	beq.n	8010dee <HAL_GPIO_Init+0x23a>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4a4d      	ldr	r2, [pc, #308]	; (8010ef4 <HAL_GPIO_Init+0x340>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d013      	beq.n	8010dea <HAL_GPIO_Init+0x236>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	4a4c      	ldr	r2, [pc, #304]	; (8010ef8 <HAL_GPIO_Init+0x344>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d00d      	beq.n	8010de6 <HAL_GPIO_Init+0x232>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	4a4b      	ldr	r2, [pc, #300]	; (8010efc <HAL_GPIO_Init+0x348>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d007      	beq.n	8010de2 <HAL_GPIO_Init+0x22e>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4a4a      	ldr	r2, [pc, #296]	; (8010f00 <HAL_GPIO_Init+0x34c>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d101      	bne.n	8010dde <HAL_GPIO_Init+0x22a>
 8010dda:	2306      	movs	r3, #6
 8010ddc:	e00c      	b.n	8010df8 <HAL_GPIO_Init+0x244>
 8010dde:	2307      	movs	r3, #7
 8010de0:	e00a      	b.n	8010df8 <HAL_GPIO_Init+0x244>
 8010de2:	2305      	movs	r3, #5
 8010de4:	e008      	b.n	8010df8 <HAL_GPIO_Init+0x244>
 8010de6:	2304      	movs	r3, #4
 8010de8:	e006      	b.n	8010df8 <HAL_GPIO_Init+0x244>
 8010dea:	2303      	movs	r3, #3
 8010dec:	e004      	b.n	8010df8 <HAL_GPIO_Init+0x244>
 8010dee:	2302      	movs	r3, #2
 8010df0:	e002      	b.n	8010df8 <HAL_GPIO_Init+0x244>
 8010df2:	2301      	movs	r3, #1
 8010df4:	e000      	b.n	8010df8 <HAL_GPIO_Init+0x244>
 8010df6:	2300      	movs	r3, #0
 8010df8:	697a      	ldr	r2, [r7, #20]
 8010dfa:	f002 0203 	and.w	r2, r2, #3
 8010dfe:	0092      	lsls	r2, r2, #2
 8010e00:	4093      	lsls	r3, r2
 8010e02:	693a      	ldr	r2, [r7, #16]
 8010e04:	4313      	orrs	r3, r2
 8010e06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8010e08:	4937      	ldr	r1, [pc, #220]	; (8010ee8 <HAL_GPIO_Init+0x334>)
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	089b      	lsrs	r3, r3, #2
 8010e0e:	3302      	adds	r3, #2
 8010e10:	693a      	ldr	r2, [r7, #16]
 8010e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010e16:	4b3b      	ldr	r3, [pc, #236]	; (8010f04 <HAL_GPIO_Init+0x350>)
 8010e18:	689b      	ldr	r3, [r3, #8]
 8010e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	43db      	mvns	r3, r3
 8010e20:	693a      	ldr	r2, [r7, #16]
 8010e22:	4013      	ands	r3, r2
 8010e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d003      	beq.n	8010e3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8010e32:	693a      	ldr	r2, [r7, #16]
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	4313      	orrs	r3, r2
 8010e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8010e3a:	4a32      	ldr	r2, [pc, #200]	; (8010f04 <HAL_GPIO_Init+0x350>)
 8010e3c:	693b      	ldr	r3, [r7, #16]
 8010e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8010e40:	4b30      	ldr	r3, [pc, #192]	; (8010f04 <HAL_GPIO_Init+0x350>)
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	43db      	mvns	r3, r3
 8010e4a:	693a      	ldr	r2, [r7, #16]
 8010e4c:	4013      	ands	r3, r2
 8010e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d003      	beq.n	8010e64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8010e5c:	693a      	ldr	r2, [r7, #16]
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	4313      	orrs	r3, r2
 8010e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8010e64:	4a27      	ldr	r2, [pc, #156]	; (8010f04 <HAL_GPIO_Init+0x350>)
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8010e6a:	4b26      	ldr	r3, [pc, #152]	; (8010f04 <HAL_GPIO_Init+0x350>)
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	43db      	mvns	r3, r3
 8010e74:	693a      	ldr	r2, [r7, #16]
 8010e76:	4013      	ands	r3, r2
 8010e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d003      	beq.n	8010e8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8010e86:	693a      	ldr	r2, [r7, #16]
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8010e8e:	4a1d      	ldr	r2, [pc, #116]	; (8010f04 <HAL_GPIO_Init+0x350>)
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8010e94:	4b1b      	ldr	r3, [pc, #108]	; (8010f04 <HAL_GPIO_Init+0x350>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	43db      	mvns	r3, r3
 8010e9e:	693a      	ldr	r2, [r7, #16]
 8010ea0:	4013      	ands	r3, r2
 8010ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d003      	beq.n	8010eb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8010eb0:	693a      	ldr	r2, [r7, #16]
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8010eb8:	4a12      	ldr	r2, [pc, #72]	; (8010f04 <HAL_GPIO_Init+0x350>)
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	681a      	ldr	r2, [r3, #0]
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	fa22 f303 	lsr.w	r3, r2, r3
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	f47f ae78 	bne.w	8010bc4 <HAL_GPIO_Init+0x10>
  }
}
 8010ed4:	bf00      	nop
 8010ed6:	bf00      	nop
 8010ed8:	371c      	adds	r7, #28
 8010eda:	46bd      	mov	sp, r7
 8010edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee0:	4770      	bx	lr
 8010ee2:	bf00      	nop
 8010ee4:	40021000 	.word	0x40021000
 8010ee8:	40010000 	.word	0x40010000
 8010eec:	48000400 	.word	0x48000400
 8010ef0:	48000800 	.word	0x48000800
 8010ef4:	48000c00 	.word	0x48000c00
 8010ef8:	48001000 	.word	0x48001000
 8010efc:	48001400 	.word	0x48001400
 8010f00:	48001800 	.word	0x48001800
 8010f04:	40010400 	.word	0x40010400

08010f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b085      	sub	sp, #20
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	460b      	mov	r3, r1
 8010f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	691a      	ldr	r2, [r3, #16]
 8010f18:	887b      	ldrh	r3, [r7, #2]
 8010f1a:	4013      	ands	r3, r2
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d002      	beq.n	8010f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8010f20:	2301      	movs	r3, #1
 8010f22:	73fb      	strb	r3, [r7, #15]
 8010f24:	e001      	b.n	8010f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010f26:	2300      	movs	r3, #0
 8010f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3714      	adds	r7, #20
 8010f30:	46bd      	mov	sp, r7
 8010f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f36:	4770      	bx	lr

08010f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b083      	sub	sp, #12
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	460b      	mov	r3, r1
 8010f42:	807b      	strh	r3, [r7, #2]
 8010f44:	4613      	mov	r3, r2
 8010f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010f48:	787b      	ldrb	r3, [r7, #1]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d003      	beq.n	8010f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010f4e:	887a      	ldrh	r2, [r7, #2]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8010f54:	e002      	b.n	8010f5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010f56:	887a      	ldrh	r2, [r7, #2]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010f5c:	bf00      	nop
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	4603      	mov	r3, r0
 8010f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8010f72:	4b08      	ldr	r3, [pc, #32]	; (8010f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010f74:	695a      	ldr	r2, [r3, #20]
 8010f76:	88fb      	ldrh	r3, [r7, #6]
 8010f78:	4013      	ands	r3, r2
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d006      	beq.n	8010f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010f7e:	4a05      	ldr	r2, [pc, #20]	; (8010f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010f80:	88fb      	ldrh	r3, [r7, #6]
 8010f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010f84:	88fb      	ldrh	r3, [r7, #6]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f000 f806 	bl	8010f98 <HAL_GPIO_EXTI_Callback>
  }
}
 8010f8c:	bf00      	nop
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}
 8010f94:	40010400 	.word	0x40010400

08010f98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b083      	sub	sp, #12
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8010fa2:	bf00      	nop
 8010fa4:	370c      	adds	r7, #12
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr

08010fae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010fae:	b580      	push	{r7, lr}
 8010fb0:	b082      	sub	sp, #8
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d101      	bne.n	8010fc0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	e08d      	b.n	80110dc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d106      	bne.n	8010fda <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f7fe ffbd 	bl	800ff54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2224      	movs	r2, #36	; 0x24
 8010fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f022 0201 	bic.w	r2, r2, #1
 8010ff0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	685a      	ldr	r2, [r3, #4]
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010ffe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	689a      	ldr	r2, [r3, #8]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801100e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	2b01      	cmp	r3, #1
 8011016:	d107      	bne.n	8011028 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	689a      	ldr	r2, [r3, #8]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011024:	609a      	str	r2, [r3, #8]
 8011026:	e006      	b.n	8011036 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	689a      	ldr	r2, [r3, #8]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8011034:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	68db      	ldr	r3, [r3, #12]
 801103a:	2b02      	cmp	r3, #2
 801103c:	d108      	bne.n	8011050 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	685a      	ldr	r2, [r3, #4]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801104c:	605a      	str	r2, [r3, #4]
 801104e:	e007      	b.n	8011060 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	685a      	ldr	r2, [r3, #4]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801105e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	685b      	ldr	r3, [r3, #4]
 8011066:	687a      	ldr	r2, [r7, #4]
 8011068:	6812      	ldr	r2, [r2, #0]
 801106a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801106e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011072:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	68da      	ldr	r2, [r3, #12]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011082:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	691a      	ldr	r2, [r3, #16]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	695b      	ldr	r3, [r3, #20]
 801108c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	699b      	ldr	r3, [r3, #24]
 8011094:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	430a      	orrs	r2, r1
 801109c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	69d9      	ldr	r1, [r3, #28]
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6a1a      	ldr	r2, [r3, #32]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	430a      	orrs	r2, r1
 80110ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	681a      	ldr	r2, [r3, #0]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f042 0201 	orr.w	r2, r2, #1
 80110bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2200      	movs	r2, #0
 80110c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2220      	movs	r2, #32
 80110c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2200      	movs	r2, #0
 80110d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2200      	movs	r2, #0
 80110d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80110da:	2300      	movs	r3, #0
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3708      	adds	r7, #8
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}

080110e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	2b20      	cmp	r3, #32
 80110f8:	d138      	bne.n	801116c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011100:	2b01      	cmp	r3, #1
 8011102:	d101      	bne.n	8011108 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011104:	2302      	movs	r3, #2
 8011106:	e032      	b.n	801116e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2201      	movs	r2, #1
 801110c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2224      	movs	r2, #36	; 0x24
 8011114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	681a      	ldr	r2, [r3, #0]
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	f022 0201 	bic.w	r2, r2, #1
 8011126:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011136:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	6819      	ldr	r1, [r3, #0]
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	683a      	ldr	r2, [r7, #0]
 8011144:	430a      	orrs	r2, r1
 8011146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	f042 0201 	orr.w	r2, r2, #1
 8011156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2220      	movs	r2, #32
 801115c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2200      	movs	r2, #0
 8011164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011168:	2300      	movs	r3, #0
 801116a:	e000      	b.n	801116e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801116c:	2302      	movs	r3, #2
  }
}
 801116e:	4618      	mov	r0, r3
 8011170:	370c      	adds	r7, #12
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr

0801117a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801117a:	b480      	push	{r7}
 801117c:	b085      	sub	sp, #20
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
 8011182:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801118a:	b2db      	uxtb	r3, r3
 801118c:	2b20      	cmp	r3, #32
 801118e:	d139      	bne.n	8011204 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011196:	2b01      	cmp	r3, #1
 8011198:	d101      	bne.n	801119e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801119a:	2302      	movs	r3, #2
 801119c:	e033      	b.n	8011206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2201      	movs	r2, #1
 80111a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2224      	movs	r2, #36	; 0x24
 80111aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	681a      	ldr	r2, [r3, #0]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f022 0201 	bic.w	r2, r2, #1
 80111bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80111cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	021b      	lsls	r3, r3, #8
 80111d2:	68fa      	ldr	r2, [r7, #12]
 80111d4:	4313      	orrs	r3, r2
 80111d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	68fa      	ldr	r2, [r7, #12]
 80111de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	f042 0201 	orr.w	r2, r2, #1
 80111ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2220      	movs	r2, #32
 80111f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011200:	2300      	movs	r3, #0
 8011202:	e000      	b.n	8011206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011204:	2302      	movs	r3, #2
  }
}
 8011206:	4618      	mov	r0, r3
 8011208:	3714      	adds	r7, #20
 801120a:	46bd      	mov	sp, r7
 801120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011210:	4770      	bx	lr

08011212 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8011212:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011214:	b08f      	sub	sp, #60	; 0x3c
 8011216:	af0a      	add	r7, sp, #40	; 0x28
 8011218:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d101      	bne.n	8011224 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011220:	2301      	movs	r3, #1
 8011222:	e116      	b.n	8011452 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8011230:	b2db      	uxtb	r3, r3
 8011232:	2b00      	cmp	r3, #0
 8011234:	d106      	bne.n	8011244 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2200      	movs	r2, #0
 801123a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f7ff f812 	bl	8010268 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2203      	movs	r2, #3
 8011248:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011254:	2b00      	cmp	r3, #0
 8011256:	d102      	bne.n	801125e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2200      	movs	r2, #0
 801125c:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	4618      	mov	r0, r3
 8011264:	f002 fb9f 	bl	80139a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	603b      	str	r3, [r7, #0]
 801126e:	687e      	ldr	r6, [r7, #4]
 8011270:	466d      	mov	r5, sp
 8011272:	f106 0410 	add.w	r4, r6, #16
 8011276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801127a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801127c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801127e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011282:	e885 0003 	stmia.w	r5, {r0, r1}
 8011286:	1d33      	adds	r3, r6, #4
 8011288:	cb0e      	ldmia	r3, {r1, r2, r3}
 801128a:	6838      	ldr	r0, [r7, #0]
 801128c:	f002 fb5f 	bl	801394e <USB_CoreInit>
 8011290:	4603      	mov	r3, r0
 8011292:	2b00      	cmp	r3, #0
 8011294:	d005      	beq.n	80112a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2202      	movs	r2, #2
 801129a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 801129e:	2301      	movs	r3, #1
 80112a0:	e0d7      	b.n	8011452 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2100      	movs	r1, #0
 80112a8:	4618      	mov	r0, r3
 80112aa:	f002 fb8d 	bl	80139c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80112ae:	2300      	movs	r3, #0
 80112b0:	73fb      	strb	r3, [r7, #15]
 80112b2:	e04a      	b.n	801134a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80112b4:	7bfa      	ldrb	r2, [r7, #15]
 80112b6:	6879      	ldr	r1, [r7, #4]
 80112b8:	4613      	mov	r3, r2
 80112ba:	00db      	lsls	r3, r3, #3
 80112bc:	4413      	add	r3, r2
 80112be:	009b      	lsls	r3, r3, #2
 80112c0:	440b      	add	r3, r1
 80112c2:	333d      	adds	r3, #61	; 0x3d
 80112c4:	2201      	movs	r2, #1
 80112c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80112c8:	7bfa      	ldrb	r2, [r7, #15]
 80112ca:	6879      	ldr	r1, [r7, #4]
 80112cc:	4613      	mov	r3, r2
 80112ce:	00db      	lsls	r3, r3, #3
 80112d0:	4413      	add	r3, r2
 80112d2:	009b      	lsls	r3, r3, #2
 80112d4:	440b      	add	r3, r1
 80112d6:	333c      	adds	r3, #60	; 0x3c
 80112d8:	7bfa      	ldrb	r2, [r7, #15]
 80112da:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80112dc:	7bfa      	ldrb	r2, [r7, #15]
 80112de:	7bfb      	ldrb	r3, [r7, #15]
 80112e0:	b298      	uxth	r0, r3
 80112e2:	6879      	ldr	r1, [r7, #4]
 80112e4:	4613      	mov	r3, r2
 80112e6:	00db      	lsls	r3, r3, #3
 80112e8:	4413      	add	r3, r2
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	440b      	add	r3, r1
 80112ee:	3356      	adds	r3, #86	; 0x56
 80112f0:	4602      	mov	r2, r0
 80112f2:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80112f4:	7bfa      	ldrb	r2, [r7, #15]
 80112f6:	6879      	ldr	r1, [r7, #4]
 80112f8:	4613      	mov	r3, r2
 80112fa:	00db      	lsls	r3, r3, #3
 80112fc:	4413      	add	r3, r2
 80112fe:	009b      	lsls	r3, r3, #2
 8011300:	440b      	add	r3, r1
 8011302:	3340      	adds	r3, #64	; 0x40
 8011304:	2200      	movs	r2, #0
 8011306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8011308:	7bfa      	ldrb	r2, [r7, #15]
 801130a:	6879      	ldr	r1, [r7, #4]
 801130c:	4613      	mov	r3, r2
 801130e:	00db      	lsls	r3, r3, #3
 8011310:	4413      	add	r3, r2
 8011312:	009b      	lsls	r3, r3, #2
 8011314:	440b      	add	r3, r1
 8011316:	3344      	adds	r3, #68	; 0x44
 8011318:	2200      	movs	r2, #0
 801131a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801131c:	7bfa      	ldrb	r2, [r7, #15]
 801131e:	6879      	ldr	r1, [r7, #4]
 8011320:	4613      	mov	r3, r2
 8011322:	00db      	lsls	r3, r3, #3
 8011324:	4413      	add	r3, r2
 8011326:	009b      	lsls	r3, r3, #2
 8011328:	440b      	add	r3, r1
 801132a:	3348      	adds	r3, #72	; 0x48
 801132c:	2200      	movs	r2, #0
 801132e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011330:	7bfa      	ldrb	r2, [r7, #15]
 8011332:	6879      	ldr	r1, [r7, #4]
 8011334:	4613      	mov	r3, r2
 8011336:	00db      	lsls	r3, r3, #3
 8011338:	4413      	add	r3, r2
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	440b      	add	r3, r1
 801133e:	334c      	adds	r3, #76	; 0x4c
 8011340:	2200      	movs	r2, #0
 8011342:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011344:	7bfb      	ldrb	r3, [r7, #15]
 8011346:	3301      	adds	r3, #1
 8011348:	73fb      	strb	r3, [r7, #15]
 801134a:	7bfa      	ldrb	r2, [r7, #15]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	429a      	cmp	r2, r3
 8011352:	d3af      	bcc.n	80112b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011354:	2300      	movs	r3, #0
 8011356:	73fb      	strb	r3, [r7, #15]
 8011358:	e044      	b.n	80113e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801135a:	7bfa      	ldrb	r2, [r7, #15]
 801135c:	6879      	ldr	r1, [r7, #4]
 801135e:	4613      	mov	r3, r2
 8011360:	00db      	lsls	r3, r3, #3
 8011362:	4413      	add	r3, r2
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	440b      	add	r3, r1
 8011368:	f203 237d 	addw	r3, r3, #637	; 0x27d
 801136c:	2200      	movs	r2, #0
 801136e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011370:	7bfa      	ldrb	r2, [r7, #15]
 8011372:	6879      	ldr	r1, [r7, #4]
 8011374:	4613      	mov	r3, r2
 8011376:	00db      	lsls	r3, r3, #3
 8011378:	4413      	add	r3, r2
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	440b      	add	r3, r1
 801137e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8011382:	7bfa      	ldrb	r2, [r7, #15]
 8011384:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8011386:	7bfa      	ldrb	r2, [r7, #15]
 8011388:	6879      	ldr	r1, [r7, #4]
 801138a:	4613      	mov	r3, r2
 801138c:	00db      	lsls	r3, r3, #3
 801138e:	4413      	add	r3, r2
 8011390:	009b      	lsls	r3, r3, #2
 8011392:	440b      	add	r3, r1
 8011394:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011398:	2200      	movs	r2, #0
 801139a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801139c:	7bfa      	ldrb	r2, [r7, #15]
 801139e:	6879      	ldr	r1, [r7, #4]
 80113a0:	4613      	mov	r3, r2
 80113a2:	00db      	lsls	r3, r3, #3
 80113a4:	4413      	add	r3, r2
 80113a6:	009b      	lsls	r3, r3, #2
 80113a8:	440b      	add	r3, r1
 80113aa:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80113ae:	2200      	movs	r2, #0
 80113b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80113b2:	7bfa      	ldrb	r2, [r7, #15]
 80113b4:	6879      	ldr	r1, [r7, #4]
 80113b6:	4613      	mov	r3, r2
 80113b8:	00db      	lsls	r3, r3, #3
 80113ba:	4413      	add	r3, r2
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	440b      	add	r3, r1
 80113c0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80113c4:	2200      	movs	r2, #0
 80113c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80113c8:	7bfa      	ldrb	r2, [r7, #15]
 80113ca:	6879      	ldr	r1, [r7, #4]
 80113cc:	4613      	mov	r3, r2
 80113ce:	00db      	lsls	r3, r3, #3
 80113d0:	4413      	add	r3, r2
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	440b      	add	r3, r1
 80113d6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80113da:	2200      	movs	r2, #0
 80113dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80113de:	7bfb      	ldrb	r3, [r7, #15]
 80113e0:	3301      	adds	r3, #1
 80113e2:	73fb      	strb	r3, [r7, #15]
 80113e4:	7bfa      	ldrb	r2, [r7, #15]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d3b5      	bcc.n	801135a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	603b      	str	r3, [r7, #0]
 80113f4:	687e      	ldr	r6, [r7, #4]
 80113f6:	466d      	mov	r5, sp
 80113f8:	f106 0410 	add.w	r4, r6, #16
 80113fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011404:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011408:	e885 0003 	stmia.w	r5, {r0, r1}
 801140c:	1d33      	adds	r3, r6, #4
 801140e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011410:	6838      	ldr	r0, [r7, #0]
 8011412:	f002 fb25 	bl	8013a60 <USB_DevInit>
 8011416:	4603      	mov	r3, r0
 8011418:	2b00      	cmp	r3, #0
 801141a:	d005      	beq.n	8011428 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2202      	movs	r2, #2
 8011420:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8011424:	2301      	movs	r3, #1
 8011426:	e014      	b.n	8011452 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2200      	movs	r2, #0
 801142c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2201      	movs	r2, #1
 8011434:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801143c:	2b01      	cmp	r3, #1
 801143e:	d102      	bne.n	8011446 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f000 f80a 	bl	801145a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4618      	mov	r0, r3
 801144c:	f002 fcc7 	bl	8013dde <USB_DevDisconnect>

  return HAL_OK;
 8011450:	2300      	movs	r3, #0
}
 8011452:	4618      	mov	r0, r3
 8011454:	3714      	adds	r7, #20
 8011456:	46bd      	mov	sp, r7
 8011458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801145a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801145a:	b480      	push	{r7}
 801145c:	b085      	sub	sp, #20
 801145e:	af00      	add	r7, sp, #0
 8011460:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2201      	movs	r2, #1
 801146c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2200      	movs	r2, #0
 8011474:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	699b      	ldr	r3, [r3, #24]
 801147c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801148c:	f043 0303 	orr.w	r3, r3, #3
 8011490:	68fa      	ldr	r2, [r7, #12]
 8011492:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8011494:	2300      	movs	r3, #0
}
 8011496:	4618      	mov	r0, r3
 8011498:	3714      	adds	r7, #20
 801149a:	46bd      	mov	sp, r7
 801149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a0:	4770      	bx	lr
	...

080114a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80114a4:	b480      	push	{r7}
 80114a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80114a8:	4b05      	ldr	r3, [pc, #20]	; (80114c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	4a04      	ldr	r2, [pc, #16]	; (80114c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80114ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80114b2:	6013      	str	r3, [r2, #0]
}
 80114b4:	bf00      	nop
 80114b6:	46bd      	mov	sp, r7
 80114b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop
 80114c0:	40007000 	.word	0x40007000

080114c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80114c4:	b480      	push	{r7}
 80114c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80114c8:	4b04      	ldr	r3, [pc, #16]	; (80114dc <HAL_PWREx_GetVoltageRange+0x18>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr
 80114da:	bf00      	nop
 80114dc:	40007000 	.word	0x40007000

080114e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b085      	sub	sp, #20
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114ee:	d130      	bne.n	8011552 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80114f0:	4b23      	ldr	r3, [pc, #140]	; (8011580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80114f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114fc:	d038      	beq.n	8011570 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80114fe:	4b20      	ldr	r3, [pc, #128]	; (8011580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8011506:	4a1e      	ldr	r2, [pc, #120]	; (8011580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801150c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801150e:	4b1d      	ldr	r3, [pc, #116]	; (8011584 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	2232      	movs	r2, #50	; 0x32
 8011514:	fb02 f303 	mul.w	r3, r2, r3
 8011518:	4a1b      	ldr	r2, [pc, #108]	; (8011588 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801151a:	fba2 2303 	umull	r2, r3, r2, r3
 801151e:	0c9b      	lsrs	r3, r3, #18
 8011520:	3301      	adds	r3, #1
 8011522:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8011524:	e002      	b.n	801152c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	3b01      	subs	r3, #1
 801152a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801152c:	4b14      	ldr	r3, [pc, #80]	; (8011580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801152e:	695b      	ldr	r3, [r3, #20]
 8011530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011538:	d102      	bne.n	8011540 <HAL_PWREx_ControlVoltageScaling+0x60>
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d1f2      	bne.n	8011526 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8011540:	4b0f      	ldr	r3, [pc, #60]	; (8011580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011542:	695b      	ldr	r3, [r3, #20]
 8011544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801154c:	d110      	bne.n	8011570 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 801154e:	2303      	movs	r3, #3
 8011550:	e00f      	b.n	8011572 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8011552:	4b0b      	ldr	r3, [pc, #44]	; (8011580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801155a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801155e:	d007      	beq.n	8011570 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8011560:	4b07      	ldr	r3, [pc, #28]	; (8011580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8011568:	4a05      	ldr	r2, [pc, #20]	; (8011580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801156a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801156e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8011570:	2300      	movs	r3, #0
}
 8011572:	4618      	mov	r0, r3
 8011574:	3714      	adds	r7, #20
 8011576:	46bd      	mov	sp, r7
 8011578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157c:	4770      	bx	lr
 801157e:	bf00      	nop
 8011580:	40007000 	.word	0x40007000
 8011584:	20000174 	.word	0x20000174
 8011588:	431bde83 	.word	0x431bde83

0801158c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 801158c:	b480      	push	{r7}
 801158e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8011590:	4b05      	ldr	r3, [pc, #20]	; (80115a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	4a04      	ldr	r2, [pc, #16]	; (80115a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8011596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801159a:	6053      	str	r3, [r2, #4]
}
 801159c:	bf00      	nop
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr
 80115a6:	bf00      	nop
 80115a8:	40007000 	.word	0x40007000

080115ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b086      	sub	sp, #24
 80115b0:	af02      	add	r7, sp, #8
 80115b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80115b4:	f7ff f8b0 	bl	8010718 <HAL_GetTick>
 80115b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d101      	bne.n	80115c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80115c0:	2301      	movs	r3, #1
 80115c2:	e063      	b.n	801168c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d10b      	bne.n	80115e8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2200      	movs	r2, #0
 80115d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f7fe fd19 	bl	8010010 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80115de:	f241 3188 	movw	r1, #5000	; 0x1388
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f000 f858 	bl	8011698 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	689b      	ldr	r3, [r3, #8]
 80115f6:	3b01      	subs	r3, #1
 80115f8:	021a      	lsls	r2, r3, #8
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	430a      	orrs	r2, r1
 8011600:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011606:	9300      	str	r3, [sp, #0]
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2200      	movs	r2, #0
 801160c:	2120      	movs	r1, #32
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	f000 f850 	bl	80116b4 <QSPI_WaitFlagStateUntilTimeout>
 8011614:	4603      	mov	r3, r0
 8011616:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8011618:	7afb      	ldrb	r3, [r7, #11]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d131      	bne.n	8011682 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011628:	f023 0310 	bic.w	r3, r3, #16
 801162c:	687a      	ldr	r2, [r7, #4]
 801162e:	6852      	ldr	r2, [r2, #4]
 8011630:	0611      	lsls	r1, r2, #24
 8011632:	687a      	ldr	r2, [r7, #4]
 8011634:	68d2      	ldr	r2, [r2, #12]
 8011636:	4311      	orrs	r1, r2
 8011638:	687a      	ldr	r2, [r7, #4]
 801163a:	6812      	ldr	r2, [r2, #0]
 801163c:	430b      	orrs	r3, r1
 801163e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	685a      	ldr	r2, [r3, #4]
 8011646:	4b13      	ldr	r3, [pc, #76]	; (8011694 <HAL_QSPI_Init+0xe8>)
 8011648:	4013      	ands	r3, r2
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	6912      	ldr	r2, [r2, #16]
 801164e:	0411      	lsls	r1, r2, #16
 8011650:	687a      	ldr	r2, [r7, #4]
 8011652:	6952      	ldr	r2, [r2, #20]
 8011654:	4311      	orrs	r1, r2
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	6992      	ldr	r2, [r2, #24]
 801165a:	4311      	orrs	r1, r2
 801165c:	687a      	ldr	r2, [r7, #4]
 801165e:	6812      	ldr	r2, [r2, #0]
 8011660:	430b      	orrs	r3, r1
 8011662:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f042 0201 	orr.w	r2, r2, #1
 8011672:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	2200      	movs	r2, #0
 8011678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2201      	movs	r2, #1
 801167e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2200      	movs	r2, #0
 8011686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 801168a:	7afb      	ldrb	r3, [r7, #11]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3710      	adds	r7, #16
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	ffe0f8fe 	.word	0xffe0f8fe

08011698 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	683a      	ldr	r2, [r7, #0]
 80116a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80116a8:	bf00      	nop
 80116aa:	370c      	adds	r7, #12
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr

080116b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	603b      	str	r3, [r7, #0]
 80116c0:	4613      	mov	r3, r2
 80116c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80116c4:	e01a      	b.n	80116fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80116c6:	69bb      	ldr	r3, [r7, #24]
 80116c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116cc:	d016      	beq.n	80116fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80116ce:	f7ff f823 	bl	8010718 <HAL_GetTick>
 80116d2:	4602      	mov	r2, r0
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	1ad3      	subs	r3, r2, r3
 80116d8:	69ba      	ldr	r2, [r7, #24]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d302      	bcc.n	80116e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d10b      	bne.n	80116fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2204      	movs	r2, #4
 80116e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116f0:	f043 0201 	orr.w	r2, r3, #1
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80116f8:	2301      	movs	r3, #1
 80116fa:	e00e      	b.n	801171a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	689a      	ldr	r2, [r3, #8]
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	4013      	ands	r3, r2
 8011706:	2b00      	cmp	r3, #0
 8011708:	bf14      	ite	ne
 801170a:	2301      	movne	r3, #1
 801170c:	2300      	moveq	r3, #0
 801170e:	b2db      	uxtb	r3, r3
 8011710:	461a      	mov	r2, r3
 8011712:	79fb      	ldrb	r3, [r7, #7]
 8011714:	429a      	cmp	r2, r3
 8011716:	d1d6      	bne.n	80116c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011718:	2300      	movs	r3, #0
}
 801171a:	4618      	mov	r0, r3
 801171c:	3710      	adds	r7, #16
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
	...

08011724 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b088      	sub	sp, #32
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d101      	bne.n	8011736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011732:	2301      	movs	r3, #1
 8011734:	e3ca      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011736:	4b97      	ldr	r3, [pc, #604]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	f003 030c 	and.w	r3, r3, #12
 801173e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011740:	4b94      	ldr	r3, [pc, #592]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011742:	68db      	ldr	r3, [r3, #12]
 8011744:	f003 0303 	and.w	r3, r3, #3
 8011748:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	f003 0310 	and.w	r3, r3, #16
 8011752:	2b00      	cmp	r3, #0
 8011754:	f000 80e4 	beq.w	8011920 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8011758:	69bb      	ldr	r3, [r7, #24]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d007      	beq.n	801176e <HAL_RCC_OscConfig+0x4a>
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	2b0c      	cmp	r3, #12
 8011762:	f040 808b 	bne.w	801187c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	2b01      	cmp	r3, #1
 801176a:	f040 8087 	bne.w	801187c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801176e:	4b89      	ldr	r3, [pc, #548]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	f003 0302 	and.w	r3, r3, #2
 8011776:	2b00      	cmp	r3, #0
 8011778:	d005      	beq.n	8011786 <HAL_RCC_OscConfig+0x62>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	699b      	ldr	r3, [r3, #24]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d101      	bne.n	8011786 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8011782:	2301      	movs	r3, #1
 8011784:	e3a2      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6a1a      	ldr	r2, [r3, #32]
 801178a:	4b82      	ldr	r3, [pc, #520]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	f003 0308 	and.w	r3, r3, #8
 8011792:	2b00      	cmp	r3, #0
 8011794:	d004      	beq.n	80117a0 <HAL_RCC_OscConfig+0x7c>
 8011796:	4b7f      	ldr	r3, [pc, #508]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801179e:	e005      	b.n	80117ac <HAL_RCC_OscConfig+0x88>
 80117a0:	4b7c      	ldr	r3, [pc, #496]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80117a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80117a6:	091b      	lsrs	r3, r3, #4
 80117a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d223      	bcs.n	80117f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6a1b      	ldr	r3, [r3, #32]
 80117b4:	4618      	mov	r0, r3
 80117b6:	f000 fd55 	bl	8012264 <RCC_SetFlashLatencyFromMSIRange>
 80117ba:	4603      	mov	r3, r0
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d001      	beq.n	80117c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80117c0:	2301      	movs	r3, #1
 80117c2:	e383      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80117c4:	4b73      	ldr	r3, [pc, #460]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	4a72      	ldr	r2, [pc, #456]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80117ca:	f043 0308 	orr.w	r3, r3, #8
 80117ce:	6013      	str	r3, [r2, #0]
 80117d0:	4b70      	ldr	r3, [pc, #448]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6a1b      	ldr	r3, [r3, #32]
 80117dc:	496d      	ldr	r1, [pc, #436]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80117de:	4313      	orrs	r3, r2
 80117e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80117e2:	4b6c      	ldr	r3, [pc, #432]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	69db      	ldr	r3, [r3, #28]
 80117ee:	021b      	lsls	r3, r3, #8
 80117f0:	4968      	ldr	r1, [pc, #416]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80117f2:	4313      	orrs	r3, r2
 80117f4:	604b      	str	r3, [r1, #4]
 80117f6:	e025      	b.n	8011844 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80117f8:	4b66      	ldr	r3, [pc, #408]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4a65      	ldr	r2, [pc, #404]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80117fe:	f043 0308 	orr.w	r3, r3, #8
 8011802:	6013      	str	r3, [r2, #0]
 8011804:	4b63      	ldr	r3, [pc, #396]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6a1b      	ldr	r3, [r3, #32]
 8011810:	4960      	ldr	r1, [pc, #384]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011812:	4313      	orrs	r3, r2
 8011814:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011816:	4b5f      	ldr	r3, [pc, #380]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	69db      	ldr	r3, [r3, #28]
 8011822:	021b      	lsls	r3, r3, #8
 8011824:	495b      	ldr	r1, [pc, #364]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011826:	4313      	orrs	r3, r2
 8011828:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 801182a:	69bb      	ldr	r3, [r7, #24]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d109      	bne.n	8011844 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6a1b      	ldr	r3, [r3, #32]
 8011834:	4618      	mov	r0, r3
 8011836:	f000 fd15 	bl	8012264 <RCC_SetFlashLatencyFromMSIRange>
 801183a:	4603      	mov	r3, r0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d001      	beq.n	8011844 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8011840:	2301      	movs	r3, #1
 8011842:	e343      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8011844:	f000 fc4a 	bl	80120dc <HAL_RCC_GetSysClockFreq>
 8011848:	4602      	mov	r2, r0
 801184a:	4b52      	ldr	r3, [pc, #328]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 801184c:	689b      	ldr	r3, [r3, #8]
 801184e:	091b      	lsrs	r3, r3, #4
 8011850:	f003 030f 	and.w	r3, r3, #15
 8011854:	4950      	ldr	r1, [pc, #320]	; (8011998 <HAL_RCC_OscConfig+0x274>)
 8011856:	5ccb      	ldrb	r3, [r1, r3]
 8011858:	f003 031f 	and.w	r3, r3, #31
 801185c:	fa22 f303 	lsr.w	r3, r2, r3
 8011860:	4a4e      	ldr	r2, [pc, #312]	; (801199c <HAL_RCC_OscConfig+0x278>)
 8011862:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8011864:	4b4e      	ldr	r3, [pc, #312]	; (80119a0 <HAL_RCC_OscConfig+0x27c>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	4618      	mov	r0, r3
 801186a:	f7fe ff05 	bl	8010678 <HAL_InitTick>
 801186e:	4603      	mov	r3, r0
 8011870:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8011872:	7bfb      	ldrb	r3, [r7, #15]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d052      	beq.n	801191e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8011878:	7bfb      	ldrb	r3, [r7, #15]
 801187a:	e327      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	699b      	ldr	r3, [r3, #24]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d032      	beq.n	80118ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8011884:	4b43      	ldr	r3, [pc, #268]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	4a42      	ldr	r2, [pc, #264]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 801188a:	f043 0301 	orr.w	r3, r3, #1
 801188e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011890:	f7fe ff42 	bl	8010718 <HAL_GetTick>
 8011894:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011896:	e008      	b.n	80118aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011898:	f7fe ff3e 	bl	8010718 <HAL_GetTick>
 801189c:	4602      	mov	r2, r0
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	1ad3      	subs	r3, r2, r3
 80118a2:	2b02      	cmp	r3, #2
 80118a4:	d901      	bls.n	80118aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80118a6:	2303      	movs	r3, #3
 80118a8:	e310      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80118aa:	4b3a      	ldr	r3, [pc, #232]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	f003 0302 	and.w	r3, r3, #2
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d0f0      	beq.n	8011898 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80118b6:	4b37      	ldr	r3, [pc, #220]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4a36      	ldr	r2, [pc, #216]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80118bc:	f043 0308 	orr.w	r3, r3, #8
 80118c0:	6013      	str	r3, [r2, #0]
 80118c2:	4b34      	ldr	r3, [pc, #208]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6a1b      	ldr	r3, [r3, #32]
 80118ce:	4931      	ldr	r1, [pc, #196]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80118d0:	4313      	orrs	r3, r2
 80118d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80118d4:	4b2f      	ldr	r3, [pc, #188]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	69db      	ldr	r3, [r3, #28]
 80118e0:	021b      	lsls	r3, r3, #8
 80118e2:	492c      	ldr	r1, [pc, #176]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80118e4:	4313      	orrs	r3, r2
 80118e6:	604b      	str	r3, [r1, #4]
 80118e8:	e01a      	b.n	8011920 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80118ea:	4b2a      	ldr	r3, [pc, #168]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	4a29      	ldr	r2, [pc, #164]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 80118f0:	f023 0301 	bic.w	r3, r3, #1
 80118f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80118f6:	f7fe ff0f 	bl	8010718 <HAL_GetTick>
 80118fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80118fc:	e008      	b.n	8011910 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80118fe:	f7fe ff0b 	bl	8010718 <HAL_GetTick>
 8011902:	4602      	mov	r2, r0
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	1ad3      	subs	r3, r2, r3
 8011908:	2b02      	cmp	r3, #2
 801190a:	d901      	bls.n	8011910 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 801190c:	2303      	movs	r3, #3
 801190e:	e2dd      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8011910:	4b20      	ldr	r3, [pc, #128]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f003 0302 	and.w	r3, r3, #2
 8011918:	2b00      	cmp	r3, #0
 801191a:	d1f0      	bne.n	80118fe <HAL_RCC_OscConfig+0x1da>
 801191c:	e000      	b.n	8011920 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801191e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	f003 0301 	and.w	r3, r3, #1
 8011928:	2b00      	cmp	r3, #0
 801192a:	d074      	beq.n	8011a16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 801192c:	69bb      	ldr	r3, [r7, #24]
 801192e:	2b08      	cmp	r3, #8
 8011930:	d005      	beq.n	801193e <HAL_RCC_OscConfig+0x21a>
 8011932:	69bb      	ldr	r3, [r7, #24]
 8011934:	2b0c      	cmp	r3, #12
 8011936:	d10e      	bne.n	8011956 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	2b03      	cmp	r3, #3
 801193c:	d10b      	bne.n	8011956 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801193e:	4b15      	ldr	r3, [pc, #84]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011946:	2b00      	cmp	r3, #0
 8011948:	d064      	beq.n	8011a14 <HAL_RCC_OscConfig+0x2f0>
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d160      	bne.n	8011a14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8011952:	2301      	movs	r3, #1
 8011954:	e2ba      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801195e:	d106      	bne.n	801196e <HAL_RCC_OscConfig+0x24a>
 8011960:	4b0c      	ldr	r3, [pc, #48]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	4a0b      	ldr	r2, [pc, #44]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801196a:	6013      	str	r3, [r2, #0]
 801196c:	e026      	b.n	80119bc <HAL_RCC_OscConfig+0x298>
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011976:	d115      	bne.n	80119a4 <HAL_RCC_OscConfig+0x280>
 8011978:	4b06      	ldr	r3, [pc, #24]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	4a05      	ldr	r2, [pc, #20]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 801197e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011982:	6013      	str	r3, [r2, #0]
 8011984:	4b03      	ldr	r3, [pc, #12]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4a02      	ldr	r2, [pc, #8]	; (8011994 <HAL_RCC_OscConfig+0x270>)
 801198a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801198e:	6013      	str	r3, [r2, #0]
 8011990:	e014      	b.n	80119bc <HAL_RCC_OscConfig+0x298>
 8011992:	bf00      	nop
 8011994:	40021000 	.word	0x40021000
 8011998:	08025f6c 	.word	0x08025f6c
 801199c:	20000174 	.word	0x20000174
 80119a0:	20000178 	.word	0x20000178
 80119a4:	4ba0      	ldr	r3, [pc, #640]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	4a9f      	ldr	r2, [pc, #636]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 80119aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80119ae:	6013      	str	r3, [r2, #0]
 80119b0:	4b9d      	ldr	r3, [pc, #628]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4a9c      	ldr	r2, [pc, #624]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 80119b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80119ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d013      	beq.n	80119ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80119c4:	f7fe fea8 	bl	8010718 <HAL_GetTick>
 80119c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80119ca:	e008      	b.n	80119de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80119cc:	f7fe fea4 	bl	8010718 <HAL_GetTick>
 80119d0:	4602      	mov	r2, r0
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	1ad3      	subs	r3, r2, r3
 80119d6:	2b64      	cmp	r3, #100	; 0x64
 80119d8:	d901      	bls.n	80119de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80119da:	2303      	movs	r3, #3
 80119dc:	e276      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80119de:	4b92      	ldr	r3, [pc, #584]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d0f0      	beq.n	80119cc <HAL_RCC_OscConfig+0x2a8>
 80119ea:	e014      	b.n	8011a16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80119ec:	f7fe fe94 	bl	8010718 <HAL_GetTick>
 80119f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80119f2:	e008      	b.n	8011a06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80119f4:	f7fe fe90 	bl	8010718 <HAL_GetTick>
 80119f8:	4602      	mov	r2, r0
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	1ad3      	subs	r3, r2, r3
 80119fe:	2b64      	cmp	r3, #100	; 0x64
 8011a00:	d901      	bls.n	8011a06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8011a02:	2303      	movs	r3, #3
 8011a04:	e262      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8011a06:	4b88      	ldr	r3, [pc, #544]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d1f0      	bne.n	80119f4 <HAL_RCC_OscConfig+0x2d0>
 8011a12:	e000      	b.n	8011a16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	f003 0302 	and.w	r3, r3, #2
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d060      	beq.n	8011ae4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8011a22:	69bb      	ldr	r3, [r7, #24]
 8011a24:	2b04      	cmp	r3, #4
 8011a26:	d005      	beq.n	8011a34 <HAL_RCC_OscConfig+0x310>
 8011a28:	69bb      	ldr	r3, [r7, #24]
 8011a2a:	2b0c      	cmp	r3, #12
 8011a2c:	d119      	bne.n	8011a62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	2b02      	cmp	r3, #2
 8011a32:	d116      	bne.n	8011a62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011a34:	4b7c      	ldr	r3, [pc, #496]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d005      	beq.n	8011a4c <HAL_RCC_OscConfig+0x328>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	68db      	ldr	r3, [r3, #12]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d101      	bne.n	8011a4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8011a48:	2301      	movs	r3, #1
 8011a4a:	e23f      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a4c:	4b76      	ldr	r3, [pc, #472]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	691b      	ldr	r3, [r3, #16]
 8011a58:	061b      	lsls	r3, r3, #24
 8011a5a:	4973      	ldr	r1, [pc, #460]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011a5c:	4313      	orrs	r3, r2
 8011a5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011a60:	e040      	b.n	8011ae4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d023      	beq.n	8011ab2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011a6a:	4b6f      	ldr	r3, [pc, #444]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4a6e      	ldr	r2, [pc, #440]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011a76:	f7fe fe4f 	bl	8010718 <HAL_GetTick>
 8011a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011a7c:	e008      	b.n	8011a90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011a7e:	f7fe fe4b 	bl	8010718 <HAL_GetTick>
 8011a82:	4602      	mov	r2, r0
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	1ad3      	subs	r3, r2, r3
 8011a88:	2b02      	cmp	r3, #2
 8011a8a:	d901      	bls.n	8011a90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8011a8c:	2303      	movs	r3, #3
 8011a8e:	e21d      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011a90:	4b65      	ldr	r3, [pc, #404]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d0f0      	beq.n	8011a7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a9c:	4b62      	ldr	r3, [pc, #392]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	691b      	ldr	r3, [r3, #16]
 8011aa8:	061b      	lsls	r3, r3, #24
 8011aaa:	495f      	ldr	r1, [pc, #380]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011aac:	4313      	orrs	r3, r2
 8011aae:	604b      	str	r3, [r1, #4]
 8011ab0:	e018      	b.n	8011ae4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011ab2:	4b5d      	ldr	r3, [pc, #372]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	4a5c      	ldr	r2, [pc, #368]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011abe:	f7fe fe2b 	bl	8010718 <HAL_GetTick>
 8011ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8011ac4:	e008      	b.n	8011ad8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011ac6:	f7fe fe27 	bl	8010718 <HAL_GetTick>
 8011aca:	4602      	mov	r2, r0
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	1ad3      	subs	r3, r2, r3
 8011ad0:	2b02      	cmp	r3, #2
 8011ad2:	d901      	bls.n	8011ad8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8011ad4:	2303      	movs	r3, #3
 8011ad6:	e1f9      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8011ad8:	4b53      	ldr	r3, [pc, #332]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d1f0      	bne.n	8011ac6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	f003 0308 	and.w	r3, r3, #8
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d03c      	beq.n	8011b6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	695b      	ldr	r3, [r3, #20]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d01c      	beq.n	8011b32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011af8:	4b4b      	ldr	r3, [pc, #300]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011afe:	4a4a      	ldr	r2, [pc, #296]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011b00:	f043 0301 	orr.w	r3, r3, #1
 8011b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b08:	f7fe fe06 	bl	8010718 <HAL_GetTick>
 8011b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011b0e:	e008      	b.n	8011b22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011b10:	f7fe fe02 	bl	8010718 <HAL_GetTick>
 8011b14:	4602      	mov	r2, r0
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	1ad3      	subs	r3, r2, r3
 8011b1a:	2b02      	cmp	r3, #2
 8011b1c:	d901      	bls.n	8011b22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8011b1e:	2303      	movs	r3, #3
 8011b20:	e1d4      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011b22:	4b41      	ldr	r3, [pc, #260]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011b28:	f003 0302 	and.w	r3, r3, #2
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d0ef      	beq.n	8011b10 <HAL_RCC_OscConfig+0x3ec>
 8011b30:	e01b      	b.n	8011b6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011b32:	4b3d      	ldr	r3, [pc, #244]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011b38:	4a3b      	ldr	r2, [pc, #236]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011b3a:	f023 0301 	bic.w	r3, r3, #1
 8011b3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b42:	f7fe fde9 	bl	8010718 <HAL_GetTick>
 8011b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8011b48:	e008      	b.n	8011b5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011b4a:	f7fe fde5 	bl	8010718 <HAL_GetTick>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	2b02      	cmp	r3, #2
 8011b56:	d901      	bls.n	8011b5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8011b58:	2303      	movs	r3, #3
 8011b5a:	e1b7      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8011b5c:	4b32      	ldr	r3, [pc, #200]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011b62:	f003 0302 	and.w	r3, r3, #2
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d1ef      	bne.n	8011b4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f003 0304 	and.w	r3, r3, #4
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	f000 80a6 	beq.w	8011cc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8011b7c:	4b2a      	ldr	r3, [pc, #168]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d10d      	bne.n	8011ba4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011b88:	4b27      	ldr	r3, [pc, #156]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b8c:	4a26      	ldr	r2, [pc, #152]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b92:	6593      	str	r3, [r2, #88]	; 0x58
 8011b94:	4b24      	ldr	r3, [pc, #144]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b9c:	60bb      	str	r3, [r7, #8]
 8011b9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011ba4:	4b21      	ldr	r3, [pc, #132]	; (8011c2c <HAL_RCC_OscConfig+0x508>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d118      	bne.n	8011be2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011bb0:	4b1e      	ldr	r3, [pc, #120]	; (8011c2c <HAL_RCC_OscConfig+0x508>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	4a1d      	ldr	r2, [pc, #116]	; (8011c2c <HAL_RCC_OscConfig+0x508>)
 8011bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011bba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011bbc:	f7fe fdac 	bl	8010718 <HAL_GetTick>
 8011bc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011bc2:	e008      	b.n	8011bd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011bc4:	f7fe fda8 	bl	8010718 <HAL_GetTick>
 8011bc8:	4602      	mov	r2, r0
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	1ad3      	subs	r3, r2, r3
 8011bce:	2b02      	cmp	r3, #2
 8011bd0:	d901      	bls.n	8011bd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8011bd2:	2303      	movs	r3, #3
 8011bd4:	e17a      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011bd6:	4b15      	ldr	r3, [pc, #84]	; (8011c2c <HAL_RCC_OscConfig+0x508>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d0f0      	beq.n	8011bc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	689b      	ldr	r3, [r3, #8]
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d108      	bne.n	8011bfc <HAL_RCC_OscConfig+0x4d8>
 8011bea:	4b0f      	ldr	r3, [pc, #60]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011bf0:	4a0d      	ldr	r2, [pc, #52]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011bf2:	f043 0301 	orr.w	r3, r3, #1
 8011bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011bfa:	e029      	b.n	8011c50 <HAL_RCC_OscConfig+0x52c>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	689b      	ldr	r3, [r3, #8]
 8011c00:	2b05      	cmp	r3, #5
 8011c02:	d115      	bne.n	8011c30 <HAL_RCC_OscConfig+0x50c>
 8011c04:	4b08      	ldr	r3, [pc, #32]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c0a:	4a07      	ldr	r2, [pc, #28]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011c0c:	f043 0304 	orr.w	r3, r3, #4
 8011c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011c14:	4b04      	ldr	r3, [pc, #16]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c1a:	4a03      	ldr	r2, [pc, #12]	; (8011c28 <HAL_RCC_OscConfig+0x504>)
 8011c1c:	f043 0301 	orr.w	r3, r3, #1
 8011c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011c24:	e014      	b.n	8011c50 <HAL_RCC_OscConfig+0x52c>
 8011c26:	bf00      	nop
 8011c28:	40021000 	.word	0x40021000
 8011c2c:	40007000 	.word	0x40007000
 8011c30:	4b9c      	ldr	r3, [pc, #624]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c36:	4a9b      	ldr	r2, [pc, #620]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011c38:	f023 0301 	bic.w	r3, r3, #1
 8011c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011c40:	4b98      	ldr	r3, [pc, #608]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c46:	4a97      	ldr	r2, [pc, #604]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011c48:	f023 0304 	bic.w	r3, r3, #4
 8011c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	689b      	ldr	r3, [r3, #8]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d016      	beq.n	8011c86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c58:	f7fe fd5e 	bl	8010718 <HAL_GetTick>
 8011c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011c5e:	e00a      	b.n	8011c76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011c60:	f7fe fd5a 	bl	8010718 <HAL_GetTick>
 8011c64:	4602      	mov	r2, r0
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	1ad3      	subs	r3, r2, r3
 8011c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d901      	bls.n	8011c76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8011c72:	2303      	movs	r3, #3
 8011c74:	e12a      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011c76:	4b8b      	ldr	r3, [pc, #556]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c7c:	f003 0302 	and.w	r3, r3, #2
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d0ed      	beq.n	8011c60 <HAL_RCC_OscConfig+0x53c>
 8011c84:	e015      	b.n	8011cb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c86:	f7fe fd47 	bl	8010718 <HAL_GetTick>
 8011c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011c8c:	e00a      	b.n	8011ca4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011c8e:	f7fe fd43 	bl	8010718 <HAL_GetTick>
 8011c92:	4602      	mov	r2, r0
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	d901      	bls.n	8011ca4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8011ca0:	2303      	movs	r3, #3
 8011ca2:	e113      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011ca4:	4b7f      	ldr	r3, [pc, #508]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011caa:	f003 0302 	and.w	r3, r3, #2
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d1ed      	bne.n	8011c8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011cb2:	7ffb      	ldrb	r3, [r7, #31]
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d105      	bne.n	8011cc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011cb8:	4b7a      	ldr	r3, [pc, #488]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cbc:	4a79      	ldr	r2, [pc, #484]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011cc2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	f000 80fe 	beq.w	8011eca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cd2:	2b02      	cmp	r3, #2
 8011cd4:	f040 80d0 	bne.w	8011e78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8011cd8:	4b72      	ldr	r3, [pc, #456]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	f003 0203 	and.w	r2, r3, #3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d130      	bne.n	8011d4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cf6:	3b01      	subs	r3, #1
 8011cf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d127      	bne.n	8011d4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d11f      	bne.n	8011d4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011d18:	2a07      	cmp	r2, #7
 8011d1a:	bf14      	ite	ne
 8011d1c:	2201      	movne	r2, #1
 8011d1e:	2200      	moveq	r2, #0
 8011d20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011d22:	4293      	cmp	r3, r2
 8011d24:	d113      	bne.n	8011d4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d30:	085b      	lsrs	r3, r3, #1
 8011d32:	3b01      	subs	r3, #1
 8011d34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d109      	bne.n	8011d4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d44:	085b      	lsrs	r3, r3, #1
 8011d46:	3b01      	subs	r3, #1
 8011d48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d06e      	beq.n	8011e2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011d4e:	69bb      	ldr	r3, [r7, #24]
 8011d50:	2b0c      	cmp	r3, #12
 8011d52:	d069      	beq.n	8011e28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8011d54:	4b53      	ldr	r3, [pc, #332]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d105      	bne.n	8011d6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8011d60:	4b50      	ldr	r3, [pc, #320]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d001      	beq.n	8011d70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	e0ad      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8011d70:	4b4c      	ldr	r3, [pc, #304]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	4a4b      	ldr	r2, [pc, #300]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011d7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8011d7c:	f7fe fccc 	bl	8010718 <HAL_GetTick>
 8011d80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011d82:	e008      	b.n	8011d96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011d84:	f7fe fcc8 	bl	8010718 <HAL_GetTick>
 8011d88:	4602      	mov	r2, r0
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	1ad3      	subs	r3, r2, r3
 8011d8e:	2b02      	cmp	r3, #2
 8011d90:	d901      	bls.n	8011d96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8011d92:	2303      	movs	r3, #3
 8011d94:	e09a      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011d96:	4b43      	ldr	r3, [pc, #268]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d1f0      	bne.n	8011d84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011da2:	4b40      	ldr	r3, [pc, #256]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011da4:	68da      	ldr	r2, [r3, #12]
 8011da6:	4b40      	ldr	r3, [pc, #256]	; (8011ea8 <HAL_RCC_OscConfig+0x784>)
 8011da8:	4013      	ands	r3, r2
 8011daa:	687a      	ldr	r2, [r7, #4]
 8011dac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011db2:	3a01      	subs	r2, #1
 8011db4:	0112      	lsls	r2, r2, #4
 8011db6:	4311      	orrs	r1, r2
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011dbc:	0212      	lsls	r2, r2, #8
 8011dbe:	4311      	orrs	r1, r2
 8011dc0:	687a      	ldr	r2, [r7, #4]
 8011dc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011dc4:	0852      	lsrs	r2, r2, #1
 8011dc6:	3a01      	subs	r2, #1
 8011dc8:	0552      	lsls	r2, r2, #21
 8011dca:	4311      	orrs	r1, r2
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011dd0:	0852      	lsrs	r2, r2, #1
 8011dd2:	3a01      	subs	r2, #1
 8011dd4:	0652      	lsls	r2, r2, #25
 8011dd6:	4311      	orrs	r1, r2
 8011dd8:	687a      	ldr	r2, [r7, #4]
 8011dda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011ddc:	0912      	lsrs	r2, r2, #4
 8011dde:	0452      	lsls	r2, r2, #17
 8011de0:	430a      	orrs	r2, r1
 8011de2:	4930      	ldr	r1, [pc, #192]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011de4:	4313      	orrs	r3, r2
 8011de6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8011de8:	4b2e      	ldr	r3, [pc, #184]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	4a2d      	ldr	r2, [pc, #180]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011df2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8011df4:	4b2b      	ldr	r3, [pc, #172]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	4a2a      	ldr	r2, [pc, #168]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011dfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8011e00:	f7fe fc8a 	bl	8010718 <HAL_GetTick>
 8011e04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011e06:	e008      	b.n	8011e1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011e08:	f7fe fc86 	bl	8010718 <HAL_GetTick>
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	1ad3      	subs	r3, r2, r3
 8011e12:	2b02      	cmp	r3, #2
 8011e14:	d901      	bls.n	8011e1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8011e16:	2303      	movs	r3, #3
 8011e18:	e058      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011e1a:	4b22      	ldr	r3, [pc, #136]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d0f0      	beq.n	8011e08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011e26:	e050      	b.n	8011eca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8011e28:	2301      	movs	r3, #1
 8011e2a:	e04f      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011e2c:	4b1d      	ldr	r3, [pc, #116]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d148      	bne.n	8011eca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8011e38:	4b1a      	ldr	r3, [pc, #104]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	4a19      	ldr	r2, [pc, #100]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011e42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8011e44:	4b17      	ldr	r3, [pc, #92]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011e46:	68db      	ldr	r3, [r3, #12]
 8011e48:	4a16      	ldr	r2, [pc, #88]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011e4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011e50:	f7fe fc62 	bl	8010718 <HAL_GetTick>
 8011e54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011e56:	e008      	b.n	8011e6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011e58:	f7fe fc5e 	bl	8010718 <HAL_GetTick>
 8011e5c:	4602      	mov	r2, r0
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	1ad3      	subs	r3, r2, r3
 8011e62:	2b02      	cmp	r3, #2
 8011e64:	d901      	bls.n	8011e6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8011e66:	2303      	movs	r3, #3
 8011e68:	e030      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011e6a:	4b0e      	ldr	r3, [pc, #56]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d0f0      	beq.n	8011e58 <HAL_RCC_OscConfig+0x734>
 8011e76:	e028      	b.n	8011eca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011e78:	69bb      	ldr	r3, [r7, #24]
 8011e7a:	2b0c      	cmp	r3, #12
 8011e7c:	d023      	beq.n	8011ec6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011e7e:	4b09      	ldr	r3, [pc, #36]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	4a08      	ldr	r2, [pc, #32]	; (8011ea4 <HAL_RCC_OscConfig+0x780>)
 8011e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e8a:	f7fe fc45 	bl	8010718 <HAL_GetTick>
 8011e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011e90:	e00c      	b.n	8011eac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011e92:	f7fe fc41 	bl	8010718 <HAL_GetTick>
 8011e96:	4602      	mov	r2, r0
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	1ad3      	subs	r3, r2, r3
 8011e9c:	2b02      	cmp	r3, #2
 8011e9e:	d905      	bls.n	8011eac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8011ea0:	2303      	movs	r3, #3
 8011ea2:	e013      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
 8011ea4:	40021000 	.word	0x40021000
 8011ea8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011eac:	4b09      	ldr	r3, [pc, #36]	; (8011ed4 <HAL_RCC_OscConfig+0x7b0>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d1ec      	bne.n	8011e92 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8011eb8:	4b06      	ldr	r3, [pc, #24]	; (8011ed4 <HAL_RCC_OscConfig+0x7b0>)
 8011eba:	68da      	ldr	r2, [r3, #12]
 8011ebc:	4905      	ldr	r1, [pc, #20]	; (8011ed4 <HAL_RCC_OscConfig+0x7b0>)
 8011ebe:	4b06      	ldr	r3, [pc, #24]	; (8011ed8 <HAL_RCC_OscConfig+0x7b4>)
 8011ec0:	4013      	ands	r3, r2
 8011ec2:	60cb      	str	r3, [r1, #12]
 8011ec4:	e001      	b.n	8011eca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	e000      	b.n	8011ecc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8011eca:	2300      	movs	r3, #0
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3720      	adds	r7, #32
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	40021000 	.word	0x40021000
 8011ed8:	feeefffc 	.word	0xfeeefffc

08011edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b084      	sub	sp, #16
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d101      	bne.n	8011ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011eec:	2301      	movs	r3, #1
 8011eee:	e0e7      	b.n	80120c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011ef0:	4b75      	ldr	r3, [pc, #468]	; (80120c8 <HAL_RCC_ClockConfig+0x1ec>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	f003 0307 	and.w	r3, r3, #7
 8011ef8:	683a      	ldr	r2, [r7, #0]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d910      	bls.n	8011f20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011efe:	4b72      	ldr	r3, [pc, #456]	; (80120c8 <HAL_RCC_ClockConfig+0x1ec>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	f023 0207 	bic.w	r2, r3, #7
 8011f06:	4970      	ldr	r1, [pc, #448]	; (80120c8 <HAL_RCC_ClockConfig+0x1ec>)
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	4313      	orrs	r3, r2
 8011f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011f0e:	4b6e      	ldr	r3, [pc, #440]	; (80120c8 <HAL_RCC_ClockConfig+0x1ec>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	f003 0307 	and.w	r3, r3, #7
 8011f16:	683a      	ldr	r2, [r7, #0]
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d001      	beq.n	8011f20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	e0cf      	b.n	80120c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	f003 0302 	and.w	r3, r3, #2
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d010      	beq.n	8011f4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	689a      	ldr	r2, [r3, #8]
 8011f30:	4b66      	ldr	r3, [pc, #408]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8011f32:	689b      	ldr	r3, [r3, #8]
 8011f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	d908      	bls.n	8011f4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011f3c:	4b63      	ldr	r3, [pc, #396]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8011f3e:	689b      	ldr	r3, [r3, #8]
 8011f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	689b      	ldr	r3, [r3, #8]
 8011f48:	4960      	ldr	r1, [pc, #384]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8011f4a:	4313      	orrs	r3, r2
 8011f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	f003 0301 	and.w	r3, r3, #1
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d04c      	beq.n	8011ff4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	2b03      	cmp	r3, #3
 8011f60:	d107      	bne.n	8011f72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011f62:	4b5a      	ldr	r3, [pc, #360]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d121      	bne.n	8011fb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8011f6e:	2301      	movs	r3, #1
 8011f70:	e0a6      	b.n	80120c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	2b02      	cmp	r3, #2
 8011f78:	d107      	bne.n	8011f8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011f7a:	4b54      	ldr	r3, [pc, #336]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d115      	bne.n	8011fb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8011f86:	2301      	movs	r3, #1
 8011f88:	e09a      	b.n	80120c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d107      	bne.n	8011fa2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011f92:	4b4e      	ldr	r3, [pc, #312]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f003 0302 	and.w	r3, r3, #2
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d109      	bne.n	8011fb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	e08e      	b.n	80120c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011fa2:	4b4a      	ldr	r3, [pc, #296]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d101      	bne.n	8011fb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8011fae:	2301      	movs	r3, #1
 8011fb0:	e086      	b.n	80120c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011fb2:	4b46      	ldr	r3, [pc, #280]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8011fb4:	689b      	ldr	r3, [r3, #8]
 8011fb6:	f023 0203 	bic.w	r2, r3, #3
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	4943      	ldr	r1, [pc, #268]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8011fc0:	4313      	orrs	r3, r2
 8011fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011fc4:	f7fe fba8 	bl	8010718 <HAL_GetTick>
 8011fc8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011fca:	e00a      	b.n	8011fe2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011fcc:	f7fe fba4 	bl	8010718 <HAL_GetTick>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	d901      	bls.n	8011fe2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8011fde:	2303      	movs	r3, #3
 8011fe0:	e06e      	b.n	80120c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011fe2:	4b3a      	ldr	r3, [pc, #232]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8011fe4:	689b      	ldr	r3, [r3, #8]
 8011fe6:	f003 020c 	and.w	r2, r3, #12
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	009b      	lsls	r3, r3, #2
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d1eb      	bne.n	8011fcc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	f003 0302 	and.w	r3, r3, #2
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d010      	beq.n	8012022 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	689a      	ldr	r2, [r3, #8]
 8012004:	4b31      	ldr	r3, [pc, #196]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8012006:	689b      	ldr	r3, [r3, #8]
 8012008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801200c:	429a      	cmp	r2, r3
 801200e:	d208      	bcs.n	8012022 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012010:	4b2e      	ldr	r3, [pc, #184]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8012012:	689b      	ldr	r3, [r3, #8]
 8012014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	689b      	ldr	r3, [r3, #8]
 801201c:	492b      	ldr	r1, [pc, #172]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 801201e:	4313      	orrs	r3, r2
 8012020:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012022:	4b29      	ldr	r3, [pc, #164]	; (80120c8 <HAL_RCC_ClockConfig+0x1ec>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	f003 0307 	and.w	r3, r3, #7
 801202a:	683a      	ldr	r2, [r7, #0]
 801202c:	429a      	cmp	r2, r3
 801202e:	d210      	bcs.n	8012052 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012030:	4b25      	ldr	r3, [pc, #148]	; (80120c8 <HAL_RCC_ClockConfig+0x1ec>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f023 0207 	bic.w	r2, r3, #7
 8012038:	4923      	ldr	r1, [pc, #140]	; (80120c8 <HAL_RCC_ClockConfig+0x1ec>)
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	4313      	orrs	r3, r2
 801203e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012040:	4b21      	ldr	r3, [pc, #132]	; (80120c8 <HAL_RCC_ClockConfig+0x1ec>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	f003 0307 	and.w	r3, r3, #7
 8012048:	683a      	ldr	r2, [r7, #0]
 801204a:	429a      	cmp	r2, r3
 801204c:	d001      	beq.n	8012052 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 801204e:	2301      	movs	r3, #1
 8012050:	e036      	b.n	80120c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	f003 0304 	and.w	r3, r3, #4
 801205a:	2b00      	cmp	r3, #0
 801205c:	d008      	beq.n	8012070 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801205e:	4b1b      	ldr	r3, [pc, #108]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8012060:	689b      	ldr	r3, [r3, #8]
 8012062:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	68db      	ldr	r3, [r3, #12]
 801206a:	4918      	ldr	r1, [pc, #96]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 801206c:	4313      	orrs	r3, r2
 801206e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	f003 0308 	and.w	r3, r3, #8
 8012078:	2b00      	cmp	r3, #0
 801207a:	d009      	beq.n	8012090 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801207c:	4b13      	ldr	r3, [pc, #76]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 801207e:	689b      	ldr	r3, [r3, #8]
 8012080:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	691b      	ldr	r3, [r3, #16]
 8012088:	00db      	lsls	r3, r3, #3
 801208a:	4910      	ldr	r1, [pc, #64]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 801208c:	4313      	orrs	r3, r2
 801208e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8012090:	f000 f824 	bl	80120dc <HAL_RCC_GetSysClockFreq>
 8012094:	4602      	mov	r2, r0
 8012096:	4b0d      	ldr	r3, [pc, #52]	; (80120cc <HAL_RCC_ClockConfig+0x1f0>)
 8012098:	689b      	ldr	r3, [r3, #8]
 801209a:	091b      	lsrs	r3, r3, #4
 801209c:	f003 030f 	and.w	r3, r3, #15
 80120a0:	490b      	ldr	r1, [pc, #44]	; (80120d0 <HAL_RCC_ClockConfig+0x1f4>)
 80120a2:	5ccb      	ldrb	r3, [r1, r3]
 80120a4:	f003 031f 	and.w	r3, r3, #31
 80120a8:	fa22 f303 	lsr.w	r3, r2, r3
 80120ac:	4a09      	ldr	r2, [pc, #36]	; (80120d4 <HAL_RCC_ClockConfig+0x1f8>)
 80120ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80120b0:	4b09      	ldr	r3, [pc, #36]	; (80120d8 <HAL_RCC_ClockConfig+0x1fc>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7fe fadf 	bl	8010678 <HAL_InitTick>
 80120ba:	4603      	mov	r3, r0
 80120bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80120be:	7afb      	ldrb	r3, [r7, #11]
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3710      	adds	r7, #16
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}
 80120c8:	40022000 	.word	0x40022000
 80120cc:	40021000 	.word	0x40021000
 80120d0:	08025f6c 	.word	0x08025f6c
 80120d4:	20000174 	.word	0x20000174
 80120d8:	20000178 	.word	0x20000178

080120dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80120dc:	b480      	push	{r7}
 80120de:	b089      	sub	sp, #36	; 0x24
 80120e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80120e2:	2300      	movs	r3, #0
 80120e4:	61fb      	str	r3, [r7, #28]
 80120e6:	2300      	movs	r3, #0
 80120e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80120ea:	4b3e      	ldr	r3, [pc, #248]	; (80121e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80120ec:	689b      	ldr	r3, [r3, #8]
 80120ee:	f003 030c 	and.w	r3, r3, #12
 80120f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80120f4:	4b3b      	ldr	r3, [pc, #236]	; (80121e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	f003 0303 	and.w	r3, r3, #3
 80120fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d005      	beq.n	8012110 <HAL_RCC_GetSysClockFreq+0x34>
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	2b0c      	cmp	r3, #12
 8012108:	d121      	bne.n	801214e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2b01      	cmp	r3, #1
 801210e:	d11e      	bne.n	801214e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8012110:	4b34      	ldr	r3, [pc, #208]	; (80121e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	f003 0308 	and.w	r3, r3, #8
 8012118:	2b00      	cmp	r3, #0
 801211a:	d107      	bne.n	801212c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801211c:	4b31      	ldr	r3, [pc, #196]	; (80121e4 <HAL_RCC_GetSysClockFreq+0x108>)
 801211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012122:	0a1b      	lsrs	r3, r3, #8
 8012124:	f003 030f 	and.w	r3, r3, #15
 8012128:	61fb      	str	r3, [r7, #28]
 801212a:	e005      	b.n	8012138 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801212c:	4b2d      	ldr	r3, [pc, #180]	; (80121e4 <HAL_RCC_GetSysClockFreq+0x108>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	091b      	lsrs	r3, r3, #4
 8012132:	f003 030f 	and.w	r3, r3, #15
 8012136:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8012138:	4a2b      	ldr	r2, [pc, #172]	; (80121e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 801213a:	69fb      	ldr	r3, [r7, #28]
 801213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012140:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d10d      	bne.n	8012164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8012148:	69fb      	ldr	r3, [r7, #28]
 801214a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801214c:	e00a      	b.n	8012164 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	2b04      	cmp	r3, #4
 8012152:	d102      	bne.n	801215a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8012154:	4b25      	ldr	r3, [pc, #148]	; (80121ec <HAL_RCC_GetSysClockFreq+0x110>)
 8012156:	61bb      	str	r3, [r7, #24]
 8012158:	e004      	b.n	8012164 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	2b08      	cmp	r3, #8
 801215e:	d101      	bne.n	8012164 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8012160:	4b23      	ldr	r3, [pc, #140]	; (80121f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8012162:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	2b0c      	cmp	r3, #12
 8012168:	d134      	bne.n	80121d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801216a:	4b1e      	ldr	r3, [pc, #120]	; (80121e4 <HAL_RCC_GetSysClockFreq+0x108>)
 801216c:	68db      	ldr	r3, [r3, #12]
 801216e:	f003 0303 	and.w	r3, r3, #3
 8012172:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	2b02      	cmp	r3, #2
 8012178:	d003      	beq.n	8012182 <HAL_RCC_GetSysClockFreq+0xa6>
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	2b03      	cmp	r3, #3
 801217e:	d003      	beq.n	8012188 <HAL_RCC_GetSysClockFreq+0xac>
 8012180:	e005      	b.n	801218e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8012182:	4b1a      	ldr	r3, [pc, #104]	; (80121ec <HAL_RCC_GetSysClockFreq+0x110>)
 8012184:	617b      	str	r3, [r7, #20]
      break;
 8012186:	e005      	b.n	8012194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8012188:	4b19      	ldr	r3, [pc, #100]	; (80121f0 <HAL_RCC_GetSysClockFreq+0x114>)
 801218a:	617b      	str	r3, [r7, #20]
      break;
 801218c:	e002      	b.n	8012194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801218e:	69fb      	ldr	r3, [r7, #28]
 8012190:	617b      	str	r3, [r7, #20]
      break;
 8012192:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8012194:	4b13      	ldr	r3, [pc, #76]	; (80121e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	091b      	lsrs	r3, r3, #4
 801219a:	f003 0307 	and.w	r3, r3, #7
 801219e:	3301      	adds	r3, #1
 80121a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80121a2:	4b10      	ldr	r3, [pc, #64]	; (80121e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	0a1b      	lsrs	r3, r3, #8
 80121a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121ac:	697a      	ldr	r2, [r7, #20]
 80121ae:	fb03 f202 	mul.w	r2, r3, r2
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80121b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80121ba:	4b0a      	ldr	r3, [pc, #40]	; (80121e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80121bc:	68db      	ldr	r3, [r3, #12]
 80121be:	0e5b      	lsrs	r3, r3, #25
 80121c0:	f003 0303 	and.w	r3, r3, #3
 80121c4:	3301      	adds	r3, #1
 80121c6:	005b      	lsls	r3, r3, #1
 80121c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80121ca:	697a      	ldr	r2, [r7, #20]
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80121d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80121d4:	69bb      	ldr	r3, [r7, #24]
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3724      	adds	r7, #36	; 0x24
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop
 80121e4:	40021000 	.word	0x40021000
 80121e8:	08025f84 	.word	0x08025f84
 80121ec:	00f42400 	.word	0x00f42400
 80121f0:	007a1200 	.word	0x007a1200

080121f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80121f4:	b480      	push	{r7}
 80121f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80121f8:	4b03      	ldr	r3, [pc, #12]	; (8012208 <HAL_RCC_GetHCLKFreq+0x14>)
 80121fa:	681b      	ldr	r3, [r3, #0]
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	46bd      	mov	sp, r7
 8012200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012204:	4770      	bx	lr
 8012206:	bf00      	nop
 8012208:	20000174 	.word	0x20000174

0801220c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8012210:	f7ff fff0 	bl	80121f4 <HAL_RCC_GetHCLKFreq>
 8012214:	4602      	mov	r2, r0
 8012216:	4b06      	ldr	r3, [pc, #24]	; (8012230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012218:	689b      	ldr	r3, [r3, #8]
 801221a:	0a1b      	lsrs	r3, r3, #8
 801221c:	f003 0307 	and.w	r3, r3, #7
 8012220:	4904      	ldr	r1, [pc, #16]	; (8012234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012222:	5ccb      	ldrb	r3, [r1, r3]
 8012224:	f003 031f 	and.w	r3, r3, #31
 8012228:	fa22 f303 	lsr.w	r3, r2, r3
}
 801222c:	4618      	mov	r0, r3
 801222e:	bd80      	pop	{r7, pc}
 8012230:	40021000 	.word	0x40021000
 8012234:	08025f7c 	.word	0x08025f7c

08012238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801223c:	f7ff ffda 	bl	80121f4 <HAL_RCC_GetHCLKFreq>
 8012240:	4602      	mov	r2, r0
 8012242:	4b06      	ldr	r3, [pc, #24]	; (801225c <HAL_RCC_GetPCLK2Freq+0x24>)
 8012244:	689b      	ldr	r3, [r3, #8]
 8012246:	0adb      	lsrs	r3, r3, #11
 8012248:	f003 0307 	and.w	r3, r3, #7
 801224c:	4904      	ldr	r1, [pc, #16]	; (8012260 <HAL_RCC_GetPCLK2Freq+0x28>)
 801224e:	5ccb      	ldrb	r3, [r1, r3]
 8012250:	f003 031f 	and.w	r3, r3, #31
 8012254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012258:	4618      	mov	r0, r3
 801225a:	bd80      	pop	{r7, pc}
 801225c:	40021000 	.word	0x40021000
 8012260:	08025f7c 	.word	0x08025f7c

08012264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b086      	sub	sp, #24
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801226c:	2300      	movs	r3, #0
 801226e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8012270:	4b2a      	ldr	r3, [pc, #168]	; (801231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012278:	2b00      	cmp	r3, #0
 801227a:	d003      	beq.n	8012284 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801227c:	f7ff f922 	bl	80114c4 <HAL_PWREx_GetVoltageRange>
 8012280:	6178      	str	r0, [r7, #20]
 8012282:	e014      	b.n	80122ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8012284:	4b25      	ldr	r3, [pc, #148]	; (801231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012288:	4a24      	ldr	r2, [pc, #144]	; (801231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801228a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801228e:	6593      	str	r3, [r2, #88]	; 0x58
 8012290:	4b22      	ldr	r3, [pc, #136]	; (801231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012298:	60fb      	str	r3, [r7, #12]
 801229a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801229c:	f7ff f912 	bl	80114c4 <HAL_PWREx_GetVoltageRange>
 80122a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80122a2:	4b1e      	ldr	r3, [pc, #120]	; (801231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80122a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122a6:	4a1d      	ldr	r2, [pc, #116]	; (801231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80122a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80122ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122b4:	d10b      	bne.n	80122ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2b80      	cmp	r3, #128	; 0x80
 80122ba:	d919      	bls.n	80122f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2ba0      	cmp	r3, #160	; 0xa0
 80122c0:	d902      	bls.n	80122c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80122c2:	2302      	movs	r3, #2
 80122c4:	613b      	str	r3, [r7, #16]
 80122c6:	e013      	b.n	80122f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80122c8:	2301      	movs	r3, #1
 80122ca:	613b      	str	r3, [r7, #16]
 80122cc:	e010      	b.n	80122f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2b80      	cmp	r3, #128	; 0x80
 80122d2:	d902      	bls.n	80122da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80122d4:	2303      	movs	r3, #3
 80122d6:	613b      	str	r3, [r7, #16]
 80122d8:	e00a      	b.n	80122f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2b80      	cmp	r3, #128	; 0x80
 80122de:	d102      	bne.n	80122e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80122e0:	2302      	movs	r3, #2
 80122e2:	613b      	str	r3, [r7, #16]
 80122e4:	e004      	b.n	80122f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2b70      	cmp	r3, #112	; 0x70
 80122ea:	d101      	bne.n	80122f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80122ec:	2301      	movs	r3, #1
 80122ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80122f0:	4b0b      	ldr	r3, [pc, #44]	; (8012320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	f023 0207 	bic.w	r2, r3, #7
 80122f8:	4909      	ldr	r1, [pc, #36]	; (8012320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	4313      	orrs	r3, r2
 80122fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8012300:	4b07      	ldr	r3, [pc, #28]	; (8012320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	f003 0307 	and.w	r3, r3, #7
 8012308:	693a      	ldr	r2, [r7, #16]
 801230a:	429a      	cmp	r2, r3
 801230c:	d001      	beq.n	8012312 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801230e:	2301      	movs	r3, #1
 8012310:	e000      	b.n	8012314 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8012312:	2300      	movs	r3, #0
}
 8012314:	4618      	mov	r0, r3
 8012316:	3718      	adds	r7, #24
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}
 801231c:	40021000 	.word	0x40021000
 8012320:	40022000 	.word	0x40022000

08012324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b086      	sub	sp, #24
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801232c:	2300      	movs	r3, #0
 801232e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8012330:	2300      	movs	r3, #0
 8012332:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801233c:	2b00      	cmp	r3, #0
 801233e:	d041      	beq.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012344:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8012348:	d02a      	beq.n	80123a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801234a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801234e:	d824      	bhi.n	801239a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012350:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012354:	d008      	beq.n	8012368 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8012356:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801235a:	d81e      	bhi.n	801239a <HAL_RCCEx_PeriphCLKConfig+0x76>
 801235c:	2b00      	cmp	r3, #0
 801235e:	d00a      	beq.n	8012376 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8012360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012364:	d010      	beq.n	8012388 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012366:	e018      	b.n	801239a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8012368:	4b86      	ldr	r3, [pc, #536]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801236a:	68db      	ldr	r3, [r3, #12]
 801236c:	4a85      	ldr	r2, [pc, #532]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801236e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012372:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8012374:	e015      	b.n	80123a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	3304      	adds	r3, #4
 801237a:	2100      	movs	r1, #0
 801237c:	4618      	mov	r0, r3
 801237e:	f000 facb 	bl	8012918 <RCCEx_PLLSAI1_Config>
 8012382:	4603      	mov	r3, r0
 8012384:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8012386:	e00c      	b.n	80123a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	3320      	adds	r3, #32
 801238c:	2100      	movs	r1, #0
 801238e:	4618      	mov	r0, r3
 8012390:	f000 fbb6 	bl	8012b00 <RCCEx_PLLSAI2_Config>
 8012394:	4603      	mov	r3, r0
 8012396:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8012398:	e003      	b.n	80123a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801239a:	2301      	movs	r3, #1
 801239c:	74fb      	strb	r3, [r7, #19]
      break;
 801239e:	e000      	b.n	80123a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80123a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80123a2:	7cfb      	ldrb	r3, [r7, #19]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d10b      	bne.n	80123c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80123a8:	4b76      	ldr	r3, [pc, #472]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80123aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80123b6:	4973      	ldr	r1, [pc, #460]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80123b8:	4313      	orrs	r3, r2
 80123ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80123be:	e001      	b.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123c0:	7cfb      	ldrb	r3, [r7, #19]
 80123c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d041      	beq.n	8012454 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80123d8:	d02a      	beq.n	8012430 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80123da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80123de:	d824      	bhi.n	801242a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80123e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80123e4:	d008      	beq.n	80123f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80123e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80123ea:	d81e      	bhi.n	801242a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d00a      	beq.n	8012406 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80123f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80123f4:	d010      	beq.n	8012418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80123f6:	e018      	b.n	801242a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80123f8:	4b62      	ldr	r3, [pc, #392]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80123fa:	68db      	ldr	r3, [r3, #12]
 80123fc:	4a61      	ldr	r2, [pc, #388]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80123fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012402:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8012404:	e015      	b.n	8012432 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	3304      	adds	r3, #4
 801240a:	2100      	movs	r1, #0
 801240c:	4618      	mov	r0, r3
 801240e:	f000 fa83 	bl	8012918 <RCCEx_PLLSAI1_Config>
 8012412:	4603      	mov	r3, r0
 8012414:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8012416:	e00c      	b.n	8012432 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	3320      	adds	r3, #32
 801241c:	2100      	movs	r1, #0
 801241e:	4618      	mov	r0, r3
 8012420:	f000 fb6e 	bl	8012b00 <RCCEx_PLLSAI2_Config>
 8012424:	4603      	mov	r3, r0
 8012426:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8012428:	e003      	b.n	8012432 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801242a:	2301      	movs	r3, #1
 801242c:	74fb      	strb	r3, [r7, #19]
      break;
 801242e:	e000      	b.n	8012432 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8012430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012432:	7cfb      	ldrb	r3, [r7, #19]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d10b      	bne.n	8012450 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8012438:	4b52      	ldr	r3, [pc, #328]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801243e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012446:	494f      	ldr	r1, [pc, #316]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012448:	4313      	orrs	r3, r2
 801244a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801244e:	e001      	b.n	8012454 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012450:	7cfb      	ldrb	r3, [r7, #19]
 8012452:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801245c:	2b00      	cmp	r3, #0
 801245e:	f000 80a0 	beq.w	80125a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012462:	2300      	movs	r3, #0
 8012464:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8012466:	4b47      	ldr	r3, [pc, #284]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801246e:	2b00      	cmp	r3, #0
 8012470:	d101      	bne.n	8012476 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8012472:	2301      	movs	r3, #1
 8012474:	e000      	b.n	8012478 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8012476:	2300      	movs	r3, #0
 8012478:	2b00      	cmp	r3, #0
 801247a:	d00d      	beq.n	8012498 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801247c:	4b41      	ldr	r3, [pc, #260]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012480:	4a40      	ldr	r2, [pc, #256]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012486:	6593      	str	r3, [r2, #88]	; 0x58
 8012488:	4b3e      	ldr	r3, [pc, #248]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012490:	60bb      	str	r3, [r7, #8]
 8012492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012494:	2301      	movs	r3, #1
 8012496:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012498:	4b3b      	ldr	r3, [pc, #236]	; (8012588 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	4a3a      	ldr	r2, [pc, #232]	; (8012588 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80124a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80124a4:	f7fe f938 	bl	8010718 <HAL_GetTick>
 80124a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80124aa:	e009      	b.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80124ac:	f7fe f934 	bl	8010718 <HAL_GetTick>
 80124b0:	4602      	mov	r2, r0
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	1ad3      	subs	r3, r2, r3
 80124b6:	2b02      	cmp	r3, #2
 80124b8:	d902      	bls.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80124ba:	2303      	movs	r3, #3
 80124bc:	74fb      	strb	r3, [r7, #19]
        break;
 80124be:	e005      	b.n	80124cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80124c0:	4b31      	ldr	r3, [pc, #196]	; (8012588 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d0ef      	beq.n	80124ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80124cc:	7cfb      	ldrb	r3, [r7, #19]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d15c      	bne.n	801258c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80124d2:	4b2c      	ldr	r3, [pc, #176]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80124d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80124dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d01f      	beq.n	8012524 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124ea:	697a      	ldr	r2, [r7, #20]
 80124ec:	429a      	cmp	r2, r3
 80124ee:	d019      	beq.n	8012524 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80124f0:	4b24      	ldr	r3, [pc, #144]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80124f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80124fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80124fc:	4b21      	ldr	r3, [pc, #132]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80124fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012502:	4a20      	ldr	r2, [pc, #128]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801250c:	4b1d      	ldr	r3, [pc, #116]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012512:	4a1c      	ldr	r2, [pc, #112]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801251c:	4a19      	ldr	r2, [pc, #100]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	f003 0301 	and.w	r3, r3, #1
 801252a:	2b00      	cmp	r3, #0
 801252c:	d016      	beq.n	801255c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801252e:	f7fe f8f3 	bl	8010718 <HAL_GetTick>
 8012532:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012534:	e00b      	b.n	801254e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012536:	f7fe f8ef 	bl	8010718 <HAL_GetTick>
 801253a:	4602      	mov	r2, r0
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	1ad3      	subs	r3, r2, r3
 8012540:	f241 3288 	movw	r2, #5000	; 0x1388
 8012544:	4293      	cmp	r3, r2
 8012546:	d902      	bls.n	801254e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8012548:	2303      	movs	r3, #3
 801254a:	74fb      	strb	r3, [r7, #19]
            break;
 801254c:	e006      	b.n	801255c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801254e:	4b0d      	ldr	r3, [pc, #52]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012554:	f003 0302 	and.w	r3, r3, #2
 8012558:	2b00      	cmp	r3, #0
 801255a:	d0ec      	beq.n	8012536 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 801255c:	7cfb      	ldrb	r3, [r7, #19]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d10c      	bne.n	801257c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012562:	4b08      	ldr	r3, [pc, #32]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012572:	4904      	ldr	r1, [pc, #16]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012574:	4313      	orrs	r3, r2
 8012576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801257a:	e009      	b.n	8012590 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801257c:	7cfb      	ldrb	r3, [r7, #19]
 801257e:	74bb      	strb	r3, [r7, #18]
 8012580:	e006      	b.n	8012590 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8012582:	bf00      	nop
 8012584:	40021000 	.word	0x40021000
 8012588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801258c:	7cfb      	ldrb	r3, [r7, #19]
 801258e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012590:	7c7b      	ldrb	r3, [r7, #17]
 8012592:	2b01      	cmp	r3, #1
 8012594:	d105      	bne.n	80125a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012596:	4b9e      	ldr	r3, [pc, #632]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801259a:	4a9d      	ldr	r2, [pc, #628]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801259c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80125a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	f003 0301 	and.w	r3, r3, #1
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d00a      	beq.n	80125c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80125ae:	4b98      	ldr	r3, [pc, #608]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80125b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80125b4:	f023 0203 	bic.w	r2, r3, #3
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125bc:	4994      	ldr	r1, [pc, #592]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80125be:	4313      	orrs	r3, r2
 80125c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	f003 0302 	and.w	r3, r3, #2
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d00a      	beq.n	80125e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80125d0:	4b8f      	ldr	r3, [pc, #572]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80125d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80125d6:	f023 020c 	bic.w	r2, r3, #12
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125de:	498c      	ldr	r1, [pc, #560]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80125e0:	4313      	orrs	r3, r2
 80125e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	f003 0304 	and.w	r3, r3, #4
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00a      	beq.n	8012608 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80125f2:	4b87      	ldr	r3, [pc, #540]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80125f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80125f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012600:	4983      	ldr	r1, [pc, #524]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012602:	4313      	orrs	r3, r2
 8012604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f003 0308 	and.w	r3, r3, #8
 8012610:	2b00      	cmp	r3, #0
 8012612:	d00a      	beq.n	801262a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8012614:	4b7e      	ldr	r3, [pc, #504]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801261a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012622:	497b      	ldr	r1, [pc, #492]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012624:	4313      	orrs	r3, r2
 8012626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	f003 0310 	and.w	r3, r3, #16
 8012632:	2b00      	cmp	r3, #0
 8012634:	d00a      	beq.n	801264c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8012636:	4b76      	ldr	r3, [pc, #472]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801263c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012644:	4972      	ldr	r1, [pc, #456]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012646:	4313      	orrs	r3, r2
 8012648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	f003 0320 	and.w	r3, r3, #32
 8012654:	2b00      	cmp	r3, #0
 8012656:	d00a      	beq.n	801266e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012658:	4b6d      	ldr	r3, [pc, #436]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801265e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012666:	496a      	ldr	r1, [pc, #424]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012668:	4313      	orrs	r3, r2
 801266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012676:	2b00      	cmp	r3, #0
 8012678:	d00a      	beq.n	8012690 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801267a:	4b65      	ldr	r3, [pc, #404]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012688:	4961      	ldr	r1, [pc, #388]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801268a:	4313      	orrs	r3, r2
 801268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012698:	2b00      	cmp	r3, #0
 801269a:	d00a      	beq.n	80126b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801269c:	4b5c      	ldr	r3, [pc, #368]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80126aa:	4959      	ldr	r1, [pc, #356]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80126ac:	4313      	orrs	r3, r2
 80126ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d00a      	beq.n	80126d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80126be:	4b54      	ldr	r3, [pc, #336]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80126c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80126cc:	4950      	ldr	r1, [pc, #320]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80126ce:	4313      	orrs	r3, r2
 80126d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d00a      	beq.n	80126f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80126e0:	4b4b      	ldr	r3, [pc, #300]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80126e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126ee:	4948      	ldr	r1, [pc, #288]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80126f0:	4313      	orrs	r3, r2
 80126f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d00a      	beq.n	8012718 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012702:	4b43      	ldr	r3, [pc, #268]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012708:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012710:	493f      	ldr	r1, [pc, #252]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012712:	4313      	orrs	r3, r2
 8012714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012720:	2b00      	cmp	r3, #0
 8012722:	d028      	beq.n	8012776 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012724:	4b3a      	ldr	r3, [pc, #232]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801272a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012732:	4937      	ldr	r1, [pc, #220]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012734:	4313      	orrs	r3, r2
 8012736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801273e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012742:	d106      	bne.n	8012752 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8012744:	4b32      	ldr	r3, [pc, #200]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012746:	68db      	ldr	r3, [r3, #12]
 8012748:	4a31      	ldr	r2, [pc, #196]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801274a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801274e:	60d3      	str	r3, [r2, #12]
 8012750:	e011      	b.n	8012776 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012756:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801275a:	d10c      	bne.n	8012776 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	3304      	adds	r3, #4
 8012760:	2101      	movs	r1, #1
 8012762:	4618      	mov	r0, r3
 8012764:	f000 f8d8 	bl	8012918 <RCCEx_PLLSAI1_Config>
 8012768:	4603      	mov	r3, r0
 801276a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 801276c:	7cfb      	ldrb	r3, [r7, #19]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d001      	beq.n	8012776 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8012772:	7cfb      	ldrb	r3, [r7, #19]
 8012774:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801277e:	2b00      	cmp	r3, #0
 8012780:	d028      	beq.n	80127d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8012782:	4b23      	ldr	r3, [pc, #140]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012788:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012790:	491f      	ldr	r1, [pc, #124]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012792:	4313      	orrs	r3, r2
 8012794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801279c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80127a0:	d106      	bne.n	80127b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80127a2:	4b1b      	ldr	r3, [pc, #108]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80127a4:	68db      	ldr	r3, [r3, #12]
 80127a6:	4a1a      	ldr	r2, [pc, #104]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80127a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80127ac:	60d3      	str	r3, [r2, #12]
 80127ae:	e011      	b.n	80127d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80127b8:	d10c      	bne.n	80127d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	3304      	adds	r3, #4
 80127be:	2101      	movs	r1, #1
 80127c0:	4618      	mov	r0, r3
 80127c2:	f000 f8a9 	bl	8012918 <RCCEx_PLLSAI1_Config>
 80127c6:	4603      	mov	r3, r0
 80127c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80127ca:	7cfb      	ldrb	r3, [r7, #19]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d001      	beq.n	80127d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80127d0:	7cfb      	ldrb	r3, [r7, #19]
 80127d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d02b      	beq.n	8012838 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80127e0:	4b0b      	ldr	r3, [pc, #44]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80127e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80127e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127ee:	4908      	ldr	r1, [pc, #32]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80127f0:	4313      	orrs	r3, r2
 80127f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80127fe:	d109      	bne.n	8012814 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8012800:	4b03      	ldr	r3, [pc, #12]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012802:	68db      	ldr	r3, [r3, #12]
 8012804:	4a02      	ldr	r2, [pc, #8]	; (8012810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8012806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801280a:	60d3      	str	r3, [r2, #12]
 801280c:	e014      	b.n	8012838 <HAL_RCCEx_PeriphCLKConfig+0x514>
 801280e:	bf00      	nop
 8012810:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801281c:	d10c      	bne.n	8012838 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	3304      	adds	r3, #4
 8012822:	2101      	movs	r1, #1
 8012824:	4618      	mov	r0, r3
 8012826:	f000 f877 	bl	8012918 <RCCEx_PLLSAI1_Config>
 801282a:	4603      	mov	r3, r0
 801282c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801282e:	7cfb      	ldrb	r3, [r7, #19]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d001      	beq.n	8012838 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8012834:	7cfb      	ldrb	r3, [r7, #19]
 8012836:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012840:	2b00      	cmp	r3, #0
 8012842:	d02f      	beq.n	80128a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012844:	4b2b      	ldr	r3, [pc, #172]	; (80128f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8012846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801284a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012852:	4928      	ldr	r1, [pc, #160]	; (80128f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8012854:	4313      	orrs	r3, r2
 8012856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801285e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012862:	d10d      	bne.n	8012880 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	3304      	adds	r3, #4
 8012868:	2102      	movs	r1, #2
 801286a:	4618      	mov	r0, r3
 801286c:	f000 f854 	bl	8012918 <RCCEx_PLLSAI1_Config>
 8012870:	4603      	mov	r3, r0
 8012872:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8012874:	7cfb      	ldrb	r3, [r7, #19]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d014      	beq.n	80128a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 801287a:	7cfb      	ldrb	r3, [r7, #19]
 801287c:	74bb      	strb	r3, [r7, #18]
 801287e:	e011      	b.n	80128a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012888:	d10c      	bne.n	80128a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	3320      	adds	r3, #32
 801288e:	2102      	movs	r1, #2
 8012890:	4618      	mov	r0, r3
 8012892:	f000 f935 	bl	8012b00 <RCCEx_PLLSAI2_Config>
 8012896:	4603      	mov	r3, r0
 8012898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801289a:	7cfb      	ldrb	r3, [r7, #19]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d001      	beq.n	80128a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80128a0:	7cfb      	ldrb	r3, [r7, #19]
 80128a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d00a      	beq.n	80128c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80128b0:	4b10      	ldr	r3, [pc, #64]	; (80128f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80128b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80128b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128be:	490d      	ldr	r1, [pc, #52]	; (80128f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80128c0:	4313      	orrs	r3, r2
 80128c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d00b      	beq.n	80128ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80128d2:	4b08      	ldr	r3, [pc, #32]	; (80128f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80128d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80128d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128e2:	4904      	ldr	r1, [pc, #16]	; (80128f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80128e4:	4313      	orrs	r3, r2
 80128e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80128ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3718      	adds	r7, #24
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}
 80128f4:	40021000 	.word	0x40021000

080128f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80128f8:	b480      	push	{r7}
 80128fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80128fc:	4b05      	ldr	r3, [pc, #20]	; (8012914 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4a04      	ldr	r2, [pc, #16]	; (8012914 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8012902:	f043 0304 	orr.w	r3, r3, #4
 8012906:	6013      	str	r3, [r2, #0]
}
 8012908:	bf00      	nop
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop
 8012914:	40021000 	.word	0x40021000

08012918 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b084      	sub	sp, #16
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012922:	2300      	movs	r3, #0
 8012924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8012926:	4b75      	ldr	r3, [pc, #468]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	f003 0303 	and.w	r3, r3, #3
 801292e:	2b00      	cmp	r3, #0
 8012930:	d018      	beq.n	8012964 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8012932:	4b72      	ldr	r3, [pc, #456]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012934:	68db      	ldr	r3, [r3, #12]
 8012936:	f003 0203 	and.w	r2, r3, #3
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	429a      	cmp	r2, r3
 8012940:	d10d      	bne.n	801295e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
       ||
 8012946:	2b00      	cmp	r3, #0
 8012948:	d009      	beq.n	801295e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801294a:	4b6c      	ldr	r3, [pc, #432]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 801294c:	68db      	ldr	r3, [r3, #12]
 801294e:	091b      	lsrs	r3, r3, #4
 8012950:	f003 0307 	and.w	r3, r3, #7
 8012954:	1c5a      	adds	r2, r3, #1
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	685b      	ldr	r3, [r3, #4]
       ||
 801295a:	429a      	cmp	r2, r3
 801295c:	d047      	beq.n	80129ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801295e:	2301      	movs	r3, #1
 8012960:	73fb      	strb	r3, [r7, #15]
 8012962:	e044      	b.n	80129ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	2b03      	cmp	r3, #3
 801296a:	d018      	beq.n	801299e <RCCEx_PLLSAI1_Config+0x86>
 801296c:	2b03      	cmp	r3, #3
 801296e:	d825      	bhi.n	80129bc <RCCEx_PLLSAI1_Config+0xa4>
 8012970:	2b01      	cmp	r3, #1
 8012972:	d002      	beq.n	801297a <RCCEx_PLLSAI1_Config+0x62>
 8012974:	2b02      	cmp	r3, #2
 8012976:	d009      	beq.n	801298c <RCCEx_PLLSAI1_Config+0x74>
 8012978:	e020      	b.n	80129bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801297a:	4b60      	ldr	r3, [pc, #384]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	f003 0302 	and.w	r3, r3, #2
 8012982:	2b00      	cmp	r3, #0
 8012984:	d11d      	bne.n	80129c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8012986:	2301      	movs	r3, #1
 8012988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801298a:	e01a      	b.n	80129c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801298c:	4b5b      	ldr	r3, [pc, #364]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012994:	2b00      	cmp	r3, #0
 8012996:	d116      	bne.n	80129c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8012998:	2301      	movs	r3, #1
 801299a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801299c:	e013      	b.n	80129c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801299e:	4b57      	ldr	r3, [pc, #348]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d10f      	bne.n	80129ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80129aa:	4b54      	ldr	r3, [pc, #336]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d109      	bne.n	80129ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80129b6:	2301      	movs	r3, #1
 80129b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80129ba:	e006      	b.n	80129ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80129bc:	2301      	movs	r3, #1
 80129be:	73fb      	strb	r3, [r7, #15]
      break;
 80129c0:	e004      	b.n	80129cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80129c2:	bf00      	nop
 80129c4:	e002      	b.n	80129cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80129c6:	bf00      	nop
 80129c8:	e000      	b.n	80129cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80129ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80129cc:	7bfb      	ldrb	r3, [r7, #15]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d10d      	bne.n	80129ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80129d2:	4b4a      	ldr	r3, [pc, #296]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80129d4:	68db      	ldr	r3, [r3, #12]
 80129d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6819      	ldr	r1, [r3, #0]
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	685b      	ldr	r3, [r3, #4]
 80129e2:	3b01      	subs	r3, #1
 80129e4:	011b      	lsls	r3, r3, #4
 80129e6:	430b      	orrs	r3, r1
 80129e8:	4944      	ldr	r1, [pc, #272]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80129ea:	4313      	orrs	r3, r2
 80129ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80129ee:	7bfb      	ldrb	r3, [r7, #15]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d17d      	bne.n	8012af0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80129f4:	4b41      	ldr	r3, [pc, #260]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	4a40      	ldr	r2, [pc, #256]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80129fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80129fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012a00:	f7fd fe8a 	bl	8010718 <HAL_GetTick>
 8012a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012a06:	e009      	b.n	8012a1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012a08:	f7fd fe86 	bl	8010718 <HAL_GetTick>
 8012a0c:	4602      	mov	r2, r0
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	1ad3      	subs	r3, r2, r3
 8012a12:	2b02      	cmp	r3, #2
 8012a14:	d902      	bls.n	8012a1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8012a16:	2303      	movs	r3, #3
 8012a18:	73fb      	strb	r3, [r7, #15]
        break;
 8012a1a:	e005      	b.n	8012a28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012a1c:	4b37      	ldr	r3, [pc, #220]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d1ef      	bne.n	8012a08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8012a28:	7bfb      	ldrb	r3, [r7, #15]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d160      	bne.n	8012af0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d111      	bne.n	8012a58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012a34:	4b31      	ldr	r3, [pc, #196]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012a36:	691b      	ldr	r3, [r3, #16]
 8012a38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8012a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	6892      	ldr	r2, [r2, #8]
 8012a44:	0211      	lsls	r1, r2, #8
 8012a46:	687a      	ldr	r2, [r7, #4]
 8012a48:	68d2      	ldr	r2, [r2, #12]
 8012a4a:	0912      	lsrs	r2, r2, #4
 8012a4c:	0452      	lsls	r2, r2, #17
 8012a4e:	430a      	orrs	r2, r1
 8012a50:	492a      	ldr	r1, [pc, #168]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012a52:	4313      	orrs	r3, r2
 8012a54:	610b      	str	r3, [r1, #16]
 8012a56:	e027      	b.n	8012aa8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	2b01      	cmp	r3, #1
 8012a5c:	d112      	bne.n	8012a84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012a5e:	4b27      	ldr	r3, [pc, #156]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012a60:	691b      	ldr	r3, [r3, #16]
 8012a62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8012a66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012a6a:	687a      	ldr	r2, [r7, #4]
 8012a6c:	6892      	ldr	r2, [r2, #8]
 8012a6e:	0211      	lsls	r1, r2, #8
 8012a70:	687a      	ldr	r2, [r7, #4]
 8012a72:	6912      	ldr	r2, [r2, #16]
 8012a74:	0852      	lsrs	r2, r2, #1
 8012a76:	3a01      	subs	r2, #1
 8012a78:	0552      	lsls	r2, r2, #21
 8012a7a:	430a      	orrs	r2, r1
 8012a7c:	491f      	ldr	r1, [pc, #124]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012a7e:	4313      	orrs	r3, r2
 8012a80:	610b      	str	r3, [r1, #16]
 8012a82:	e011      	b.n	8012aa8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012a84:	4b1d      	ldr	r3, [pc, #116]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012a86:	691b      	ldr	r3, [r3, #16]
 8012a88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8012a8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	6892      	ldr	r2, [r2, #8]
 8012a94:	0211      	lsls	r1, r2, #8
 8012a96:	687a      	ldr	r2, [r7, #4]
 8012a98:	6952      	ldr	r2, [r2, #20]
 8012a9a:	0852      	lsrs	r2, r2, #1
 8012a9c:	3a01      	subs	r2, #1
 8012a9e:	0652      	lsls	r2, r2, #25
 8012aa0:	430a      	orrs	r2, r1
 8012aa2:	4916      	ldr	r1, [pc, #88]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012aa4:	4313      	orrs	r3, r2
 8012aa6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8012aa8:	4b14      	ldr	r3, [pc, #80]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	4a13      	ldr	r2, [pc, #76]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012ab4:	f7fd fe30 	bl	8010718 <HAL_GetTick>
 8012ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012aba:	e009      	b.n	8012ad0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012abc:	f7fd fe2c 	bl	8010718 <HAL_GetTick>
 8012ac0:	4602      	mov	r2, r0
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	1ad3      	subs	r3, r2, r3
 8012ac6:	2b02      	cmp	r3, #2
 8012ac8:	d902      	bls.n	8012ad0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8012aca:	2303      	movs	r3, #3
 8012acc:	73fb      	strb	r3, [r7, #15]
          break;
 8012ace:	e005      	b.n	8012adc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012ad0:	4b0a      	ldr	r3, [pc, #40]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d0ef      	beq.n	8012abc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8012adc:	7bfb      	ldrb	r3, [r7, #15]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d106      	bne.n	8012af0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8012ae2:	4b06      	ldr	r3, [pc, #24]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012ae4:	691a      	ldr	r2, [r3, #16]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	699b      	ldr	r3, [r3, #24]
 8012aea:	4904      	ldr	r1, [pc, #16]	; (8012afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8012aec:	4313      	orrs	r3, r2
 8012aee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8012af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3710      	adds	r7, #16
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}
 8012afa:	bf00      	nop
 8012afc:	40021000 	.word	0x40021000

08012b00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b084      	sub	sp, #16
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
 8012b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8012b0e:	4b6a      	ldr	r3, [pc, #424]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012b10:	68db      	ldr	r3, [r3, #12]
 8012b12:	f003 0303 	and.w	r3, r3, #3
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d018      	beq.n	8012b4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8012b1a:	4b67      	ldr	r3, [pc, #412]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012b1c:	68db      	ldr	r3, [r3, #12]
 8012b1e:	f003 0203 	and.w	r2, r3, #3
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d10d      	bne.n	8012b46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
       ||
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d009      	beq.n	8012b46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8012b32:	4b61      	ldr	r3, [pc, #388]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	091b      	lsrs	r3, r3, #4
 8012b38:	f003 0307 	and.w	r3, r3, #7
 8012b3c:	1c5a      	adds	r2, r3, #1
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	685b      	ldr	r3, [r3, #4]
       ||
 8012b42:	429a      	cmp	r2, r3
 8012b44:	d047      	beq.n	8012bd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8012b46:	2301      	movs	r3, #1
 8012b48:	73fb      	strb	r3, [r7, #15]
 8012b4a:	e044      	b.n	8012bd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	2b03      	cmp	r3, #3
 8012b52:	d018      	beq.n	8012b86 <RCCEx_PLLSAI2_Config+0x86>
 8012b54:	2b03      	cmp	r3, #3
 8012b56:	d825      	bhi.n	8012ba4 <RCCEx_PLLSAI2_Config+0xa4>
 8012b58:	2b01      	cmp	r3, #1
 8012b5a:	d002      	beq.n	8012b62 <RCCEx_PLLSAI2_Config+0x62>
 8012b5c:	2b02      	cmp	r3, #2
 8012b5e:	d009      	beq.n	8012b74 <RCCEx_PLLSAI2_Config+0x74>
 8012b60:	e020      	b.n	8012ba4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8012b62:	4b55      	ldr	r3, [pc, #340]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	f003 0302 	and.w	r3, r3, #2
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d11d      	bne.n	8012baa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8012b6e:	2301      	movs	r3, #1
 8012b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012b72:	e01a      	b.n	8012baa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8012b74:	4b50      	ldr	r3, [pc, #320]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d116      	bne.n	8012bae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8012b80:	2301      	movs	r3, #1
 8012b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012b84:	e013      	b.n	8012bae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012b86:	4b4c      	ldr	r3, [pc, #304]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d10f      	bne.n	8012bb2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012b92:	4b49      	ldr	r3, [pc, #292]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d109      	bne.n	8012bb2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012ba2:	e006      	b.n	8012bb2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8012ba8:	e004      	b.n	8012bb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012baa:	bf00      	nop
 8012bac:	e002      	b.n	8012bb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012bae:	bf00      	nop
 8012bb0:	e000      	b.n	8012bb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012bb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8012bb4:	7bfb      	ldrb	r3, [r7, #15]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d10d      	bne.n	8012bd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8012bba:	4b3f      	ldr	r3, [pc, #252]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012bbc:	68db      	ldr	r3, [r3, #12]
 8012bbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6819      	ldr	r1, [r3, #0]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	685b      	ldr	r3, [r3, #4]
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	011b      	lsls	r3, r3, #4
 8012bce:	430b      	orrs	r3, r1
 8012bd0:	4939      	ldr	r1, [pc, #228]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012bd2:	4313      	orrs	r3, r2
 8012bd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8012bd6:	7bfb      	ldrb	r3, [r7, #15]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d167      	bne.n	8012cac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8012bdc:	4b36      	ldr	r3, [pc, #216]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	4a35      	ldr	r2, [pc, #212]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012be8:	f7fd fd96 	bl	8010718 <HAL_GetTick>
 8012bec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8012bee:	e009      	b.n	8012c04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8012bf0:	f7fd fd92 	bl	8010718 <HAL_GetTick>
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	2b02      	cmp	r3, #2
 8012bfc:	d902      	bls.n	8012c04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8012bfe:	2303      	movs	r3, #3
 8012c00:	73fb      	strb	r3, [r7, #15]
        break;
 8012c02:	e005      	b.n	8012c10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8012c04:	4b2c      	ldr	r3, [pc, #176]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d1ef      	bne.n	8012bf0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8012c10:	7bfb      	ldrb	r3, [r7, #15]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d14a      	bne.n	8012cac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d111      	bne.n	8012c40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8012c1c:	4b26      	ldr	r3, [pc, #152]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012c1e:	695b      	ldr	r3, [r3, #20]
 8012c20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8012c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012c28:	687a      	ldr	r2, [r7, #4]
 8012c2a:	6892      	ldr	r2, [r2, #8]
 8012c2c:	0211      	lsls	r1, r2, #8
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	68d2      	ldr	r2, [r2, #12]
 8012c32:	0912      	lsrs	r2, r2, #4
 8012c34:	0452      	lsls	r2, r2, #17
 8012c36:	430a      	orrs	r2, r1
 8012c38:	491f      	ldr	r1, [pc, #124]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012c3a:	4313      	orrs	r3, r2
 8012c3c:	614b      	str	r3, [r1, #20]
 8012c3e:	e011      	b.n	8012c64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8012c40:	4b1d      	ldr	r3, [pc, #116]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012c42:	695b      	ldr	r3, [r3, #20]
 8012c44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8012c48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012c4c:	687a      	ldr	r2, [r7, #4]
 8012c4e:	6892      	ldr	r2, [r2, #8]
 8012c50:	0211      	lsls	r1, r2, #8
 8012c52:	687a      	ldr	r2, [r7, #4]
 8012c54:	6912      	ldr	r2, [r2, #16]
 8012c56:	0852      	lsrs	r2, r2, #1
 8012c58:	3a01      	subs	r2, #1
 8012c5a:	0652      	lsls	r2, r2, #25
 8012c5c:	430a      	orrs	r2, r1
 8012c5e:	4916      	ldr	r1, [pc, #88]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012c60:	4313      	orrs	r3, r2
 8012c62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8012c64:	4b14      	ldr	r3, [pc, #80]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	4a13      	ldr	r2, [pc, #76]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012c6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c70:	f7fd fd52 	bl	8010718 <HAL_GetTick>
 8012c74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012c76:	e009      	b.n	8012c8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8012c78:	f7fd fd4e 	bl	8010718 <HAL_GetTick>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	1ad3      	subs	r3, r2, r3
 8012c82:	2b02      	cmp	r3, #2
 8012c84:	d902      	bls.n	8012c8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8012c86:	2303      	movs	r3, #3
 8012c88:	73fb      	strb	r3, [r7, #15]
          break;
 8012c8a:	e005      	b.n	8012c98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012c8c:	4b0a      	ldr	r3, [pc, #40]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d0ef      	beq.n	8012c78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8012c98:	7bfb      	ldrb	r3, [r7, #15]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d106      	bne.n	8012cac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8012c9e:	4b06      	ldr	r3, [pc, #24]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012ca0:	695a      	ldr	r2, [r3, #20]
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	695b      	ldr	r3, [r3, #20]
 8012ca6:	4904      	ldr	r1, [pc, #16]	; (8012cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012ca8:	4313      	orrs	r3, r2
 8012caa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8012cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3710      	adds	r7, #16
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	40021000 	.word	0x40021000

08012cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b084      	sub	sp, #16
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d101      	bne.n	8012cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012cca:	2301      	movs	r3, #1
 8012ccc:	e095      	b.n	8012dfa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d108      	bne.n	8012ce8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012cde:	d009      	beq.n	8012cf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	61da      	str	r2, [r3, #28]
 8012ce6:	e005      	b.n	8012cf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2200      	movs	r2, #0
 8012cec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012d00:	b2db      	uxtb	r3, r3
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d106      	bne.n	8012d14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f7fd f9c2 	bl	8010098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2202      	movs	r2, #2
 8012d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	681a      	ldr	r2, [r3, #0]
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012d2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012d34:	d902      	bls.n	8012d3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8012d36:	2300      	movs	r3, #0
 8012d38:	60fb      	str	r3, [r7, #12]
 8012d3a:	e002      	b.n	8012d42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8012d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	68db      	ldr	r3, [r3, #12]
 8012d46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8012d4a:	d007      	beq.n	8012d5c <HAL_SPI_Init+0xa0>
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012d54:	d002      	beq.n	8012d5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2200      	movs	r2, #0
 8012d5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	689b      	ldr	r3, [r3, #8]
 8012d68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012d6c:	431a      	orrs	r2, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	691b      	ldr	r3, [r3, #16]
 8012d72:	f003 0302 	and.w	r3, r3, #2
 8012d76:	431a      	orrs	r2, r3
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	695b      	ldr	r3, [r3, #20]
 8012d7c:	f003 0301 	and.w	r3, r3, #1
 8012d80:	431a      	orrs	r2, r3
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	699b      	ldr	r3, [r3, #24]
 8012d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012d8a:	431a      	orrs	r2, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	69db      	ldr	r3, [r3, #28]
 8012d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012d94:	431a      	orrs	r2, r3
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	6a1b      	ldr	r3, [r3, #32]
 8012d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d9e:	ea42 0103 	orr.w	r1, r2, r3
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012da6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	430a      	orrs	r2, r1
 8012db0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	699b      	ldr	r3, [r3, #24]
 8012db6:	0c1b      	lsrs	r3, r3, #16
 8012db8:	f003 0204 	and.w	r2, r3, #4
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dc0:	f003 0310 	and.w	r3, r3, #16
 8012dc4:	431a      	orrs	r2, r3
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dca:	f003 0308 	and.w	r3, r3, #8
 8012dce:	431a      	orrs	r2, r3
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8012dd8:	ea42 0103 	orr.w	r1, r2, r3
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	430a      	orrs	r2, r1
 8012de8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2200      	movs	r2, #0
 8012dee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2201      	movs	r2, #1
 8012df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8012df8:	2300      	movs	r3, #0
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3710      	adds	r7, #16
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}

08012e02 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b082      	sub	sp, #8
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d101      	bne.n	8012e14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012e10:	2301      	movs	r3, #1
 8012e12:	e040      	b.n	8012e96 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d106      	bne.n	8012e2a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f7fd f97b 	bl	8010120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2224      	movs	r2, #36	; 0x24
 8012e2e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f022 0201 	bic.w	r2, r2, #1
 8012e3e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d002      	beq.n	8012e4e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f000 fb6b 	bl	8013524 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f000 f8b0 	bl	8012fb4 <UART_SetConfig>
 8012e54:	4603      	mov	r3, r0
 8012e56:	2b01      	cmp	r3, #1
 8012e58:	d101      	bne.n	8012e5e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	e01b      	b.n	8012e96 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	685a      	ldr	r2, [r3, #4]
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012e6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	689a      	ldr	r2, [r3, #8]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012e7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	681a      	ldr	r2, [r3, #0]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	f042 0201 	orr.w	r2, r2, #1
 8012e8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f000 fbea 	bl	8013668 <UART_CheckIdleState>
 8012e94:	4603      	mov	r3, r0
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3708      	adds	r7, #8
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}

08012e9e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	b08a      	sub	sp, #40	; 0x28
 8012ea2:	af02      	add	r7, sp, #8
 8012ea4:	60f8      	str	r0, [r7, #12]
 8012ea6:	60b9      	str	r1, [r7, #8]
 8012ea8:	603b      	str	r3, [r7, #0]
 8012eaa:	4613      	mov	r3, r2
 8012eac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012eb2:	2b20      	cmp	r3, #32
 8012eb4:	d178      	bne.n	8012fa8 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d002      	beq.n	8012ec2 <HAL_UART_Transmit+0x24>
 8012ebc:	88fb      	ldrh	r3, [r7, #6]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d101      	bne.n	8012ec6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	e071      	b.n	8012faa <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2221      	movs	r2, #33	; 0x21
 8012ed2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012ed4:	f7fd fc20 	bl	8010718 <HAL_GetTick>
 8012ed8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	88fa      	ldrh	r2, [r7, #6]
 8012ede:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	88fa      	ldrh	r2, [r7, #6]
 8012ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	689b      	ldr	r3, [r3, #8]
 8012eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ef2:	d108      	bne.n	8012f06 <HAL_UART_Transmit+0x68>
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	691b      	ldr	r3, [r3, #16]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d104      	bne.n	8012f06 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8012efc:	2300      	movs	r3, #0
 8012efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	61bb      	str	r3, [r7, #24]
 8012f04:	e003      	b.n	8012f0e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012f0e:	e030      	b.n	8012f72 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	9300      	str	r3, [sp, #0]
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	2200      	movs	r2, #0
 8012f18:	2180      	movs	r1, #128	; 0x80
 8012f1a:	68f8      	ldr	r0, [r7, #12]
 8012f1c:	f000 fc4c 	bl	80137b8 <UART_WaitOnFlagUntilTimeout>
 8012f20:	4603      	mov	r3, r0
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d004      	beq.n	8012f30 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2220      	movs	r2, #32
 8012f2a:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8012f2c:	2303      	movs	r3, #3
 8012f2e:	e03c      	b.n	8012faa <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d10b      	bne.n	8012f4e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012f36:	69bb      	ldr	r3, [r7, #24]
 8012f38:	881a      	ldrh	r2, [r3, #0]
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012f42:	b292      	uxth	r2, r2
 8012f44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	3302      	adds	r3, #2
 8012f4a:	61bb      	str	r3, [r7, #24]
 8012f4c:	e008      	b.n	8012f60 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	781a      	ldrb	r2, [r3, #0]
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	b292      	uxth	r2, r2
 8012f58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012f5a:	69fb      	ldr	r3, [r7, #28]
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	b29a      	uxth	r2, r3
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d1c8      	bne.n	8012f10 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	9300      	str	r3, [sp, #0]
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	2200      	movs	r2, #0
 8012f86:	2140      	movs	r1, #64	; 0x40
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	f000 fc15 	bl	80137b8 <UART_WaitOnFlagUntilTimeout>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d004      	beq.n	8012f9e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	2220      	movs	r2, #32
 8012f98:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8012f9a:	2303      	movs	r3, #3
 8012f9c:	e005      	b.n	8012faa <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	2220      	movs	r2, #32
 8012fa2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	e000      	b.n	8012faa <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8012fa8:	2302      	movs	r3, #2
  }
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3720      	adds	r7, #32
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
	...

08012fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012fb8:	b08a      	sub	sp, #40	; 0x28
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	689a      	ldr	r2, [r3, #8]
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	691b      	ldr	r3, [r3, #16]
 8012fcc:	431a      	orrs	r2, r3
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	695b      	ldr	r3, [r3, #20]
 8012fd2:	431a      	orrs	r2, r3
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	69db      	ldr	r3, [r3, #28]
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	681a      	ldr	r2, [r3, #0]
 8012fe2:	4ba4      	ldr	r3, [pc, #656]	; (8013274 <UART_SetConfig+0x2c0>)
 8012fe4:	4013      	ands	r3, r2
 8012fe6:	68fa      	ldr	r2, [r7, #12]
 8012fe8:	6812      	ldr	r2, [r2, #0]
 8012fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012fec:	430b      	orrs	r3, r1
 8012fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	68da      	ldr	r2, [r3, #12]
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	430a      	orrs	r2, r1
 8013004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	699b      	ldr	r3, [r3, #24]
 801300a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	4a99      	ldr	r2, [pc, #612]	; (8013278 <UART_SetConfig+0x2c4>)
 8013012:	4293      	cmp	r3, r2
 8013014:	d004      	beq.n	8013020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	6a1b      	ldr	r3, [r3, #32]
 801301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801301c:	4313      	orrs	r3, r2
 801301e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	689b      	ldr	r3, [r3, #8]
 8013026:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013030:	430a      	orrs	r2, r1
 8013032:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	4a90      	ldr	r2, [pc, #576]	; (801327c <UART_SetConfig+0x2c8>)
 801303a:	4293      	cmp	r3, r2
 801303c:	d126      	bne.n	801308c <UART_SetConfig+0xd8>
 801303e:	4b90      	ldr	r3, [pc, #576]	; (8013280 <UART_SetConfig+0x2cc>)
 8013040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013044:	f003 0303 	and.w	r3, r3, #3
 8013048:	2b03      	cmp	r3, #3
 801304a:	d81b      	bhi.n	8013084 <UART_SetConfig+0xd0>
 801304c:	a201      	add	r2, pc, #4	; (adr r2, 8013054 <UART_SetConfig+0xa0>)
 801304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013052:	bf00      	nop
 8013054:	08013065 	.word	0x08013065
 8013058:	08013075 	.word	0x08013075
 801305c:	0801306d 	.word	0x0801306d
 8013060:	0801307d 	.word	0x0801307d
 8013064:	2301      	movs	r3, #1
 8013066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801306a:	e116      	b.n	801329a <UART_SetConfig+0x2e6>
 801306c:	2302      	movs	r3, #2
 801306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013072:	e112      	b.n	801329a <UART_SetConfig+0x2e6>
 8013074:	2304      	movs	r3, #4
 8013076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801307a:	e10e      	b.n	801329a <UART_SetConfig+0x2e6>
 801307c:	2308      	movs	r3, #8
 801307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013082:	e10a      	b.n	801329a <UART_SetConfig+0x2e6>
 8013084:	2310      	movs	r3, #16
 8013086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801308a:	e106      	b.n	801329a <UART_SetConfig+0x2e6>
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4a7c      	ldr	r2, [pc, #496]	; (8013284 <UART_SetConfig+0x2d0>)
 8013092:	4293      	cmp	r3, r2
 8013094:	d138      	bne.n	8013108 <UART_SetConfig+0x154>
 8013096:	4b7a      	ldr	r3, [pc, #488]	; (8013280 <UART_SetConfig+0x2cc>)
 8013098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801309c:	f003 030c 	and.w	r3, r3, #12
 80130a0:	2b0c      	cmp	r3, #12
 80130a2:	d82d      	bhi.n	8013100 <UART_SetConfig+0x14c>
 80130a4:	a201      	add	r2, pc, #4	; (adr r2, 80130ac <UART_SetConfig+0xf8>)
 80130a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130aa:	bf00      	nop
 80130ac:	080130e1 	.word	0x080130e1
 80130b0:	08013101 	.word	0x08013101
 80130b4:	08013101 	.word	0x08013101
 80130b8:	08013101 	.word	0x08013101
 80130bc:	080130f1 	.word	0x080130f1
 80130c0:	08013101 	.word	0x08013101
 80130c4:	08013101 	.word	0x08013101
 80130c8:	08013101 	.word	0x08013101
 80130cc:	080130e9 	.word	0x080130e9
 80130d0:	08013101 	.word	0x08013101
 80130d4:	08013101 	.word	0x08013101
 80130d8:	08013101 	.word	0x08013101
 80130dc:	080130f9 	.word	0x080130f9
 80130e0:	2300      	movs	r3, #0
 80130e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80130e6:	e0d8      	b.n	801329a <UART_SetConfig+0x2e6>
 80130e8:	2302      	movs	r3, #2
 80130ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80130ee:	e0d4      	b.n	801329a <UART_SetConfig+0x2e6>
 80130f0:	2304      	movs	r3, #4
 80130f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80130f6:	e0d0      	b.n	801329a <UART_SetConfig+0x2e6>
 80130f8:	2308      	movs	r3, #8
 80130fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80130fe:	e0cc      	b.n	801329a <UART_SetConfig+0x2e6>
 8013100:	2310      	movs	r3, #16
 8013102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013106:	e0c8      	b.n	801329a <UART_SetConfig+0x2e6>
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4a5e      	ldr	r2, [pc, #376]	; (8013288 <UART_SetConfig+0x2d4>)
 801310e:	4293      	cmp	r3, r2
 8013110:	d125      	bne.n	801315e <UART_SetConfig+0x1aa>
 8013112:	4b5b      	ldr	r3, [pc, #364]	; (8013280 <UART_SetConfig+0x2cc>)
 8013114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801311c:	2b30      	cmp	r3, #48	; 0x30
 801311e:	d016      	beq.n	801314e <UART_SetConfig+0x19a>
 8013120:	2b30      	cmp	r3, #48	; 0x30
 8013122:	d818      	bhi.n	8013156 <UART_SetConfig+0x1a2>
 8013124:	2b20      	cmp	r3, #32
 8013126:	d00a      	beq.n	801313e <UART_SetConfig+0x18a>
 8013128:	2b20      	cmp	r3, #32
 801312a:	d814      	bhi.n	8013156 <UART_SetConfig+0x1a2>
 801312c:	2b00      	cmp	r3, #0
 801312e:	d002      	beq.n	8013136 <UART_SetConfig+0x182>
 8013130:	2b10      	cmp	r3, #16
 8013132:	d008      	beq.n	8013146 <UART_SetConfig+0x192>
 8013134:	e00f      	b.n	8013156 <UART_SetConfig+0x1a2>
 8013136:	2300      	movs	r3, #0
 8013138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801313c:	e0ad      	b.n	801329a <UART_SetConfig+0x2e6>
 801313e:	2302      	movs	r3, #2
 8013140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013144:	e0a9      	b.n	801329a <UART_SetConfig+0x2e6>
 8013146:	2304      	movs	r3, #4
 8013148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801314c:	e0a5      	b.n	801329a <UART_SetConfig+0x2e6>
 801314e:	2308      	movs	r3, #8
 8013150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013154:	e0a1      	b.n	801329a <UART_SetConfig+0x2e6>
 8013156:	2310      	movs	r3, #16
 8013158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801315c:	e09d      	b.n	801329a <UART_SetConfig+0x2e6>
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	4a4a      	ldr	r2, [pc, #296]	; (801328c <UART_SetConfig+0x2d8>)
 8013164:	4293      	cmp	r3, r2
 8013166:	d125      	bne.n	80131b4 <UART_SetConfig+0x200>
 8013168:	4b45      	ldr	r3, [pc, #276]	; (8013280 <UART_SetConfig+0x2cc>)
 801316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801316e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013172:	2bc0      	cmp	r3, #192	; 0xc0
 8013174:	d016      	beq.n	80131a4 <UART_SetConfig+0x1f0>
 8013176:	2bc0      	cmp	r3, #192	; 0xc0
 8013178:	d818      	bhi.n	80131ac <UART_SetConfig+0x1f8>
 801317a:	2b80      	cmp	r3, #128	; 0x80
 801317c:	d00a      	beq.n	8013194 <UART_SetConfig+0x1e0>
 801317e:	2b80      	cmp	r3, #128	; 0x80
 8013180:	d814      	bhi.n	80131ac <UART_SetConfig+0x1f8>
 8013182:	2b00      	cmp	r3, #0
 8013184:	d002      	beq.n	801318c <UART_SetConfig+0x1d8>
 8013186:	2b40      	cmp	r3, #64	; 0x40
 8013188:	d008      	beq.n	801319c <UART_SetConfig+0x1e8>
 801318a:	e00f      	b.n	80131ac <UART_SetConfig+0x1f8>
 801318c:	2300      	movs	r3, #0
 801318e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013192:	e082      	b.n	801329a <UART_SetConfig+0x2e6>
 8013194:	2302      	movs	r3, #2
 8013196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801319a:	e07e      	b.n	801329a <UART_SetConfig+0x2e6>
 801319c:	2304      	movs	r3, #4
 801319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80131a2:	e07a      	b.n	801329a <UART_SetConfig+0x2e6>
 80131a4:	2308      	movs	r3, #8
 80131a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80131aa:	e076      	b.n	801329a <UART_SetConfig+0x2e6>
 80131ac:	2310      	movs	r3, #16
 80131ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80131b2:	e072      	b.n	801329a <UART_SetConfig+0x2e6>
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	4a35      	ldr	r2, [pc, #212]	; (8013290 <UART_SetConfig+0x2dc>)
 80131ba:	4293      	cmp	r3, r2
 80131bc:	d12a      	bne.n	8013214 <UART_SetConfig+0x260>
 80131be:	4b30      	ldr	r3, [pc, #192]	; (8013280 <UART_SetConfig+0x2cc>)
 80131c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80131c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80131c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80131cc:	d01a      	beq.n	8013204 <UART_SetConfig+0x250>
 80131ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80131d2:	d81b      	bhi.n	801320c <UART_SetConfig+0x258>
 80131d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131d8:	d00c      	beq.n	80131f4 <UART_SetConfig+0x240>
 80131da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131de:	d815      	bhi.n	801320c <UART_SetConfig+0x258>
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d003      	beq.n	80131ec <UART_SetConfig+0x238>
 80131e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80131e8:	d008      	beq.n	80131fc <UART_SetConfig+0x248>
 80131ea:	e00f      	b.n	801320c <UART_SetConfig+0x258>
 80131ec:	2300      	movs	r3, #0
 80131ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80131f2:	e052      	b.n	801329a <UART_SetConfig+0x2e6>
 80131f4:	2302      	movs	r3, #2
 80131f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80131fa:	e04e      	b.n	801329a <UART_SetConfig+0x2e6>
 80131fc:	2304      	movs	r3, #4
 80131fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013202:	e04a      	b.n	801329a <UART_SetConfig+0x2e6>
 8013204:	2308      	movs	r3, #8
 8013206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801320a:	e046      	b.n	801329a <UART_SetConfig+0x2e6>
 801320c:	2310      	movs	r3, #16
 801320e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013212:	e042      	b.n	801329a <UART_SetConfig+0x2e6>
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	4a17      	ldr	r2, [pc, #92]	; (8013278 <UART_SetConfig+0x2c4>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d13a      	bne.n	8013294 <UART_SetConfig+0x2e0>
 801321e:	4b18      	ldr	r3, [pc, #96]	; (8013280 <UART_SetConfig+0x2cc>)
 8013220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013228:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801322c:	d01a      	beq.n	8013264 <UART_SetConfig+0x2b0>
 801322e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013232:	d81b      	bhi.n	801326c <UART_SetConfig+0x2b8>
 8013234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013238:	d00c      	beq.n	8013254 <UART_SetConfig+0x2a0>
 801323a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801323e:	d815      	bhi.n	801326c <UART_SetConfig+0x2b8>
 8013240:	2b00      	cmp	r3, #0
 8013242:	d003      	beq.n	801324c <UART_SetConfig+0x298>
 8013244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013248:	d008      	beq.n	801325c <UART_SetConfig+0x2a8>
 801324a:	e00f      	b.n	801326c <UART_SetConfig+0x2b8>
 801324c:	2300      	movs	r3, #0
 801324e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013252:	e022      	b.n	801329a <UART_SetConfig+0x2e6>
 8013254:	2302      	movs	r3, #2
 8013256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801325a:	e01e      	b.n	801329a <UART_SetConfig+0x2e6>
 801325c:	2304      	movs	r3, #4
 801325e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013262:	e01a      	b.n	801329a <UART_SetConfig+0x2e6>
 8013264:	2308      	movs	r3, #8
 8013266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801326a:	e016      	b.n	801329a <UART_SetConfig+0x2e6>
 801326c:	2310      	movs	r3, #16
 801326e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013272:	e012      	b.n	801329a <UART_SetConfig+0x2e6>
 8013274:	efff69f3 	.word	0xefff69f3
 8013278:	40008000 	.word	0x40008000
 801327c:	40013800 	.word	0x40013800
 8013280:	40021000 	.word	0x40021000
 8013284:	40004400 	.word	0x40004400
 8013288:	40004800 	.word	0x40004800
 801328c:	40004c00 	.word	0x40004c00
 8013290:	40005000 	.word	0x40005000
 8013294:	2310      	movs	r3, #16
 8013296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	4a9f      	ldr	r2, [pc, #636]	; (801351c <UART_SetConfig+0x568>)
 80132a0:	4293      	cmp	r3, r2
 80132a2:	d17a      	bne.n	801339a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80132a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80132a8:	2b08      	cmp	r3, #8
 80132aa:	d824      	bhi.n	80132f6 <UART_SetConfig+0x342>
 80132ac:	a201      	add	r2, pc, #4	; (adr r2, 80132b4 <UART_SetConfig+0x300>)
 80132ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132b2:	bf00      	nop
 80132b4:	080132d9 	.word	0x080132d9
 80132b8:	080132f7 	.word	0x080132f7
 80132bc:	080132e1 	.word	0x080132e1
 80132c0:	080132f7 	.word	0x080132f7
 80132c4:	080132e7 	.word	0x080132e7
 80132c8:	080132f7 	.word	0x080132f7
 80132cc:	080132f7 	.word	0x080132f7
 80132d0:	080132f7 	.word	0x080132f7
 80132d4:	080132ef 	.word	0x080132ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80132d8:	f7fe ff98 	bl	801220c <HAL_RCC_GetPCLK1Freq>
 80132dc:	61f8      	str	r0, [r7, #28]
        break;
 80132de:	e010      	b.n	8013302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80132e0:	4b8f      	ldr	r3, [pc, #572]	; (8013520 <UART_SetConfig+0x56c>)
 80132e2:	61fb      	str	r3, [r7, #28]
        break;
 80132e4:	e00d      	b.n	8013302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80132e6:	f7fe fef9 	bl	80120dc <HAL_RCC_GetSysClockFreq>
 80132ea:	61f8      	str	r0, [r7, #28]
        break;
 80132ec:	e009      	b.n	8013302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80132ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80132f2:	61fb      	str	r3, [r7, #28]
        break;
 80132f4:	e005      	b.n	8013302 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80132f6:	2300      	movs	r3, #0
 80132f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80132fa:	2301      	movs	r3, #1
 80132fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8013300:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013302:	69fb      	ldr	r3, [r7, #28]
 8013304:	2b00      	cmp	r3, #0
 8013306:	f000 80fb 	beq.w	8013500 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	685a      	ldr	r2, [r3, #4]
 801330e:	4613      	mov	r3, r2
 8013310:	005b      	lsls	r3, r3, #1
 8013312:	4413      	add	r3, r2
 8013314:	69fa      	ldr	r2, [r7, #28]
 8013316:	429a      	cmp	r2, r3
 8013318:	d305      	bcc.n	8013326 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8013320:	69fa      	ldr	r2, [r7, #28]
 8013322:	429a      	cmp	r2, r3
 8013324:	d903      	bls.n	801332e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8013326:	2301      	movs	r3, #1
 8013328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801332c:	e0e8      	b.n	8013500 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801332e:	69fb      	ldr	r3, [r7, #28]
 8013330:	2200      	movs	r2, #0
 8013332:	461c      	mov	r4, r3
 8013334:	4615      	mov	r5, r2
 8013336:	f04f 0200 	mov.w	r2, #0
 801333a:	f04f 0300 	mov.w	r3, #0
 801333e:	022b      	lsls	r3, r5, #8
 8013340:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8013344:	0222      	lsls	r2, r4, #8
 8013346:	68f9      	ldr	r1, [r7, #12]
 8013348:	6849      	ldr	r1, [r1, #4]
 801334a:	0849      	lsrs	r1, r1, #1
 801334c:	2000      	movs	r0, #0
 801334e:	4688      	mov	r8, r1
 8013350:	4681      	mov	r9, r0
 8013352:	eb12 0a08 	adds.w	sl, r2, r8
 8013356:	eb43 0b09 	adc.w	fp, r3, r9
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	685b      	ldr	r3, [r3, #4]
 801335e:	2200      	movs	r2, #0
 8013360:	603b      	str	r3, [r7, #0]
 8013362:	607a      	str	r2, [r7, #4]
 8013364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013368:	4650      	mov	r0, sl
 801336a:	4659      	mov	r1, fp
 801336c:	f7ed fcec 	bl	8000d48 <__aeabi_uldivmod>
 8013370:	4602      	mov	r2, r0
 8013372:	460b      	mov	r3, r1
 8013374:	4613      	mov	r3, r2
 8013376:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013378:	69bb      	ldr	r3, [r7, #24]
 801337a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801337e:	d308      	bcc.n	8013392 <UART_SetConfig+0x3de>
 8013380:	69bb      	ldr	r3, [r7, #24]
 8013382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013386:	d204      	bcs.n	8013392 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	69ba      	ldr	r2, [r7, #24]
 801338e:	60da      	str	r2, [r3, #12]
 8013390:	e0b6      	b.n	8013500 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8013392:	2301      	movs	r3, #1
 8013394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013398:	e0b2      	b.n	8013500 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	69db      	ldr	r3, [r3, #28]
 801339e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80133a2:	d15e      	bne.n	8013462 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80133a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80133a8:	2b08      	cmp	r3, #8
 80133aa:	d828      	bhi.n	80133fe <UART_SetConfig+0x44a>
 80133ac:	a201      	add	r2, pc, #4	; (adr r2, 80133b4 <UART_SetConfig+0x400>)
 80133ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133b2:	bf00      	nop
 80133b4:	080133d9 	.word	0x080133d9
 80133b8:	080133e1 	.word	0x080133e1
 80133bc:	080133e9 	.word	0x080133e9
 80133c0:	080133ff 	.word	0x080133ff
 80133c4:	080133ef 	.word	0x080133ef
 80133c8:	080133ff 	.word	0x080133ff
 80133cc:	080133ff 	.word	0x080133ff
 80133d0:	080133ff 	.word	0x080133ff
 80133d4:	080133f7 	.word	0x080133f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80133d8:	f7fe ff18 	bl	801220c <HAL_RCC_GetPCLK1Freq>
 80133dc:	61f8      	str	r0, [r7, #28]
        break;
 80133de:	e014      	b.n	801340a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80133e0:	f7fe ff2a 	bl	8012238 <HAL_RCC_GetPCLK2Freq>
 80133e4:	61f8      	str	r0, [r7, #28]
        break;
 80133e6:	e010      	b.n	801340a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80133e8:	4b4d      	ldr	r3, [pc, #308]	; (8013520 <UART_SetConfig+0x56c>)
 80133ea:	61fb      	str	r3, [r7, #28]
        break;
 80133ec:	e00d      	b.n	801340a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80133ee:	f7fe fe75 	bl	80120dc <HAL_RCC_GetSysClockFreq>
 80133f2:	61f8      	str	r0, [r7, #28]
        break;
 80133f4:	e009      	b.n	801340a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80133f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80133fa:	61fb      	str	r3, [r7, #28]
        break;
 80133fc:	e005      	b.n	801340a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80133fe:	2300      	movs	r3, #0
 8013400:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8013402:	2301      	movs	r3, #1
 8013404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8013408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801340a:	69fb      	ldr	r3, [r7, #28]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d077      	beq.n	8013500 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013410:	69fb      	ldr	r3, [r7, #28]
 8013412:	005a      	lsls	r2, r3, #1
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	085b      	lsrs	r3, r3, #1
 801341a:	441a      	add	r2, r3
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	685b      	ldr	r3, [r3, #4]
 8013420:	fbb2 f3f3 	udiv	r3, r2, r3
 8013424:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013426:	69bb      	ldr	r3, [r7, #24]
 8013428:	2b0f      	cmp	r3, #15
 801342a:	d916      	bls.n	801345a <UART_SetConfig+0x4a6>
 801342c:	69bb      	ldr	r3, [r7, #24]
 801342e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013432:	d212      	bcs.n	801345a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013434:	69bb      	ldr	r3, [r7, #24]
 8013436:	b29b      	uxth	r3, r3
 8013438:	f023 030f 	bic.w	r3, r3, #15
 801343c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801343e:	69bb      	ldr	r3, [r7, #24]
 8013440:	085b      	lsrs	r3, r3, #1
 8013442:	b29b      	uxth	r3, r3
 8013444:	f003 0307 	and.w	r3, r3, #7
 8013448:	b29a      	uxth	r2, r3
 801344a:	8afb      	ldrh	r3, [r7, #22]
 801344c:	4313      	orrs	r3, r2
 801344e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	8afa      	ldrh	r2, [r7, #22]
 8013456:	60da      	str	r2, [r3, #12]
 8013458:	e052      	b.n	8013500 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801345a:	2301      	movs	r3, #1
 801345c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013460:	e04e      	b.n	8013500 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013466:	2b08      	cmp	r3, #8
 8013468:	d827      	bhi.n	80134ba <UART_SetConfig+0x506>
 801346a:	a201      	add	r2, pc, #4	; (adr r2, 8013470 <UART_SetConfig+0x4bc>)
 801346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013470:	08013495 	.word	0x08013495
 8013474:	0801349d 	.word	0x0801349d
 8013478:	080134a5 	.word	0x080134a5
 801347c:	080134bb 	.word	0x080134bb
 8013480:	080134ab 	.word	0x080134ab
 8013484:	080134bb 	.word	0x080134bb
 8013488:	080134bb 	.word	0x080134bb
 801348c:	080134bb 	.word	0x080134bb
 8013490:	080134b3 	.word	0x080134b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013494:	f7fe feba 	bl	801220c <HAL_RCC_GetPCLK1Freq>
 8013498:	61f8      	str	r0, [r7, #28]
        break;
 801349a:	e014      	b.n	80134c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801349c:	f7fe fecc 	bl	8012238 <HAL_RCC_GetPCLK2Freq>
 80134a0:	61f8      	str	r0, [r7, #28]
        break;
 80134a2:	e010      	b.n	80134c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80134a4:	4b1e      	ldr	r3, [pc, #120]	; (8013520 <UART_SetConfig+0x56c>)
 80134a6:	61fb      	str	r3, [r7, #28]
        break;
 80134a8:	e00d      	b.n	80134c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80134aa:	f7fe fe17 	bl	80120dc <HAL_RCC_GetSysClockFreq>
 80134ae:	61f8      	str	r0, [r7, #28]
        break;
 80134b0:	e009      	b.n	80134c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80134b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80134b6:	61fb      	str	r3, [r7, #28]
        break;
 80134b8:	e005      	b.n	80134c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80134ba:	2300      	movs	r3, #0
 80134bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80134be:	2301      	movs	r3, #1
 80134c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80134c4:	bf00      	nop
    }

    if (pclk != 0U)
 80134c6:	69fb      	ldr	r3, [r7, #28]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d019      	beq.n	8013500 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	085a      	lsrs	r2, r3, #1
 80134d2:	69fb      	ldr	r3, [r7, #28]
 80134d4:	441a      	add	r2, r3
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	fbb2 f3f3 	udiv	r3, r2, r3
 80134de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80134e0:	69bb      	ldr	r3, [r7, #24]
 80134e2:	2b0f      	cmp	r3, #15
 80134e4:	d909      	bls.n	80134fa <UART_SetConfig+0x546>
 80134e6:	69bb      	ldr	r3, [r7, #24]
 80134e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80134ec:	d205      	bcs.n	80134fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	60da      	str	r2, [r3, #12]
 80134f8:	e002      	b.n	8013500 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80134fa:	2301      	movs	r3, #1
 80134fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	2200      	movs	r2, #0
 8013504:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	2200      	movs	r2, #0
 801350a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801350c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8013510:	4618      	mov	r0, r3
 8013512:	3728      	adds	r7, #40	; 0x28
 8013514:	46bd      	mov	sp, r7
 8013516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801351a:	bf00      	nop
 801351c:	40008000 	.word	0x40008000
 8013520:	00f42400 	.word	0x00f42400

08013524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013524:	b480      	push	{r7}
 8013526:	b083      	sub	sp, #12
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013530:	f003 0308 	and.w	r3, r3, #8
 8013534:	2b00      	cmp	r3, #0
 8013536:	d00a      	beq.n	801354e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	685b      	ldr	r3, [r3, #4]
 801353e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	430a      	orrs	r2, r1
 801354c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013552:	f003 0301 	and.w	r3, r3, #1
 8013556:	2b00      	cmp	r3, #0
 8013558:	d00a      	beq.n	8013570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	430a      	orrs	r2, r1
 801356e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013574:	f003 0302 	and.w	r3, r3, #2
 8013578:	2b00      	cmp	r3, #0
 801357a:	d00a      	beq.n	8013592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	685b      	ldr	r3, [r3, #4]
 8013582:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	430a      	orrs	r2, r1
 8013590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013596:	f003 0304 	and.w	r3, r3, #4
 801359a:	2b00      	cmp	r3, #0
 801359c:	d00a      	beq.n	80135b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	430a      	orrs	r2, r1
 80135b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135b8:	f003 0310 	and.w	r3, r3, #16
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d00a      	beq.n	80135d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	689b      	ldr	r3, [r3, #8]
 80135c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	430a      	orrs	r2, r1
 80135d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135da:	f003 0320 	and.w	r3, r3, #32
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d00a      	beq.n	80135f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	689b      	ldr	r3, [r3, #8]
 80135e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	430a      	orrs	r2, r1
 80135f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013600:	2b00      	cmp	r3, #0
 8013602:	d01a      	beq.n	801363a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	430a      	orrs	r2, r1
 8013618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801361e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013622:	d10a      	bne.n	801363a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	685b      	ldr	r3, [r3, #4]
 801362a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	430a      	orrs	r2, r1
 8013638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013642:	2b00      	cmp	r3, #0
 8013644:	d00a      	beq.n	801365c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	685b      	ldr	r3, [r3, #4]
 801364c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	430a      	orrs	r2, r1
 801365a:	605a      	str	r2, [r3, #4]
  }
}
 801365c:	bf00      	nop
 801365e:	370c      	adds	r7, #12
 8013660:	46bd      	mov	sp, r7
 8013662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013666:	4770      	bx	lr

08013668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b098      	sub	sp, #96	; 0x60
 801366c:	af02      	add	r7, sp, #8
 801366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2200      	movs	r2, #0
 8013674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013678:	f7fd f84e 	bl	8010718 <HAL_GetTick>
 801367c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	f003 0308 	and.w	r3, r3, #8
 8013688:	2b08      	cmp	r3, #8
 801368a:	d12e      	bne.n	80136ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801368c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013690:	9300      	str	r3, [sp, #0]
 8013692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013694:	2200      	movs	r2, #0
 8013696:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f000 f88c 	bl	80137b8 <UART_WaitOnFlagUntilTimeout>
 80136a0:	4603      	mov	r3, r0
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d021      	beq.n	80136ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ae:	e853 3f00 	ldrex	r3, [r3]
 80136b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80136b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80136ba:	653b      	str	r3, [r7, #80]	; 0x50
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	461a      	mov	r2, r3
 80136c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136c4:	647b      	str	r3, [r7, #68]	; 0x44
 80136c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80136ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136cc:	e841 2300 	strex	r3, r2, [r1]
 80136d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80136d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d1e6      	bne.n	80136a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2220      	movs	r2, #32
 80136dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	2200      	movs	r2, #0
 80136e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80136e6:	2303      	movs	r3, #3
 80136e8:	e062      	b.n	80137b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	f003 0304 	and.w	r3, r3, #4
 80136f4:	2b04      	cmp	r3, #4
 80136f6:	d149      	bne.n	801378c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80136f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80136fc:	9300      	str	r3, [sp, #0]
 80136fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013700:	2200      	movs	r2, #0
 8013702:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f000 f856 	bl	80137b8 <UART_WaitOnFlagUntilTimeout>
 801370c:	4603      	mov	r3, r0
 801370e:	2b00      	cmp	r3, #0
 8013710:	d03c      	beq.n	801378c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801371a:	e853 3f00 	ldrex	r3, [r3]
 801371e:	623b      	str	r3, [r7, #32]
   return(result);
 8013720:	6a3b      	ldr	r3, [r7, #32]
 8013722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	461a      	mov	r2, r3
 801372e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013730:	633b      	str	r3, [r7, #48]	; 0x30
 8013732:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013734:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013738:	e841 2300 	strex	r3, r2, [r1]
 801373c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013740:	2b00      	cmp	r3, #0
 8013742:	d1e6      	bne.n	8013712 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	3308      	adds	r3, #8
 801374a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	e853 3f00 	ldrex	r3, [r3]
 8013752:	60fb      	str	r3, [r7, #12]
   return(result);
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	f023 0301 	bic.w	r3, r3, #1
 801375a:	64bb      	str	r3, [r7, #72]	; 0x48
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	3308      	adds	r3, #8
 8013762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013764:	61fa      	str	r2, [r7, #28]
 8013766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013768:	69b9      	ldr	r1, [r7, #24]
 801376a:	69fa      	ldr	r2, [r7, #28]
 801376c:	e841 2300 	strex	r3, r2, [r1]
 8013770:	617b      	str	r3, [r7, #20]
   return(result);
 8013772:	697b      	ldr	r3, [r7, #20]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d1e5      	bne.n	8013744 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2220      	movs	r2, #32
 801377c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2200      	movs	r2, #0
 8013784:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013788:	2303      	movs	r3, #3
 801378a:	e011      	b.n	80137b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2220      	movs	r2, #32
 8013790:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2220      	movs	r2, #32
 8013796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2200      	movs	r2, #0
 801379e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2200      	movs	r2, #0
 80137a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2200      	movs	r2, #0
 80137aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80137ae:	2300      	movs	r3, #0
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	3758      	adds	r7, #88	; 0x58
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b084      	sub	sp, #16
 80137bc:	af00      	add	r7, sp, #0
 80137be:	60f8      	str	r0, [r7, #12]
 80137c0:	60b9      	str	r1, [r7, #8]
 80137c2:	603b      	str	r3, [r7, #0]
 80137c4:	4613      	mov	r3, r2
 80137c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80137c8:	e049      	b.n	801385e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80137ca:	69bb      	ldr	r3, [r7, #24]
 80137cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137d0:	d045      	beq.n	801385e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80137d2:	f7fc ffa1 	bl	8010718 <HAL_GetTick>
 80137d6:	4602      	mov	r2, r0
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	1ad3      	subs	r3, r2, r3
 80137dc:	69ba      	ldr	r2, [r7, #24]
 80137de:	429a      	cmp	r2, r3
 80137e0:	d302      	bcc.n	80137e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d101      	bne.n	80137ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80137e8:	2303      	movs	r3, #3
 80137ea:	e048      	b.n	801387e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	f003 0304 	and.w	r3, r3, #4
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d031      	beq.n	801385e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	69db      	ldr	r3, [r3, #28]
 8013800:	f003 0308 	and.w	r3, r3, #8
 8013804:	2b08      	cmp	r3, #8
 8013806:	d110      	bne.n	801382a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	2208      	movs	r2, #8
 801380e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013810:	68f8      	ldr	r0, [r7, #12]
 8013812:	f000 f838 	bl	8013886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2208      	movs	r2, #8
 801381a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2200      	movs	r2, #0
 8013822:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8013826:	2301      	movs	r3, #1
 8013828:	e029      	b.n	801387e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	69db      	ldr	r3, [r3, #28]
 8013830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013838:	d111      	bne.n	801385e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013844:	68f8      	ldr	r0, [r7, #12]
 8013846:	f000 f81e 	bl	8013886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	2220      	movs	r2, #32
 801384e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	2200      	movs	r2, #0
 8013856:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801385a:	2303      	movs	r3, #3
 801385c:	e00f      	b.n	801387e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	69da      	ldr	r2, [r3, #28]
 8013864:	68bb      	ldr	r3, [r7, #8]
 8013866:	4013      	ands	r3, r2
 8013868:	68ba      	ldr	r2, [r7, #8]
 801386a:	429a      	cmp	r2, r3
 801386c:	bf0c      	ite	eq
 801386e:	2301      	moveq	r3, #1
 8013870:	2300      	movne	r3, #0
 8013872:	b2db      	uxtb	r3, r3
 8013874:	461a      	mov	r2, r3
 8013876:	79fb      	ldrb	r3, [r7, #7]
 8013878:	429a      	cmp	r2, r3
 801387a:	d0a6      	beq.n	80137ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801387c:	2300      	movs	r3, #0
}
 801387e:	4618      	mov	r0, r3
 8013880:	3710      	adds	r7, #16
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}

08013886 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013886:	b480      	push	{r7}
 8013888:	b095      	sub	sp, #84	; 0x54
 801388a:	af00      	add	r7, sp, #0
 801388c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013896:	e853 3f00 	ldrex	r3, [r3]
 801389a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80138a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	461a      	mov	r2, r3
 80138aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138ac:	643b      	str	r3, [r7, #64]	; 0x40
 80138ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80138b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80138b4:	e841 2300 	strex	r3, r2, [r1]
 80138b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80138ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d1e6      	bne.n	801388e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	3308      	adds	r3, #8
 80138c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138c8:	6a3b      	ldr	r3, [r7, #32]
 80138ca:	e853 3f00 	ldrex	r3, [r3]
 80138ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	f023 0301 	bic.w	r3, r3, #1
 80138d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	3308      	adds	r3, #8
 80138de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80138e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80138e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80138e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138e8:	e841 2300 	strex	r3, r2, [r1]
 80138ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80138ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d1e5      	bne.n	80138c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	d118      	bne.n	801392e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	e853 3f00 	ldrex	r3, [r3]
 8013908:	60bb      	str	r3, [r7, #8]
   return(result);
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	f023 0310 	bic.w	r3, r3, #16
 8013910:	647b      	str	r3, [r7, #68]	; 0x44
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	461a      	mov	r2, r3
 8013918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801391a:	61bb      	str	r3, [r7, #24]
 801391c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801391e:	6979      	ldr	r1, [r7, #20]
 8013920:	69ba      	ldr	r2, [r7, #24]
 8013922:	e841 2300 	strex	r3, r2, [r1]
 8013926:	613b      	str	r3, [r7, #16]
   return(result);
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d1e6      	bne.n	80138fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2220      	movs	r2, #32
 8013932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	2200      	movs	r2, #0
 801393a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2200      	movs	r2, #0
 8013940:	669a      	str	r2, [r3, #104]	; 0x68
}
 8013942:	bf00      	nop
 8013944:	3754      	adds	r7, #84	; 0x54
 8013946:	46bd      	mov	sp, r7
 8013948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394c:	4770      	bx	lr

0801394e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801394e:	b084      	sub	sp, #16
 8013950:	b580      	push	{r7, lr}
 8013952:	b084      	sub	sp, #16
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
 8013958:	f107 001c 	add.w	r0, r7, #28
 801395c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	68db      	ldr	r3, [r3, #12]
 8013964:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801396c:	6878      	ldr	r0, [r7, #4]
 801396e:	f000 fa65 	bl	8013e3c <USB_CoreReset>
 8013972:	4603      	mov	r3, r0
 8013974:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8013976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013978:	2b00      	cmp	r3, #0
 801397a:	d106      	bne.n	801398a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013980:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	639a      	str	r2, [r3, #56]	; 0x38
 8013988:	e005      	b.n	8013996 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801398e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8013996:	7bfb      	ldrb	r3, [r7, #15]
}
 8013998:	4618      	mov	r0, r3
 801399a:	3710      	adds	r7, #16
 801399c:	46bd      	mov	sp, r7
 801399e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80139a2:	b004      	add	sp, #16
 80139a4:	4770      	bx	lr

080139a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80139a6:	b480      	push	{r7}
 80139a8:	b083      	sub	sp, #12
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	689b      	ldr	r3, [r3, #8]
 80139b2:	f023 0201 	bic.w	r2, r3, #1
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80139ba:	2300      	movs	r3, #0
}
 80139bc:	4618      	mov	r0, r3
 80139be:	370c      	adds	r7, #12
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr

080139c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	460b      	mov	r3, r1
 80139d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80139d4:	2300      	movs	r3, #0
 80139d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80139e4:	78fb      	ldrb	r3, [r7, #3]
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d115      	bne.n	8013a16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	68db      	ldr	r3, [r3, #12]
 80139ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80139f6:	2001      	movs	r0, #1
 80139f8:	f7fc fe9a 	bl	8010730 <HAL_Delay>
      ms++;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	3301      	adds	r3, #1
 8013a00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013a02:	6878      	ldr	r0, [r7, #4]
 8013a04:	f000 fa0c 	bl	8013e20 <USB_GetMode>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	2b01      	cmp	r3, #1
 8013a0c:	d01e      	beq.n	8013a4c <USB_SetCurrentMode+0x84>
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	2b31      	cmp	r3, #49	; 0x31
 8013a12:	d9f0      	bls.n	80139f6 <USB_SetCurrentMode+0x2e>
 8013a14:	e01a      	b.n	8013a4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013a16:	78fb      	ldrb	r3, [r7, #3]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d115      	bne.n	8013a48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	68db      	ldr	r3, [r3, #12]
 8013a20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013a28:	2001      	movs	r0, #1
 8013a2a:	f7fc fe81 	bl	8010730 <HAL_Delay>
      ms++;
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	3301      	adds	r3, #1
 8013a32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f000 f9f3 	bl	8013e20 <USB_GetMode>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d005      	beq.n	8013a4c <USB_SetCurrentMode+0x84>
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2b31      	cmp	r3, #49	; 0x31
 8013a44:	d9f0      	bls.n	8013a28 <USB_SetCurrentMode+0x60>
 8013a46:	e001      	b.n	8013a4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013a48:	2301      	movs	r3, #1
 8013a4a:	e005      	b.n	8013a58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	2b32      	cmp	r3, #50	; 0x32
 8013a50:	d101      	bne.n	8013a56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013a52:	2301      	movs	r3, #1
 8013a54:	e000      	b.n	8013a58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013a56:	2300      	movs	r3, #0
}
 8013a58:	4618      	mov	r0, r3
 8013a5a:	3710      	adds	r7, #16
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}

08013a60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013a60:	b084      	sub	sp, #16
 8013a62:	b580      	push	{r7, lr}
 8013a64:	b086      	sub	sp, #24
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	6078      	str	r0, [r7, #4]
 8013a6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013a72:	2300      	movs	r3, #0
 8013a74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	613b      	str	r3, [r7, #16]
 8013a7e:	e009      	b.n	8013a94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	3340      	adds	r3, #64	; 0x40
 8013a86:	009b      	lsls	r3, r3, #2
 8013a88:	4413      	add	r3, r2
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	3301      	adds	r3, #1
 8013a92:	613b      	str	r3, [r7, #16]
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	2b0e      	cmp	r3, #14
 8013a98:	d9f2      	bls.n	8013a80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d11c      	bne.n	8013ada <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013aa6:	685b      	ldr	r3, [r3, #4]
 8013aa8:	68fa      	ldr	r2, [r7, #12]
 8013aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013aae:	f043 0302 	orr.w	r3, r3, #2
 8013ab2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ab8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	601a      	str	r2, [r3, #0]
 8013ad8:	e005      	b.n	8013ae6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ade:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013aec:	461a      	mov	r2, r3
 8013aee:	2300      	movs	r3, #0
 8013af0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013af2:	2103      	movs	r1, #3
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f000 f959 	bl	8013dac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013afa:	2110      	movs	r1, #16
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f000 f8f1 	bl	8013ce4 <USB_FlushTxFifo>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d001      	beq.n	8013b0c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f000 f91d 	bl	8013d4c <USB_FlushRxFifo>
 8013b12:	4603      	mov	r3, r0
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d001      	beq.n	8013b1c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b22:	461a      	mov	r2, r3
 8013b24:	2300      	movs	r3, #0
 8013b26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b2e:	461a      	mov	r2, r3
 8013b30:	2300      	movs	r3, #0
 8013b32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b3a:	461a      	mov	r2, r3
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013b40:	2300      	movs	r3, #0
 8013b42:	613b      	str	r3, [r7, #16]
 8013b44:	e043      	b.n	8013bce <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	015a      	lsls	r2, r3, #5
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b5c:	d118      	bne.n	8013b90 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10a      	bne.n	8013b7a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	015a      	lsls	r2, r3, #5
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	4413      	add	r3, r2
 8013b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b70:	461a      	mov	r2, r3
 8013b72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013b76:	6013      	str	r3, [r2, #0]
 8013b78:	e013      	b.n	8013ba2 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013b7a:	693b      	ldr	r3, [r7, #16]
 8013b7c:	015a      	lsls	r2, r3, #5
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	4413      	add	r3, r2
 8013b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b86:	461a      	mov	r2, r3
 8013b88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013b8c:	6013      	str	r3, [r2, #0]
 8013b8e:	e008      	b.n	8013ba2 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013b90:	693b      	ldr	r3, [r7, #16]
 8013b92:	015a      	lsls	r2, r3, #5
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	4413      	add	r3, r2
 8013b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b9c:	461a      	mov	r2, r3
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	015a      	lsls	r2, r3, #5
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	4413      	add	r3, r2
 8013baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bae:	461a      	mov	r2, r3
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	015a      	lsls	r2, r3, #5
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	4413      	add	r3, r2
 8013bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013bc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	3301      	adds	r3, #1
 8013bcc:	613b      	str	r3, [r7, #16]
 8013bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd0:	693a      	ldr	r2, [r7, #16]
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d3b7      	bcc.n	8013b46 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	613b      	str	r3, [r7, #16]
 8013bda:	e043      	b.n	8013c64 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013bdc:	693b      	ldr	r3, [r7, #16]
 8013bde:	015a      	lsls	r2, r3, #5
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	4413      	add	r3, r2
 8013be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013bf2:	d118      	bne.n	8013c26 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d10a      	bne.n	8013c10 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	015a      	lsls	r2, r3, #5
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	4413      	add	r3, r2
 8013c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c06:	461a      	mov	r2, r3
 8013c08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013c0c:	6013      	str	r3, [r2, #0]
 8013c0e:	e013      	b.n	8013c38 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	015a      	lsls	r2, r3, #5
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	4413      	add	r3, r2
 8013c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013c22:	6013      	str	r3, [r2, #0]
 8013c24:	e008      	b.n	8013c38 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	015a      	lsls	r2, r3, #5
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	4413      	add	r3, r2
 8013c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c32:	461a      	mov	r2, r3
 8013c34:	2300      	movs	r3, #0
 8013c36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	015a      	lsls	r2, r3, #5
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	4413      	add	r3, r2
 8013c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c44:	461a      	mov	r2, r3
 8013c46:	2300      	movs	r3, #0
 8013c48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	015a      	lsls	r2, r3, #5
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	4413      	add	r3, r2
 8013c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c56:	461a      	mov	r2, r3
 8013c58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013c5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	3301      	adds	r3, #1
 8013c62:	613b      	str	r3, [r7, #16]
 8013c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c66:	693a      	ldr	r2, [r7, #16]
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d3b7      	bcc.n	8013bdc <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c72:	691b      	ldr	r3, [r3, #16]
 8013c74:	68fa      	ldr	r2, [r7, #12]
 8013c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013c7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2200      	movs	r2, #0
 8013c84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013c8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	699b      	ldr	r3, [r3, #24]
 8013c92:	f043 0210 	orr.w	r2, r3, #16
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	699a      	ldr	r2, [r3, #24]
 8013c9e:	4b10      	ldr	r3, [pc, #64]	; (8013ce0 <USB_DevInit+0x280>)
 8013ca0:	4313      	orrs	r3, r2
 8013ca2:	687a      	ldr	r2, [r7, #4]
 8013ca4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d005      	beq.n	8013cb8 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	699b      	ldr	r3, [r3, #24]
 8013cb0:	f043 0208 	orr.w	r2, r3, #8
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cba:	2b01      	cmp	r3, #1
 8013cbc:	d107      	bne.n	8013cce <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	699b      	ldr	r3, [r3, #24]
 8013cc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013cc6:	f043 0304 	orr.w	r3, r3, #4
 8013cca:	687a      	ldr	r2, [r7, #4]
 8013ccc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	3718      	adds	r7, #24
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013cda:	b004      	add	sp, #16
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	803c3800 	.word	0x803c3800

08013ce4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b085      	sub	sp, #20
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	3301      	adds	r3, #1
 8013cf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	4a13      	ldr	r2, [pc, #76]	; (8013d48 <USB_FlushTxFifo+0x64>)
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	d901      	bls.n	8013d04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013d00:	2303      	movs	r3, #3
 8013d02:	e01b      	b.n	8013d3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	691b      	ldr	r3, [r3, #16]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	daf2      	bge.n	8013cf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	019b      	lsls	r3, r3, #6
 8013d14:	f043 0220 	orr.w	r2, r3, #32
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	3301      	adds	r3, #1
 8013d20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	4a08      	ldr	r2, [pc, #32]	; (8013d48 <USB_FlushTxFifo+0x64>)
 8013d26:	4293      	cmp	r3, r2
 8013d28:	d901      	bls.n	8013d2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013d2a:	2303      	movs	r3, #3
 8013d2c:	e006      	b.n	8013d3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	f003 0320 	and.w	r3, r3, #32
 8013d36:	2b20      	cmp	r3, #32
 8013d38:	d0f0      	beq.n	8013d1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013d3a:	2300      	movs	r3, #0
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3714      	adds	r7, #20
 8013d40:	46bd      	mov	sp, r7
 8013d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d46:	4770      	bx	lr
 8013d48:	00030d40 	.word	0x00030d40

08013d4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	b085      	sub	sp, #20
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013d54:	2300      	movs	r3, #0
 8013d56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	4a11      	ldr	r2, [pc, #68]	; (8013da8 <USB_FlushRxFifo+0x5c>)
 8013d62:	4293      	cmp	r3, r2
 8013d64:	d901      	bls.n	8013d6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013d66:	2303      	movs	r3, #3
 8013d68:	e018      	b.n	8013d9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	691b      	ldr	r3, [r3, #16]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	daf2      	bge.n	8013d58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013d72:	2300      	movs	r3, #0
 8013d74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2210      	movs	r2, #16
 8013d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	3301      	adds	r3, #1
 8013d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	4a08      	ldr	r2, [pc, #32]	; (8013da8 <USB_FlushRxFifo+0x5c>)
 8013d86:	4293      	cmp	r3, r2
 8013d88:	d901      	bls.n	8013d8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013d8a:	2303      	movs	r3, #3
 8013d8c:	e006      	b.n	8013d9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	691b      	ldr	r3, [r3, #16]
 8013d92:	f003 0310 	and.w	r3, r3, #16
 8013d96:	2b10      	cmp	r3, #16
 8013d98:	d0f0      	beq.n	8013d7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013d9a:	2300      	movs	r3, #0
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3714      	adds	r7, #20
 8013da0:	46bd      	mov	sp, r7
 8013da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da6:	4770      	bx	lr
 8013da8:	00030d40 	.word	0x00030d40

08013dac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b085      	sub	sp, #20
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	460b      	mov	r3, r1
 8013db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dc2:	681a      	ldr	r2, [r3, #0]
 8013dc4:	78fb      	ldrb	r3, [r7, #3]
 8013dc6:	68f9      	ldr	r1, [r7, #12]
 8013dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013dcc:	4313      	orrs	r3, r2
 8013dce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013dd0:	2300      	movs	r3, #0
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3714      	adds	r7, #20
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ddc:	4770      	bx	lr

08013dde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013dde:	b480      	push	{r7}
 8013de0:	b085      	sub	sp, #20
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	68fa      	ldr	r2, [r7, #12]
 8013df4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013df8:	f023 0303 	bic.w	r3, r3, #3
 8013dfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	68fa      	ldr	r2, [r7, #12]
 8013e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e0c:	f043 0302 	orr.w	r3, r3, #2
 8013e10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e12:	2300      	movs	r3, #0
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3714      	adds	r7, #20
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr

08013e20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013e20:	b480      	push	{r7}
 8013e22:	b083      	sub	sp, #12
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	695b      	ldr	r3, [r3, #20]
 8013e2c:	f003 0301 	and.w	r3, r3, #1
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	370c      	adds	r7, #12
 8013e34:	46bd      	mov	sp, r7
 8013e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3a:	4770      	bx	lr

08013e3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013e3c:	b480      	push	{r7}
 8013e3e:	b085      	sub	sp, #20
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013e44:	2300      	movs	r3, #0
 8013e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	4a13      	ldr	r2, [pc, #76]	; (8013ea0 <USB_CoreReset+0x64>)
 8013e52:	4293      	cmp	r3, r2
 8013e54:	d901      	bls.n	8013e5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013e56:	2303      	movs	r3, #3
 8013e58:	e01b      	b.n	8013e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	691b      	ldr	r3, [r3, #16]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	daf2      	bge.n	8013e48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013e62:	2300      	movs	r3, #0
 8013e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	691b      	ldr	r3, [r3, #16]
 8013e6a:	f043 0201 	orr.w	r2, r3, #1
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	3301      	adds	r3, #1
 8013e76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	4a09      	ldr	r2, [pc, #36]	; (8013ea0 <USB_CoreReset+0x64>)
 8013e7c:	4293      	cmp	r3, r2
 8013e7e:	d901      	bls.n	8013e84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013e80:	2303      	movs	r3, #3
 8013e82:	e006      	b.n	8013e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	691b      	ldr	r3, [r3, #16]
 8013e88:	f003 0301 	and.w	r3, r3, #1
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d0f0      	beq.n	8013e72 <USB_CoreReset+0x36>

  return HAL_OK;
 8013e90:	2300      	movs	r3, #0
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3714      	adds	r7, #20
 8013e96:	46bd      	mov	sp, r7
 8013e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop
 8013ea0:	00030d40 	.word	0x00030d40

08013ea4 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8013ea4:	b480      	push	{r7}
 8013ea6:	b08b      	sub	sp, #44	; 0x2c
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	ed87 0a02 	vstr	s0, [r7, #8]
 8013eb0:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	685b      	ldr	r3, [r3, #4]
 8013eb6:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	685b      	ldr	r3, [r3, #4]
 8013ebc:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	881b      	ldrh	r3, [r3, #0]
 8013ec2:	461a      	mov	r2, r3
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	885b      	ldrh	r3, [r3, #2]
 8013ec8:	fb02 f303 	mul.w	r3, r2, r3
 8013ecc:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8013ed2:	e010      	b.n	8013ef6 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8013ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed6:	1d1a      	adds	r2, r3, #4
 8013ed8:	627a      	str	r2, [r7, #36]	; 0x24
 8013eda:	ed93 7a00 	vldr	s14, [r3]
 8013ede:	6a3b      	ldr	r3, [r7, #32]
 8013ee0:	1d1a      	adds	r2, r3, #4
 8013ee2:	623a      	str	r2, [r7, #32]
 8013ee4:	edd7 7a02 	vldr	s15, [r7, #8]
 8013ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eec:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8013ef0:	69fb      	ldr	r3, [r7, #28]
 8013ef2:	3b01      	subs	r3, #1
 8013ef4:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8013ef6:	69fb      	ldr	r3, [r7, #28]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1eb      	bne.n	8013ed4 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8013efc:	2300      	movs	r3, #0
 8013efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8013f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	372c      	adds	r7, #44	; 0x2c
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0e:	4770      	bx	lr

08013f10 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8013f10:	b480      	push	{r7}
 8013f12:	b08b      	sub	sp, #44	; 0x2c
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
 8013f18:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	881b      	ldrh	r3, [r3, #0]
 8013f2a:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	885b      	ldrh	r3, [r3, #2]
 8013f30:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8013f32:	89fb      	ldrh	r3, [r7, #14]
 8013f34:	61bb      	str	r3, [r7, #24]
 8013f36:	2300      	movs	r3, #0
 8013f38:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	009b      	lsls	r3, r3, #2
 8013f3e:	693a      	ldr	r2, [r7, #16]
 8013f40:	4413      	add	r3, r2
 8013f42:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8013f44:	89bb      	ldrh	r3, [r7, #12]
 8013f46:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8013f48:	e00d      	b.n	8013f66 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8013f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4c:	1d1a      	adds	r2, r3, #4
 8013f4e:	627a      	str	r2, [r7, #36]	; 0x24
 8013f50:	681a      	ldr	r2, [r3, #0]
 8013f52:	6a3b      	ldr	r3, [r7, #32]
 8013f54:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8013f56:	89fb      	ldrh	r3, [r7, #14]
 8013f58:	009b      	lsls	r3, r3, #2
 8013f5a:	6a3a      	ldr	r2, [r7, #32]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8013f60:	69fb      	ldr	r3, [r7, #28]
 8013f62:	3b01      	subs	r3, #1
 8013f64:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8013f66:	69fb      	ldr	r3, [r7, #28]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d1ee      	bne.n	8013f4a <arm_mat_trans_f32+0x3a>
      }

      i++;
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	3301      	adds	r3, #1
 8013f70:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8013f72:	69bb      	ldr	r3, [r7, #24]
 8013f74:	3b01      	subs	r3, #1
 8013f76:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8013f78:	69bb      	ldr	r3, [r7, #24]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d1dd      	bne.n	8013f3a <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8013f82:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	372c      	adds	r7, #44	; 0x2c
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f90:	4770      	bx	lr

08013f92 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8013f92:	b480      	push	{r7}
 8013f94:	b087      	sub	sp, #28
 8013f96:	af00      	add	r7, sp, #0
 8013f98:	60f8      	str	r0, [r7, #12]
 8013f9a:	60b9      	str	r1, [r7, #8]
 8013f9c:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8013f9e:	f04f 0300 	mov.w	r3, #0
 8013fa2:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8013fa8:	e00d      	b.n	8013fc6 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	1d1a      	adds	r2, r3, #4
 8013fae:	60fa      	str	r2, [r7, #12]
 8013fb0:	edd3 7a00 	vldr	s15, [r3]
 8013fb4:	ed97 7a04 	vldr	s14, [r7, #16]
 8013fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fbc:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	3b01      	subs	r3, #1
 8013fc4:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d1ee      	bne.n	8013faa <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	ee07 3a90 	vmov	s15, r3
 8013fd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013fd6:	edd7 6a04 	vldr	s13, [r7, #16]
 8013fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	edc3 7a00 	vstr	s15, [r3]
}
 8013fe4:	bf00      	nop
 8013fe6:	371c      	adds	r7, #28
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fee:	4770      	bx	lr

08013ff0 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b08a      	sub	sp, #40	; 0x28
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	60f8      	str	r0, [r7, #12]
 8013ff8:	60b9      	str	r1, [r7, #8]
 8013ffa:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8013ffc:	f04f 0300 	mov.w	r3, #0
 8014000:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8014006:	e011      	b.n	801402c <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	1d1a      	adds	r2, r3, #4
 801400c:	60fa      	str	r2, [r7, #12]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 8014012:	edd7 7a07 	vldr	s15, [r7, #28]
 8014016:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801401a:	ed97 7a08 	vldr	s14, [r7, #32]
 801401e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014022:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8014026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014028:	3b01      	subs	r3, #1
 801402a:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 801402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402e:	2b00      	cmp	r3, #0
 8014030:	d1ea      	bne.n	8014008 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	ee07 3a90 	vmov	s15, r3
 8014038:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801403c:	edd7 6a08 	vldr	s13, [r7, #32]
 8014040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014044:	edc7 7a06 	vstr	s15, [r7, #24]
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 801404c:	edd7 7a06 	vldr	s15, [r7, #24]
 8014050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014058:	db09      	blt.n	801406e <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 801405a:	ed97 0a06 	vldr	s0, [r7, #24]
 801405e:	f007 f9ed 	bl	801b43c <sqrtf>
 8014062:	eef0 7a40 	vmov.f32	s15, s0
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 801406c:	e004      	b.n	8014078 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	f04f 0200 	mov.w	r2, #0
 8014074:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8014076:	bf00      	nop
}
 8014078:	bf00      	nop
 801407a:	3728      	adds	r7, #40	; 0x28
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <arm_var_f32>:
#else
void arm_var_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8014080:	b480      	push	{r7}
 8014082:	b08b      	sub	sp, #44	; 0x2c
 8014084:	af00      	add	r7, sp, #0
 8014086:	60f8      	str	r0, [r7, #12]
 8014088:	60b9      	str	r1, [r7, #8]
 801408a:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 801408c:	f04f 0300 	mov.w	r3, #0
 8014090:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 8014092:	f04f 0300 	mov.w	r3, #0
 8014096:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
  const float32_t * pInput = pSrc;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	61bb      	str	r3, [r7, #24]

  if (blockSize <= 1U)
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	2b01      	cmp	r3, #1
 80140a0:	d804      	bhi.n	80140ac <arm_var_f32+0x2c>
  {
    *pResult = 0;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	f04f 0200 	mov.w	r2, #0
 80140a8:	601a      	str	r2, [r3, #0]
    return;
 80140aa:	e04e      	b.n	801414a <arm_var_f32+0xca>
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80140b0:	e00d      	b.n	80140ce <arm_var_f32+0x4e>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */

    sum += *pInput++;
 80140b2:	69bb      	ldr	r3, [r7, #24]
 80140b4:	1d1a      	adds	r2, r3, #4
 80140b6:	61ba      	str	r2, [r7, #24]
 80140b8:	edd3 7a00 	vldr	s15, [r3]
 80140bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80140c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140c4:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 80140c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ca:	3b01      	subs	r3, #1
 80140cc:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 80140ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d1ee      	bne.n	80140b2 <arm_var_f32+0x32>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  fMean = sum / (float32_t) blockSize;
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	ee07 3a90 	vmov	s15, r3
 80140da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80140de:	edd7 6a08 	vldr	s13, [r7, #32]
 80140e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80140e6:	edc7 7a05 	vstr	s15, [r7, #20]

  pInput = pSrc;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	61bb      	str	r3, [r7, #24]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80140f2:	e017      	b.n	8014124 <arm_var_f32+0xa4>
  {
    fValue = *pInput++ - fMean;
 80140f4:	69bb      	ldr	r3, [r7, #24]
 80140f6:	1d1a      	adds	r2, r3, #4
 80140f8:	61ba      	str	r2, [r7, #24]
 80140fa:	ed93 7a00 	vldr	s14, [r3]
 80140fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8014102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014106:	edc7 7a04 	vstr	s15, [r7, #16]
    fSum += fValue * fValue;
 801410a:	edd7 7a04 	vldr	s15, [r7, #16]
 801410e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014112:	ed97 7a07 	vldr	s14, [r7, #28]
 8014116:	ee77 7a27 	vadd.f32	s15, s14, s15
 801411a:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement loop counter */
    blkCnt--;
 801411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014120:	3b01      	subs	r3, #1
 8014122:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8014124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014126:	2b00      	cmp	r3, #0
 8014128:	d1e4      	bne.n	80140f4 <arm_var_f32+0x74>
  }

  /* Variance */
  *pResult = fSum / (float32_t)(blockSize - 1.0f);
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	ee07 3a90 	vmov	s15, r3
 8014130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014138:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801413c:	edd7 6a07 	vldr	s13, [r7, #28]
 8014140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	edc3 7a00 	vstr	s15, [r3]
}
 801414a:	372c      	adds	r7, #44	; 0x2c
 801414c:	46bd      	mov	sp, r7
 801414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014152:	4770      	bx	lr

08014154 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8014154:	b480      	push	{r7}
 8014156:	b089      	sub	sp, #36	; 0x24
 8014158:	af00      	add	r7, sp, #0
 801415a:	60f8      	str	r0, [r7, #12]
 801415c:	460b      	mov	r3, r1
 801415e:	607a      	str	r2, [r7, #4]
 8014160:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8014162:	2300      	movs	r3, #0
 8014164:	61fb      	str	r3, [r7, #28]
 8014166:	e043      	b.n	80141f0 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8014168:	69fb      	ldr	r3, [r7, #28]
 801416a:	005b      	lsls	r3, r3, #1
 801416c:	687a      	ldr	r2, [r7, #4]
 801416e:	4413      	add	r3, r2
 8014170:	881b      	ldrh	r3, [r3, #0]
 8014172:	089b      	lsrs	r3, r3, #2
 8014174:	b29b      	uxth	r3, r3
 8014176:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8014178:	69fb      	ldr	r3, [r7, #28]
 801417a:	3301      	adds	r3, #1
 801417c:	005b      	lsls	r3, r3, #1
 801417e:	687a      	ldr	r2, [r7, #4]
 8014180:	4413      	add	r3, r2
 8014182:	881b      	ldrh	r3, [r3, #0]
 8014184:	089b      	lsrs	r3, r3, #2
 8014186:	b29b      	uxth	r3, r3
 8014188:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 801418a:	69bb      	ldr	r3, [r7, #24]
 801418c:	009b      	lsls	r3, r3, #2
 801418e:	68fa      	ldr	r2, [r7, #12]
 8014190:	4413      	add	r3, r2
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	009b      	lsls	r3, r3, #2
 801419a:	68fa      	ldr	r2, [r7, #12]
 801419c:	441a      	add	r2, r3
 801419e:	69bb      	ldr	r3, [r7, #24]
 80141a0:	009b      	lsls	r3, r3, #2
 80141a2:	68f9      	ldr	r1, [r7, #12]
 80141a4:	440b      	add	r3, r1
 80141a6:	6812      	ldr	r2, [r2, #0]
 80141a8:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	009b      	lsls	r3, r3, #2
 80141ae:	68fa      	ldr	r2, [r7, #12]
 80141b0:	4413      	add	r3, r2
 80141b2:	693a      	ldr	r2, [r7, #16]
 80141b4:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 80141b6:	69bb      	ldr	r3, [r7, #24]
 80141b8:	3301      	adds	r3, #1
 80141ba:	009b      	lsls	r3, r3, #2
 80141bc:	68fa      	ldr	r2, [r7, #12]
 80141be:	4413      	add	r3, r2
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	3301      	adds	r3, #1
 80141c8:	009b      	lsls	r3, r3, #2
 80141ca:	68fa      	ldr	r2, [r7, #12]
 80141cc:	441a      	add	r2, r3
 80141ce:	69bb      	ldr	r3, [r7, #24]
 80141d0:	3301      	adds	r3, #1
 80141d2:	009b      	lsls	r3, r3, #2
 80141d4:	68f9      	ldr	r1, [r7, #12]
 80141d6:	440b      	add	r3, r1
 80141d8:	6812      	ldr	r2, [r2, #0]
 80141da:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	3301      	adds	r3, #1
 80141e0:	009b      	lsls	r3, r3, #2
 80141e2:	68fa      	ldr	r2, [r7, #12]
 80141e4:	4413      	add	r3, r2
 80141e6:	693a      	ldr	r2, [r7, #16]
 80141e8:	601a      	str	r2, [r3, #0]

    i += 2;
 80141ea:	69fb      	ldr	r3, [r7, #28]
 80141ec:	3302      	adds	r3, #2
 80141ee:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 80141f0:	897b      	ldrh	r3, [r7, #10]
 80141f2:	69fa      	ldr	r2, [r7, #28]
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d3b7      	bcc.n	8014168 <arm_bitreversal_32+0x14>
  }
}
 80141f8:	bf00      	nop
 80141fa:	bf00      	nop
 80141fc:	3724      	adds	r7, #36	; 0x24
 80141fe:	46bd      	mov	sp, r7
 8014200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014204:	4770      	bx	lr

08014206 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8014206:	b580      	push	{r7, lr}
 8014208:	b0a0      	sub	sp, #128	; 0x80
 801420a:	af00      	add	r7, sp, #0
 801420c:	6078      	str	r0, [r7, #4]
 801420e:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	881b      	ldrh	r3, [r3, #0]
 8014214:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8014216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014218:	009b      	lsls	r3, r3, #2
 801421a:	683a      	ldr	r2, [r7, #0]
 801421c:	4413      	add	r3, r2
 801421e:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 801422a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801422c:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 801422e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014230:	085b      	lsrs	r3, r3, #1
 8014232:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8014234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014236:	009b      	lsls	r3, r3, #2
 8014238:	683a      	ldr	r2, [r7, #0]
 801423a:	4413      	add	r3, r2
 801423c:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 801423e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014244:	4413      	add	r3, r2
 8014246:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8014248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801424a:	089b      	lsrs	r3, r3, #2
 801424c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801424e:	e1b6      	b.n	80145be <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	689b      	ldr	r3, [r3, #8]
 8014260:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	68db      	ldr	r3, [r3, #12]
 8014266:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8014268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 801426e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014270:	685b      	ldr	r3, [r3, #4]
 8014272:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8014274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014276:	689b      	ldr	r3, [r3, #8]
 8014278:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 801427a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801427c:	68db      	ldr	r3, [r3, #12]
 801427e:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8014280:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8014286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014288:	685b      	ldr	r3, [r3, #4]
 801428a:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 801428c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801428e:	689b      	ldr	r3, [r3, #8]
 8014290:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8014292:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8014298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 801429e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142a0:	685b      	ldr	r3, [r3, #4]
 80142a2:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 80142a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142a6:	689b      	ldr	r3, [r3, #8]
 80142a8:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 80142aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142ac:	68db      	ldr	r3, [r3, #12]
 80142ae:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 80142b0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80142b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	1d1a      	adds	r2, r3, #4
 80142bc:	603a      	str	r2, [r7, #0]
 80142be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142c2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 80142c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80142ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	1d1a      	adds	r2, r3, #4
 80142d2:	603a      	str	r2, [r7, #0]
 80142d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142d8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 80142dc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80142e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	1d1a      	adds	r2, r3, #4
 80142e8:	603a      	str	r2, [r7, #0]
 80142ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142ee:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80142f2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80142f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	1d1a      	adds	r2, r3, #4
 80142fe:	603a      	str	r2, [r7, #0]
 8014300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014304:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8014308:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801430c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014314:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8014318:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801431c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014324:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8014328:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801432c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014334:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8014338:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801433c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014344:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8014348:	ed97 7a06 	vldr	s14, [r7, #24]
 801434c:	edd7 7a02 	vldr	s15, [r7, #8]
 8014350:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014352:	1d1a      	adds	r2, r3, #4
 8014354:	67fa      	str	r2, [r7, #124]	; 0x7c
 8014356:	ee77 7a27 	vadd.f32	s15, s14, s15
 801435a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 801435e:	ed97 7a07 	vldr	s14, [r7, #28]
 8014362:	edd7 7a03 	vldr	s15, [r7, #12]
 8014366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014368:	1d1a      	adds	r2, r3, #4
 801436a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801436c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014370:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8014374:	ed97 7a08 	vldr	s14, [r7, #32]
 8014378:	edd7 7a04 	vldr	s15, [r7, #16]
 801437c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801437e:	1d1a      	adds	r2, r3, #4
 8014380:	67fa      	str	r2, [r7, #124]	; 0x7c
 8014382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014386:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 801438a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801438e:	edd7 7a05 	vldr	s15, [r7, #20]
 8014392:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014394:	1d1a      	adds	r2, r3, #4
 8014396:	67fa      	str	r2, [r7, #124]	; 0x7c
 8014398:	ee77 7a27 	vadd.f32	s15, s14, s15
 801439c:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 80143a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80143a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80143a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143ac:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 80143b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80143b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80143b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143bc:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 80143c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80143c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80143c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143cc:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 80143d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80143d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80143d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143dc:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 80143e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80143e2:	1d1a      	adds	r2, r3, #4
 80143e4:	673a      	str	r2, [r7, #112]	; 0x70
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 80143ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80143ec:	1d1a      	adds	r2, r3, #4
 80143ee:	673a      	str	r2, [r7, #112]	; 0x70
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 80143f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80143f8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80143fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014400:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8014404:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014408:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801440c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014410:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8014414:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014418:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801441c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014420:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8014424:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014428:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801442c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014430:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8014434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014436:	1d1a      	adds	r2, r3, #4
 8014438:	677a      	str	r2, [r7, #116]	; 0x74
 801443a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801443e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8014442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014446:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 801444a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801444c:	1d1a      	adds	r2, r3, #4
 801444e:	677a      	str	r2, [r7, #116]	; 0x74
 8014450:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014454:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8014458:	ee77 7a67 	vsub.f32	s15, s14, s15
 801445c:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8014460:	edd7 7a02 	vldr	s15, [r7, #8]
 8014464:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014468:	ee67 7a27 	vmul.f32	s15, s14, s15
 801446c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8014470:	edd7 7a03 	vldr	s15, [r7, #12]
 8014474:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014478:	ee67 7a27 	vmul.f32	s15, s14, s15
 801447c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8014480:	edd7 7a03 	vldr	s15, [r7, #12]
 8014484:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014488:	ee67 7a27 	vmul.f32	s15, s14, s15
 801448c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8014490:	edd7 7a02 	vldr	s15, [r7, #8]
 8014494:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014498:	ee67 7a27 	vmul.f32	s15, s14, s15
 801449c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80144a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80144a2:	1d1a      	adds	r2, r3, #4
 80144a4:	67ba      	str	r2, [r7, #120]	; 0x78
 80144a6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80144aa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80144ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144b2:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80144b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80144b8:	1d1a      	adds	r2, r3, #4
 80144ba:	67ba      	str	r2, [r7, #120]	; 0x78
 80144bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80144c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80144c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144c8:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 80144cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80144ce:	1d1a      	adds	r2, r3, #4
 80144d0:	673a      	str	r2, [r7, #112]	; 0x70
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 80144d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80144d8:	1d1a      	adds	r2, r3, #4
 80144da:	673a      	str	r2, [r7, #112]	; 0x70
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 80144e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80144e4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80144e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144ec:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 80144f0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80144f4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80144f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144fc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8014500:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014504:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014508:	ee67 7a27 	vmul.f32	s15, s14, s15
 801450c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8014510:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014514:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014518:	ee67 7a27 	vmul.f32	s15, s14, s15
 801451c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8014520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014522:	1d1a      	adds	r2, r3, #4
 8014524:	677a      	str	r2, [r7, #116]	; 0x74
 8014526:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801452a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801452e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014532:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8014536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014538:	1d1a      	adds	r2, r3, #4
 801453a:	677a      	str	r2, [r7, #116]	; 0x74
 801453c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014540:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8014544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014548:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 801454c:	edd7 7a04 	vldr	s15, [r7, #16]
 8014550:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014558:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 801455c:	edd7 7a05 	vldr	s15, [r7, #20]
 8014560:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014568:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 801456c:	edd7 7a05 	vldr	s15, [r7, #20]
 8014570:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014578:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 801457c:	edd7 7a04 	vldr	s15, [r7, #16]
 8014580:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014588:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 801458c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801458e:	1d1a      	adds	r2, r3, #4
 8014590:	67ba      	str	r2, [r7, #120]	; 0x78
 8014592:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8014596:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801459a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801459e:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80145a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80145a4:	1d1a      	adds	r2, r3, #4
 80145a6:	67ba      	str	r2, [r7, #120]	; 0x78
 80145a8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80145ac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80145b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145b4:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 80145b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80145ba:	3b01      	subs	r3, #1
 80145bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80145be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	f47f ae45 	bne.w	8014250 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80145c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80145c8:	b299      	uxth	r1, r3
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	685a      	ldr	r2, [r3, #4]
 80145ce:	2302      	movs	r3, #2
 80145d0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80145d2:	f000 fef7 	bl	80153c4 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80145d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80145d8:	b299      	uxth	r1, r3
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	685a      	ldr	r2, [r3, #4]
 80145de:	2302      	movs	r3, #2
 80145e0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80145e2:	f000 feef 	bl	80153c4 <arm_radix8_butterfly_f32>
}
 80145e6:	bf00      	nop
 80145e8:	3780      	adds	r7, #128	; 0x80
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}

080145ee <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80145ee:	b580      	push	{r7, lr}
 80145f0:	b0ac      	sub	sp, #176	; 0xb0
 80145f2:	af00      	add	r7, sp, #0
 80145f4:	6078      	str	r0, [r7, #4]
 80145f6:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	881b      	ldrh	r3, [r3, #0]
 80145fc:	085b      	lsrs	r3, r3, #1
 80145fe:	b29b      	uxth	r3, r3
 8014600:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8014604:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014608:	009b      	lsls	r3, r3, #2
 801460a:	683a      	ldr	r2, [r7, #0]
 801460c:	4413      	add	r3, r2
 801460e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8014612:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014616:	009b      	lsls	r3, r3, #2
 8014618:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801461c:	4413      	add	r3, r2
 801461e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8014622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014626:	009b      	lsls	r3, r3, #2
 8014628:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801462c:	4413      	add	r3, r2
 801462e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8014636:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801463a:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 801463c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014640:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8014642:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014646:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8014648:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801464c:	3b04      	subs	r3, #4
 801464e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8014652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014656:	3b04      	subs	r3, #4
 8014658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 801465c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014660:	3b04      	subs	r3, #4
 8014662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8014666:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801466a:	009b      	lsls	r3, r3, #2
 801466c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014670:	4413      	add	r3, r2
 8014672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801467e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014682:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014686:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801468a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 801468e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014692:	085b      	lsrs	r3, r3, #1
 8014694:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8014698:	2302      	movs	r3, #2
 801469a:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 801469c:	2304      	movs	r3, #4
 801469e:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80146a0:	2306      	movs	r3, #6
 80146a2:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	ed93 7a00 	vldr	s14, [r3]
 80146aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80146ae:	edd3 7a00 	vldr	s15, [r3]
 80146b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146b6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	ed93 7a00 	vldr	s14, [r3]
 80146c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80146c4:	edd3 7a00 	vldr	s15, [r3]
 80146c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146cc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	3304      	adds	r3, #4
 80146d4:	ed93 7a00 	vldr	s14, [r3]
 80146d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80146dc:	3304      	adds	r3, #4
 80146de:	edd3 7a00 	vldr	s15, [r3]
 80146e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146e6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	3304      	adds	r3, #4
 80146ee:	ed93 7a00 	vldr	s14, [r3]
 80146f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80146f6:	3304      	adds	r3, #4
 80146f8:	edd3 7a00 	vldr	s15, [r3]
 80146fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014700:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8014704:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014708:	3304      	adds	r3, #4
 801470a:	ed93 7a00 	vldr	s14, [r3]
 801470e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8014712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014716:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801471a:	3304      	adds	r3, #4
 801471c:	edd3 7a00 	vldr	s15, [r3]
 8014720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014724:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8014728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801472c:	edd3 7a00 	vldr	s15, [r3]
 8014730:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8014734:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801473c:	edd3 7a00 	vldr	s15, [r3]
 8014740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014744:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8014748:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801474c:	edd3 7a00 	vldr	s15, [r3]
 8014750:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014754:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801475c:	edd3 7a00 	vldr	s15, [r3]
 8014760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014764:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8014768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801476c:	3304      	adds	r3, #4
 801476e:	edd3 7a00 	vldr	s15, [r3]
 8014772:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014776:	ee37 7a67 	vsub.f32	s14, s14, s15
 801477a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801477e:	3304      	adds	r3, #4
 8014780:	edd3 7a00 	vldr	s15, [r3]
 8014784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014788:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 801478c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014790:	3304      	adds	r3, #4
 8014792:	edd3 7a00 	vldr	s15, [r3]
 8014796:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801479a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801479e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80147a2:	3304      	adds	r3, #4
 80147a4:	edd3 7a00 	vldr	s15, [r3]
 80147a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147ac:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80147b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80147b4:	ed93 7a00 	vldr	s14, [r3]
 80147b8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80147bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80147c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80147c4:	edd3 7a00 	vldr	s15, [r3]
 80147c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147cc:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80147d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80147d4:	ed93 7a00 	vldr	s14, [r3]
 80147d8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80147dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80147e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80147e4:	edd3 7a00 	vldr	s15, [r3]
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	1d1a      	adds	r2, r3, #4
 80147ec:	603a      	str	r2, [r7, #0]
 80147ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147f2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80147f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80147fa:	3304      	adds	r3, #4
 80147fc:	ed93 7a00 	vldr	s14, [r3]
 8014800:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014804:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801480c:	3304      	adds	r3, #4
 801480e:	edd3 7a00 	vldr	s15, [r3]
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	1d1a      	adds	r2, r3, #4
 8014816:	603a      	str	r2, [r7, #0]
 8014818:	ee77 7a27 	vadd.f32	s15, s14, s15
 801481c:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8014820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014824:	1d1a      	adds	r2, r3, #4
 8014826:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801482a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801482c:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 801482e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014832:	1d1a      	adds	r2, r3, #4
 8014834:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801483a:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 801483c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014840:	1d1a      	adds	r2, r3, #4
 8014842:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014846:	69fa      	ldr	r2, [r7, #28]
 8014848:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 801484a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801484e:	1d1a      	adds	r2, r3, #4
 8014850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014854:	6a3a      	ldr	r2, [r7, #32]
 8014856:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8014858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801485c:	1d1a      	adds	r2, r3, #4
 801485e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8014862:	68fa      	ldr	r2, [r7, #12]
 8014864:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8014866:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801486a:	1d1a      	adds	r2, r3, #4
 801486c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8014870:	693a      	ldr	r2, [r7, #16]
 8014872:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8014874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801487c:	4413      	add	r3, r2
 801487e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8014882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801488a:	4413      	add	r3, r2
 801488c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8014890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014892:	009b      	lsls	r3, r3, #2
 8014894:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014898:	4413      	add	r3, r2
 801489a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 801489e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80148a2:	3b02      	subs	r3, #2
 80148a4:	085b      	lsrs	r3, r3, #1
 80148a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80148aa:	e31c      	b.n	8014ee6 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	ed93 7a00 	vldr	s14, [r3]
 80148b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80148b6:	edd3 7a00 	vldr	s15, [r3]
 80148ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148be:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	ed93 7a00 	vldr	s14, [r3]
 80148c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80148cc:	edd3 7a00 	vldr	s15, [r3]
 80148d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148d4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 80148d8:	683b      	ldr	r3, [r7, #0]
 80148da:	3304      	adds	r3, #4
 80148dc:	ed93 7a00 	vldr	s14, [r3]
 80148e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80148e4:	3304      	adds	r3, #4
 80148e6:	edd3 7a00 	vldr	s15, [r3]
 80148ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148ee:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	3304      	adds	r3, #4
 80148f6:	ed93 7a00 	vldr	s14, [r3]
 80148fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80148fe:	3304      	adds	r3, #4
 8014900:	edd3 7a00 	vldr	s15, [r3]
 8014904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014908:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 801490c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014910:	3304      	adds	r3, #4
 8014912:	ed93 7a00 	vldr	s14, [r3]
 8014916:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801491a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801491e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014922:	3304      	adds	r3, #4
 8014924:	edd3 7a00 	vldr	s15, [r3]
 8014928:	ee77 7a67 	vsub.f32	s15, s14, s15
 801492c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8014930:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014934:	edd3 7a00 	vldr	s15, [r3]
 8014938:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801493c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014944:	edd3 7a00 	vldr	s15, [r3]
 8014948:	ee77 7a27 	vadd.f32	s15, s14, s15
 801494c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8014950:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014954:	edd3 7a00 	vldr	s15, [r3]
 8014958:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801495c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014964:	edd3 7a00 	vldr	s15, [r3]
 8014968:	ee77 7a67 	vsub.f32	s15, s14, s15
 801496c:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8014970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014974:	3304      	adds	r3, #4
 8014976:	edd3 7a00 	vldr	s15, [r3]
 801497a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801497e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014982:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014986:	3304      	adds	r3, #4
 8014988:	edd3 7a00 	vldr	s15, [r3]
 801498c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014990:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8014994:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014998:	3304      	adds	r3, #4
 801499a:	edd3 7a00 	vldr	s15, [r3]
 801499e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80149a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80149a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80149aa:	3304      	adds	r3, #4
 80149ac:	edd3 7a00 	vldr	s15, [r3]
 80149b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149b4:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 80149b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80149bc:	ed93 7a00 	vldr	s14, [r3]
 80149c0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80149c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80149c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80149cc:	edd3 7a00 	vldr	s15, [r3]
 80149d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149d4:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 80149d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80149dc:	ed93 7a00 	vldr	s14, [r3]
 80149e0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80149e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80149e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80149ec:	edd3 7a00 	vldr	s15, [r3]
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	1d1a      	adds	r2, r3, #4
 80149f4:	603a      	str	r2, [r7, #0]
 80149f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149fa:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80149fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014a02:	3304      	adds	r3, #4
 8014a04:	ed93 7a00 	vldr	s14, [r3]
 8014a08:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014a14:	3304      	adds	r3, #4
 8014a16:	edd3 7a00 	vldr	s15, [r3]
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	1d1a      	adds	r2, r3, #4
 8014a1e:	603a      	str	r2, [r7, #0]
 8014a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a24:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8014a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a2c:	3b04      	subs	r3, #4
 8014a2e:	ed93 7a00 	vldr	s14, [r3]
 8014a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014a36:	3b04      	subs	r3, #4
 8014a38:	edd3 7a00 	vldr	s15, [r3]
 8014a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a40:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8014a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a48:	3b04      	subs	r3, #4
 8014a4a:	ed93 7a00 	vldr	s14, [r3]
 8014a4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014a52:	3b04      	subs	r3, #4
 8014a54:	edd3 7a00 	vldr	s15, [r3]
 8014a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a5c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8014a60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a64:	ed93 7a00 	vldr	s14, [r3]
 8014a68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014a6c:	edd3 7a00 	vldr	s15, [r3]
 8014a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a74:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8014a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a7c:	ed93 7a00 	vldr	s14, [r3]
 8014a80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014a84:	edd3 7a00 	vldr	s15, [r3]
 8014a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a8c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8014a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014a94:	ed93 7a00 	vldr	s14, [r3]
 8014a98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014a9c:	edd3 7a00 	vldr	s15, [r3]
 8014aa0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014aa4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014aac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8014ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014ab4:	ed93 7a00 	vldr	s14, [r3]
 8014ab8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014abc:	edd3 7a00 	vldr	s15, [r3]
 8014ac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014ac8:	3b04      	subs	r3, #4
 8014aca:	edd3 7a00 	vldr	s15, [r3]
 8014ace:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014ad6:	3b04      	subs	r3, #4
 8014ad8:	edd3 7a00 	vldr	s15, [r3]
 8014adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ae0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8014ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014ae8:	3b04      	subs	r3, #4
 8014aea:	edd3 7a00 	vldr	s15, [r3]
 8014aee:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014af2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014afa:	3b04      	subs	r3, #4
 8014afc:	edd3 7a00 	vldr	s15, [r3]
 8014b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b04:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8014b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b0c:	edd3 7a00 	vldr	s15, [r3]
 8014b10:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014b14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014b18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b1c:	edd3 7a00 	vldr	s15, [r3]
 8014b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b24:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8014b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b2c:	ed93 7a00 	vldr	s14, [r3]
 8014b30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b34:	edd3 7a00 	vldr	s15, [r3]
 8014b38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014b3c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b44:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8014b48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b4c:	3b04      	subs	r3, #4
 8014b4e:	ed93 7a00 	vldr	s14, [r3]
 8014b52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b56:	3b04      	subs	r3, #4
 8014b58:	edd3 7a00 	vldr	s15, [r3]
 8014b5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014b60:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8014b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b68:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8014b6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b70:	ed93 7a00 	vldr	s14, [r3]
 8014b74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014b7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b80:	edd3 7a00 	vldr	s15, [r3]
 8014b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014b88:	1f1a      	subs	r2, r3, #4
 8014b8a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8014b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b92:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8014b96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b9a:	3b04      	subs	r3, #4
 8014b9c:	ed93 7a00 	vldr	s14, [r3]
 8014ba0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014ba8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014bac:	3b04      	subs	r3, #4
 8014bae:	edd3 7a00 	vldr	s15, [r3]
 8014bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014bb6:	1f1a      	subs	r2, r3, #4
 8014bb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8014bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014bc0:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8014bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014bc8:	1d1a      	adds	r2, r3, #4
 8014bca:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8014bd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014bd6:	1d1a      	adds	r2, r3, #4
 8014bd8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8014be0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014be4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014bec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8014bf0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014bf4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014bfc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8014c00:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014c04:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c0c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8014c10:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014c14:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c1c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8014c20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014c24:	1d1a      	adds	r2, r3, #4
 8014c26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014c2a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014c2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c36:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8014c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014c3e:	1d1a      	adds	r2, r3, #4
 8014c40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014c44:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014c48:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c50:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8014c54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014c58:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c60:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8014c64:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014c68:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c70:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8014c74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014c78:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c80:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8014c84:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014c88:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8014c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c98:	1f1a      	subs	r2, r3, #4
 8014c9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014c9e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014ca2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014caa:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8014cae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014cb2:	1f1a      	subs	r2, r3, #4
 8014cb4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014cb8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014cbc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014cc4:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8014cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8014cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014cd4:	3304      	adds	r3, #4
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8014cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014cdc:	009b      	lsls	r3, r3, #2
 8014cde:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8014ce2:	4413      	add	r3, r2
 8014ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8014ce8:	edd7 7a07 	vldr	s15, [r7, #28]
 8014cec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014cf4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8014cf8:	edd7 7a08 	vldr	s15, [r7, #32]
 8014cfc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d04:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8014d08:	edd7 7a08 	vldr	s15, [r7, #32]
 8014d0c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d14:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8014d18:	edd7 7a07 	vldr	s15, [r7, #28]
 8014d1c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8014d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014d2c:	1d1a      	adds	r2, r3, #4
 8014d2e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014d32:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014d36:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d3e:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8014d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014d46:	1d1a      	adds	r2, r3, #4
 8014d48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014d4c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014d50:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d58:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8014d5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014d60:	eef1 7a67 	vneg.f32	s15, s15
 8014d64:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d6c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8014d70:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014d74:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d7c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8014d80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014d84:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d8c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8014d90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014d94:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d9c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8014da0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014da4:	1f1a      	subs	r2, r3, #4
 8014da6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014daa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014dae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014db6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8014dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014dbe:	1f1a      	subs	r2, r3, #4
 8014dc0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014dc4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014dc8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8014dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014dd0:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8014dd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8014ddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014de0:	3304      	adds	r3, #4
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8014de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014de8:	009b      	lsls	r3, r3, #2
 8014dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014dee:	4413      	add	r3, r2
 8014df0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8014df4:	edd7 7a03 	vldr	s15, [r7, #12]
 8014df8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e00:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8014e04:	edd7 7a04 	vldr	s15, [r7, #16]
 8014e08:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e10:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8014e14:	edd7 7a04 	vldr	s15, [r7, #16]
 8014e18:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e20:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8014e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8014e28:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e30:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8014e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014e38:	1d1a      	adds	r2, r3, #4
 8014e3a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8014e3e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014e42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e4a:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8014e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014e52:	1d1a      	adds	r2, r3, #4
 8014e54:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8014e58:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014e5c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e64:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8014e68:	edd7 7a06 	vldr	s15, [r7, #24]
 8014e6c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e74:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8014e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8014e7c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e84:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8014e88:	edd7 7a05 	vldr	s15, [r7, #20]
 8014e8c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e94:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8014e98:	edd7 7a06 	vldr	s15, [r7, #24]
 8014e9c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ea4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8014ea8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014eac:	1f1a      	subs	r2, r3, #4
 8014eae:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8014eb2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014eb6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ebe:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8014ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014ec6:	1f1a      	subs	r2, r3, #4
 8014ec8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8014ecc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014ed0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ed8:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8014edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014ee0:	3b01      	subs	r3, #1
 8014ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	f47f acde 	bne.w	80148ac <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	ed93 7a00 	vldr	s14, [r3]
 8014ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014efa:	edd3 7a00 	vldr	s15, [r3]
 8014efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f02:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	ed93 7a00 	vldr	s14, [r3]
 8014f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014f10:	edd3 7a00 	vldr	s15, [r3]
 8014f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f18:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	3304      	adds	r3, #4
 8014f20:	ed93 7a00 	vldr	s14, [r3]
 8014f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014f28:	3304      	adds	r3, #4
 8014f2a:	edd3 7a00 	vldr	s15, [r3]
 8014f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f32:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	3304      	adds	r3, #4
 8014f3a:	ed93 7a00 	vldr	s14, [r3]
 8014f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014f42:	3304      	adds	r3, #4
 8014f44:	edd3 7a00 	vldr	s15, [r3]
 8014f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f4c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8014f50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014f54:	3304      	adds	r3, #4
 8014f56:	ed93 7a00 	vldr	s14, [r3]
 8014f5a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8014f5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014f62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f66:	3304      	adds	r3, #4
 8014f68:	edd3 7a00 	vldr	s15, [r3]
 8014f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f70:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8014f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014f78:	edd3 7a00 	vldr	s15, [r3]
 8014f7c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8014f80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f88:	edd3 7a00 	vldr	s15, [r3]
 8014f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f90:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8014f94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014f98:	edd3 7a00 	vldr	s15, [r3]
 8014f9c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014fa0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fa8:	edd3 7a00 	vldr	s15, [r3]
 8014fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fb0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8014fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014fb8:	3304      	adds	r3, #4
 8014fba:	edd3 7a00 	vldr	s15, [r3]
 8014fbe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014fc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fca:	3304      	adds	r3, #4
 8014fcc:	edd3 7a00 	vldr	s15, [r3]
 8014fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fd4:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8014fd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014fdc:	3304      	adds	r3, #4
 8014fde:	edd3 7a00 	vldr	s15, [r3]
 8014fe2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014fe6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fee:	3304      	adds	r3, #4
 8014ff0:	edd3 7a00 	vldr	s15, [r3]
 8014ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ff8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8014ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015000:	ed93 7a00 	vldr	s14, [r3]
 8015004:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015008:	ee37 7a27 	vadd.f32	s14, s14, s15
 801500c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015010:	edd3 7a00 	vldr	s15, [r3]
 8015014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015018:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 801501c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015020:	ed93 7a00 	vldr	s14, [r3]
 8015024:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015028:	ee37 7a27 	vadd.f32	s14, s14, s15
 801502c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015030:	edd3 7a00 	vldr	s15, [r3]
 8015034:	683b      	ldr	r3, [r7, #0]
 8015036:	1d1a      	adds	r2, r3, #4
 8015038:	603a      	str	r2, [r7, #0]
 801503a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801503e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8015042:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015046:	3304      	adds	r3, #4
 8015048:	ed93 7a00 	vldr	s14, [r3]
 801504c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8015050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015058:	3304      	adds	r3, #4
 801505a:	edd3 7a00 	vldr	s15, [r3]
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	1d1a      	adds	r2, r3, #4
 8015062:	603a      	str	r2, [r7, #0]
 8015064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015068:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 801506c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8015074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015078:	3304      	adds	r3, #4
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 801507e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015082:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015086:	ee67 7a27 	vmul.f32	s15, s14, s15
 801508a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 801508e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015092:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015096:	ee67 7a27 	vmul.f32	s15, s14, s15
 801509a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 801509e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80150a2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80150a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150aa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80150ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80150b2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80150b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150ba:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80150be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80150c2:	1d1a      	adds	r2, r3, #4
 80150c4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80150c8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80150cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80150d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150d4:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80150d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80150dc:	1d1a      	adds	r2, r3, #4
 80150de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80150e2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80150e6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80150ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150ee:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 80150f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80150fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80150fe:	3304      	adds	r3, #4
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8015104:	edd7 7a07 	vldr	s15, [r7, #28]
 8015108:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801510c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015110:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8015114:	edd7 7a08 	vldr	s15, [r7, #32]
 8015118:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801511c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015120:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8015124:	edd7 7a08 	vldr	s15, [r7, #32]
 8015128:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801512c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015130:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8015134:	edd7 7a07 	vldr	s15, [r7, #28]
 8015138:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801513c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015140:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8015144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015148:	1d1a      	adds	r2, r3, #4
 801514a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801514e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015152:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015156:	ee77 7a27 	vadd.f32	s15, s14, s15
 801515a:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 801515e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015162:	1d1a      	adds	r2, r3, #4
 8015164:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015168:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801516c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015174:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8015178:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8015180:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015184:	3304      	adds	r3, #4
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 801518a:	edd7 7a03 	vldr	s15, [r7, #12]
 801518e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015196:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 801519a:	edd7 7a04 	vldr	s15, [r7, #16]
 801519e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80151a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151a6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80151aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80151ae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80151b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151b6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80151ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80151be:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80151c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151c6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80151ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80151ce:	1d1a      	adds	r2, r3, #4
 80151d0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80151d4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80151d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80151dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151e0:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80151e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80151e8:	1d1a      	adds	r2, r3, #4
 80151ea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80151ee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80151f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80151f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151fa:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80151fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015202:	b299      	uxth	r1, r3
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	685a      	ldr	r2, [r3, #4]
 8015208:	2304      	movs	r3, #4
 801520a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801520c:	f000 f8da 	bl	80153c4 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8015210:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015214:	b299      	uxth	r1, r3
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	685a      	ldr	r2, [r3, #4]
 801521a:	2304      	movs	r3, #4
 801521c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801521e:	f000 f8d1 	bl	80153c4 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8015222:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015226:	b299      	uxth	r1, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	685a      	ldr	r2, [r3, #4]
 801522c:	2304      	movs	r3, #4
 801522e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8015230:	f000 f8c8 	bl	80153c4 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8015234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015238:	b299      	uxth	r1, r3
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	685a      	ldr	r2, [r3, #4]
 801523e:	2304      	movs	r3, #4
 8015240:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015242:	f000 f8bf 	bl	80153c4 <arm_radix8_butterfly_f32>
}
 8015246:	bf00      	nop
 8015248:	37b0      	adds	r7, #176	; 0xb0
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}

0801524e <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 801524e:	b580      	push	{r7, lr}
 8015250:	b088      	sub	sp, #32
 8015252:	af00      	add	r7, sp, #0
 8015254:	60f8      	str	r0, [r7, #12]
 8015256:	60b9      	str	r1, [r7, #8]
 8015258:	4611      	mov	r1, r2
 801525a:	461a      	mov	r2, r3
 801525c:	460b      	mov	r3, r1
 801525e:	71fb      	strb	r3, [r7, #7]
 8015260:	4613      	mov	r3, r2
 8015262:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	881b      	ldrh	r3, [r3, #0]
 8015268:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 801526a:	79fb      	ldrb	r3, [r7, #7]
 801526c:	2b01      	cmp	r3, #1
 801526e:	d117      	bne.n	80152a0 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	3304      	adds	r3, #4
 8015274:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8015276:	2300      	movs	r3, #0
 8015278:	61fb      	str	r3, [r7, #28]
 801527a:	e00d      	b.n	8015298 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 801527c:	69bb      	ldr	r3, [r7, #24]
 801527e:	edd3 7a00 	vldr	s15, [r3]
 8015282:	eef1 7a67 	vneg.f32	s15, s15
 8015286:	69bb      	ldr	r3, [r7, #24]
 8015288:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 801528c:	69bb      	ldr	r3, [r7, #24]
 801528e:	3308      	adds	r3, #8
 8015290:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8015292:	69fb      	ldr	r3, [r7, #28]
 8015294:	3301      	adds	r3, #1
 8015296:	61fb      	str	r3, [r7, #28]
 8015298:	69fa      	ldr	r2, [r7, #28]
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	429a      	cmp	r2, r3
 801529e:	d3ed      	bcc.n	801527c <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80152a6:	d040      	beq.n	801532a <arm_cfft_f32+0xdc>
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80152ae:	d845      	bhi.n	801533c <arm_cfft_f32+0xee>
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80152b6:	d033      	beq.n	8015320 <arm_cfft_f32+0xd2>
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80152be:	d83d      	bhi.n	801533c <arm_cfft_f32+0xee>
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80152c6:	d026      	beq.n	8015316 <arm_cfft_f32+0xc8>
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80152ce:	d835      	bhi.n	801533c <arm_cfft_f32+0xee>
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80152d6:	d028      	beq.n	801532a <arm_cfft_f32+0xdc>
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80152de:	d82d      	bhi.n	801533c <arm_cfft_f32+0xee>
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80152e6:	d01b      	beq.n	8015320 <arm_cfft_f32+0xd2>
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80152ee:	d825      	bhi.n	801533c <arm_cfft_f32+0xee>
 80152f0:	697b      	ldr	r3, [r7, #20]
 80152f2:	2b80      	cmp	r3, #128	; 0x80
 80152f4:	d00f      	beq.n	8015316 <arm_cfft_f32+0xc8>
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	2b80      	cmp	r3, #128	; 0x80
 80152fa:	d81f      	bhi.n	801533c <arm_cfft_f32+0xee>
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	2b40      	cmp	r3, #64	; 0x40
 8015300:	d013      	beq.n	801532a <arm_cfft_f32+0xdc>
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	2b40      	cmp	r3, #64	; 0x40
 8015306:	d819      	bhi.n	801533c <arm_cfft_f32+0xee>
 8015308:	697b      	ldr	r3, [r7, #20]
 801530a:	2b10      	cmp	r3, #16
 801530c:	d003      	beq.n	8015316 <arm_cfft_f32+0xc8>
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	2b20      	cmp	r3, #32
 8015312:	d005      	beq.n	8015320 <arm_cfft_f32+0xd2>
 8015314:	e012      	b.n	801533c <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8015316:	68b9      	ldr	r1, [r7, #8]
 8015318:	68f8      	ldr	r0, [r7, #12]
 801531a:	f7fe ff74 	bl	8014206 <arm_cfft_radix8by2_f32>
    break;
 801531e:	e00d      	b.n	801533c <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8015320:	68b9      	ldr	r1, [r7, #8]
 8015322:	68f8      	ldr	r0, [r7, #12]
 8015324:	f7ff f963 	bl	80145ee <arm_cfft_radix8by4_f32>
    break;
 8015328:	e008      	b.n	801533c <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	b299      	uxth	r1, r3
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	685a      	ldr	r2, [r3, #4]
 8015332:	2301      	movs	r3, #1
 8015334:	68b8      	ldr	r0, [r7, #8]
 8015336:	f000 f845 	bl	80153c4 <arm_radix8_butterfly_f32>
    break;
 801533a:	bf00      	nop
  }

  if ( bitReverseFlag )
 801533c:	79bb      	ldrb	r3, [r7, #6]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d007      	beq.n	8015352 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	8999      	ldrh	r1, [r3, #12]
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	689b      	ldr	r3, [r3, #8]
 801534a:	461a      	mov	r2, r3
 801534c:	68b8      	ldr	r0, [r7, #8]
 801534e:	f7fe ff01 	bl	8014154 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8015352:	79fb      	ldrb	r3, [r7, #7]
 8015354:	2b01      	cmp	r3, #1
 8015356:	d130      	bne.n	80153ba <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	ee07 3a90 	vmov	s15, r3
 801535e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801536a:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8015372:	2300      	movs	r3, #0
 8015374:	61fb      	str	r3, [r7, #28]
 8015376:	e01c      	b.n	80153b2 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8015378:	69bb      	ldr	r3, [r7, #24]
 801537a:	1d1a      	adds	r2, r3, #4
 801537c:	61ba      	str	r2, [r7, #24]
 801537e:	ed93 7a00 	vldr	s14, [r3]
 8015382:	edd7 7a04 	vldr	s15, [r7, #16]
 8015386:	ee67 7a27 	vmul.f32	s15, s14, s15
 801538a:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 801538e:	69bb      	ldr	r3, [r7, #24]
 8015390:	edd3 7a00 	vldr	s15, [r3]
 8015394:	eeb1 7a67 	vneg.f32	s14, s15
 8015398:	edd7 7a04 	vldr	s15, [r7, #16]
 801539c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153a0:	69bb      	ldr	r3, [r7, #24]
 80153a2:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 80153a6:	69bb      	ldr	r3, [r7, #24]
 80153a8:	3304      	adds	r3, #4
 80153aa:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80153ac:	69fb      	ldr	r3, [r7, #28]
 80153ae:	3301      	adds	r3, #1
 80153b0:	61fb      	str	r3, [r7, #28]
 80153b2:	69fa      	ldr	r2, [r7, #28]
 80153b4:	697b      	ldr	r3, [r7, #20]
 80153b6:	429a      	cmp	r2, r3
 80153b8:	d3de      	bcc.n	8015378 <arm_cfft_f32+0x12a>
    }
  }
}
 80153ba:	bf00      	nop
 80153bc:	3720      	adds	r7, #32
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}
	...

080153c4 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b0bd      	sub	sp, #244	; 0xf4
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	60f8      	str	r0, [r7, #12]
 80153cc:	607a      	str	r2, [r7, #4]
 80153ce:	461a      	mov	r2, r3
 80153d0:	460b      	mov	r3, r1
 80153d2:	817b      	strh	r3, [r7, #10]
 80153d4:	4613      	mov	r3, r2
 80153d6:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80153d8:	4b09      	ldr	r3, [pc, #36]	; (8015400 <arm_radix8_butterfly_f32+0x3c>)
 80153da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80153de:	897b      	ldrh	r3, [r7, #10]
 80153e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80153e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80153ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153f0:	08db      	lsrs	r3, r3, #3
 80153f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80153f6:	2300      	movs	r3, #0
 80153f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80153fc:	e002      	b.n	8015404 <arm_radix8_butterfly_f32+0x40>
 80153fe:	bf00      	nop
 8015400:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8015404:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8015408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801540c:	4413      	add	r3, r2
 801540e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8015412:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8015416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801541a:	4413      	add	r3, r2
 801541c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8015420:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015428:	4413      	add	r3, r2
 801542a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 801542e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8015432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015436:	4413      	add	r3, r2
 8015438:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 801543c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015444:	4413      	add	r3, r2
 8015446:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 801544a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015452:	4413      	add	r3, r2
 8015454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8015458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015460:	4413      	add	r3, r2
 8015462:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8015466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801546a:	00db      	lsls	r3, r3, #3
 801546c:	68fa      	ldr	r2, [r7, #12]
 801546e:	4413      	add	r3, r2
 8015470:	ed93 7a00 	vldr	s14, [r3]
 8015474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015478:	00db      	lsls	r3, r3, #3
 801547a:	68fa      	ldr	r2, [r7, #12]
 801547c:	4413      	add	r3, r2
 801547e:	edd3 7a00 	vldr	s15, [r3]
 8015482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015486:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 801548a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801548e:	00db      	lsls	r3, r3, #3
 8015490:	68fa      	ldr	r2, [r7, #12]
 8015492:	4413      	add	r3, r2
 8015494:	ed93 7a00 	vldr	s14, [r3]
 8015498:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801549c:	00db      	lsls	r3, r3, #3
 801549e:	68fa      	ldr	r2, [r7, #12]
 80154a0:	4413      	add	r3, r2
 80154a2:	edd3 7a00 	vldr	s15, [r3]
 80154a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154aa:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80154ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80154b2:	00db      	lsls	r3, r3, #3
 80154b4:	68fa      	ldr	r2, [r7, #12]
 80154b6:	4413      	add	r3, r2
 80154b8:	ed93 7a00 	vldr	s14, [r3]
 80154bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80154c0:	00db      	lsls	r3, r3, #3
 80154c2:	68fa      	ldr	r2, [r7, #12]
 80154c4:	4413      	add	r3, r2
 80154c6:	edd3 7a00 	vldr	s15, [r3]
 80154ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154ce:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80154d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80154d6:	00db      	lsls	r3, r3, #3
 80154d8:	68fa      	ldr	r2, [r7, #12]
 80154da:	4413      	add	r3, r2
 80154dc:	ed93 7a00 	vldr	s14, [r3]
 80154e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80154e4:	00db      	lsls	r3, r3, #3
 80154e6:	68fa      	ldr	r2, [r7, #12]
 80154e8:	4413      	add	r3, r2
 80154ea:	edd3 7a00 	vldr	s15, [r3]
 80154ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154f2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80154f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80154fa:	00db      	lsls	r3, r3, #3
 80154fc:	68fa      	ldr	r2, [r7, #12]
 80154fe:	4413      	add	r3, r2
 8015500:	ed93 7a00 	vldr	s14, [r3]
 8015504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015508:	00db      	lsls	r3, r3, #3
 801550a:	68fa      	ldr	r2, [r7, #12]
 801550c:	4413      	add	r3, r2
 801550e:	edd3 7a00 	vldr	s15, [r3]
 8015512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015516:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 801551a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801551e:	00db      	lsls	r3, r3, #3
 8015520:	68fa      	ldr	r2, [r7, #12]
 8015522:	4413      	add	r3, r2
 8015524:	ed93 7a00 	vldr	s14, [r3]
 8015528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801552c:	00db      	lsls	r3, r3, #3
 801552e:	68fa      	ldr	r2, [r7, #12]
 8015530:	4413      	add	r3, r2
 8015532:	edd3 7a00 	vldr	s15, [r3]
 8015536:	ee77 7a67 	vsub.f32	s15, s14, s15
 801553a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 801553e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015542:	00db      	lsls	r3, r3, #3
 8015544:	68fa      	ldr	r2, [r7, #12]
 8015546:	4413      	add	r3, r2
 8015548:	ed93 7a00 	vldr	s14, [r3]
 801554c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015550:	00db      	lsls	r3, r3, #3
 8015552:	68fa      	ldr	r2, [r7, #12]
 8015554:	4413      	add	r3, r2
 8015556:	edd3 7a00 	vldr	s15, [r3]
 801555a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801555e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8015562:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015566:	00db      	lsls	r3, r3, #3
 8015568:	68fa      	ldr	r2, [r7, #12]
 801556a:	4413      	add	r3, r2
 801556c:	ed93 7a00 	vldr	s14, [r3]
 8015570:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015574:	00db      	lsls	r3, r3, #3
 8015576:	68fa      	ldr	r2, [r7, #12]
 8015578:	4413      	add	r3, r2
 801557a:	edd3 7a00 	vldr	s15, [r3]
 801557e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015582:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8015586:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801558a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801558e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015592:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8015596:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801559a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801559e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155a2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80155a6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80155aa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80155ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80155b2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80155b6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80155ba:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80155be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155c2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 80155c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80155ca:	00db      	lsls	r3, r3, #3
 80155cc:	68fa      	ldr	r2, [r7, #12]
 80155ce:	4413      	add	r3, r2
 80155d0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80155d4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80155d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155dc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80155e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80155e4:	00db      	lsls	r3, r3, #3
 80155e6:	68fa      	ldr	r2, [r7, #12]
 80155e8:	4413      	add	r3, r2
 80155ea:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80155ee:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80155f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80155f6:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80155fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80155fe:	00db      	lsls	r3, r3, #3
 8015600:	3304      	adds	r3, #4
 8015602:	68fa      	ldr	r2, [r7, #12]
 8015604:	4413      	add	r3, r2
 8015606:	ed93 7a00 	vldr	s14, [r3]
 801560a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801560e:	00db      	lsls	r3, r3, #3
 8015610:	3304      	adds	r3, #4
 8015612:	68fa      	ldr	r2, [r7, #12]
 8015614:	4413      	add	r3, r2
 8015616:	edd3 7a00 	vldr	s15, [r3]
 801561a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801561e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8015622:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015626:	00db      	lsls	r3, r3, #3
 8015628:	3304      	adds	r3, #4
 801562a:	68fa      	ldr	r2, [r7, #12]
 801562c:	4413      	add	r3, r2
 801562e:	ed93 7a00 	vldr	s14, [r3]
 8015632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015636:	00db      	lsls	r3, r3, #3
 8015638:	3304      	adds	r3, #4
 801563a:	68fa      	ldr	r2, [r7, #12]
 801563c:	4413      	add	r3, r2
 801563e:	edd3 7a00 	vldr	s15, [r3]
 8015642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015646:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 801564a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801564e:	00db      	lsls	r3, r3, #3
 8015650:	3304      	adds	r3, #4
 8015652:	68fa      	ldr	r2, [r7, #12]
 8015654:	4413      	add	r3, r2
 8015656:	ed93 7a00 	vldr	s14, [r3]
 801565a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801565e:	00db      	lsls	r3, r3, #3
 8015660:	3304      	adds	r3, #4
 8015662:	68fa      	ldr	r2, [r7, #12]
 8015664:	4413      	add	r3, r2
 8015666:	edd3 7a00 	vldr	s15, [r3]
 801566a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801566e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8015672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015676:	00db      	lsls	r3, r3, #3
 8015678:	3304      	adds	r3, #4
 801567a:	68fa      	ldr	r2, [r7, #12]
 801567c:	4413      	add	r3, r2
 801567e:	ed93 7a00 	vldr	s14, [r3]
 8015682:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015686:	00db      	lsls	r3, r3, #3
 8015688:	3304      	adds	r3, #4
 801568a:	68fa      	ldr	r2, [r7, #12]
 801568c:	4413      	add	r3, r2
 801568e:	edd3 7a00 	vldr	s15, [r3]
 8015692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015696:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 801569a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801569e:	00db      	lsls	r3, r3, #3
 80156a0:	3304      	adds	r3, #4
 80156a2:	68fa      	ldr	r2, [r7, #12]
 80156a4:	4413      	add	r3, r2
 80156a6:	ed93 7a00 	vldr	s14, [r3]
 80156aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80156ae:	00db      	lsls	r3, r3, #3
 80156b0:	3304      	adds	r3, #4
 80156b2:	68fa      	ldr	r2, [r7, #12]
 80156b4:	4413      	add	r3, r2
 80156b6:	edd3 7a00 	vldr	s15, [r3]
 80156ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156be:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80156c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80156c6:	00db      	lsls	r3, r3, #3
 80156c8:	3304      	adds	r3, #4
 80156ca:	68fa      	ldr	r2, [r7, #12]
 80156cc:	4413      	add	r3, r2
 80156ce:	ed93 7a00 	vldr	s14, [r3]
 80156d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80156d6:	00db      	lsls	r3, r3, #3
 80156d8:	3304      	adds	r3, #4
 80156da:	68fa      	ldr	r2, [r7, #12]
 80156dc:	4413      	add	r3, r2
 80156de:	edd3 7a00 	vldr	s15, [r3]
 80156e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156e6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80156ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80156ee:	00db      	lsls	r3, r3, #3
 80156f0:	3304      	adds	r3, #4
 80156f2:	68fa      	ldr	r2, [r7, #12]
 80156f4:	4413      	add	r3, r2
 80156f6:	ed93 7a00 	vldr	s14, [r3]
 80156fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80156fe:	00db      	lsls	r3, r3, #3
 8015700:	3304      	adds	r3, #4
 8015702:	68fa      	ldr	r2, [r7, #12]
 8015704:	4413      	add	r3, r2
 8015706:	edd3 7a00 	vldr	s15, [r3]
 801570a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801570e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8015712:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015716:	00db      	lsls	r3, r3, #3
 8015718:	3304      	adds	r3, #4
 801571a:	68fa      	ldr	r2, [r7, #12]
 801571c:	4413      	add	r3, r2
 801571e:	ed93 7a00 	vldr	s14, [r3]
 8015722:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015726:	00db      	lsls	r3, r3, #3
 8015728:	3304      	adds	r3, #4
 801572a:	68fa      	ldr	r2, [r7, #12]
 801572c:	4413      	add	r3, r2
 801572e:	edd3 7a00 	vldr	s15, [r3]
 8015732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015736:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 801573a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801573e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8015742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015746:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 801574a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801574e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8015752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015756:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 801575a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801575e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8015762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015766:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 801576a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801576e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8015772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015776:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 801577a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801577e:	00db      	lsls	r3, r3, #3
 8015780:	3304      	adds	r3, #4
 8015782:	68fa      	ldr	r2, [r7, #12]
 8015784:	4413      	add	r3, r2
 8015786:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801578a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801578e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015792:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8015796:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801579a:	00db      	lsls	r3, r3, #3
 801579c:	3304      	adds	r3, #4
 801579e:	68fa      	ldr	r2, [r7, #12]
 80157a0:	4413      	add	r3, r2
 80157a2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80157a6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80157aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157ae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80157b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80157b6:	00db      	lsls	r3, r3, #3
 80157b8:	68fa      	ldr	r2, [r7, #12]
 80157ba:	4413      	add	r3, r2
 80157bc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80157c0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80157c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157c8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80157cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80157d0:	00db      	lsls	r3, r3, #3
 80157d2:	68fa      	ldr	r2, [r7, #12]
 80157d4:	4413      	add	r3, r2
 80157d6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80157da:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80157de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157e2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80157e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80157ea:	00db      	lsls	r3, r3, #3
 80157ec:	3304      	adds	r3, #4
 80157ee:	68fa      	ldr	r2, [r7, #12]
 80157f0:	4413      	add	r3, r2
 80157f2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80157f6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80157fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157fe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8015802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015806:	00db      	lsls	r3, r3, #3
 8015808:	3304      	adds	r3, #4
 801580a:	68fa      	ldr	r2, [r7, #12]
 801580c:	4413      	add	r3, r2
 801580e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015812:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015816:	ee77 7a27 	vadd.f32	s15, s14, s15
 801581a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 801581e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8015822:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8015826:	ee77 7a67 	vsub.f32	s15, s14, s15
 801582a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015832:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8015836:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 801583a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801583e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015842:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8015846:	ee67 7a27 	vmul.f32	s15, s14, s15
 801584a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 801584e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8015852:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8015856:	ee77 7a67 	vsub.f32	s15, s14, s15
 801585a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801585e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015862:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8015866:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 801586a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801586e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015872:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8015876:	ee67 7a27 	vmul.f32	s15, s14, s15
 801587a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 801587e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8015882:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8015886:	ee77 7a67 	vsub.f32	s15, s14, s15
 801588a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 801588e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8015892:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8015896:	ee77 7a27 	vadd.f32	s15, s14, s15
 801589a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 801589e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80158a2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80158a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158aa:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80158ae:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80158b2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80158b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158ba:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80158be:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80158c2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80158c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158ca:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80158ce:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80158d2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80158d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158da:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 80158de:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80158e2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80158e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158ea:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80158ee:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80158f2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80158f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158fa:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80158fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015902:	00db      	lsls	r3, r3, #3
 8015904:	68fa      	ldr	r2, [r7, #12]
 8015906:	4413      	add	r3, r2
 8015908:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801590c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8015910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015914:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8015918:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801591c:	00db      	lsls	r3, r3, #3
 801591e:	68fa      	ldr	r2, [r7, #12]
 8015920:	4413      	add	r3, r2
 8015922:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8015926:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801592a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801592e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8015932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015936:	00db      	lsls	r3, r3, #3
 8015938:	68fa      	ldr	r2, [r7, #12]
 801593a:	4413      	add	r3, r2
 801593c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8015940:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8015944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015948:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 801594c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015950:	00db      	lsls	r3, r3, #3
 8015952:	68fa      	ldr	r2, [r7, #12]
 8015954:	4413      	add	r3, r2
 8015956:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 801595a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801595e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015962:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8015966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801596a:	00db      	lsls	r3, r3, #3
 801596c:	3304      	adds	r3, #4
 801596e:	68fa      	ldr	r2, [r7, #12]
 8015970:	4413      	add	r3, r2
 8015972:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8015976:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 801597a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801597e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8015982:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015986:	00db      	lsls	r3, r3, #3
 8015988:	3304      	adds	r3, #4
 801598a:	68fa      	ldr	r2, [r7, #12]
 801598c:	4413      	add	r3, r2
 801598e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8015992:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8015996:	ee77 7a27 	vadd.f32	s15, s14, s15
 801599a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 801599e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80159a2:	00db      	lsls	r3, r3, #3
 80159a4:	3304      	adds	r3, #4
 80159a6:	68fa      	ldr	r2, [r7, #12]
 80159a8:	4413      	add	r3, r2
 80159aa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80159ae:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80159b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159b6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80159ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80159be:	00db      	lsls	r3, r3, #3
 80159c0:	3304      	adds	r3, #4
 80159c2:	68fa      	ldr	r2, [r7, #12]
 80159c4:	4413      	add	r3, r2
 80159c6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80159ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80159ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159d2:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 80159d6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80159da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80159de:	4413      	add	r3, r2
 80159e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 80159e4:	897b      	ldrh	r3, [r7, #10]
 80159e6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80159ea:	429a      	cmp	r2, r3
 80159ec:	f4ff ad0a 	bcc.w	8015404 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 80159f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80159f4:	2b07      	cmp	r3, #7
 80159f6:	f240 84e3 	bls.w	80163c0 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80159fa:	2300      	movs	r3, #0
 80159fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8015a00:	2301      	movs	r3, #1
 8015a02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8015a06:	893b      	ldrh	r3, [r7, #8]
 8015a08:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015a0c:	4413      	add	r3, r2
 8015a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8015a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015a12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8015a16:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015a1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015a1c:	4413      	add	r3, r2
 8015a1e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8015a20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015a22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015a24:	4413      	add	r3, r2
 8015a26:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8015a28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015a2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015a2c:	4413      	add	r3, r2
 8015a2e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8015a30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015a34:	4413      	add	r3, r2
 8015a36:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8015a38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015a3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015a3c:	4413      	add	r3, r2
 8015a3e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8015a40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015a42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015a44:	4413      	add	r3, r2
 8015a46:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8015a48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015a4c:	00db      	lsls	r3, r3, #3
 8015a4e:	687a      	ldr	r2, [r7, #4]
 8015a50:	4413      	add	r3, r2
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8015a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015a58:	00db      	lsls	r3, r3, #3
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8015a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a64:	00db      	lsls	r3, r3, #3
 8015a66:	687a      	ldr	r2, [r7, #4]
 8015a68:	4413      	add	r3, r2
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8015a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a70:	00db      	lsls	r3, r3, #3
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	4413      	add	r3, r2
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8015a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015a7c:	00db      	lsls	r3, r3, #3
 8015a7e:	687a      	ldr	r2, [r7, #4]
 8015a80:	4413      	add	r3, r2
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8015a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015a88:	00db      	lsls	r3, r3, #3
 8015a8a:	687a      	ldr	r2, [r7, #4]
 8015a8c:	4413      	add	r3, r2
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8015a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a94:	00db      	lsls	r3, r3, #3
 8015a96:	687a      	ldr	r2, [r7, #4]
 8015a98:	4413      	add	r3, r2
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8015a9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015aa2:	00db      	lsls	r3, r3, #3
 8015aa4:	3304      	adds	r3, #4
 8015aa6:	687a      	ldr	r2, [r7, #4]
 8015aa8:	4413      	add	r3, r2
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8015aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015ab0:	00db      	lsls	r3, r3, #3
 8015ab2:	3304      	adds	r3, #4
 8015ab4:	687a      	ldr	r2, [r7, #4]
 8015ab6:	4413      	add	r3, r2
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8015abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015abe:	00db      	lsls	r3, r3, #3
 8015ac0:	3304      	adds	r3, #4
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	4413      	add	r3, r2
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8015aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015acc:	00db      	lsls	r3, r3, #3
 8015ace:	3304      	adds	r3, #4
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	4413      	add	r3, r2
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8015ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ada:	00db      	lsls	r3, r3, #3
 8015adc:	3304      	adds	r3, #4
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8015ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015ae8:	00db      	lsls	r3, r3, #3
 8015aea:	3304      	adds	r3, #4
 8015aec:	687a      	ldr	r2, [r7, #4]
 8015aee:	4413      	add	r3, r2
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8015af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015af6:	00db      	lsls	r3, r3, #3
 8015af8:	3304      	adds	r3, #4
 8015afa:	687a      	ldr	r2, [r7, #4]
 8015afc:	4413      	add	r3, r2
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8015b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8015b0a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8015b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b12:	4413      	add	r3, r2
 8015b14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8015b18:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8015b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b20:	4413      	add	r3, r2
 8015b22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8015b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b2e:	4413      	add	r3, r2
 8015b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8015b34:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8015b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b3c:	4413      	add	r3, r2
 8015b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8015b42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b4a:	4413      	add	r3, r2
 8015b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8015b50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b58:	4413      	add	r3, r2
 8015b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8015b5e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b66:	4413      	add	r3, r2
 8015b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8015b6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015b70:	00db      	lsls	r3, r3, #3
 8015b72:	68fa      	ldr	r2, [r7, #12]
 8015b74:	4413      	add	r3, r2
 8015b76:	ed93 7a00 	vldr	s14, [r3]
 8015b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015b7e:	00db      	lsls	r3, r3, #3
 8015b80:	68fa      	ldr	r2, [r7, #12]
 8015b82:	4413      	add	r3, r2
 8015b84:	edd3 7a00 	vldr	s15, [r3]
 8015b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b8c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8015b90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015b94:	00db      	lsls	r3, r3, #3
 8015b96:	68fa      	ldr	r2, [r7, #12]
 8015b98:	4413      	add	r3, r2
 8015b9a:	ed93 7a00 	vldr	s14, [r3]
 8015b9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015ba2:	00db      	lsls	r3, r3, #3
 8015ba4:	68fa      	ldr	r2, [r7, #12]
 8015ba6:	4413      	add	r3, r2
 8015ba8:	edd3 7a00 	vldr	s15, [r3]
 8015bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bb0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8015bb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015bb8:	00db      	lsls	r3, r3, #3
 8015bba:	68fa      	ldr	r2, [r7, #12]
 8015bbc:	4413      	add	r3, r2
 8015bbe:	ed93 7a00 	vldr	s14, [r3]
 8015bc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015bc6:	00db      	lsls	r3, r3, #3
 8015bc8:	68fa      	ldr	r2, [r7, #12]
 8015bca:	4413      	add	r3, r2
 8015bcc:	edd3 7a00 	vldr	s15, [r3]
 8015bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bd4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8015bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015bdc:	00db      	lsls	r3, r3, #3
 8015bde:	68fa      	ldr	r2, [r7, #12]
 8015be0:	4413      	add	r3, r2
 8015be2:	ed93 7a00 	vldr	s14, [r3]
 8015be6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015bea:	00db      	lsls	r3, r3, #3
 8015bec:	68fa      	ldr	r2, [r7, #12]
 8015bee:	4413      	add	r3, r2
 8015bf0:	edd3 7a00 	vldr	s15, [r3]
 8015bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bf8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8015bfc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015c00:	00db      	lsls	r3, r3, #3
 8015c02:	68fa      	ldr	r2, [r7, #12]
 8015c04:	4413      	add	r3, r2
 8015c06:	ed93 7a00 	vldr	s14, [r3]
 8015c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015c0e:	00db      	lsls	r3, r3, #3
 8015c10:	68fa      	ldr	r2, [r7, #12]
 8015c12:	4413      	add	r3, r2
 8015c14:	edd3 7a00 	vldr	s15, [r3]
 8015c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c1c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8015c20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015c24:	00db      	lsls	r3, r3, #3
 8015c26:	68fa      	ldr	r2, [r7, #12]
 8015c28:	4413      	add	r3, r2
 8015c2a:	ed93 7a00 	vldr	s14, [r3]
 8015c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015c32:	00db      	lsls	r3, r3, #3
 8015c34:	68fa      	ldr	r2, [r7, #12]
 8015c36:	4413      	add	r3, r2
 8015c38:	edd3 7a00 	vldr	s15, [r3]
 8015c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c40:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8015c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015c48:	00db      	lsls	r3, r3, #3
 8015c4a:	68fa      	ldr	r2, [r7, #12]
 8015c4c:	4413      	add	r3, r2
 8015c4e:	ed93 7a00 	vldr	s14, [r3]
 8015c52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015c56:	00db      	lsls	r3, r3, #3
 8015c58:	68fa      	ldr	r2, [r7, #12]
 8015c5a:	4413      	add	r3, r2
 8015c5c:	edd3 7a00 	vldr	s15, [r3]
 8015c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c64:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8015c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015c6c:	00db      	lsls	r3, r3, #3
 8015c6e:	68fa      	ldr	r2, [r7, #12]
 8015c70:	4413      	add	r3, r2
 8015c72:	ed93 7a00 	vldr	s14, [r3]
 8015c76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015c7a:	00db      	lsls	r3, r3, #3
 8015c7c:	68fa      	ldr	r2, [r7, #12]
 8015c7e:	4413      	add	r3, r2
 8015c80:	edd3 7a00 	vldr	s15, [r3]
 8015c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c88:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8015c8c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015c90:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c98:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8015c9c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015ca0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ca8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8015cac:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8015cb0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8015cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cb8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8015cbc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8015cc0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8015cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cc8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8015ccc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015cd0:	00db      	lsls	r3, r3, #3
 8015cd2:	68fa      	ldr	r2, [r7, #12]
 8015cd4:	4413      	add	r3, r2
 8015cd6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015cda:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ce2:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8015ce6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015cea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cf2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8015cf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015cfa:	00db      	lsls	r3, r3, #3
 8015cfc:	3304      	adds	r3, #4
 8015cfe:	68fa      	ldr	r2, [r7, #12]
 8015d00:	4413      	add	r3, r2
 8015d02:	ed93 7a00 	vldr	s14, [r3]
 8015d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015d0a:	00db      	lsls	r3, r3, #3
 8015d0c:	3304      	adds	r3, #4
 8015d0e:	68fa      	ldr	r2, [r7, #12]
 8015d10:	4413      	add	r3, r2
 8015d12:	edd3 7a00 	vldr	s15, [r3]
 8015d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d1a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8015d1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015d22:	00db      	lsls	r3, r3, #3
 8015d24:	3304      	adds	r3, #4
 8015d26:	68fa      	ldr	r2, [r7, #12]
 8015d28:	4413      	add	r3, r2
 8015d2a:	ed93 7a00 	vldr	s14, [r3]
 8015d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015d32:	00db      	lsls	r3, r3, #3
 8015d34:	3304      	adds	r3, #4
 8015d36:	68fa      	ldr	r2, [r7, #12]
 8015d38:	4413      	add	r3, r2
 8015d3a:	edd3 7a00 	vldr	s15, [r3]
 8015d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d42:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8015d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015d4a:	00db      	lsls	r3, r3, #3
 8015d4c:	3304      	adds	r3, #4
 8015d4e:	68fa      	ldr	r2, [r7, #12]
 8015d50:	4413      	add	r3, r2
 8015d52:	ed93 7a00 	vldr	s14, [r3]
 8015d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015d5a:	00db      	lsls	r3, r3, #3
 8015d5c:	3304      	adds	r3, #4
 8015d5e:	68fa      	ldr	r2, [r7, #12]
 8015d60:	4413      	add	r3, r2
 8015d62:	edd3 7a00 	vldr	s15, [r3]
 8015d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d6a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8015d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015d72:	00db      	lsls	r3, r3, #3
 8015d74:	3304      	adds	r3, #4
 8015d76:	68fa      	ldr	r2, [r7, #12]
 8015d78:	4413      	add	r3, r2
 8015d7a:	ed93 7a00 	vldr	s14, [r3]
 8015d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015d82:	00db      	lsls	r3, r3, #3
 8015d84:	3304      	adds	r3, #4
 8015d86:	68fa      	ldr	r2, [r7, #12]
 8015d88:	4413      	add	r3, r2
 8015d8a:	edd3 7a00 	vldr	s15, [r3]
 8015d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d92:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8015d96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015d9a:	00db      	lsls	r3, r3, #3
 8015d9c:	3304      	adds	r3, #4
 8015d9e:	68fa      	ldr	r2, [r7, #12]
 8015da0:	4413      	add	r3, r2
 8015da2:	ed93 7a00 	vldr	s14, [r3]
 8015da6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015daa:	00db      	lsls	r3, r3, #3
 8015dac:	3304      	adds	r3, #4
 8015dae:	68fa      	ldr	r2, [r7, #12]
 8015db0:	4413      	add	r3, r2
 8015db2:	edd3 7a00 	vldr	s15, [r3]
 8015db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015dba:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8015dbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015dc2:	00db      	lsls	r3, r3, #3
 8015dc4:	3304      	adds	r3, #4
 8015dc6:	68fa      	ldr	r2, [r7, #12]
 8015dc8:	4413      	add	r3, r2
 8015dca:	ed93 7a00 	vldr	s14, [r3]
 8015dce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015dd2:	00db      	lsls	r3, r3, #3
 8015dd4:	3304      	adds	r3, #4
 8015dd6:	68fa      	ldr	r2, [r7, #12]
 8015dd8:	4413      	add	r3, r2
 8015dda:	edd3 7a00 	vldr	s15, [r3]
 8015dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015de2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8015de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015dea:	00db      	lsls	r3, r3, #3
 8015dec:	3304      	adds	r3, #4
 8015dee:	68fa      	ldr	r2, [r7, #12]
 8015df0:	4413      	add	r3, r2
 8015df2:	ed93 7a00 	vldr	s14, [r3]
 8015df6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015dfa:	00db      	lsls	r3, r3, #3
 8015dfc:	3304      	adds	r3, #4
 8015dfe:	68fa      	ldr	r2, [r7, #12]
 8015e00:	4413      	add	r3, r2
 8015e02:	edd3 7a00 	vldr	s15, [r3]
 8015e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e0a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8015e0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015e12:	00db      	lsls	r3, r3, #3
 8015e14:	3304      	adds	r3, #4
 8015e16:	68fa      	ldr	r2, [r7, #12]
 8015e18:	4413      	add	r3, r2
 8015e1a:	ed93 7a00 	vldr	s14, [r3]
 8015e1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015e22:	00db      	lsls	r3, r3, #3
 8015e24:	3304      	adds	r3, #4
 8015e26:	68fa      	ldr	r2, [r7, #12]
 8015e28:	4413      	add	r3, r2
 8015e2a:	edd3 7a00 	vldr	s15, [r3]
 8015e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e32:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8015e36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015e3a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8015e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e42:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8015e46:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015e4a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8015e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e52:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8015e56:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015e5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8015e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e62:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8015e66:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015e6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8015e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8015e76:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8015e7a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8015e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e82:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8015e86:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8015e8a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8015e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e92:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8015e96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015e9a:	00db      	lsls	r3, r3, #3
 8015e9c:	3304      	adds	r3, #4
 8015e9e:	68fa      	ldr	r2, [r7, #12]
 8015ea0:	4413      	add	r3, r2
 8015ea2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015ea6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015eae:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8015eb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015eb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ebe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8015ec2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015ec6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ece:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8015ed2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015ed6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ede:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8015ee2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8015ee6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015eee:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8015ef2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015ef6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015efe:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8015f02:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8015f06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f0e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8015f12:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015f16:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f1e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8015f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015f26:	00db      	lsls	r3, r3, #3
 8015f28:	68fa      	ldr	r2, [r7, #12]
 8015f2a:	4413      	add	r3, r2
 8015f2c:	ed97 7a07 	vldr	s14, [r7, #28]
 8015f30:	edd7 7a06 	vldr	s15, [r7, #24]
 8015f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f38:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8015f3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015f40:	00db      	lsls	r3, r3, #3
 8015f42:	3304      	adds	r3, #4
 8015f44:	68fa      	ldr	r2, [r7, #12]
 8015f46:	4413      	add	r3, r2
 8015f48:	ed97 7a05 	vldr	s14, [r7, #20]
 8015f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8015f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015f54:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8015f58:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015f5c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8015f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f64:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8015f68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015f6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f74:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8015f78:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015f7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f84:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8015f88:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015f8c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8015f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f94:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8015f98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015f9c:	00db      	lsls	r3, r3, #3
 8015f9e:	68fa      	ldr	r2, [r7, #12]
 8015fa0:	4413      	add	r3, r2
 8015fa2:	ed97 7a07 	vldr	s14, [r7, #28]
 8015fa6:	edd7 7a06 	vldr	s15, [r7, #24]
 8015faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015fae:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8015fb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015fb6:	00db      	lsls	r3, r3, #3
 8015fb8:	3304      	adds	r3, #4
 8015fba:	68fa      	ldr	r2, [r7, #12]
 8015fbc:	4413      	add	r3, r2
 8015fbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8015fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8015fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015fca:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8015fce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015fd2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8015fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015fda:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8015fde:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8015fe2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8015fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015fea:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8015fee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015ff2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8015ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ffa:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8015ffe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016002:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8016006:	ee67 7a27 	vmul.f32	s15, s14, s15
 801600a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 801600e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016012:	00db      	lsls	r3, r3, #3
 8016014:	68fa      	ldr	r2, [r7, #12]
 8016016:	4413      	add	r3, r2
 8016018:	ed97 7a07 	vldr	s14, [r7, #28]
 801601c:	edd7 7a06 	vldr	s15, [r7, #24]
 8016020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016024:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8016028:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801602c:	00db      	lsls	r3, r3, #3
 801602e:	3304      	adds	r3, #4
 8016030:	68fa      	ldr	r2, [r7, #12]
 8016032:	4413      	add	r3, r2
 8016034:	ed97 7a05 	vldr	s14, [r7, #20]
 8016038:	edd7 7a04 	vldr	s15, [r7, #16]
 801603c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016040:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8016044:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8016048:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801604c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016050:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8016054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016058:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 801605c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8016060:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8016064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016068:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801606c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016070:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8016074:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8016078:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801607c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016080:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8016084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016088:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 801608c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8016090:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8016094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016098:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801609c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160a0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 80160a4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80160a8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80160ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80160b0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 80160b4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80160b8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80160bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160c0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80160c4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80160c8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80160cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80160d0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80160d4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80160d8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80160dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160e0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80160e4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80160e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80160ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80160f0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 80160f4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80160f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80160fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016100:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8016104:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8016108:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801610c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016110:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8016114:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8016118:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801611c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016120:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8016124:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8016128:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801612c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016130:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8016134:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8016138:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801613c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016140:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8016144:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8016148:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801614c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016150:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8016154:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8016158:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801615c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016160:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8016164:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8016168:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 801616c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016170:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8016174:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8016178:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 801617c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016180:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8016184:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8016188:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801618c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016190:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8016194:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8016198:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801619c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80161a0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80161a4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80161a8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80161ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161b0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80161b4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80161b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80161bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161c0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80161c4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80161c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80161cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161d0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80161d4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80161d8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80161dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161e0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80161e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80161e8:	00db      	lsls	r3, r3, #3
 80161ea:	68fa      	ldr	r2, [r7, #12]
 80161ec:	4413      	add	r3, r2
 80161ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80161f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80161f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80161fa:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80161fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016202:	00db      	lsls	r3, r3, #3
 8016204:	3304      	adds	r3, #4
 8016206:	68fa      	ldr	r2, [r7, #12]
 8016208:	4413      	add	r3, r2
 801620a:	ed97 7a05 	vldr	s14, [r7, #20]
 801620e:	edd7 7a04 	vldr	s15, [r7, #16]
 8016212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016216:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 801621a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801621e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8016222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016226:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 801622a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801622e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8016232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016236:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 801623a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801623e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8016242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016246:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 801624a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801624e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8016252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016256:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 801625a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801625e:	00db      	lsls	r3, r3, #3
 8016260:	68fa      	ldr	r2, [r7, #12]
 8016262:	4413      	add	r3, r2
 8016264:	ed97 7a07 	vldr	s14, [r7, #28]
 8016268:	edd7 7a06 	vldr	s15, [r7, #24]
 801626c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016270:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8016274:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016278:	00db      	lsls	r3, r3, #3
 801627a:	3304      	adds	r3, #4
 801627c:	68fa      	ldr	r2, [r7, #12]
 801627e:	4413      	add	r3, r2
 8016280:	ed97 7a05 	vldr	s14, [r7, #20]
 8016284:	edd7 7a04 	vldr	s15, [r7, #16]
 8016288:	ee77 7a67 	vsub.f32	s15, s14, s15
 801628c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8016290:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8016294:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8016298:	ee67 7a27 	vmul.f32	s15, s14, s15
 801629c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80162a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80162a4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80162a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162ac:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80162b0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80162b4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80162b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162bc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80162c0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80162c4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80162c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162cc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80162d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80162d4:	00db      	lsls	r3, r3, #3
 80162d6:	68fa      	ldr	r2, [r7, #12]
 80162d8:	4413      	add	r3, r2
 80162da:	ed97 7a07 	vldr	s14, [r7, #28]
 80162de:	edd7 7a06 	vldr	s15, [r7, #24]
 80162e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162e6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80162ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80162ee:	00db      	lsls	r3, r3, #3
 80162f0:	3304      	adds	r3, #4
 80162f2:	68fa      	ldr	r2, [r7, #12]
 80162f4:	4413      	add	r3, r2
 80162f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80162fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80162fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016302:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8016306:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801630a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801630e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016312:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8016316:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801631a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801631e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016322:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8016326:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801632a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016332:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8016336:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801633a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801633e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016342:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8016346:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801634a:	00db      	lsls	r3, r3, #3
 801634c:	68fa      	ldr	r2, [r7, #12]
 801634e:	4413      	add	r3, r2
 8016350:	ed97 7a07 	vldr	s14, [r7, #28]
 8016354:	edd7 7a06 	vldr	s15, [r7, #24]
 8016358:	ee77 7a27 	vadd.f32	s15, s14, s15
 801635c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8016360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016364:	00db      	lsls	r3, r3, #3
 8016366:	3304      	adds	r3, #4
 8016368:	68fa      	ldr	r2, [r7, #12]
 801636a:	4413      	add	r3, r2
 801636c:	ed97 7a05 	vldr	s14, [r7, #20]
 8016370:	edd7 7a04 	vldr	s15, [r7, #16]
 8016374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016378:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 801637c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8016380:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016384:	4413      	add	r3, r2
 8016386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 801638a:	897b      	ldrh	r3, [r7, #10]
 801638c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8016390:	429a      	cmp	r2, r3
 8016392:	f4ff abba 	bcc.w	8015b0a <arm_radix8_butterfly_f32+0x746>

         j++;
 8016396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801639a:	3301      	adds	r3, #1
 801639c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 80163a0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80163a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80163a8:	429a      	cmp	r2, r3
 80163aa:	f4ff ab2c 	bcc.w	8015a06 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80163ae:	893b      	ldrh	r3, [r7, #8]
 80163b0:	00db      	lsls	r3, r3, #3
 80163b2:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80163b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80163b8:	2b07      	cmp	r3, #7
 80163ba:	f63f a813 	bhi.w	80153e4 <arm_radix8_butterfly_f32+0x20>
}
 80163be:	e000      	b.n	80163c2 <arm_radix8_butterfly_f32+0xffe>
         break;
 80163c0:	bf00      	nop
}
 80163c2:	bf00      	nop
 80163c4:	37f4      	adds	r7, #244	; 0xf4
 80163c6:	46bd      	mov	sp, r7
 80163c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163cc:	4770      	bx	lr
 80163ce:	bf00      	nop

080163d0 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80163d0:	b480      	push	{r7}
 80163d2:	b095      	sub	sp, #84	; 0x54
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	60f8      	str	r0, [r7, #12]
 80163d8:	60b9      	str	r1, [r7, #8]
 80163da:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	695b      	ldr	r3, [r3, #20]
 80163e0:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80163e2:	68bb      	ldr	r3, [r7, #8]
 80163e4:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80163e6:	68bb      	ldr	r3, [r7, #8]
 80163e8:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	881b      	ldrh	r3, [r3, #0]
 80163ee:	3b01      	subs	r3, #1
 80163f0:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 80163f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 80163f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163fa:	685b      	ldr	r3, [r3, #4]
 80163fc:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 80163fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8016404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 801640a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801640c:	1d1a      	adds	r2, r3, #4
 801640e:	64ba      	str	r2, [r7, #72]	; 0x48
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8016414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016416:	1d1a      	adds	r2, r3, #4
 8016418:	64ba      	str	r2, [r7, #72]	; 0x48
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 801641e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8016422:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016426:	ee77 7a27 	vadd.f32	s15, s14, s15
 801642a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 801642e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016432:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016436:	ee77 7a27 	vadd.f32	s15, s14, s15
 801643a:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 801643e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016442:	edd7 7a08 	vldr	s15, [r7, #32]
 8016446:	ee77 7a27 	vadd.f32	s15, s14, s15
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	1d1a      	adds	r2, r3, #4
 801644e:	607a      	str	r2, [r7, #4]
 8016450:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016458:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 801645c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016460:	edd7 7a08 	vldr	s15, [r7, #32]
 8016464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	1d1a      	adds	r2, r3, #4
 801646c:	607a      	str	r2, [r7, #4]
 801646e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016476:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 801647a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801647c:	00db      	lsls	r3, r3, #3
 801647e:	68ba      	ldr	r2, [r7, #8]
 8016480:	4413      	add	r3, r2
 8016482:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8016484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016486:	3308      	adds	r3, #8
 8016488:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 801648a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8016490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8016496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 801649c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801649e:	685b      	ldr	r3, [r3, #4]
 80164a0:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80164a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164a4:	1d1a      	adds	r2, r3, #4
 80164a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80164ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164ae:	1d1a      	adds	r2, r3, #4
 80164b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80164b6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80164ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80164be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80164c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80164ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80164ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164d2:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 80164d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80164da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80164de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80164e2:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 80164e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80164ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80164ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80164f2:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 80164f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80164fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80164fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016502:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8016506:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801650a:	edd7 7a08 	vldr	s15, [r7, #32]
 801650e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016512:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8016516:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801651a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801651e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016522:	edd7 7a07 	vldr	s15, [r7, #28]
 8016526:	ee37 7a27 	vadd.f32	s14, s14, s15
 801652a:	edd7 7a04 	vldr	s15, [r7, #16]
 801652e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	1d1a      	adds	r2, r3, #4
 8016536:	607a      	str	r2, [r7, #4]
 8016538:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801653c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016540:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8016544:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016548:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801654c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016550:	edd7 7a06 	vldr	s15, [r7, #24]
 8016554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016558:	edd7 7a05 	vldr	s15, [r7, #20]
 801655c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	1d1a      	adds	r2, r3, #4
 8016564:	607a      	str	r2, [r7, #4]
 8016566:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801656a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801656e:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8016572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016574:	3308      	adds	r3, #8
 8016576:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8016578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801657a:	3b08      	subs	r3, #8
 801657c:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 801657e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016580:	3b01      	subs	r3, #1
 8016582:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8016584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016586:	2b00      	cmp	r3, #0
 8016588:	f73f af7f 	bgt.w	801648a <stage_rfft_f32+0xba>
}
 801658c:	bf00      	nop
 801658e:	bf00      	nop
 8016590:	3754      	adds	r7, #84	; 0x54
 8016592:	46bd      	mov	sp, r7
 8016594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016598:	4770      	bx	lr

0801659a <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 801659a:	b480      	push	{r7}
 801659c:	b095      	sub	sp, #84	; 0x54
 801659e:	af00      	add	r7, sp, #0
 80165a0:	60f8      	str	r0, [r7, #12]
 80165a2:	60b9      	str	r1, [r7, #8]
 80165a4:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	695b      	ldr	r3, [r3, #20]
 80165aa:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80165ac:	68bb      	ldr	r3, [r7, #8]
 80165ae:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	881b      	ldrh	r3, [r3, #0]
 80165b8:	3b01      	subs	r3, #1
 80165ba:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80165bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80165c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165c4:	685b      	ldr	r3, [r3, #4]
 80165c6:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80165c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165ca:	3308      	adds	r3, #8
 80165cc:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80165ce:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80165d2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80165d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	1d1a      	adds	r2, r3, #4
 80165de:	607a      	str	r2, [r7, #4]
 80165e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80165e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80165e8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 80165ec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80165f0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80165f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	1d1a      	adds	r2, r3, #4
 80165fc:	607a      	str	r2, [r7, #4]
 80165fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016606:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 801660a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801660c:	00db      	lsls	r3, r3, #3
 801660e:	68ba      	ldr	r2, [r7, #8]
 8016610:	4413      	add	r3, r2
 8016612:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8016614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016616:	3308      	adds	r3, #8
 8016618:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 801661a:	e07c      	b.n	8016716 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 801661c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801661e:	685b      	ldr	r3, [r3, #4]
 8016620:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8016622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8016628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 801662e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016630:	685b      	ldr	r3, [r3, #4]
 8016632:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8016634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016636:	1d1a      	adds	r2, r3, #4
 8016638:	64ba      	str	r2, [r7, #72]	; 0x48
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 801663e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016640:	1d1a      	adds	r2, r3, #4
 8016642:	64ba      	str	r2, [r7, #72]	; 0x48
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8016648:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801664c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016654:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8016658:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801665c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016664:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8016668:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801666c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016674:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8016678:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801667c:	edd7 7a08 	vldr	s15, [r7, #32]
 8016680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016684:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8016688:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801668c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016694:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8016698:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801669c:	edd7 7a08 	vldr	s15, [r7, #32]
 80166a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80166a4:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80166a8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80166ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80166b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80166b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80166b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80166bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80166c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	1d1a      	adds	r2, r3, #4
 80166c8:	607a      	str	r2, [r7, #4]
 80166ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80166ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80166d2:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80166d6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80166da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80166de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80166e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80166e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80166ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80166ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	1d1a      	adds	r2, r3, #4
 80166f6:	607a      	str	r2, [r7, #4]
 80166f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80166fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016700:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8016704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016706:	3308      	adds	r3, #8
 8016708:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 801670a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801670c:	3b08      	subs	r3, #8
 801670e:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8016710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016712:	3b01      	subs	r3, #1
 8016714:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8016716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016718:	2b00      	cmp	r3, #0
 801671a:	f73f af7f 	bgt.w	801661c <merge_rfft_f32+0x82>
   }

}
 801671e:	bf00      	nop
 8016720:	bf00      	nop
 8016722:	3754      	adds	r7, #84	; 0x54
 8016724:	46bd      	mov	sp, r7
 8016726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672a:	4770      	bx	lr

0801672c <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b086      	sub	sp, #24
 8016730:	af00      	add	r7, sp, #0
 8016732:	60f8      	str	r0, [r7, #12]
 8016734:	60b9      	str	r1, [r7, #8]
 8016736:	607a      	str	r2, [r7, #4]
 8016738:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 801673e:	78fb      	ldrb	r3, [r7, #3]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d00b      	beq.n	801675c <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8016744:	687a      	ldr	r2, [r7, #4]
 8016746:	68b9      	ldr	r1, [r7, #8]
 8016748:	68f8      	ldr	r0, [r7, #12]
 801674a:	f7ff ff26 	bl	801659a <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 801674e:	78fa      	ldrb	r2, [r7, #3]
 8016750:	2301      	movs	r3, #1
 8016752:	6879      	ldr	r1, [r7, #4]
 8016754:	6978      	ldr	r0, [r7, #20]
 8016756:	f7fe fd7a 	bl	801524e <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 801675a:	e00a      	b.n	8016772 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 801675c:	78fa      	ldrb	r2, [r7, #3]
 801675e:	2301      	movs	r3, #1
 8016760:	68b9      	ldr	r1, [r7, #8]
 8016762:	6978      	ldr	r0, [r7, #20]
 8016764:	f7fe fd73 	bl	801524e <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8016768:	687a      	ldr	r2, [r7, #4]
 801676a:	68b9      	ldr	r1, [r7, #8]
 801676c:	68f8      	ldr	r0, [r7, #12]
 801676e:	f7ff fe2f 	bl	80163d0 <stage_rfft_f32>
}
 8016772:	bf00      	nop
 8016774:	3718      	adds	r7, #24
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}

0801677a <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 801677a:	b480      	push	{r7}
 801677c:	b089      	sub	sp, #36	; 0x24
 801677e:	af00      	add	r7, sp, #0
 8016780:	60f8      	str	r0, [r7, #12]
 8016782:	60b9      	str	r1, [r7, #8]
 8016784:	607a      	str	r2, [r7, #4]
 8016786:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801678e:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	00db      	lsls	r3, r3, #3
 8016794:	68fa      	ldr	r2, [r7, #12]
 8016796:	4413      	add	r3, r2
 8016798:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 801679a:	69fb      	ldr	r3, [r7, #28]
 801679c:	ed93 7a00 	vldr	s14, [r3]
 80167a0:	69bb      	ldr	r3, [r7, #24]
 80167a2:	edd3 7a00 	vldr	s15, [r3]
 80167a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80167aa:	69fb      	ldr	r3, [r7, #28]
 80167ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80167b0:	69bb      	ldr	r3, [r7, #24]
 80167b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80167b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80167ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80167be:	edc7 7a04 	vstr	s15, [r7, #16]
 80167c2:	69fb      	ldr	r3, [r7, #28]
 80167c4:	ed93 7a00 	vldr	s14, [r3]
 80167c8:	69bb      	ldr	r3, [r7, #24]
 80167ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80167ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80167d2:	69fb      	ldr	r3, [r7, #28]
 80167d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80167d8:	69bb      	ldr	r3, [r7, #24]
 80167da:	edd3 7a00 	vldr	s15, [r3]
 80167de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80167e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80167e6:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 80167ea:	68bb      	ldr	r3, [r7, #8]
 80167ec:	00db      	lsls	r3, r3, #3
 80167ee:	69ba      	ldr	r2, [r7, #24]
 80167f0:	4413      	add	r3, r2
 80167f2:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	ed93 7a00 	vldr	s14, [r3]
 80167fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80167fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016802:	69fb      	ldr	r3, [r7, #28]
 8016804:	edc3 7a00 	vstr	s15, [r3]
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	ed93 7a01 	vldr	s14, [r3, #4]
 801680e:	edd7 7a05 	vldr	s15, [r7, #20]
 8016812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016816:	69fb      	ldr	r3, [r7, #28]
 8016818:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	ed93 7a00 	vldr	s14, [r3]
 8016822:	edd7 7a04 	vldr	s15, [r7, #16]
 8016826:	ee77 7a27 	vadd.f32	s15, s14, s15
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	edc3 7a00 	vstr	s15, [r3]
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	ed93 7a01 	vldr	s14, [r3, #4]
 8016836:	edd7 7a05 	vldr	s15, [r7, #20]
 801683a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	3308      	adds	r3, #8
 8016848:	61fb      	str	r3, [r7, #28]
        ++Fout;
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	3308      	adds	r3, #8
 801684e:	60fb      	str	r3, [r7, #12]
    }while (--m);
 8016850:	683b      	ldr	r3, [r7, #0]
 8016852:	3b01      	subs	r3, #1
 8016854:	603b      	str	r3, [r7, #0]
 8016856:	683b      	ldr	r3, [r7, #0]
 8016858:	2b00      	cmp	r3, #0
 801685a:	bf14      	ite	ne
 801685c:	2301      	movne	r3, #1
 801685e:	2300      	moveq	r3, #0
 8016860:	b2db      	uxtb	r3, r3
 8016862:	2b00      	cmp	r3, #0
 8016864:	d199      	bne.n	801679a <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 8016866:	bf00      	nop
 8016868:	bf00      	nop
 801686a:	3724      	adds	r7, #36	; 0x24
 801686c:	46bd      	mov	sp, r7
 801686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016872:	4770      	bx	lr

08016874 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 8016874:	b480      	push	{r7}
 8016876:	b097      	sub	sp, #92	; 0x5c
 8016878:	af00      	add	r7, sp, #0
 801687a:	60f8      	str	r0, [r7, #12]
 801687c:	60b9      	str	r1, [r7, #8]
 801687e:	607a      	str	r2, [r7, #4]
 8016880:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	005b      	lsls	r3, r3, #1
 801688a:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 801688c:	683a      	ldr	r2, [r7, #0]
 801688e:	4613      	mov	r3, r2
 8016890:	005b      	lsls	r3, r3, #1
 8016892:	4413      	add	r3, r2
 8016894:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801689c:	657b      	str	r3, [r7, #84]	; 0x54
 801689e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80168a0:	653b      	str	r3, [r7, #80]	; 0x50
 80168a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80168a4:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	00db      	lsls	r3, r3, #3
 80168aa:	68fa      	ldr	r2, [r7, #12]
 80168ac:	4413      	add	r3, r2
 80168ae:	ed93 7a00 	vldr	s14, [r3]
 80168b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80168b4:	edd3 7a00 	vldr	s15, [r3]
 80168b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80168bc:	683b      	ldr	r3, [r7, #0]
 80168be:	00db      	lsls	r3, r3, #3
 80168c0:	68fa      	ldr	r2, [r7, #12]
 80168c2:	4413      	add	r3, r2
 80168c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80168c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80168ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80168ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80168d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80168d6:	edc7 7a04 	vstr	s15, [r7, #16]
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	00db      	lsls	r3, r3, #3
 80168de:	68fa      	ldr	r2, [r7, #12]
 80168e0:	4413      	add	r3, r2
 80168e2:	ed93 7a00 	vldr	s14, [r3]
 80168e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80168e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80168ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	00db      	lsls	r3, r3, #3
 80168f4:	68fa      	ldr	r2, [r7, #12]
 80168f6:	4413      	add	r3, r2
 80168f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80168fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80168fe:	edd3 7a00 	vldr	s15, [r3]
 8016902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016906:	ee77 7a27 	vadd.f32	s15, s14, s15
 801690a:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 801690e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016910:	00db      	lsls	r3, r3, #3
 8016912:	68fa      	ldr	r2, [r7, #12]
 8016914:	4413      	add	r3, r2
 8016916:	ed93 7a00 	vldr	s14, [r3]
 801691a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801691c:	edd3 7a00 	vldr	s15, [r3]
 8016920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016926:	00db      	lsls	r3, r3, #3
 8016928:	68fa      	ldr	r2, [r7, #12]
 801692a:	4413      	add	r3, r2
 801692c:	edd3 6a01 	vldr	s13, [r3, #4]
 8016930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016932:	edd3 7a01 	vldr	s15, [r3, #4]
 8016936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801693a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801693e:	edc7 7a06 	vstr	s15, [r7, #24]
 8016942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016944:	00db      	lsls	r3, r3, #3
 8016946:	68fa      	ldr	r2, [r7, #12]
 8016948:	4413      	add	r3, r2
 801694a:	ed93 7a00 	vldr	s14, [r3]
 801694e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016950:	edd3 7a01 	vldr	s15, [r3, #4]
 8016954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801695a:	00db      	lsls	r3, r3, #3
 801695c:	68fa      	ldr	r2, [r7, #12]
 801695e:	4413      	add	r3, r2
 8016960:	edd3 6a01 	vldr	s13, [r3, #4]
 8016964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016966:	edd3 7a00 	vldr	s15, [r3]
 801696a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801696e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016972:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 8016976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016978:	00db      	lsls	r3, r3, #3
 801697a:	68fa      	ldr	r2, [r7, #12]
 801697c:	4413      	add	r3, r2
 801697e:	ed93 7a00 	vldr	s14, [r3]
 8016982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016984:	edd3 7a00 	vldr	s15, [r3]
 8016988:	ee27 7a27 	vmul.f32	s14, s14, s15
 801698c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801698e:	00db      	lsls	r3, r3, #3
 8016990:	68fa      	ldr	r2, [r7, #12]
 8016992:	4413      	add	r3, r2
 8016994:	edd3 6a01 	vldr	s13, [r3, #4]
 8016998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801699a:	edd3 7a01 	vldr	s15, [r3, #4]
 801699e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80169a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80169a6:	edc7 7a08 	vstr	s15, [r7, #32]
 80169aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169ac:	00db      	lsls	r3, r3, #3
 80169ae:	68fa      	ldr	r2, [r7, #12]
 80169b0:	4413      	add	r3, r2
 80169b2:	ed93 7a00 	vldr	s14, [r3]
 80169b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80169bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80169c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169c2:	00db      	lsls	r3, r3, #3
 80169c4:	68fa      	ldr	r2, [r7, #12]
 80169c6:	4413      	add	r3, r2
 80169c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80169cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169ce:	edd3 7a00 	vldr	s15, [r3]
 80169d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80169d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80169da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	ed93 7a00 	vldr	s14, [r3]
 80169e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80169e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80169ec:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80169f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80169fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80169fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	ed93 7a00 	vldr	s14, [r3]
 8016a08:	edd7 7a06 	vldr	s15, [r7, #24]
 8016a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	edc3 7a00 	vstr	s15, [r3]
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	ed93 7a01 	vldr	s14, [r3, #4]
 8016a1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8016a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 8016a2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8016a2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8016a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a36:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8016a3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8016a3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 8016a4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8016a4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8016a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a56:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8016a5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8016a5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a66:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	ed93 7a00 	vldr	s14, [r3]
 8016a70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a76:	00db      	lsls	r3, r3, #3
 8016a78:	68fa      	ldr	r2, [r7, #12]
 8016a7a:	4413      	add	r3, r2
 8016a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a80:	edc3 7a00 	vstr	s15, [r3]
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	ed93 7a01 	vldr	s14, [r3, #4]
 8016a8a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a90:	00db      	lsls	r3, r3, #3
 8016a92:	68fa      	ldr	r2, [r7, #12]
 8016a94:	4413      	add	r3, r2
 8016a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a9a:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8016a9e:	68bb      	ldr	r3, [r7, #8]
 8016aa0:	00db      	lsls	r3, r3, #3
 8016aa2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016aa4:	4413      	add	r3, r2
 8016aa6:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 8016aa8:	68bb      	ldr	r3, [r7, #8]
 8016aaa:	011b      	lsls	r3, r3, #4
 8016aac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016aae:	4413      	add	r3, r2
 8016ab0:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 8016ab2:	68ba      	ldr	r2, [r7, #8]
 8016ab4:	4613      	mov	r3, r2
 8016ab6:	005b      	lsls	r3, r3, #1
 8016ab8:	4413      	add	r3, r2
 8016aba:	00db      	lsls	r3, r3, #3
 8016abc:	461a      	mov	r2, r3
 8016abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ac0:	4413      	add	r3, r2
 8016ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	ed93 7a00 	vldr	s14, [r3]
 8016aca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	edc3 7a00 	vstr	s15, [r3]
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	ed93 7a01 	vldr	s14, [r3, #4]
 8016ade:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	685b      	ldr	r3, [r3, #4]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d030      	beq.n	8016b56 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 8016af4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016af8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	00db      	lsls	r3, r3, #3
 8016b00:	68fa      	ldr	r2, [r7, #12]
 8016b02:	4413      	add	r3, r2
 8016b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b08:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 8016b0c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8016b10:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016b14:	683b      	ldr	r3, [r7, #0]
 8016b16:	00db      	lsls	r3, r3, #3
 8016b18:	68fa      	ldr	r2, [r7, #12]
 8016b1a:	4413      	add	r3, r2
 8016b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b20:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 8016b24:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016b28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b2e:	00db      	lsls	r3, r3, #3
 8016b30:	68fa      	ldr	r2, [r7, #12]
 8016b32:	4413      	add	r3, r2
 8016b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b38:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 8016b3c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8016b40:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b46:	00db      	lsls	r3, r3, #3
 8016b48:	68fa      	ldr	r2, [r7, #12]
 8016b4a:	4413      	add	r3, r2
 8016b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b50:	edc3 7a01 	vstr	s15, [r3, #4]
 8016b54:	e02f      	b.n	8016bb6 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 8016b56:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016b5a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	00db      	lsls	r3, r3, #3
 8016b62:	68fa      	ldr	r2, [r7, #12]
 8016b64:	4413      	add	r3, r2
 8016b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b6a:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 8016b6e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8016b72:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	00db      	lsls	r3, r3, #3
 8016b7a:	68fa      	ldr	r2, [r7, #12]
 8016b7c:	4413      	add	r3, r2
 8016b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b82:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8016b86:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016b8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b90:	00db      	lsls	r3, r3, #3
 8016b92:	68fa      	ldr	r2, [r7, #12]
 8016b94:	4413      	add	r3, r2
 8016b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b9a:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8016b9e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8016ba2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ba8:	00db      	lsls	r3, r3, #3
 8016baa:	68fa      	ldr	r2, [r7, #12]
 8016bac:	4413      	add	r3, r2
 8016bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016bb2:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	3308      	adds	r3, #8
 8016bba:	60fb      	str	r3, [r7, #12]
    }while(--k);
 8016bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bbe:	3b01      	subs	r3, #1
 8016bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8016bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	bf14      	ite	ne
 8016bc8:	2301      	movne	r3, #1
 8016bca:	2300      	moveq	r3, #0
 8016bcc:	b2db      	uxtb	r3, r3
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	f47f ae69 	bne.w	80168a6 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 8016bd4:	bf00      	nop
 8016bd6:	bf00      	nop
 8016bd8:	375c      	adds	r7, #92	; 0x5c
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be0:	4770      	bx	lr
	...

08016be4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 8016be4:	b5b0      	push	{r4, r5, r7, lr}
 8016be6:	b094      	sub	sp, #80	; 0x50
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	60f8      	str	r0, [r7, #12]
 8016bec:	60b9      	str	r1, [r7, #8]
 8016bee:	607a      	str	r2, [r7, #4]
 8016bf0:	603b      	str	r3, [r7, #0]
     size_t k=m;
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	005b      	lsls	r3, r3, #1
 8016bfa:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 8016bfc:	68bb      	ldr	r3, [r7, #8]
 8016bfe:	683a      	ldr	r2, [r7, #0]
 8016c00:	fb02 f303 	mul.w	r3, r2, r3
 8016c04:	6879      	ldr	r1, [r7, #4]
 8016c06:	3321      	adds	r3, #33	; 0x21
 8016c08:	f107 0210 	add.w	r2, r7, #16
 8016c0c:	00db      	lsls	r3, r3, #3
 8016c0e:	440b      	add	r3, r1
 8016c10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016c14:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8016c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8016c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c22:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	00db      	lsls	r3, r3, #3
 8016c28:	68fa      	ldr	r2, [r7, #12]
 8016c2a:	4413      	add	r3, r2
 8016c2c:	ed93 7a00 	vldr	s14, [r3]
 8016c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c32:	edd3 7a00 	vldr	s15, [r3]
 8016c36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016c3a:	683b      	ldr	r3, [r7, #0]
 8016c3c:	00db      	lsls	r3, r3, #3
 8016c3e:	68fa      	ldr	r2, [r7, #12]
 8016c40:	4413      	add	r3, r2
 8016c42:	edd3 6a01 	vldr	s13, [r3, #4]
 8016c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c48:	edd3 7a01 	vldr	s15, [r3, #4]
 8016c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016c54:	edc7 7a08 	vstr	s15, [r7, #32]
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	00db      	lsls	r3, r3, #3
 8016c5c:	68fa      	ldr	r2, [r7, #12]
 8016c5e:	4413      	add	r3, r2
 8016c60:	ed93 7a00 	vldr	s14, [r3]
 8016c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c66:	edd3 7a01 	vldr	s15, [r3, #4]
 8016c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016c6e:	683b      	ldr	r3, [r7, #0]
 8016c70:	00db      	lsls	r3, r3, #3
 8016c72:	68fa      	ldr	r2, [r7, #12]
 8016c74:	4413      	add	r3, r2
 8016c76:	edd3 6a01 	vldr	s13, [r3, #4]
 8016c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c7c:	edd3 7a00 	vldr	s15, [r3]
 8016c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c88:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 8016c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c8e:	00db      	lsls	r3, r3, #3
 8016c90:	68fa      	ldr	r2, [r7, #12]
 8016c92:	4413      	add	r3, r2
 8016c94:	ed93 7a00 	vldr	s14, [r3]
 8016c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c9a:	edd3 7a00 	vldr	s15, [r3]
 8016c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ca4:	00db      	lsls	r3, r3, #3
 8016ca6:	68fa      	ldr	r2, [r7, #12]
 8016ca8:	4413      	add	r3, r2
 8016caa:	edd3 6a01 	vldr	s13, [r3, #4]
 8016cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8016cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016cbc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8016cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016cc2:	00db      	lsls	r3, r3, #3
 8016cc4:	68fa      	ldr	r2, [r7, #12]
 8016cc6:	4413      	add	r3, r2
 8016cc8:	ed93 7a00 	vldr	s14, [r3]
 8016ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cce:	edd3 7a01 	vldr	s15, [r3, #4]
 8016cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016cd8:	00db      	lsls	r3, r3, #3
 8016cda:	68fa      	ldr	r2, [r7, #12]
 8016cdc:	4413      	add	r3, r2
 8016cde:	edd3 6a01 	vldr	s13, [r3, #4]
 8016ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ce4:	edd3 7a00 	vldr	s15, [r3]
 8016ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016cf0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8016cf4:	ed97 7a08 	vldr	s14, [r7, #32]
 8016cf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d00:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8016d04:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016d08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8016d14:	ed97 7a08 	vldr	s14, [r7, #32]
 8016d18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016d20:	edc7 7a06 	vstr	s15, [r7, #24]
 8016d24:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016d28:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016d30:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8016d34:	68bb      	ldr	r3, [r7, #8]
 8016d36:	00db      	lsls	r3, r3, #3
 8016d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016d3a:	4413      	add	r3, r2
 8016d3c:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 8016d3e:	68bb      	ldr	r3, [r7, #8]
 8016d40:	011b      	lsls	r3, r3, #4
 8016d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d44:	4413      	add	r3, r2
 8016d46:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7e9 fc0b 	bl	8000568 <__aeabi_f2d>
 8016d52:	4604      	mov	r4, r0
 8016d54:	460d      	mov	r5, r1
 8016d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7e9 fc05 	bl	8000568 <__aeabi_f2d>
 8016d5e:	f04f 0200 	mov.w	r2, #0
 8016d62:	4b57      	ldr	r3, [pc, #348]	; (8016ec0 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8016d64:	f7e9 fc58 	bl	8000618 <__aeabi_dmul>
 8016d68:	4602      	mov	r2, r0
 8016d6a:	460b      	mov	r3, r1
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	4629      	mov	r1, r5
 8016d70:	f7e9 fa9a 	bl	80002a8 <__aeabi_dsub>
 8016d74:	4602      	mov	r2, r0
 8016d76:	460b      	mov	r3, r1
 8016d78:	4610      	mov	r0, r2
 8016d7a:	4619      	mov	r1, r3
 8016d7c:	683b      	ldr	r3, [r7, #0]
 8016d7e:	00db      	lsls	r3, r3, #3
 8016d80:	68fa      	ldr	r2, [r7, #12]
 8016d82:	18d4      	adds	r4, r2, r3
 8016d84:	f7e9 ff40 	bl	8000c08 <__aeabi_d2f>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	685b      	ldr	r3, [r3, #4]
 8016d90:	4618      	mov	r0, r3
 8016d92:	f7e9 fbe9 	bl	8000568 <__aeabi_f2d>
 8016d96:	4604      	mov	r4, r0
 8016d98:	460d      	mov	r5, r1
 8016d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	f7e9 fbe3 	bl	8000568 <__aeabi_f2d>
 8016da2:	f04f 0200 	mov.w	r2, #0
 8016da6:	4b46      	ldr	r3, [pc, #280]	; (8016ec0 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8016da8:	f7e9 fc36 	bl	8000618 <__aeabi_dmul>
 8016dac:	4602      	mov	r2, r0
 8016dae:	460b      	mov	r3, r1
 8016db0:	4620      	mov	r0, r4
 8016db2:	4629      	mov	r1, r5
 8016db4:	f7e9 fa78 	bl	80002a8 <__aeabi_dsub>
 8016db8:	4602      	mov	r2, r0
 8016dba:	460b      	mov	r3, r1
 8016dbc:	4610      	mov	r0, r2
 8016dbe:	4619      	mov	r1, r3
 8016dc0:	683b      	ldr	r3, [r7, #0]
 8016dc2:	00db      	lsls	r3, r3, #3
 8016dc4:	68fa      	ldr	r2, [r7, #12]
 8016dc6:	18d4      	adds	r4, r2, r3
 8016dc8:	f7e9 ff1e 	bl	8000c08 <__aeabi_d2f>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8016dd0:	ed97 7a06 	vldr	s14, [r7, #24]
 8016dd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8016dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ddc:	edc7 7a06 	vstr	s15, [r7, #24]
 8016de0:	ed97 7a07 	vldr	s14, [r7, #28]
 8016de4:	edd7 7a05 	vldr	s15, [r7, #20]
 8016de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016dec:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	ed93 7a00 	vldr	s14, [r3]
 8016df6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	edc3 7a00 	vstr	s15, [r3]
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	ed93 7a01 	vldr	s14, [r3, #4]
 8016e0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8016e18:	683b      	ldr	r3, [r7, #0]
 8016e1a:	00db      	lsls	r3, r3, #3
 8016e1c:	68fa      	ldr	r2, [r7, #12]
 8016e1e:	4413      	add	r3, r2
 8016e20:	ed93 7a00 	vldr	s14, [r3]
 8016e24:	edd7 7a07 	vldr	s15, [r7, #28]
 8016e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e2a:	00db      	lsls	r3, r3, #3
 8016e2c:	68fa      	ldr	r2, [r7, #12]
 8016e2e:	4413      	add	r3, r2
 8016e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e34:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8016e38:	683b      	ldr	r3, [r7, #0]
 8016e3a:	00db      	lsls	r3, r3, #3
 8016e3c:	68fa      	ldr	r2, [r7, #12]
 8016e3e:	4413      	add	r3, r2
 8016e40:	ed93 7a01 	vldr	s14, [r3, #4]
 8016e44:	edd7 7a06 	vldr	s15, [r7, #24]
 8016e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e4a:	00db      	lsls	r3, r3, #3
 8016e4c:	68fa      	ldr	r2, [r7, #12]
 8016e4e:	4413      	add	r3, r2
 8016e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e54:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	00db      	lsls	r3, r3, #3
 8016e5c:	68fa      	ldr	r2, [r7, #12]
 8016e5e:	4413      	add	r3, r2
 8016e60:	ed93 7a00 	vldr	s14, [r3]
 8016e64:	edd7 7a07 	vldr	s15, [r7, #28]
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	00db      	lsls	r3, r3, #3
 8016e6c:	68fa      	ldr	r2, [r7, #12]
 8016e6e:	4413      	add	r3, r2
 8016e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e74:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8016e78:	683b      	ldr	r3, [r7, #0]
 8016e7a:	00db      	lsls	r3, r3, #3
 8016e7c:	68fa      	ldr	r2, [r7, #12]
 8016e7e:	4413      	add	r3, r2
 8016e80:	ed93 7a01 	vldr	s14, [r3, #4]
 8016e84:	edd7 7a06 	vldr	s15, [r7, #24]
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	00db      	lsls	r3, r3, #3
 8016e8c:	68fa      	ldr	r2, [r7, #12]
 8016e8e:	4413      	add	r3, r2
 8016e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e94:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	3308      	adds	r3, #8
 8016e9c:	60fb      	str	r3, [r7, #12]
     }while(--k);
 8016e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ea0:	3b01      	subs	r3, #1
 8016ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	bf14      	ite	ne
 8016eaa:	2301      	movne	r3, #1
 8016eac:	2300      	moveq	r3, #0
 8016eae:	b2db      	uxtb	r3, r3
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	f47f aeb7 	bne.w	8016c24 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 8016eb6:	bf00      	nop
 8016eb8:	bf00      	nop
 8016eba:	3750      	adds	r7, #80	; 0x50
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8016ec0:	3fe00000 	.word	0x3fe00000

08016ec4 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8016ec4:	b480      	push	{r7}
 8016ec6:	b0ab      	sub	sp, #172	; 0xac
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	60f8      	str	r0, [r7, #12]
 8016ecc:	60b9      	str	r1, [r7, #8]
 8016ece:	607a      	str	r2, [r7, #4]
 8016ed0:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8016ed8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	68ba      	ldr	r2, [r7, #8]
 8016ee0:	fb02 f303 	mul.w	r3, r2, r3
 8016ee4:	00db      	lsls	r3, r3, #3
 8016ee6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016eea:	441a      	add	r2, r3
 8016eec:	f107 0318 	add.w	r3, r7, #24
 8016ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ef4:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	68ba      	ldr	r2, [r7, #8]
 8016efc:	fb02 f303 	mul.w	r3, r2, r3
 8016f00:	011b      	lsls	r3, r3, #4
 8016f02:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016f06:	441a      	add	r2, r3
 8016f08:	f107 0310 	add.w	r3, r7, #16
 8016f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f10:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 8016f1a:	683b      	ldr	r3, [r7, #0]
 8016f1c:	00db      	lsls	r3, r3, #3
 8016f1e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016f22:	4413      	add	r3, r2
 8016f24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 8016f28:	683b      	ldr	r3, [r7, #0]
 8016f2a:	011b      	lsls	r3, r3, #4
 8016f2c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016f30:	4413      	add	r3, r2
 8016f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 8016f36:	683a      	ldr	r2, [r7, #0]
 8016f38:	4613      	mov	r3, r2
 8016f3a:	005b      	lsls	r3, r3, #1
 8016f3c:	4413      	add	r3, r2
 8016f3e:	00db      	lsls	r3, r3, #3
 8016f40:	461a      	mov	r2, r3
 8016f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016f46:	4413      	add	r3, r2
 8016f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	015b      	lsls	r3, r3, #5
 8016f50:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016f54:	4413      	add	r3, r2
 8016f56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8016f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 8016f64:	2300      	movs	r3, #0
 8016f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016f6a:	e2a7      	b.n	80174bc <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x5f8>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8016f6c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016f70:	f107 0320 	add.w	r3, r7, #32
 8016f74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f78:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 8016f7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016f80:	ed93 7a00 	vldr	s14, [r3]
 8016f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016f88:	68ba      	ldr	r2, [r7, #8]
 8016f8a:	fb02 f303 	mul.w	r3, r2, r3
 8016f8e:	00db      	lsls	r3, r3, #3
 8016f90:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016f94:	4413      	add	r3, r2
 8016f96:	edd3 7a00 	vldr	s15, [r3]
 8016f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016fa2:	edd3 6a01 	vldr	s13, [r3, #4]
 8016fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016faa:	68ba      	ldr	r2, [r7, #8]
 8016fac:	fb02 f303 	mul.w	r3, r2, r3
 8016fb0:	00db      	lsls	r3, r3, #3
 8016fb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016fb6:	4413      	add	r3, r2
 8016fb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8016fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016fc4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8016fc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016fcc:	ed93 7a00 	vldr	s14, [r3]
 8016fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016fd4:	68ba      	ldr	r2, [r7, #8]
 8016fd6:	fb02 f303 	mul.w	r3, r2, r3
 8016fda:	00db      	lsls	r3, r3, #3
 8016fdc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016fe0:	4413      	add	r3, r2
 8016fe2:	edd3 7a01 	vldr	s15, [r3, #4]
 8016fe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016fee:	edd3 6a01 	vldr	s13, [r3, #4]
 8016ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016ff6:	68ba      	ldr	r2, [r7, #8]
 8016ff8:	fb02 f303 	mul.w	r3, r2, r3
 8016ffc:	00db      	lsls	r3, r3, #3
 8016ffe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017002:	4413      	add	r3, r2
 8017004:	edd3 7a00 	vldr	s15, [r3]
 8017008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801700c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017010:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 8017014:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017018:	ed93 7a00 	vldr	s14, [r3]
 801701c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017020:	68ba      	ldr	r2, [r7, #8]
 8017022:	fb02 f303 	mul.w	r3, r2, r3
 8017026:	011b      	lsls	r3, r3, #4
 8017028:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801702c:	4413      	add	r3, r2
 801702e:	edd3 7a00 	vldr	s15, [r3]
 8017032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017036:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801703a:	edd3 6a01 	vldr	s13, [r3, #4]
 801703e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017042:	68ba      	ldr	r2, [r7, #8]
 8017044:	fb02 f303 	mul.w	r3, r2, r3
 8017048:	011b      	lsls	r3, r3, #4
 801704a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801704e:	4413      	add	r3, r2
 8017050:	edd3 7a01 	vldr	s15, [r3, #4]
 8017054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017058:	ee77 7a67 	vsub.f32	s15, s14, s15
 801705c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8017060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017064:	ed93 7a00 	vldr	s14, [r3]
 8017068:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801706c:	68ba      	ldr	r2, [r7, #8]
 801706e:	fb02 f303 	mul.w	r3, r2, r3
 8017072:	011b      	lsls	r3, r3, #4
 8017074:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017078:	4413      	add	r3, r2
 801707a:	edd3 7a01 	vldr	s15, [r3, #4]
 801707e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017082:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017086:	edd3 6a01 	vldr	s13, [r3, #4]
 801708a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801708e:	68ba      	ldr	r2, [r7, #8]
 8017090:	fb02 f303 	mul.w	r3, r2, r3
 8017094:	011b      	lsls	r3, r3, #4
 8017096:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801709a:	4413      	add	r3, r2
 801709c:	edd3 7a00 	vldr	s15, [r3]
 80170a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80170a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80170a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 80170ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80170b0:	ed93 7a00 	vldr	s14, [r3]
 80170b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80170b8:	68ba      	ldr	r2, [r7, #8]
 80170ba:	fb03 f202 	mul.w	r2, r3, r2
 80170be:	4613      	mov	r3, r2
 80170c0:	005b      	lsls	r3, r3, #1
 80170c2:	4413      	add	r3, r2
 80170c4:	00db      	lsls	r3, r3, #3
 80170c6:	461a      	mov	r2, r3
 80170c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80170cc:	4413      	add	r3, r2
 80170ce:	edd3 7a00 	vldr	s15, [r3]
 80170d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80170d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80170da:	edd3 6a01 	vldr	s13, [r3, #4]
 80170de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80170e2:	68ba      	ldr	r2, [r7, #8]
 80170e4:	fb03 f202 	mul.w	r2, r3, r2
 80170e8:	4613      	mov	r3, r2
 80170ea:	005b      	lsls	r3, r3, #1
 80170ec:	4413      	add	r3, r2
 80170ee:	00db      	lsls	r3, r3, #3
 80170f0:	461a      	mov	r2, r3
 80170f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80170f6:	4413      	add	r3, r2
 80170f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80170fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017104:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8017108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801710c:	ed93 7a00 	vldr	s14, [r3]
 8017110:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017114:	68ba      	ldr	r2, [r7, #8]
 8017116:	fb03 f202 	mul.w	r2, r3, r2
 801711a:	4613      	mov	r3, r2
 801711c:	005b      	lsls	r3, r3, #1
 801711e:	4413      	add	r3, r2
 8017120:	00db      	lsls	r3, r3, #3
 8017122:	461a      	mov	r2, r3
 8017124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017128:	4413      	add	r3, r2
 801712a:	edd3 7a01 	vldr	s15, [r3, #4]
 801712e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017132:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017136:	edd3 6a01 	vldr	s13, [r3, #4]
 801713a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801713e:	68ba      	ldr	r2, [r7, #8]
 8017140:	fb03 f202 	mul.w	r2, r3, r2
 8017144:	4613      	mov	r3, r2
 8017146:	005b      	lsls	r3, r3, #1
 8017148:	4413      	add	r3, r2
 801714a:	00db      	lsls	r3, r3, #3
 801714c:	461a      	mov	r2, r3
 801714e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017152:	4413      	add	r3, r2
 8017154:	edd3 7a00 	vldr	s15, [r3]
 8017158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801715c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017160:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 8017164:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017168:	ed93 7a00 	vldr	s14, [r3]
 801716c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017170:	68ba      	ldr	r2, [r7, #8]
 8017172:	fb02 f303 	mul.w	r3, r2, r3
 8017176:	015b      	lsls	r3, r3, #5
 8017178:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801717c:	4413      	add	r3, r2
 801717e:	edd3 7a00 	vldr	s15, [r3]
 8017182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017186:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801718a:	edd3 6a01 	vldr	s13, [r3, #4]
 801718e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017192:	68ba      	ldr	r2, [r7, #8]
 8017194:	fb02 f303 	mul.w	r3, r2, r3
 8017198:	015b      	lsls	r3, r3, #5
 801719a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801719e:	4413      	add	r3, r2
 80171a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80171a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80171a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80171ac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80171b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80171b4:	ed93 7a00 	vldr	s14, [r3]
 80171b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80171bc:	68ba      	ldr	r2, [r7, #8]
 80171be:	fb02 f303 	mul.w	r3, r2, r3
 80171c2:	015b      	lsls	r3, r3, #5
 80171c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80171c8:	4413      	add	r3, r2
 80171ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80171ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80171d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80171d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80171da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80171de:	68ba      	ldr	r2, [r7, #8]
 80171e0:	fb02 f303 	mul.w	r3, r2, r3
 80171e4:	015b      	lsls	r3, r3, #5
 80171e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80171ea:	4413      	add	r3, r2
 80171ec:	edd3 7a00 	vldr	s15, [r3]
 80171f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80171f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171f8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 80171fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8017200:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017208:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 801720c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8017210:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8017214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017218:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 801721c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8017220:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017228:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 801722c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8017230:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8017234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017238:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 801723c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8017240:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017248:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 801724c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8017250:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017258:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 801725c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8017260:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017268:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 801726c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8017270:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017278:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 801727c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017280:	ed93 7a00 	vldr	s14, [r3]
 8017284:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8017288:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801728c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017294:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017298:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 801729c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80172a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80172a4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80172a8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80172ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80172b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80172b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80172b8:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 80172bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80172c0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80172c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80172c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80172cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80172d0:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80172d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80172d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80172dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80172e0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 80172e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80172e8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80172ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80172f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80172f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80172f8:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80172fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8017300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017308:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 801730c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8017310:	edd7 7a07 	vldr	s15, [r7, #28]
 8017314:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017318:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 801731c:	edd7 7a05 	vldr	s15, [r7, #20]
 8017320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017328:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 801732c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8017330:	edd7 7a07 	vldr	s15, [r7, #28]
 8017334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017338:	eeb1 7a67 	vneg.f32	s14, s15
 801733c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8017340:	edd7 7a05 	vldr	s15, [r7, #20]
 8017344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017348:	ee77 7a67 	vsub.f32	s15, s14, s15
 801734c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 8017350:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017354:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8017358:	ee77 7a67 	vsub.f32	s15, s14, s15
 801735c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017360:	edc3 7a00 	vstr	s15, [r3]
 8017364:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8017368:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801736c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017370:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017374:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 8017378:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801737c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8017380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017384:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017388:	edc3 7a00 	vstr	s15, [r3]
 801738c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8017390:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8017394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017398:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801739c:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 80173a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80173a4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80173a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80173ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80173b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80173b4:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80173b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80173bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80173c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80173c4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 80173c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80173cc:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80173d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80173d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80173d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80173dc:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80173e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80173e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80173e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80173ec:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 80173f0:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80173f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80173f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80173fc:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8017400:	edd7 7a05 	vldr	s15, [r7, #20]
 8017404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017408:	ee77 7a67 	vsub.f32	s15, s14, s15
 801740c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 8017410:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8017414:	edd7 7a05 	vldr	s15, [r7, #20]
 8017418:	ee27 7a27 	vmul.f32	s14, s14, s15
 801741c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8017420:	edd7 7a07 	vldr	s15, [r7, #28]
 8017424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017428:	ee77 7a67 	vsub.f32	s15, s14, s15
 801742c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 8017430:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8017434:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8017438:	ee77 7a27 	vadd.f32	s15, s14, s15
 801743c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017440:	edc3 7a00 	vstr	s15, [r3]
 8017444:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8017448:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801744c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017454:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 8017458:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801745c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8017460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017468:	edc3 7a00 	vstr	s15, [r3]
 801746c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8017470:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8017474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801747c:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 8017480:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017484:	3308      	adds	r3, #8
 8017486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801748a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801748e:	3308      	adds	r3, #8
 8017490:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8017494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017498:	3308      	adds	r3, #8
 801749a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801749e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80174a2:	3308      	adds	r3, #8
 80174a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80174a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80174ac:	3308      	adds	r3, #8
 80174ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 80174b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80174b6:	3301      	adds	r3, #1
 80174b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80174bc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80174c0:	683b      	ldr	r3, [r7, #0]
 80174c2:	429a      	cmp	r2, r3
 80174c4:	f6ff ad52 	blt.w	8016f6c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa8>
    }
}
 80174c8:	bf00      	nop
 80174ca:	bf00      	nop
 80174cc:	37ac      	adds	r7, #172	; 0xac
 80174ce:	46bd      	mov	sp, r7
 80174d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d4:	4770      	bx	lr

080174d6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 80174d6:	b580      	push	{r7, lr}
 80174d8:	b08e      	sub	sp, #56	; 0x38
 80174da:	af00      	add	r7, sp, #0
 80174dc:	60f8      	str	r0, [r7, #12]
 80174de:	60b9      	str	r1, [r7, #8]
 80174e0:	607a      	str	r2, [r7, #4]
 80174e2:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80174ea:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 80174f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80174f4:	00db      	lsls	r3, r3, #3
 80174f6:	4618      	mov	r0, r3
 80174f8:	f000 fe96 	bl	8018228 <_Z9ei_mallocj>
 80174fc:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 80174fe:	2300      	movs	r3, #0
 8017500:	637b      	str	r3, [r7, #52]	; 0x34
 8017502:	e0b4      	b.n	801766e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x198>
        k=u;
 8017504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017506:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8017508:	2300      	movs	r3, #0
 801750a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801750c:	e013      	b.n	8017536 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x60>
            scratch[q1] = Fout[ k  ];
 801750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017510:	00db      	lsls	r3, r3, #3
 8017512:	68fa      	ldr	r2, [r7, #12]
 8017514:	18d1      	adds	r1, r2, r3
 8017516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017518:	00db      	lsls	r3, r3, #3
 801751a:	69ba      	ldr	r2, [r7, #24]
 801751c:	4413      	add	r3, r2
 801751e:	460a      	mov	r2, r1
 8017520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017524:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 8017528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	4413      	add	r3, r2
 801752e:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8017530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017532:	3301      	adds	r3, #1
 8017534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801753a:	429a      	cmp	r2, r3
 801753c:	dbe7      	blt.n	801750e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x38>
        }

        k=u;
 801753e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017540:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8017542:	2300      	movs	r3, #0
 8017544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017546:	e08a      	b.n	801765e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x188>
            int twidx=0;
 8017548:	2300      	movs	r3, #0
 801754a:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 801754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801754e:	00db      	lsls	r3, r3, #3
 8017550:	68fa      	ldr	r2, [r7, #12]
 8017552:	4413      	add	r3, r2
 8017554:	69ba      	ldr	r2, [r7, #24]
 8017556:	e892 0003 	ldmia.w	r2, {r0, r1}
 801755a:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 801755e:	2301      	movs	r3, #1
 8017560:	62bb      	str	r3, [r7, #40]	; 0x28
 8017562:	e071      	b.n	8017648 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x172>
                twidx += fstride * k;
 8017564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017566:	68ba      	ldr	r2, [r7, #8]
 8017568:	fb03 f202 	mul.w	r2, r3, r2
 801756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801756e:	4413      	add	r3, r2
 8017570:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 8017572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017574:	69fb      	ldr	r3, [r7, #28]
 8017576:	429a      	cmp	r2, r3
 8017578:	db03      	blt.n	8017582 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xac>
 801757a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801757c:	69fb      	ldr	r3, [r7, #28]
 801757e:	1ad3      	subs	r3, r2, r3
 8017580:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 8017582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017584:	00db      	lsls	r3, r3, #3
 8017586:	69ba      	ldr	r2, [r7, #24]
 8017588:	4413      	add	r3, r2
 801758a:	ed93 7a00 	vldr	s14, [r3]
 801758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017590:	00db      	lsls	r3, r3, #3
 8017592:	6a3a      	ldr	r2, [r7, #32]
 8017594:	4413      	add	r3, r2
 8017596:	edd3 7a00 	vldr	s15, [r3]
 801759a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175a0:	00db      	lsls	r3, r3, #3
 80175a2:	69ba      	ldr	r2, [r7, #24]
 80175a4:	4413      	add	r3, r2
 80175a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80175aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ac:	00db      	lsls	r3, r3, #3
 80175ae:	6a3a      	ldr	r2, [r7, #32]
 80175b0:	4413      	add	r3, r2
 80175b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80175b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80175ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80175be:	edc7 7a04 	vstr	s15, [r7, #16]
 80175c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175c4:	00db      	lsls	r3, r3, #3
 80175c6:	69ba      	ldr	r2, [r7, #24]
 80175c8:	4413      	add	r3, r2
 80175ca:	ed93 7a00 	vldr	s14, [r3]
 80175ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d0:	00db      	lsls	r3, r3, #3
 80175d2:	6a3a      	ldr	r2, [r7, #32]
 80175d4:	4413      	add	r3, r2
 80175d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80175da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80175de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e0:	00db      	lsls	r3, r3, #3
 80175e2:	69ba      	ldr	r2, [r7, #24]
 80175e4:	4413      	add	r3, r2
 80175e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80175ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ec:	00db      	lsls	r3, r3, #3
 80175ee:	6a3a      	ldr	r2, [r7, #32]
 80175f0:	4413      	add	r3, r2
 80175f2:	edd3 7a00 	vldr	s15, [r3]
 80175f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80175fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175fe:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 8017602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017604:	00db      	lsls	r3, r3, #3
 8017606:	68fa      	ldr	r2, [r7, #12]
 8017608:	4413      	add	r3, r2
 801760a:	ed93 7a00 	vldr	s14, [r3]
 801760e:	edd7 7a04 	vldr	s15, [r7, #16]
 8017612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017614:	00db      	lsls	r3, r3, #3
 8017616:	68fa      	ldr	r2, [r7, #12]
 8017618:	4413      	add	r3, r2
 801761a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801761e:	edc3 7a00 	vstr	s15, [r3]
 8017622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017624:	00db      	lsls	r3, r3, #3
 8017626:	68fa      	ldr	r2, [r7, #12]
 8017628:	4413      	add	r3, r2
 801762a:	ed93 7a01 	vldr	s14, [r3, #4]
 801762e:	edd7 7a05 	vldr	s15, [r7, #20]
 8017632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017634:	00db      	lsls	r3, r3, #3
 8017636:	68fa      	ldr	r2, [r7, #12]
 8017638:	4413      	add	r3, r2
 801763a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801763e:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 8017642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017644:	3301      	adds	r3, #1
 8017646:	62bb      	str	r3, [r7, #40]	; 0x28
 8017648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801764a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801764c:	429a      	cmp	r2, r3
 801764e:	db89      	blt.n	8017564 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x8e>
            }
            k += m;
 8017650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	4413      	add	r3, r2
 8017656:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8017658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801765a:	3301      	adds	r3, #1
 801765c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801765e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017662:	429a      	cmp	r2, r3
 8017664:	f6ff af70 	blt.w	8017548 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x72>
    for ( u=0; u<m; ++u ) {
 8017668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801766a:	3301      	adds	r3, #1
 801766c:	637b      	str	r3, [r7, #52]	; 0x34
 801766e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017670:	683b      	ldr	r3, [r7, #0]
 8017672:	429a      	cmp	r2, r3
 8017674:	f6ff af46 	blt.w	8017504 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2e>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 8017678:	69b8      	ldr	r0, [r7, #24]
 801767a:	f000 fdef 	bl	801825c <_Z7ei_freePv>
}
 801767e:	bf00      	nop
 8017680:	3738      	adds	r7, #56	; 0x38
 8017682:	46bd      	mov	sp, r7
 8017684:	bd80      	pop	{r7, pc}
	...

08017688 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b08a      	sub	sp, #40	; 0x28
 801768c:	af02      	add	r7, sp, #8
 801768e:	60f8      	str	r0, [r7, #12]
 8017690:	60b9      	str	r1, [r7, #8]
 8017692:	607a      	str	r2, [r7, #4]
 8017694:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 801769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801769c:	1d1a      	adds	r2, r3, #4
 801769e:	62ba      	str	r2, [r7, #40]	; 0x28
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 80176a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176a6:	1d1a      	adds	r2, r3, #4
 80176a8:	62ba      	str	r2, [r7, #40]	; 0x28
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 80176ae:	69bb      	ldr	r3, [r7, #24]
 80176b0:	697a      	ldr	r2, [r7, #20]
 80176b2:	fb02 f303 	mul.w	r3, r2, r3
 80176b6:	00db      	lsls	r3, r3, #3
 80176b8:	68fa      	ldr	r2, [r7, #12]
 80176ba:	4413      	add	r3, r2
 80176bc:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 80176be:	697b      	ldr	r3, [r7, #20]
 80176c0:	2b01      	cmp	r3, #1
 80176c2:	d11a      	bne.n	80176fa <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	68ba      	ldr	r2, [r7, #8]
 80176c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176cc:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 80176d0:	683b      	ldr	r3, [r7, #0]
 80176d2:	687a      	ldr	r2, [r7, #4]
 80176d4:	fb02 f303 	mul.w	r3, r2, r3
 80176d8:	00db      	lsls	r3, r3, #3
 80176da:	68ba      	ldr	r2, [r7, #8]
 80176dc:	4413      	add	r3, r2
 80176de:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	3308      	adds	r3, #8
 80176e4:	60fb      	str	r3, [r7, #12]
 80176e6:	68fa      	ldr	r2, [r7, #12]
 80176e8:	693b      	ldr	r3, [r7, #16]
 80176ea:	429a      	cmp	r2, r3
 80176ec:	bf14      	ite	ne
 80176ee:	2301      	movne	r3, #1
 80176f0:	2300      	moveq	r3, #0
 80176f2:	b2db      	uxtb	r3, r3
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d1e5      	bne.n	80176c4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
 80176f8:	e022      	b.n	8017740 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xb8>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 80176fa:	69bb      	ldr	r3, [r7, #24]
 80176fc:	687a      	ldr	r2, [r7, #4]
 80176fe:	fb03 f202 	mul.w	r2, r3, r2
 8017702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017704:	9301      	str	r3, [sp, #4]
 8017706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017708:	9300      	str	r3, [sp, #0]
 801770a:	683b      	ldr	r3, [r7, #0]
 801770c:	68b9      	ldr	r1, [r7, #8]
 801770e:	68f8      	ldr	r0, [r7, #12]
 8017710:	f7ff ffba 	bl	8017688 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 8017714:	683b      	ldr	r3, [r7, #0]
 8017716:	687a      	ldr	r2, [r7, #4]
 8017718:	fb02 f303 	mul.w	r3, r2, r3
 801771c:	00db      	lsls	r3, r3, #3
 801771e:	68ba      	ldr	r2, [r7, #8]
 8017720:	4413      	add	r3, r2
 8017722:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	00db      	lsls	r3, r3, #3
 8017728:	68fa      	ldr	r2, [r7, #12]
 801772a:	4413      	add	r3, r2
 801772c:	60fb      	str	r3, [r7, #12]
 801772e:	68fa      	ldr	r2, [r7, #12]
 8017730:	693b      	ldr	r3, [r7, #16]
 8017732:	429a      	cmp	r2, r3
 8017734:	bf14      	ite	ne
 8017736:	2301      	movne	r3, #1
 8017738:	2300      	moveq	r3, #0
 801773a:	b2db      	uxtb	r3, r3
 801773c:	2b00      	cmp	r3, #0
 801773e:	d1dc      	bne.n	80176fa <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 8017740:	69fb      	ldr	r3, [r7, #28]
 8017742:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 8017744:	69bb      	ldr	r3, [r7, #24]
 8017746:	3b02      	subs	r3, #2
 8017748:	2b03      	cmp	r3, #3
 801774a:	d827      	bhi.n	801779c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 801774c:	a201      	add	r2, pc, #4	; (adr r2, 8017754 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 801774e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017752:	bf00      	nop
 8017754:	08017765 	.word	0x08017765
 8017758:	08017773 	.word	0x08017773
 801775c:	08017781 	.word	0x08017781
 8017760:	0801778f 	.word	0x0801778f
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 8017764:	697b      	ldr	r3, [r7, #20]
 8017766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017768:	6879      	ldr	r1, [r7, #4]
 801776a:	68f8      	ldr	r0, [r7, #12]
 801776c:	f7ff f805 	bl	801677a <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 8017770:	e01d      	b.n	80177ae <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 8017772:	697b      	ldr	r3, [r7, #20]
 8017774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017776:	6879      	ldr	r1, [r7, #4]
 8017778:	68f8      	ldr	r0, [r7, #12]
 801777a:	f7ff fa33 	bl	8016be4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 801777e:	e016      	b.n	80177ae <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 8017780:	697b      	ldr	r3, [r7, #20]
 8017782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017784:	6879      	ldr	r1, [r7, #4]
 8017786:	68f8      	ldr	r0, [r7, #12]
 8017788:	f7ff f874 	bl	8016874 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 801778c:	e00f      	b.n	80177ae <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 801778e:	697b      	ldr	r3, [r7, #20]
 8017790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017792:	6879      	ldr	r1, [r7, #4]
 8017794:	68f8      	ldr	r0, [r7, #12]
 8017796:	f7ff fb95 	bl	8016ec4 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 801779a:	e008      	b.n	80177ae <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 801779c:	69bb      	ldr	r3, [r7, #24]
 801779e:	9300      	str	r3, [sp, #0]
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177a4:	6879      	ldr	r1, [r7, #4]
 80177a6:	68f8      	ldr	r0, [r7, #12]
 80177a8:	f7ff fe95 	bl	80174d6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 80177ac:	bf00      	nop
    }
}
 80177ae:	bf00      	nop
 80177b0:	3720      	adds	r7, #32
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}
 80177b6:	bf00      	nop

080177b8 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b086      	sub	sp, #24
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
 80177c0:	6039      	str	r1, [r7, #0]
    int p=4;
 80177c2:	2304      	movs	r3, #4
 80177c4:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 80177c6:	6878      	ldr	r0, [r7, #4]
 80177c8:	f7e8 febc 	bl	8000544 <__aeabi_i2d>
 80177cc:	4602      	mov	r2, r0
 80177ce:	460b      	mov	r3, r1
 80177d0:	ec43 2b10 	vmov	d0, r2, r3
 80177d4:	f003 fc5c 	bl	801b090 <sqrt>
 80177d8:	eeb0 7a40 	vmov.f32	s14, s0
 80177dc:	eef0 7a60 	vmov.f32	s15, s1
 80177e0:	eeb0 0a47 	vmov.f32	s0, s14
 80177e4:	eef0 0a67 	vmov.f32	s1, s15
 80177e8:	f003 ff96 	bl	801b718 <floor>
 80177ec:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 80177f0:	e01e      	b.n	8017830 <_ZL9kf_factoriPi+0x78>
            switch (p) {
 80177f2:	697b      	ldr	r3, [r7, #20]
 80177f4:	2b02      	cmp	r3, #2
 80177f6:	d005      	beq.n	8017804 <_ZL9kf_factoriPi+0x4c>
 80177f8:	697b      	ldr	r3, [r7, #20]
 80177fa:	2b04      	cmp	r3, #4
 80177fc:	d105      	bne.n	801780a <_ZL9kf_factoriPi+0x52>
                case 4: p = 2; break;
 80177fe:	2302      	movs	r3, #2
 8017800:	617b      	str	r3, [r7, #20]
 8017802:	e006      	b.n	8017812 <_ZL9kf_factoriPi+0x5a>
                case 2: p = 3; break;
 8017804:	2303      	movs	r3, #3
 8017806:	617b      	str	r3, [r7, #20]
 8017808:	e003      	b.n	8017812 <_ZL9kf_factoriPi+0x5a>
                default: p += 2; break;
 801780a:	697b      	ldr	r3, [r7, #20]
 801780c:	3302      	adds	r3, #2
 801780e:	617b      	str	r3, [r7, #20]
 8017810:	bf00      	nop
            }
            if (p > floor_sqrt)
 8017812:	6978      	ldr	r0, [r7, #20]
 8017814:	f7e8 fe96 	bl	8000544 <__aeabi_i2d>
 8017818:	4602      	mov	r2, r0
 801781a:	460b      	mov	r3, r1
 801781c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017820:	f7e9 f96c 	bl	8000afc <__aeabi_dcmplt>
 8017824:	4603      	mov	r3, r0
 8017826:	2b00      	cmp	r3, #0
 8017828:	d100      	bne.n	801782c <_ZL9kf_factoriPi+0x74>
 801782a:	e001      	b.n	8017830 <_ZL9kf_factoriPi+0x78>
                p = n;          /* no more factors, skip to end */
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	617b      	str	r3, [r7, #20]
        while (n % p) {
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	697a      	ldr	r2, [r7, #20]
 8017834:	fb93 f2f2 	sdiv	r2, r3, r2
 8017838:	6979      	ldr	r1, [r7, #20]
 801783a:	fb01 f202 	mul.w	r2, r1, r2
 801783e:	1a9b      	subs	r3, r3, r2
 8017840:	2b00      	cmp	r3, #0
 8017842:	d1d6      	bne.n	80177f2 <_ZL9kf_factoriPi+0x3a>
        }
        n /= p;
 8017844:	687a      	ldr	r2, [r7, #4]
 8017846:	697b      	ldr	r3, [r7, #20]
 8017848:	fb92 f3f3 	sdiv	r3, r2, r3
 801784c:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	1d1a      	adds	r2, r3, #4
 8017852:	603a      	str	r2, [r7, #0]
 8017854:	697a      	ldr	r2, [r7, #20]
 8017856:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 8017858:	683b      	ldr	r3, [r7, #0]
 801785a:	1d1a      	adds	r2, r3, #4
 801785c:	603a      	str	r2, [r7, #0]
 801785e:	687a      	ldr	r2, [r7, #4]
 8017860:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	2b01      	cmp	r3, #1
 8017866:	dce3      	bgt.n	8017830 <_ZL9kf_factoriPi+0x78>
}
 8017868:	bf00      	nop
 801786a:	bf00      	nop
 801786c:	3718      	adds	r7, #24
 801786e:	46bd      	mov	sp, r7
 8017870:	bd80      	pop	{r7, pc}
 8017872:	0000      	movs	r0, r0
 8017874:	0000      	movs	r0, r0
	...

08017878 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 8017878:	b5b0      	push	{r4, r5, r7, lr}
 801787a:	b090      	sub	sp, #64	; 0x40
 801787c:	af00      	add	r7, sp, #0
 801787e:	60f8      	str	r0, [r7, #12]
 8017880:	60b9      	str	r1, [r7, #8]
 8017882:	607a      	str	r2, [r7, #4]
 8017884:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 8017886:	2300      	movs	r3, #0
 8017888:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 801788e:	00db      	lsls	r3, r3, #3
 8017890:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 8017892:	683b      	ldr	r3, [r7, #0]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d104      	bne.n	80178a2 <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8017898:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801789a:	f000 fcc5 	bl	8018228 <_Z9ei_mallocj>
 801789e:	63f8      	str	r0, [r7, #60]	; 0x3c
 80178a0:	e00c      	b.n	80178bc <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d006      	beq.n	80178b6 <kiss_fft_alloc+0x3e>
 80178a8:	683b      	ldr	r3, [r7, #0]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80178ae:	429a      	cmp	r2, r3
 80178b0:	d801      	bhi.n	80178b6 <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80178ba:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 80178bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178be:	2b00      	cmp	r3, #0
 80178c0:	f000 80a0 	beq.w	8017a04 <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 80178c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178c6:	68fa      	ldr	r2, [r7, #12]
 80178c8:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 80178ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178cc:	68ba      	ldr	r2, [r7, #8]
 80178ce:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 80178d0:	68bb      	ldr	r3, [r7, #8]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d048      	beq.n	8017968 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 80178d6:	2300      	movs	r3, #0
 80178d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80178da:	e040      	b.n	801795e <kiss_fft_alloc+0xe6>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 80178dc:	a350      	add	r3, pc, #320	; (adr r3, 8017a20 <kiss_fft_alloc+0x1a8>)
 80178de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 80178e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80178e8:	f7e8 fe2c 	bl	8000544 <__aeabi_i2d>
 80178ec:	a34e      	add	r3, pc, #312	; (adr r3, 8017a28 <kiss_fft_alloc+0x1b0>)
 80178ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f2:	f7e8 fe91 	bl	8000618 <__aeabi_dmul>
 80178f6:	4602      	mov	r2, r0
 80178f8:	460b      	mov	r3, r1
 80178fa:	4614      	mov	r4, r2
 80178fc:	461d      	mov	r5, r3
 80178fe:	68f8      	ldr	r0, [r7, #12]
 8017900:	f7e8 fe20 	bl	8000544 <__aeabi_i2d>
 8017904:	4602      	mov	r2, r0
 8017906:	460b      	mov	r3, r1
 8017908:	4620      	mov	r0, r4
 801790a:	4629      	mov	r1, r5
 801790c:	f7e8 ffae 	bl	800086c <__aeabi_ddiv>
 8017910:	4602      	mov	r2, r0
 8017912:	460b      	mov	r3, r1
 8017914:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 8017918:	ed97 0b04 	vldr	d0, [r7, #16]
 801791c:	f003 fbe4 	bl	801b0e8 <cos>
 8017920:	ec51 0b10 	vmov	r0, r1, d0
 8017924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017926:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801792a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801792c:	00db      	lsls	r3, r3, #3
 801792e:	18d4      	adds	r4, r2, r3
 8017930:	f7e9 f96a 	bl	8000c08 <__aeabi_d2f>
 8017934:	4603      	mov	r3, r0
 8017936:	6023      	str	r3, [r4, #0]
 8017938:	ed97 0b04 	vldr	d0, [r7, #16]
 801793c:	f003 fc60 	bl	801b200 <sin>
 8017940:	ec51 0b10 	vmov	r0, r1, d0
 8017944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017946:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801794c:	00db      	lsls	r3, r3, #3
 801794e:	18d4      	adds	r4, r2, r3
 8017950:	f7e9 f95a 	bl	8000c08 <__aeabi_d2f>
 8017954:	4603      	mov	r3, r0
 8017956:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8017958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801795a:	3301      	adds	r3, #1
 801795c:	63bb      	str	r3, [r7, #56]	; 0x38
 801795e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	429a      	cmp	r2, r3
 8017964:	dbba      	blt.n	80178dc <kiss_fft_alloc+0x64>
 8017966:	e047      	b.n	80179f8 <kiss_fft_alloc+0x180>
            }
        } else {
            for (i=0;i<nfft;++i) {
 8017968:	2300      	movs	r3, #0
 801796a:	63bb      	str	r3, [r7, #56]	; 0x38
 801796c:	e040      	b.n	80179f0 <kiss_fft_alloc+0x178>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801796e:	a32c      	add	r3, pc, #176	; (adr r3, 8017a20 <kiss_fft_alloc+0x1a8>)
 8017970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017974:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 8017978:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801797a:	f7e8 fde3 	bl	8000544 <__aeabi_i2d>
 801797e:	a32c      	add	r3, pc, #176	; (adr r3, 8017a30 <kiss_fft_alloc+0x1b8>)
 8017980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017984:	f7e8 fe48 	bl	8000618 <__aeabi_dmul>
 8017988:	4602      	mov	r2, r0
 801798a:	460b      	mov	r3, r1
 801798c:	4614      	mov	r4, r2
 801798e:	461d      	mov	r5, r3
 8017990:	68f8      	ldr	r0, [r7, #12]
 8017992:	f7e8 fdd7 	bl	8000544 <__aeabi_i2d>
 8017996:	4602      	mov	r2, r0
 8017998:	460b      	mov	r3, r1
 801799a:	4620      	mov	r0, r4
 801799c:	4629      	mov	r1, r5
 801799e:	f7e8 ff65 	bl	800086c <__aeabi_ddiv>
 80179a2:	4602      	mov	r2, r0
 80179a4:	460b      	mov	r3, r1
 80179a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 80179aa:	ed97 0b08 	vldr	d0, [r7, #32]
 80179ae:	f003 fb9b 	bl	801b0e8 <cos>
 80179b2:	ec51 0b10 	vmov	r0, r1, d0
 80179b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179b8:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80179bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179be:	00db      	lsls	r3, r3, #3
 80179c0:	18d4      	adds	r4, r2, r3
 80179c2:	f7e9 f921 	bl	8000c08 <__aeabi_d2f>
 80179c6:	4603      	mov	r3, r0
 80179c8:	6023      	str	r3, [r4, #0]
 80179ca:	ed97 0b08 	vldr	d0, [r7, #32]
 80179ce:	f003 fc17 	bl	801b200 <sin>
 80179d2:	ec51 0b10 	vmov	r0, r1, d0
 80179d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179d8:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80179dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179de:	00db      	lsls	r3, r3, #3
 80179e0:	18d4      	adds	r4, r2, r3
 80179e2:	f7e9 f911 	bl	8000c08 <__aeabi_d2f>
 80179e6:	4603      	mov	r3, r0
 80179e8:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 80179ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ec:	3301      	adds	r3, #1
 80179ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80179f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	429a      	cmp	r2, r3
 80179f6:	dbba      	blt.n	801796e <kiss_fft_alloc+0xf6>
            }
        }

        kf_factor(nfft,st->factors);
 80179f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179fa:	3308      	adds	r3, #8
 80179fc:	4619      	mov	r1, r3
 80179fe:	68f8      	ldr	r0, [r7, #12]
 8017a00:	f7ff feda 	bl	80177b8 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 8017a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d002      	beq.n	8017a10 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 8017a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a0e:	601a      	str	r2, [r3, #0]
    }

    return st;
 8017a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3740      	adds	r7, #64	; 0x40
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bdb0      	pop	{r4, r5, r7, pc}
 8017a1a:	bf00      	nop
 8017a1c:	f3af 8000 	nop.w
 8017a20:	54442d18 	.word	0x54442d18
 8017a24:	400921fb 	.word	0x400921fb
 8017a28:	54442d18 	.word	0x54442d18
 8017a2c:	401921fb 	.word	0x401921fb
 8017a30:	54442d18 	.word	0x54442d18
 8017a34:	c01921fb 	.word	0xc01921fb

08017a38 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b088      	sub	sp, #32
 8017a3c:	af02      	add	r7, sp, #8
 8017a3e:	60f8      	str	r0, [r7, #12]
 8017a40:	60b9      	str	r1, [r7, #8]
 8017a42:	607a      	str	r2, [r7, #4]
 8017a44:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 8017a46:	68ba      	ldr	r2, [r7, #8]
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	429a      	cmp	r2, r3
 8017a4c:	d11d      	bne.n	8017a8a <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	00db      	lsls	r3, r3, #3
 8017a54:	4618      	mov	r0, r3
 8017a56:	f000 fbe7 	bl	8018228 <_Z9ei_mallocj>
 8017a5a:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	3308      	adds	r3, #8
 8017a60:	68fa      	ldr	r2, [r7, #12]
 8017a62:	9201      	str	r2, [sp, #4]
 8017a64:	9300      	str	r3, [sp, #0]
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	2201      	movs	r2, #1
 8017a6a:	68b9      	ldr	r1, [r7, #8]
 8017a6c:	6978      	ldr	r0, [r7, #20]
 8017a6e:	f7ff fe0b 	bl	8017688 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	00db      	lsls	r3, r3, #3
 8017a78:	461a      	mov	r2, r3
 8017a7a:	6979      	ldr	r1, [r7, #20]
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f008 f815 	bl	801faac <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 8017a82:	6978      	ldr	r0, [r7, #20]
 8017a84:	f000 fbea 	bl	801825c <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 8017a88:	e00a      	b.n	8017aa0 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	3308      	adds	r3, #8
 8017a8e:	68fa      	ldr	r2, [r7, #12]
 8017a90:	9201      	str	r2, [sp, #4]
 8017a92:	9300      	str	r3, [sp, #0]
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	2201      	movs	r2, #1
 8017a98:	68b9      	ldr	r1, [r7, #8]
 8017a9a:	6878      	ldr	r0, [r7, #4]
 8017a9c:	f7ff fdf4 	bl	8017688 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 8017aa0:	bf00      	nop
 8017aa2:	3718      	adds	r7, #24
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}

08017aa8 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b084      	sub	sp, #16
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	60f8      	str	r0, [r7, #12]
 8017ab0:	60b9      	str	r1, [r7, #8]
 8017ab2:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 8017ab4:	2301      	movs	r3, #1
 8017ab6:	687a      	ldr	r2, [r7, #4]
 8017ab8:	68b9      	ldr	r1, [r7, #8]
 8017aba:	68f8      	ldr	r0, [r7, #12]
 8017abc:	f7ff ffbc 	bl	8017a38 <kiss_fft_stride>
}
 8017ac0:	bf00      	nop
 8017ac2:	3710      	adds	r7, #16
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}

08017ac8 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8017ac8:	b5b0      	push	{r4, r5, r7, lr}
 8017aca:	b090      	sub	sp, #64	; 0x40
 8017acc:	af02      	add	r7, sp, #8
 8017ace:	60f8      	str	r0, [r7, #12]
 8017ad0:	60b9      	str	r1, [r7, #8]
 8017ad2:	607a      	str	r2, [r7, #4]
 8017ad4:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 8017ada:	2300      	movs	r3, #0
 8017adc:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	f003 0301 	and.w	r3, r3, #1
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d004      	beq.n	8017af2 <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 8017ae8:	4885      	ldr	r0, [pc, #532]	; (8017d00 <kiss_fftr_alloc+0x238>)
 8017aea:	f000 fa84 	bl	8017ff6 <_Z9ei_printfPKcz>
        return NULL;
 8017aee:	2300      	movs	r3, #0
 8017af0:	e0f9      	b.n	8017ce6 <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	105b      	asrs	r3, r3, #1
 8017af6:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8017af8:	f107 0314 	add.w	r3, r7, #20
 8017afc:	2200      	movs	r2, #0
 8017afe:	9200      	str	r2, [sp, #0]
 8017b00:	2200      	movs	r2, #0
 8017b02:	68b9      	ldr	r1, [r7, #8]
 8017b04:	68f8      	ldr	r0, [r7, #12]
 8017b06:	f7ff feb7 	bl	8017878 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 8017b0a:	68fa      	ldr	r2, [r7, #12]
 8017b0c:	4613      	mov	r3, r2
 8017b0e:	005b      	lsls	r3, r3, #1
 8017b10:	4413      	add	r3, r2
 8017b12:	0fda      	lsrs	r2, r3, #31
 8017b14:	4413      	add	r3, r2
 8017b16:	105b      	asrs	r3, r3, #1
 8017b18:	00da      	lsls	r2, r3, #3
 8017b1a:	697b      	ldr	r3, [r7, #20]
 8017b1c:	4413      	add	r3, r2
 8017b1e:	330c      	adds	r3, #12
 8017b20:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d104      	bne.n	8017b32 <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 8017b28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017b2a:	f000 fb7d 	bl	8018228 <_Z9ei_mallocj>
 8017b2e:	6338      	str	r0, [r7, #48]	; 0x30
 8017b30:	e009      	b.n	8017b46 <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 8017b32:	683b      	ldr	r3, [r7, #0]
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b38:	429a      	cmp	r2, r3
 8017b3a:	d801      	bhi.n	8017b40 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b44:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 8017b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d101      	bne.n	8017b50 <kiss_fftr_alloc+0x88>
        return NULL;
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	e0ca      	b.n	8017ce6 <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 8017b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b52:	f103 020c 	add.w	r2, r3, #12
 8017b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b58:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 8017b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b5c:	681a      	ldr	r2, [r3, #0]
 8017b5e:	697b      	ldr	r3, [r7, #20]
 8017b60:	441a      	add	r2, r3
 8017b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b64:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 8017b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b68:	685a      	ldr	r2, [r3, #4]
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	00db      	lsls	r3, r3, #3
 8017b6e:	441a      	add	r2, r3
 8017b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b72:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 8017b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b76:	681a      	ldr	r2, [r3, #0]
 8017b78:	f107 0314 	add.w	r3, r7, #20
 8017b7c:	2100      	movs	r1, #0
 8017b7e:	9100      	str	r1, [sp, #0]
 8017b80:	68b9      	ldr	r1, [r7, #8]
 8017b82:	68f8      	ldr	r0, [r7, #12]
 8017b84:	f7ff fe78 	bl	8017878 <kiss_fft_alloc>

    if (inverse_fft) {
 8017b88:	68bb      	ldr	r3, [r7, #8]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d052      	beq.n	8017c34 <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 8017b8e:	2300      	movs	r3, #0
 8017b90:	637b      	str	r3, [r7, #52]	; 0x34
 8017b92:	e046      	b.n	8017c22 <kiss_fftr_alloc+0x15a>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8017b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b96:	3301      	adds	r3, #1
 8017b98:	4618      	mov	r0, r3
 8017b9a:	f7e8 fcd3 	bl	8000544 <__aeabi_i2d>
 8017b9e:	4604      	mov	r4, r0
 8017ba0:	460d      	mov	r5, r1
 8017ba2:	68f8      	ldr	r0, [r7, #12]
 8017ba4:	f7e8 fcce 	bl	8000544 <__aeabi_i2d>
 8017ba8:	4602      	mov	r2, r0
 8017baa:	460b      	mov	r3, r1
 8017bac:	4620      	mov	r0, r4
 8017bae:	4629      	mov	r1, r5
 8017bb0:	f7e8 fe5c 	bl	800086c <__aeabi_ddiv>
 8017bb4:	4602      	mov	r2, r0
 8017bb6:	460b      	mov	r3, r1
 8017bb8:	4610      	mov	r0, r2
 8017bba:	4619      	mov	r1, r3
 8017bbc:	f04f 0200 	mov.w	r2, #0
 8017bc0:	4b50      	ldr	r3, [pc, #320]	; (8017d04 <kiss_fftr_alloc+0x23c>)
 8017bc2:	f7e8 fb73 	bl	80002ac <__adddf3>
 8017bc6:	4602      	mov	r2, r0
 8017bc8:	460b      	mov	r3, r1
 8017bca:	4610      	mov	r0, r2
 8017bcc:	4619      	mov	r1, r3
            double phase =
 8017bce:	a348      	add	r3, pc, #288	; (adr r3, 8017cf0 <kiss_fftr_alloc+0x228>)
 8017bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bd4:	f7e8 fd20 	bl	8000618 <__aeabi_dmul>
 8017bd8:	4602      	mov	r2, r0
 8017bda:	460b      	mov	r3, r1
 8017bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 8017be0:	ed97 0b06 	vldr	d0, [r7, #24]
 8017be4:	f003 fa80 	bl	801b0e8 <cos>
 8017be8:	ec51 0b10 	vmov	r0, r1, d0
 8017bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bee:	689a      	ldr	r2, [r3, #8]
 8017bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bf2:	00db      	lsls	r3, r3, #3
 8017bf4:	18d4      	adds	r4, r2, r3
 8017bf6:	f7e9 f807 	bl	8000c08 <__aeabi_d2f>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	6023      	str	r3, [r4, #0]
 8017bfe:	ed97 0b06 	vldr	d0, [r7, #24]
 8017c02:	f003 fafd 	bl	801b200 <sin>
 8017c06:	ec51 0b10 	vmov	r0, r1, d0
 8017c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c0c:	689a      	ldr	r2, [r3, #8]
 8017c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c10:	00db      	lsls	r3, r3, #3
 8017c12:	18d4      	adds	r4, r2, r3
 8017c14:	f7e8 fff8 	bl	8000c08 <__aeabi_d2f>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8017c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c1e:	3301      	adds	r3, #1
 8017c20:	637b      	str	r3, [r7, #52]	; 0x34
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	0fda      	lsrs	r2, r3, #31
 8017c26:	4413      	add	r3, r2
 8017c28:	105b      	asrs	r3, r3, #1
 8017c2a:	461a      	mov	r2, r3
 8017c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c2e:	4293      	cmp	r3, r2
 8017c30:	dbb0      	blt.n	8017b94 <kiss_fftr_alloc+0xcc>
 8017c32:	e051      	b.n	8017cd8 <kiss_fftr_alloc+0x210>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 8017c34:	2300      	movs	r3, #0
 8017c36:	637b      	str	r3, [r7, #52]	; 0x34
 8017c38:	e046      	b.n	8017cc8 <kiss_fftr_alloc+0x200>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8017c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c3c:	3301      	adds	r3, #1
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7e8 fc80 	bl	8000544 <__aeabi_i2d>
 8017c44:	4604      	mov	r4, r0
 8017c46:	460d      	mov	r5, r1
 8017c48:	68f8      	ldr	r0, [r7, #12]
 8017c4a:	f7e8 fc7b 	bl	8000544 <__aeabi_i2d>
 8017c4e:	4602      	mov	r2, r0
 8017c50:	460b      	mov	r3, r1
 8017c52:	4620      	mov	r0, r4
 8017c54:	4629      	mov	r1, r5
 8017c56:	f7e8 fe09 	bl	800086c <__aeabi_ddiv>
 8017c5a:	4602      	mov	r2, r0
 8017c5c:	460b      	mov	r3, r1
 8017c5e:	4610      	mov	r0, r2
 8017c60:	4619      	mov	r1, r3
 8017c62:	f04f 0200 	mov.w	r2, #0
 8017c66:	4b27      	ldr	r3, [pc, #156]	; (8017d04 <kiss_fftr_alloc+0x23c>)
 8017c68:	f7e8 fb20 	bl	80002ac <__adddf3>
 8017c6c:	4602      	mov	r2, r0
 8017c6e:	460b      	mov	r3, r1
 8017c70:	4610      	mov	r0, r2
 8017c72:	4619      	mov	r1, r3
            double phase =
 8017c74:	a320      	add	r3, pc, #128	; (adr r3, 8017cf8 <kiss_fftr_alloc+0x230>)
 8017c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c7a:	f7e8 fccd 	bl	8000618 <__aeabi_dmul>
 8017c7e:	4602      	mov	r2, r0
 8017c80:	460b      	mov	r3, r1
 8017c82:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 8017c86:	ed97 0b08 	vldr	d0, [r7, #32]
 8017c8a:	f003 fa2d 	bl	801b0e8 <cos>
 8017c8e:	ec51 0b10 	vmov	r0, r1, d0
 8017c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c94:	689a      	ldr	r2, [r3, #8]
 8017c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c98:	00db      	lsls	r3, r3, #3
 8017c9a:	18d4      	adds	r4, r2, r3
 8017c9c:	f7e8 ffb4 	bl	8000c08 <__aeabi_d2f>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	6023      	str	r3, [r4, #0]
 8017ca4:	ed97 0b08 	vldr	d0, [r7, #32]
 8017ca8:	f003 faaa 	bl	801b200 <sin>
 8017cac:	ec51 0b10 	vmov	r0, r1, d0
 8017cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb2:	689a      	ldr	r2, [r3, #8]
 8017cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cb6:	00db      	lsls	r3, r3, #3
 8017cb8:	18d4      	adds	r4, r2, r3
 8017cba:	f7e8 ffa5 	bl	8000c08 <__aeabi_d2f>
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8017cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cc4:	3301      	adds	r3, #1
 8017cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	0fda      	lsrs	r2, r3, #31
 8017ccc:	4413      	add	r3, r2
 8017cce:	105b      	asrs	r3, r3, #1
 8017cd0:	461a      	mov	r2, r3
 8017cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cd4:	4293      	cmp	r3, r2
 8017cd6:	dbb0      	blt.n	8017c3a <kiss_fftr_alloc+0x172>
        }
    }

    if (memallocated != NULL) {
 8017cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d002      	beq.n	8017ce4 <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 8017cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ce2:	601a      	str	r2, [r3, #0]
    }

    return st;
 8017ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	3738      	adds	r7, #56	; 0x38
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bdb0      	pop	{r4, r5, r7, pc}
 8017cee:	bf00      	nop
 8017cf0:	54442d18 	.word	0x54442d18
 8017cf4:	400921fb 	.word	0x400921fb
 8017cf8:	54442d18 	.word	0x54442d18
 8017cfc:	c00921fb 	.word	0xc00921fb
 8017d00:	08023630 	.word	0x08023630
 8017d04:	3fe00000 	.word	0x3fe00000

08017d08 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b092      	sub	sp, #72	; 0x48
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	60f8      	str	r0, [r7, #12]
 8017d10:	60b9      	str	r1, [r7, #8]
 8017d12:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	685b      	ldr	r3, [r3, #4]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d002      	beq.n	8017d24 <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 8017d1e:	4888      	ldr	r0, [pc, #544]	; (8017f40 <kiss_fftr+0x238>)
 8017d20:	f000 f969 	bl	8017ff6 <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	6818      	ldr	r0, [r3, #0]
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	685b      	ldr	r3, [r3, #4]
 8017d34:	461a      	mov	r2, r3
 8017d36:	68b9      	ldr	r1, [r7, #8]
 8017d38:	f7ff feb6 	bl	8017aa8 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	685b      	ldr	r3, [r3, #4]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	685b      	ldr	r3, [r3, #4]
 8017d48:	685b      	ldr	r3, [r3, #4]
 8017d4a:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 8017d4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8017d50:	edd7 7a05 	vldr	s15, [r7, #20]
 8017d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 8017d5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8017d62:	edd7 7a05 	vldr	s15, [r7, #20]
 8017d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d68:	00db      	lsls	r3, r3, #3
 8017d6a:	687a      	ldr	r2, [r7, #4]
 8017d6c:	4413      	add	r3, r2
 8017d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017d72:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	f04f 0200 	mov.w	r2, #0
 8017d7c:	605a      	str	r2, [r3, #4]
 8017d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d80:	00db      	lsls	r3, r3, #3
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	4413      	add	r3, r2
 8017d86:	687a      	ldr	r2, [r7, #4]
 8017d88:	6852      	ldr	r2, [r2, #4]
 8017d8a:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8017d90:	e0c7      	b.n	8017f22 <kiss_fftr+0x21a>
        fpk    = st->tmpbuf[k];
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	685a      	ldr	r2, [r3, #4]
 8017d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d98:	00db      	lsls	r3, r3, #3
 8017d9a:	441a      	add	r2, r3
 8017d9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017da4:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	685a      	ldr	r2, [r3, #4]
 8017dac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017db0:	1acb      	subs	r3, r1, r3
 8017db2:	00db      	lsls	r3, r3, #3
 8017db4:	4413      	add	r3, r2
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	685a      	ldr	r2, [r3, #4]
 8017dbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017dc2:	1acb      	subs	r3, r1, r3
 8017dc4:	00db      	lsls	r3, r3, #3
 8017dc6:	4413      	add	r3, r2
 8017dc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8017dcc:	eef1 7a67 	vneg.f32	s15, s15
 8017dd0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 8017dd4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8017dd8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017de0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8017de4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8017de8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017df0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 8017df4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8017df8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e00:	edc7 7a08 	vstr	s15, [r7, #32]
 8017e04:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8017e08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 8017e14:	ed97 7a08 	vldr	s14, [r7, #32]
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	689a      	ldr	r2, [r3, #8]
 8017e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e1e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8017e22:	3b01      	subs	r3, #1
 8017e24:	00db      	lsls	r3, r3, #3
 8017e26:	4413      	add	r3, r2
 8017e28:	edd3 7a00 	vldr	s15, [r3]
 8017e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017e30:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	689a      	ldr	r2, [r3, #8]
 8017e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e3a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8017e3e:	3b01      	subs	r3, #1
 8017e40:	00db      	lsls	r3, r3, #3
 8017e42:	4413      	add	r3, r2
 8017e44:	edd3 7a01 	vldr	s15, [r3, #4]
 8017e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e50:	edc7 7a06 	vstr	s15, [r7, #24]
 8017e54:	ed97 7a08 	vldr	s14, [r7, #32]
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	689a      	ldr	r2, [r3, #8]
 8017e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e5e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8017e62:	3b01      	subs	r3, #1
 8017e64:	00db      	lsls	r3, r3, #3
 8017e66:	4413      	add	r3, r2
 8017e68:	edd3 7a01 	vldr	s15, [r3, #4]
 8017e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017e70:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	689a      	ldr	r2, [r3, #8]
 8017e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e7a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8017e7e:	3b01      	subs	r3, #1
 8017e80:	00db      	lsls	r3, r3, #3
 8017e82:	4413      	add	r3, r2
 8017e84:	edd3 7a00 	vldr	s15, [r3]
 8017e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017e90:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 8017e94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8017e98:	edd7 7a06 	vldr	s15, [r7, #24]
 8017e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ea2:	00db      	lsls	r3, r3, #3
 8017ea4:	687a      	ldr	r2, [r7, #4]
 8017ea6:	4413      	add	r3, r2
 8017ea8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017eb0:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 8017eb4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8017eb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8017ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ec2:	00db      	lsls	r3, r3, #3
 8017ec4:	687a      	ldr	r2, [r7, #4]
 8017ec6:	4413      	add	r3, r2
 8017ec8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017ed0:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 8017ed4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8017ed8:	edd7 7a06 	vldr	s15, [r7, #24]
 8017edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ee4:	1ad3      	subs	r3, r2, r3
 8017ee6:	00db      	lsls	r3, r3, #3
 8017ee8:	687a      	ldr	r2, [r7, #4]
 8017eea:	4413      	add	r3, r2
 8017eec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017ef4:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 8017ef8:	ed97 7a07 	vldr	s14, [r7, #28]
 8017efc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8017f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017f04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f08:	1ad3      	subs	r3, r2, r3
 8017f0a:	00db      	lsls	r3, r3, #3
 8017f0c:	687a      	ldr	r2, [r7, #4]
 8017f0e:	4413      	add	r3, r2
 8017f10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017f18:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 8017f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f1e:	3301      	adds	r3, #1
 8017f20:	647b      	str	r3, [r7, #68]	; 0x44
 8017f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f24:	0fda      	lsrs	r2, r3, #31
 8017f26:	4413      	add	r3, r2
 8017f28:	105b      	asrs	r3, r3, #1
 8017f2a:	461a      	mov	r2, r3
 8017f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f2e:	4293      	cmp	r3, r2
 8017f30:	f77f af2f 	ble.w	8017d92 <kiss_fftr+0x8a>
    }
}
 8017f34:	bf00      	nop
 8017f36:	bf00      	nop
 8017f38:	3748      	adds	r7, #72	; 0x48
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	0802364c 	.word	0x0802364c

08017f44 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b082      	sub	sp, #8
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8017f4e:	ed97 0a01 	vldr	s0, [r7, #4]
 8017f52:	f003 fa45 	bl	801b3e0 <log10f>
 8017f56:	eef0 7a40 	vmov.f32	s15, s0
 8017f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8017f5e:	3708      	adds	r7, #8
 8017f60:	46bd      	mov	sp, r7
 8017f62:	bd80      	pop	{r7, pc}

08017f64 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8017f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f66:	b083      	sub	sp, #12
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	ed87 0b00 	vstr	d0, [r7]
 8017f6e:	683c      	ldr	r4, [r7, #0]
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8017f76:	2301      	movs	r3, #1
 8017f78:	461e      	mov	r6, r3
 8017f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8017f7e:	4b10      	ldr	r3, [pc, #64]	; (8017fc0 <_ZSt5isinfd+0x5c>)
 8017f80:	4620      	mov	r0, r4
 8017f82:	4629      	mov	r1, r5
 8017f84:	f7e8 fde2 	bl	8000b4c <__aeabi_dcmpun>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d10b      	bne.n	8017fa6 <_ZSt5isinfd+0x42>
 8017f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8017f92:	4b0b      	ldr	r3, [pc, #44]	; (8017fc0 <_ZSt5isinfd+0x5c>)
 8017f94:	4620      	mov	r0, r4
 8017f96:	4629      	mov	r1, r5
 8017f98:	f7e8 fdba 	bl	8000b10 <__aeabi_dcmple>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d101      	bne.n	8017fa6 <_ZSt5isinfd+0x42>
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	461e      	mov	r6, r3
 8017fa6:	b2f3      	uxtb	r3, r6
 8017fa8:	f083 0301 	eor.w	r3, r3, #1
 8017fac:	b2db      	uxtb	r3, r3
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	bf14      	ite	ne
 8017fb2:	2301      	movne	r3, #1
 8017fb4:	2300      	moveq	r3, #0
 8017fb6:	b2db      	uxtb	r3, r3
 8017fb8:	4618      	mov	r0, r3
 8017fba:	370c      	adds	r7, #12
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fc0:	7fefffff 	.word	0x7fefffff

08017fc4 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8017fc4:	b480      	push	{r7}
 8017fc6:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8017fc8:	2300      	movs	r3, #0
}
 8017fca:	4618      	mov	r0, r3
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd2:	4770      	bx	lr

08017fd4 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8017fd4:	b5b0      	push	{r4, r5, r7, lr}
 8017fd6:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8017fd8:	f7f8 fb9e 	bl	8010718 <HAL_GetTick>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017fe2:	fb02 f303 	mul.w	r3, r2, r3
 8017fe6:	2200      	movs	r2, #0
 8017fe8:	461c      	mov	r4, r3
 8017fea:	4615      	mov	r5, r2
 8017fec:	4622      	mov	r2, r4
 8017fee:	462b      	mov	r3, r5
}
 8017ff0:	4610      	mov	r0, r2
 8017ff2:	4619      	mov	r1, r3
 8017ff4:	bdb0      	pop	{r4, r5, r7, pc}

08017ff6 <_Z9ei_printfPKcz>:

__attribute__((weak)) void ei_printf(const char *format, ...) {
 8017ff6:	b40f      	push	{r0, r1, r2, r3}
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b082      	sub	sp, #8
 8017ffc:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8017ffe:	f107 0314 	add.w	r3, r7, #20
 8018002:	607b      	str	r3, [r7, #4]
    vprintf(format, myargs);
 8018004:	6879      	ldr	r1, [r7, #4]
 8018006:	6938      	ldr	r0, [r7, #16]
 8018008:	f007 fc48 	bl	801f89c <viprintf>
    va_end(myargs);
}
 801800c:	bf00      	nop
 801800e:	3708      	adds	r7, #8
 8018010:	46bd      	mov	sp, r7
 8018012:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018016:	b004      	add	sp, #16
 8018018:	4770      	bx	lr
 801801a:	0000      	movs	r0, r0
 801801c:	0000      	movs	r0, r0
	...

08018020 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
 8018020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018024:	b08c      	sub	sp, #48	; 0x30
 8018026:	af00      	add	r7, sp, #0
 8018028:	ed87 0a01 	vstr	s0, [r7, #4]
        *(c) = '\0';
    }


    ei_printf("%s", s);
}
 801802c:	466b      	mov	r3, sp
 801802e:	4698      	mov	r8, r3
    float n = f;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	62fb      	str	r3, [r7, #44]	; 0x2c
    char s[MAX_NUMBER_STRING_SIZE];
 8018034:	4b78      	ldr	r3, [pc, #480]	; (8018218 <_Z15ei_printf_floatf+0x1f8>)
 8018036:	681e      	ldr	r6, [r3, #0]
 8018038:	1e73      	subs	r3, r6, #1
 801803a:	623b      	str	r3, [r7, #32]
 801803c:	4632      	mov	r2, r6
 801803e:	2300      	movs	r3, #0
 8018040:	4614      	mov	r4, r2
 8018042:	461d      	mov	r5, r3
 8018044:	f04f 0200 	mov.w	r2, #0
 8018048:	f04f 0300 	mov.w	r3, #0
 801804c:	00eb      	lsls	r3, r5, #3
 801804e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8018052:	00e2      	lsls	r2, r4, #3
 8018054:	4632      	mov	r2, r6
 8018056:	2300      	movs	r3, #0
 8018058:	4610      	mov	r0, r2
 801805a:	4619      	mov	r1, r3
 801805c:	f04f 0200 	mov.w	r2, #0
 8018060:	f04f 0300 	mov.w	r3, #0
 8018064:	00cb      	lsls	r3, r1, #3
 8018066:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801806a:	00c2      	lsls	r2, r0, #3
 801806c:	4633      	mov	r3, r6
 801806e:	3307      	adds	r3, #7
 8018070:	08db      	lsrs	r3, r3, #3
 8018072:	00db      	lsls	r3, r3, #3
 8018074:	ebad 0d03 	sub.w	sp, sp, r3
 8018078:	466b      	mov	r3, sp
 801807a:	3300      	adds	r3, #0
 801807c:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 801807e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018082:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801808a:	d106      	bne.n	801809a <_Z15ei_printf_floatf+0x7a>
        strcpy(s, "0");
 801808c:	69fb      	ldr	r3, [r7, #28]
 801808e:	4963      	ldr	r1, [pc, #396]	; (801821c <_Z15ei_printf_floatf+0x1fc>)
 8018090:	461a      	mov	r2, r3
 8018092:	460b      	mov	r3, r1
 8018094:	881b      	ldrh	r3, [r3, #0]
 8018096:	8013      	strh	r3, [r2, #0]
 8018098:	e0ad      	b.n	80181f6 <_Z15ei_printf_floatf+0x1d6>
        char *c = s;
 801809a:	69fb      	ldr	r3, [r7, #28]
 801809c:	627b      	str	r3, [r7, #36]	; 0x24
        int neg = (n < 0);
 801809e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80180a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80180a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180aa:	bf4c      	ite	mi
 80180ac:	2301      	movmi	r3, #1
 80180ae:	2300      	movpl	r3, #0
 80180b0:	b2db      	uxtb	r3, r3
 80180b2:	61bb      	str	r3, [r7, #24]
        if (neg) {
 80180b4:	69bb      	ldr	r3, [r7, #24]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d005      	beq.n	80180c6 <_Z15ei_printf_floatf+0xa6>
            n = -n;
 80180ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80180be:	eef1 7a67 	vneg.f32	s15, s15
 80180c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        m = log10(n);
 80180c6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80180ca:	f7ff ff3b 	bl	8017f44 <_ZSt5log10f>
 80180ce:	eef0 7a40 	vmov.f32	s15, s0
 80180d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80180d6:	ee17 3a90 	vmov	r3, s15
 80180da:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 80180dc:	69bb      	ldr	r3, [r7, #24]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d004      	beq.n	80180ec <_Z15ei_printf_floatf+0xcc>
            *(c++) = '-';
 80180e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e4:	1c5a      	adds	r2, r3, #1
 80180e6:	627a      	str	r2, [r7, #36]	; 0x24
 80180e8:	222d      	movs	r2, #45	; 0x2d
 80180ea:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 80180ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	dc70      	bgt.n	80181d4 <_Z15ei_printf_floatf+0x1b4>
            m = 0;
 80180f2:	2300      	movs	r3, #0
 80180f4:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 80180f6:	e06d      	b.n	80181d4 <_Z15ei_printf_floatf+0x1b4>
            double weight = pow(10.0, m);
 80180f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180fa:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8018210 <_Z15ei_printf_floatf+0x1f0>
 80180fe:	f000 f8b8 	bl	8018272 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8018102:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8018106:	f04f 0200 	mov.w	r2, #0
 801810a:	f04f 0300 	mov.w	r3, #0
 801810e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8018112:	f7e8 fd11 	bl	8000b38 <__aeabi_dcmpgt>
 8018116:	4603      	mov	r3, r0
 8018118:	2b00      	cmp	r3, #0
 801811a:	d00b      	beq.n	8018134 <_Z15ei_printf_floatf+0x114>
 801811c:	ed97 0b04 	vldr	d0, [r7, #16]
 8018120:	f7ff ff20 	bl	8017f64 <_ZSt5isinfd>
 8018124:	4603      	mov	r3, r0
 8018126:	f083 0301 	eor.w	r3, r3, #1
 801812a:	b2db      	uxtb	r3, r3
 801812c:	2b00      	cmp	r3, #0
 801812e:	d001      	beq.n	8018134 <_Z15ei_printf_floatf+0x114>
 8018130:	2301      	movs	r3, #1
 8018132:	e000      	b.n	8018136 <_Z15ei_printf_floatf+0x116>
 8018134:	2300      	movs	r3, #0
 8018136:	2b00      	cmp	r3, #0
 8018138:	d03a      	beq.n	80181b0 <_Z15ei_printf_floatf+0x190>
                digit = floor(n / weight);
 801813a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801813c:	f7e8 fa14 	bl	8000568 <__aeabi_f2d>
 8018140:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018144:	f7e8 fb92 	bl	800086c <__aeabi_ddiv>
 8018148:	4602      	mov	r2, r0
 801814a:	460b      	mov	r3, r1
 801814c:	ec43 2b17 	vmov	d7, r2, r3
 8018150:	eeb0 0a47 	vmov.f32	s0, s14
 8018154:	eef0 0a67 	vmov.f32	s1, s15
 8018158:	f003 fade 	bl	801b718 <floor>
 801815c:	ec53 2b10 	vmov	r2, r3, d0
 8018160:	4610      	mov	r0, r2
 8018162:	4619      	mov	r1, r3
 8018164:	f7e8 fd08 	bl	8000b78 <__aeabi_d2iz>
 8018168:	4603      	mov	r3, r0
 801816a:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 801816c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801816e:	f7e8 f9fb 	bl	8000568 <__aeabi_f2d>
 8018172:	4604      	mov	r4, r0
 8018174:	460d      	mov	r5, r1
 8018176:	68f8      	ldr	r0, [r7, #12]
 8018178:	f7e8 f9e4 	bl	8000544 <__aeabi_i2d>
 801817c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018180:	f7e8 fa4a 	bl	8000618 <__aeabi_dmul>
 8018184:	4602      	mov	r2, r0
 8018186:	460b      	mov	r3, r1
 8018188:	4620      	mov	r0, r4
 801818a:	4629      	mov	r1, r5
 801818c:	f7e8 f88c 	bl	80002a8 <__aeabi_dsub>
 8018190:	4602      	mov	r2, r0
 8018192:	460b      	mov	r3, r1
 8018194:	4610      	mov	r0, r2
 8018196:	4619      	mov	r1, r3
 8018198:	f7e8 fd36 	bl	8000c08 <__aeabi_d2f>
 801819c:	4603      	mov	r3, r0
 801819e:	62fb      	str	r3, [r7, #44]	; 0x2c
                *(c++) = '0' + digit;
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	b2da      	uxtb	r2, r3
 80181a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a6:	1c59      	adds	r1, r3, #1
 80181a8:	6279      	str	r1, [r7, #36]	; 0x24
 80181aa:	3230      	adds	r2, #48	; 0x30
 80181ac:	b2d2      	uxtb	r2, r2
 80181ae:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 80181b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d10b      	bne.n	80181ce <_Z15ei_printf_floatf+0x1ae>
 80181b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80181ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80181be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181c2:	dd04      	ble.n	80181ce <_Z15ei_printf_floatf+0x1ae>
                *(c++) = '.';
 80181c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c6:	1c5a      	adds	r2, r3, #1
 80181c8:	627a      	str	r2, [r7, #36]	; 0x24
 80181ca:	222e      	movs	r2, #46	; 0x2e
 80181cc:	701a      	strb	r2, [r3, #0]
            m--;
 80181ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d0:	3b01      	subs	r3, #1
 80181d2:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 80181d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80181d6:	f7e8 f9c7 	bl	8000568 <__aeabi_f2d>
 80181da:	4b11      	ldr	r3, [pc, #68]	; (8018220 <_Z15ei_printf_floatf+0x200>)
 80181dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e0:	f7e8 fcaa 	bl	8000b38 <__aeabi_dcmpgt>
 80181e4:	4603      	mov	r3, r0
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d186      	bne.n	80180f8 <_Z15ei_printf_floatf+0xd8>
 80181ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	da83      	bge.n	80180f8 <_Z15ei_printf_floatf+0xd8>
        *(c) = '\0';
 80181f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f2:	2200      	movs	r2, #0
 80181f4:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 80181f6:	69f9      	ldr	r1, [r7, #28]
 80181f8:	480a      	ldr	r0, [pc, #40]	; (8018224 <_Z15ei_printf_floatf+0x204>)
 80181fa:	f7ff fefc 	bl	8017ff6 <_Z9ei_printfPKcz>
 80181fe:	46c5      	mov	sp, r8
}
 8018200:	bf00      	nop
 8018202:	3730      	adds	r7, #48	; 0x30
 8018204:	46bd      	mov	sp, r7
 8018206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801820a:	bf00      	nop
 801820c:	f3af 8000 	nop.w
 8018210:	00000000 	.word	0x00000000
 8018214:	40240000 	.word	0x40240000
 8018218:	20000188 	.word	0x20000188
 801821c:	08023674 	.word	0x08023674
 8018220:	20000180 	.word	0x20000180
 8018224:	08023678 	.word	0x08023678

08018228 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 8018228:	b580      	push	{r7, lr}
 801822a:	b082      	sub	sp, #8
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
    return malloc(size);
 8018230:	6878      	ldr	r0, [r7, #4]
 8018232:	f005 fc8b 	bl	801db4c <malloc>
 8018236:	4603      	mov	r3, r0
}
 8018238:	4618      	mov	r0, r3
 801823a:	3708      	adds	r7, #8
 801823c:	46bd      	mov	sp, r7
 801823e:	bd80      	pop	{r7, pc}

08018240 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8018240:	b580      	push	{r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
 8018248:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 801824a:	6839      	ldr	r1, [r7, #0]
 801824c:	6878      	ldr	r0, [r7, #4]
 801824e:	f005 fc5f 	bl	801db10 <calloc>
 8018252:	4603      	mov	r3, r0
}
 8018254:	4618      	mov	r0, r3
 8018256:	3708      	adds	r7, #8
 8018258:	46bd      	mov	sp, r7
 801825a:	bd80      	pop	{r7, pc}

0801825c <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 801825c:	b580      	push	{r7, lr}
 801825e:	b082      	sub	sp, #8
 8018260:	af00      	add	r7, sp, #0
 8018262:	6078      	str	r0, [r7, #4]
    free(ptr);
 8018264:	6878      	ldr	r0, [r7, #4]
 8018266:	f005 fc79 	bl	801db5c <free>
}
 801826a:	bf00      	nop
 801826c:	3708      	adds	r7, #8
 801826e:	46bd      	mov	sp, r7
 8018270:	bd80      	pop	{r7, pc}

08018272 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8018272:	b580      	push	{r7, lr}
 8018274:	b084      	sub	sp, #16
 8018276:	af00      	add	r7, sp, #0
 8018278:	ed87 0b02 	vstr	d0, [r7, #8]
 801827c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801827e:	6878      	ldr	r0, [r7, #4]
 8018280:	f7e8 f960 	bl	8000544 <__aeabi_i2d>
 8018284:	4602      	mov	r2, r0
 8018286:	460b      	mov	r3, r1
 8018288:	ec43 2b11 	vmov	d1, r2, r3
 801828c:	ed97 0b02 	vldr	d0, [r7, #8]
 8018290:	f002 fe8e 	bl	801afb0 <pow>
 8018294:	eeb0 7a40 	vmov.f32	s14, s0
 8018298:	eef0 7a60 	vmov.f32	s15, s1
    }
 801829c:	eeb0 0a47 	vmov.f32	s0, s14
 80182a0:	eef0 0a67 	vmov.f32	s1, s15
 80182a4:	3710      	adds	r7, #16
 80182a6:	46bd      	mov	sp, r7
 80182a8:	bd80      	pop	{r7, pc}
	...

080182ac <TfLiteTypeGetName>:
TfLiteStatus TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor) {
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 80182ac:	b480      	push	{r7}
 80182ae:	b083      	sub	sp, #12
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	4603      	mov	r3, r0
 80182b4:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 80182b6:	79fb      	ldrb	r3, [r7, #7]
 80182b8:	2b12      	cmp	r3, #18
 80182ba:	d84f      	bhi.n	801835c <TfLiteTypeGetName+0xb0>
 80182bc:	a201      	add	r2, pc, #4	; (adr r2, 80182c4 <TfLiteTypeGetName+0x18>)
 80182be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182c2:	bf00      	nop
 80182c4:	08018311 	.word	0x08018311
 80182c8:	08018315 	.word	0x08018315
 80182cc:	08018321 	.word	0x08018321
 80182d0:	08018329 	.word	0x08018329
 80182d4:	08018331 	.word	0x08018331
 80182d8:	08018345 	.word	0x08018345
 80182dc:	08018339 	.word	0x08018339
 80182e0:	0801831d 	.word	0x0801831d
 80182e4:	0801833d 	.word	0x0801833d
 80182e8:	0801832d 	.word	0x0801832d
 80182ec:	08018349 	.word	0x08018349
 80182f0:	0801834d 	.word	0x0801834d
 80182f4:	08018341 	.word	0x08018341
 80182f8:	08018335 	.word	0x08018335
 80182fc:	08018351 	.word	0x08018351
 8018300:	08018355 	.word	0x08018355
 8018304:	08018325 	.word	0x08018325
 8018308:	08018319 	.word	0x08018319
 801830c:	08018359 	.word	0x08018359
    case kTfLiteNoType:
      return "NOTYPE";
 8018310:	4b16      	ldr	r3, [pc, #88]	; (801836c <TfLiteTypeGetName+0xc0>)
 8018312:	e024      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8018314:	4b16      	ldr	r3, [pc, #88]	; (8018370 <TfLiteTypeGetName+0xc4>)
 8018316:	e022      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt16:
      return "UINT16";
 8018318:	4b16      	ldr	r3, [pc, #88]	; (8018374 <TfLiteTypeGetName+0xc8>)
 801831a:	e020      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteInt16:
      return "INT16";
 801831c:	4b16      	ldr	r3, [pc, #88]	; (8018378 <TfLiteTypeGetName+0xcc>)
 801831e:	e01e      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteInt32:
      return "INT32";
 8018320:	4b16      	ldr	r3, [pc, #88]	; (801837c <TfLiteTypeGetName+0xd0>)
 8018322:	e01c      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt32:
      return "UINT32";
 8018324:	4b16      	ldr	r3, [pc, #88]	; (8018380 <TfLiteTypeGetName+0xd4>)
 8018326:	e01a      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt8:
      return "UINT8";
 8018328:	4b16      	ldr	r3, [pc, #88]	; (8018384 <TfLiteTypeGetName+0xd8>)
 801832a:	e018      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteInt8:
      return "INT8";
 801832c:	4b16      	ldr	r3, [pc, #88]	; (8018388 <TfLiteTypeGetName+0xdc>)
 801832e:	e016      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteInt64:
      return "INT64";
 8018330:	4b16      	ldr	r3, [pc, #88]	; (801838c <TfLiteTypeGetName+0xe0>)
 8018332:	e014      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt64:
      return "UINT64";
 8018334:	4b16      	ldr	r3, [pc, #88]	; (8018390 <TfLiteTypeGetName+0xe4>)
 8018336:	e012      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteBool:
      return "BOOL";
 8018338:	4b16      	ldr	r3, [pc, #88]	; (8018394 <TfLiteTypeGetName+0xe8>)
 801833a:	e010      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 801833c:	4b16      	ldr	r3, [pc, #88]	; (8018398 <TfLiteTypeGetName+0xec>)
 801833e:	e00e      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8018340:	4b16      	ldr	r3, [pc, #88]	; (801839c <TfLiteTypeGetName+0xf0>)
 8018342:	e00c      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteString:
      return "STRING";
 8018344:	4b16      	ldr	r3, [pc, #88]	; (80183a0 <TfLiteTypeGetName+0xf4>)
 8018346:	e00a      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8018348:	4b16      	ldr	r3, [pc, #88]	; (80183a4 <TfLiteTypeGetName+0xf8>)
 801834a:	e008      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat64:
      return "FLOAT64";
 801834c:	4b16      	ldr	r3, [pc, #88]	; (80183a8 <TfLiteTypeGetName+0xfc>)
 801834e:	e006      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteResource:
      return "RESOURCE";
 8018350:	4b16      	ldr	r3, [pc, #88]	; (80183ac <TfLiteTypeGetName+0x100>)
 8018352:	e004      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteVariant:
      return "VARIANT";
 8018354:	4b16      	ldr	r3, [pc, #88]	; (80183b0 <TfLiteTypeGetName+0x104>)
 8018356:	e002      	b.n	801835e <TfLiteTypeGetName+0xb2>
    case kTfLiteInt4:
      return "INT4";
 8018358:	4b16      	ldr	r3, [pc, #88]	; (80183b4 <TfLiteTypeGetName+0x108>)
 801835a:	e000      	b.n	801835e <TfLiteTypeGetName+0xb2>
  }
  return "Unknown type";
 801835c:	4b16      	ldr	r3, [pc, #88]	; (80183b8 <TfLiteTypeGetName+0x10c>)
}
 801835e:	4618      	mov	r0, r3
 8018360:	370c      	adds	r7, #12
 8018362:	46bd      	mov	sp, r7
 8018364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018368:	4770      	bx	lr
 801836a:	bf00      	nop
 801836c:	0802367c 	.word	0x0802367c
 8018370:	08023684 	.word	0x08023684
 8018374:	0802368c 	.word	0x0802368c
 8018378:	08023694 	.word	0x08023694
 801837c:	0802369c 	.word	0x0802369c
 8018380:	080236a4 	.word	0x080236a4
 8018384:	080236ac 	.word	0x080236ac
 8018388:	080236b4 	.word	0x080236b4
 801838c:	080236bc 	.word	0x080236bc
 8018390:	080236c4 	.word	0x080236c4
 8018394:	080236cc 	.word	0x080236cc
 8018398:	080236d4 	.word	0x080236d4
 801839c:	080236e0 	.word	0x080236e0
 80183a0:	080236ec 	.word	0x080236ec
 80183a4:	080236f4 	.word	0x080236f4
 80183a8:	080236fc 	.word	0x080236fc
 80183ac:	08023704 	.word	0x08023704
 80183b0:	08023710 	.word	0x08023710
 80183b4:	08023718 	.word	0x08023718
 80183b8:	08023720 	.word	0x08023720

080183bc <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
 80183bc:	b480      	push	{r7}
 80183be:	b087      	sub	sp, #28
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	60f8      	str	r0, [r7, #12]
 80183c4:	60b9      	str	r1, [r7, #8]
 80183c6:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_elements; i += 2) {
 80183c8:	2300      	movs	r3, #0
 80183ca:	617b      	str	r3, [r7, #20]
 80183cc:	e028      	b.n	8018420 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x64>
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
 80183ce:	697b      	ldr	r3, [r7, #20]
 80183d0:	0fda      	lsrs	r2, r3, #31
 80183d2:	4413      	add	r3, r2
 80183d4:	105b      	asrs	r3, r3, #1
 80183d6:	461a      	mov	r2, r3
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	4413      	add	r3, r2
 80183dc:	f993 3000 	ldrsb.w	r3, [r3]
 80183e0:	011b      	lsls	r3, r3, #4
 80183e2:	b25a      	sxtb	r2, r3
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	6879      	ldr	r1, [r7, #4]
 80183e8:	440b      	add	r3, r1
 80183ea:	1112      	asrs	r2, r2, #4
 80183ec:	b252      	sxtb	r2, r2
 80183ee:	701a      	strb	r2, [r3, #0]
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	3301      	adds	r3, #1
 80183f4:	68ba      	ldr	r2, [r7, #8]
 80183f6:	429a      	cmp	r2, r3
 80183f8:	d017      	beq.n	801842a <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x6e>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	0fda      	lsrs	r2, r3, #31
 80183fe:	4413      	add	r3, r2
 8018400:	105b      	asrs	r3, r3, #1
 8018402:	461a      	mov	r2, r3
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	4413      	add	r3, r2
 8018408:	f993 2000 	ldrsb.w	r2, [r3]
 801840c:	697b      	ldr	r3, [r7, #20]
 801840e:	3301      	adds	r3, #1
 8018410:	6879      	ldr	r1, [r7, #4]
 8018412:	440b      	add	r3, r1
 8018414:	1112      	asrs	r2, r2, #4
 8018416:	b252      	sxtb	r2, r2
 8018418:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < num_elements; i += 2) {
 801841a:	697b      	ldr	r3, [r7, #20]
 801841c:	3302      	adds	r3, #2
 801841e:	617b      	str	r3, [r7, #20]
 8018420:	697a      	ldr	r2, [r7, #20]
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	429a      	cmp	r2, r3
 8018426:	dbd2      	blt.n	80183ce <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x12>
  }
}
 8018428:	e000      	b.n	801842c <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x70>
    if (i + 1 == num_elements) break;
 801842a:	bf00      	nop
}
 801842c:	bf00      	nop
 801842e:	371c      	adds	r7, #28
 8018430:	46bd      	mov	sp, r7
 8018432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018436:	4770      	bx	lr

08018438 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8018438:	b480      	push	{r7}
 801843a:	b083      	sub	sp, #12
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	ed93 7a00 	vldr	s14, [r3]
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	edd3 7a00 	vldr	s15, [r3]
 801844e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018456:	d501      	bpl.n	801845c <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8018458:	683b      	ldr	r3, [r7, #0]
 801845a:	e000      	b.n	801845e <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 801845c:	687b      	ldr	r3, [r7, #4]
    }
 801845e:	4618      	mov	r0, r3
 8018460:	370c      	adds	r7, #12
 8018462:	46bd      	mov	sp, r7
 8018464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018468:	4770      	bx	lr

0801846a <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 801846a:	b480      	push	{r7}
 801846c:	af00      	add	r7, sp, #0
 801846e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018472:	4618      	mov	r0, r3
 8018474:	46bd      	mov	sp, r7
 8018476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847a:	4770      	bx	lr

0801847c <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 801847c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018480:	b088      	sub	sp, #32
 8018482:	af00      	add	r7, sp, #0
 8018484:	ed87 0b02 	vstr	d0, [r7, #8]
 8018488:	6078      	str	r0, [r7, #4]
 801848a:	6039      	str	r1, [r7, #0]
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 801848c:	f04f 0200 	mov.w	r2, #0
 8018490:	f04f 0300 	mov.w	r3, #0
 8018494:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018498:	f7e8 fb26 	bl	8000ae8 <__aeabi_dcmpeq>
 801849c:	4603      	mov	r3, r0
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d006      	beq.n	80184b0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	2200      	movs	r2, #0
 80184a6:	601a      	str	r2, [r3, #0]
    *shift = 0;
 80184a8:	683b      	ldr	r3, [r7, #0]
 80184aa:	2200      	movs	r2, #0
 80184ac:	601a      	str	r2, [r3, #0]
    return;
 80184ae:	e068      	b.n	8018582 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 80184b0:	6838      	ldr	r0, [r7, #0]
 80184b2:	ed97 0b02 	vldr	d0, [r7, #8]
 80184b6:	f002 fe6b 	bl	801b190 <frexp>
 80184ba:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 80184be:	f04f 0200 	mov.w	r2, #0
 80184c2:	4b32      	ldr	r3, [pc, #200]	; (801858c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 80184c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80184c8:	f7e8 f8a6 	bl	8000618 <__aeabi_dmul>
 80184cc:	4602      	mov	r2, r0
 80184ce:	460b      	mov	r3, r1
 80184d0:	ec43 2b17 	vmov	d7, r2, r3
 80184d4:	eeb0 0a47 	vmov.f32	s0, s14
 80184d8:	eef0 0a67 	vmov.f32	s1, s15
 80184dc:	f000 f85a 	bl	8018594 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 80184e0:	ec53 2b10 	vmov	r2, r3, d0
 80184e4:	4610      	mov	r0, r2
 80184e6:	4619      	mov	r1, r3
 80184e8:	f7e8 fc46 	bl	8000d78 <__aeabi_d2lz>
 80184ec:	4602      	mov	r2, r0
 80184ee:	460b      	mov	r3, r1
 80184f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 80184f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80184f8:	4925      	ldr	r1, [pc, #148]	; (8018590 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 80184fa:	428a      	cmp	r2, r1
 80184fc:	f173 0300 	sbcs.w	r3, r3, #0
 8018500:	db01      	blt.n	8018506 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8018502:	f005 fadb 	bl	801dabc <abort>
  if (q_fixed == (1LL << 31)) {
 8018506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801850a:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 801850e:	430b      	orrs	r3, r1
 8018510:	d118      	bne.n	8018544 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8018512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018516:	0fd9      	lsrs	r1, r3, #31
 8018518:	2000      	movs	r0, #0
 801851a:	468a      	mov	sl, r1
 801851c:	4683      	mov	fp, r0
 801851e:	eb1a 0402 	adds.w	r4, sl, r2
 8018522:	eb4b 0503 	adc.w	r5, fp, r3
 8018526:	f04f 0200 	mov.w	r2, #0
 801852a:	f04f 0300 	mov.w	r3, #0
 801852e:	0862      	lsrs	r2, r4, #1
 8018530:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8018534:	106b      	asrs	r3, r5, #1
 8018536:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 801853a:	683b      	ldr	r3, [r7, #0]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	1c5a      	adds	r2, r3, #1
 8018540:	683b      	ldr	r3, [r7, #0]
 8018542:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8018544:	f7ff ff91 	bl	801846a <_ZNSt14numeric_limitsIlE3maxEv>
 8018548:	4603      	mov	r3, r0
 801854a:	17da      	asrs	r2, r3, #31
 801854c:	4698      	mov	r8, r3
 801854e:	4691      	mov	r9, r2
 8018550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018554:	4590      	cmp	r8, r2
 8018556:	eb79 0303 	sbcs.w	r3, r9, r3
 801855a:	da01      	bge.n	8018560 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 801855c:	f005 faae 	bl	801dabc <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8018560:	683b      	ldr	r3, [r7, #0]
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	f113 0f1f 	cmn.w	r3, #31
 8018568:	da08      	bge.n	801857c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	2200      	movs	r2, #0
 801856e:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8018570:	f04f 0200 	mov.w	r2, #0
 8018574:	f04f 0300 	mov.w	r3, #0
 8018578:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 801857c:	69ba      	ldr	r2, [r7, #24]
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	601a      	str	r2, [r3, #0]
}
 8018582:	3720      	adds	r7, #32
 8018584:	46bd      	mov	sp, r7
 8018586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801858a:	bf00      	nop
 801858c:	41e00000 	.word	0x41e00000
 8018590:	80000001 	.word	0x80000001

08018594 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8018594:	b580      	push	{r7, lr}
 8018596:	b082      	sub	sp, #8
 8018598:	af00      	add	r7, sp, #0
 801859a:	ed87 0b00 	vstr	d0, [r7]
 801859e:	ed97 0b00 	vldr	d0, [r7]
 80185a2:	f003 f939 	bl	801b818 <round>
 80185a6:	eeb0 7a40 	vmov.f32	s14, s0
 80185aa:	eef0 7a60 	vmov.f32	s15, s1
 80185ae:	eeb0 0a47 	vmov.f32	s0, s14
 80185b2:	eef0 0a67 	vmov.f32	s1, s15
 80185b6:	3708      	adds	r7, #8
 80185b8:	46bd      	mov	sp, r7
 80185ba:	bd80      	pop	{r7, pc}

080185bc <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 80185bc:	b580      	push	{r7, lr}
 80185be:	b082      	sub	sp, #8
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80185c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80185ca:	f7e9 fadf 	bl	8001b8c <_ZSt5roundf>
 80185ce:	eef0 7a40 	vmov.f32	s15, s0
 80185d2:	eeb0 0a67 	vmov.f32	s0, s15
 80185d6:	3708      	adds	r7, #8
 80185d8:	46bd      	mov	sp, r7
 80185da:	bd80      	pop	{r7, pc}

080185dc <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 80185dc:	b480      	push	{r7}
 80185de:	b083      	sub	sp, #12
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	ed87 0b00 	vstr	d0, [r7]
 80185e6:	683a      	ldr	r2, [r7, #0]
 80185e8:	6879      	ldr	r1, [r7, #4]
 80185ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80185ee:	ec43 2b17 	vmov	d7, r2, r3
 80185f2:	eeb0 0a47 	vmov.f32	s0, s14
 80185f6:	eef0 0a67 	vmov.f32	s1, s15
 80185fa:	370c      	adds	r7, #12
 80185fc:	46bd      	mov	sp, r7
 80185fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018602:	4770      	bx	lr

08018604 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8018604:	b480      	push	{r7}
 8018606:	af00      	add	r7, sp, #0
 8018608:	4b02      	ldr	r3, [pc, #8]	; (8018614 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801860a:	4618      	mov	r0, r3
 801860c:	46bd      	mov	sp, r7
 801860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018612:	4770      	bx	lr
 8018614:	ffff8000 	.word	0xffff8000

08018618 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8018618:	b480      	push	{r7}
 801861a:	af00      	add	r7, sp, #0
 801861c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018620:	4618      	mov	r0, r3
 8018622:	46bd      	mov	sp, r7
 8018624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018628:	4770      	bx	lr

0801862a <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 801862a:	b480      	push	{r7}
 801862c:	af00      	add	r7, sp, #0
 801862e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8018632:	4618      	mov	r0, r3
 8018634:	46bd      	mov	sp, r7
 8018636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863a:	4770      	bx	lr

0801863c <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 801863c:	b480      	push	{r7}
 801863e:	af00      	add	r7, sp, #0
 8018640:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8018644:	4618      	mov	r0, r3
 8018646:	46bd      	mov	sp, r7
 8018648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801864c:	4770      	bx	lr

0801864e <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 801864e:	b480      	push	{r7}
 8018650:	af00      	add	r7, sp, #0
 8018652:	237f      	movs	r3, #127	; 0x7f
 8018654:	4618      	mov	r0, r3
 8018656:	46bd      	mov	sp, r7
 8018658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865c:	4770      	bx	lr

0801865e <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801865e:	b480      	push	{r7}
 8018660:	af00      	add	r7, sp, #0
 8018662:	2300      	movs	r3, #0
 8018664:	4618      	mov	r0, r3
 8018666:	46bd      	mov	sp, r7
 8018668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801866c:	4770      	bx	lr

0801866e <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801866e:	b480      	push	{r7}
 8018670:	af00      	add	r7, sp, #0
 8018672:	23ff      	movs	r3, #255	; 0xff
 8018674:	4618      	mov	r0, r3
 8018676:	46bd      	mov	sp, r7
 8018678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867c:	4770      	bx	lr

0801867e <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 801867e:	b480      	push	{r7}
 8018680:	b083      	sub	sp, #12
 8018682:	af00      	add	r7, sp, #0
 8018684:	6078      	str	r0, [r7, #4]
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	689b      	ldr	r3, [r3, #8]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	4618      	mov	r0, r3
 801868e:	370c      	adds	r7, #12
 8018690:	46bd      	mov	sp, r7
 8018692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018696:	4770      	bx	lr

08018698 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8018698:	b5b0      	push	{r4, r5, r7, lr}
 801869a:	b08e      	sub	sp, #56	; 0x38
 801869c:	af02      	add	r7, sp, #8
 801869e:	60f8      	str	r0, [r7, #12]
 80186a0:	60b9      	str	r1, [r7, #8]
 80186a2:	607a      	str	r2, [r7, #4]
 80186a4:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80186a6:	68bb      	ldr	r3, [r7, #8]
 80186a8:	68db      	ldr	r3, [r3, #12]
 80186aa:	4618      	mov	r0, r3
 80186ac:	f7e7 ff5c 	bl	8000568 <__aeabi_f2d>
 80186b0:	4604      	mov	r4, r0
 80186b2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	68db      	ldr	r3, [r3, #12]
 80186b8:	4618      	mov	r0, r3
 80186ba:	f7e7 ff55 	bl	8000568 <__aeabi_f2d>
 80186be:	4602      	mov	r2, r0
 80186c0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80186c2:	4620      	mov	r0, r4
 80186c4:	4629      	mov	r1, r5
 80186c6:	f7e7 ffa7 	bl	8000618 <__aeabi_dmul>
 80186ca:	4602      	mov	r2, r0
 80186cc:	460b      	mov	r3, r1
 80186ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 80186d2:	683b      	ldr	r3, [r7, #0]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d04b      	beq.n	8018770 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80186d8:	683b      	ldr	r3, [r7, #0]
 80186da:	68db      	ldr	r3, [r3, #12]
 80186dc:	4618      	mov	r0, r3
 80186de:	f7e7 ff43 	bl	8000568 <__aeabi_f2d>
 80186e2:	4602      	mov	r2, r0
 80186e4:	460b      	mov	r3, r1
 80186e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80186ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80186ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80186f2:	f7e7 fdd9 	bl	80002a8 <__aeabi_dsub>
 80186f6:	4602      	mov	r2, r0
 80186f8:	460b      	mov	r3, r1
 80186fa:	ec43 2b17 	vmov	d7, r2, r3
 80186fe:	eeb0 0a47 	vmov.f32	s0, s14
 8018702:	eef0 0a67 	vmov.f32	s1, s15
 8018706:	f7ff ff69 	bl	80185dc <_ZSt3absd>
 801870a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 801870e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018710:	68db      	ldr	r3, [r3, #12]
 8018712:	4618      	mov	r0, r3
 8018714:	f7e7 ff28 	bl	8000568 <__aeabi_f2d>
 8018718:	4602      	mov	r2, r0
 801871a:	460b      	mov	r3, r1
 801871c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8018720:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018724:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8018728:	f7e8 f8a0 	bl	800086c <__aeabi_ddiv>
 801872c:	4602      	mov	r2, r0
 801872e:	460b      	mov	r3, r1
 8018730:	4610      	mov	r0, r2
 8018732:	4619      	mov	r1, r3
 8018734:	2301      	movs	r3, #1
 8018736:	461c      	mov	r4, r3
 8018738:	a318      	add	r3, pc, #96	; (adr r3, 801879c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 801873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801873e:	f7e8 f9e7 	bl	8000b10 <__aeabi_dcmple>
 8018742:	4603      	mov	r3, r0
 8018744:	2b00      	cmp	r3, #0
 8018746:	d101      	bne.n	801874c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8018748:	2300      	movs	r3, #0
 801874a:	461c      	mov	r4, r3
 801874c:	b2e3      	uxtb	r3, r4
 801874e:	f083 0301 	eor.w	r3, r3, #1
 8018752:	b2db      	uxtb	r3, r3
 8018754:	2b00      	cmp	r3, #0
 8018756:	d00b      	beq.n	8018770 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	691c      	ldr	r4, [r3, #16]
 801875c:	4b0c      	ldr	r3, [pc, #48]	; (8018790 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 801875e:	9300      	str	r3, [sp, #0]
 8018760:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8018764:	4a0b      	ldr	r2, [pc, #44]	; (8018794 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8018766:	490c      	ldr	r1, [pc, #48]	; (8018798 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8018768:	68f8      	ldr	r0, [r7, #12]
 801876a:	47a0      	blx	r4
 801876c:	2301      	movs	r3, #1
 801876e:	e009      	b.n	8018784 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8018770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018772:	9300      	str	r3, [sp, #0]
 8018774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018776:	687a      	ldr	r2, [r7, #4]
 8018778:	68b9      	ldr	r1, [r7, #8]
 801877a:	68f8      	ldr	r0, [r7, #12]
 801877c:	f000 f812 	bl	80187a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8018780:	4603      	mov	r3, r0
                                          multiplier);
 8018782:	bf00      	nop
}
 8018784:	4618      	mov	r0, r3
 8018786:	3730      	adds	r7, #48	; 0x30
 8018788:	46bd      	mov	sp, r7
 801878a:	bdb0      	pop	{r4, r5, r7, pc}
 801878c:	f3af 8000 	nop.w
 8018790:	080239bc 	.word	0x080239bc
 8018794:	08023790 	.word	0x08023790
 8018798:	08023888 	.word	0x08023888
 801879c:	47ae147b 	.word	0x47ae147b
 80187a0:	3f947ae1 	.word	0x3f947ae1

080187a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80187a4:	b590      	push	{r4, r7, lr}
 80187a6:	b089      	sub	sp, #36	; 0x24
 80187a8:	af02      	add	r7, sp, #8
 80187aa:	60f8      	str	r0, [r7, #12]
 80187ac:	60b9      	str	r1, [r7, #8]
 80187ae:	607a      	str	r2, [r7, #4]
 80187b0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80187b2:	68bb      	ldr	r3, [r7, #8]
 80187b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80187be:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 80187c2:	ee17 0a90 	vmov	r0, s15
 80187c6:	f7e7 fecf 	bl	8000568 <__aeabi_f2d>
 80187ca:	4602      	mov	r2, r0
 80187cc:	460b      	mov	r3, r1
 80187ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80187d2:	2301      	movs	r3, #1
 80187d4:	461c      	mov	r4, r3
 80187d6:	f04f 0200 	mov.w	r2, #0
 80187da:	f04f 0300 	mov.w	r3, #0
 80187de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80187e2:	f7e8 f99f 	bl	8000b24 <__aeabi_dcmpge>
 80187e6:	4603      	mov	r3, r0
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d101      	bne.n	80187f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 80187ec:	2300      	movs	r3, #0
 80187ee:	461c      	mov	r4, r3
 80187f0:	b2e3      	uxtb	r3, r4
 80187f2:	f083 0301 	eor.w	r3, r3, #1
 80187f6:	b2db      	uxtb	r3, r3
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d00b      	beq.n	8018814 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	691c      	ldr	r4, [r3, #16]
 8018800:	4b0f      	ldr	r3, [pc, #60]	; (8018840 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8018802:	9300      	str	r3, [sp, #0]
 8018804:	f240 1349 	movw	r3, #329	; 0x149
 8018808:	4a0e      	ldr	r2, [pc, #56]	; (8018844 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 801880a:	490f      	ldr	r1, [pc, #60]	; (8018848 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 801880c:	68f8      	ldr	r0, [r7, #12]
 801880e:	47a0      	blx	r4
 8018810:	2301      	movs	r3, #1
 8018812:	e010      	b.n	8018836 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	68db      	ldr	r3, [r3, #12]
 8018818:	4618      	mov	r0, r3
 801881a:	f7e7 fea5 	bl	8000568 <__aeabi_f2d>
 801881e:	4602      	mov	r2, r0
 8018820:	460b      	mov	r3, r1
 8018822:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8018826:	f7e8 f821 	bl	800086c <__aeabi_ddiv>
 801882a:	4602      	mov	r2, r0
 801882c:	460b      	mov	r3, r1
 801882e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018830:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8018834:	2300      	movs	r3, #0
}
 8018836:	4618      	mov	r0, r3
 8018838:	371c      	adds	r7, #28
 801883a:	46bd      	mov	sp, r7
 801883c:	bd90      	pop	{r4, r7, pc}
 801883e:	bf00      	nop
 8018840:	080239e0 	.word	0x080239e0
 8018844:	08023790 	.word	0x08023790
 8018848:	08023888 	.word	0x08023888

0801884c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 801884c:	b590      	push	{r4, r7, lr}
 801884e:	b08b      	sub	sp, #44	; 0x2c
 8018850:	af02      	add	r7, sp, #8
 8018852:	6178      	str	r0, [r7, #20]
 8018854:	ed87 0a04 	vstr	s0, [r7, #16]
 8018858:	60f9      	str	r1, [r7, #12]
 801885a:	edc7 0a02 	vstr	s1, [r7, #8]
 801885e:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8018860:	ed97 7a02 	vldr	s14, [r7, #8]
 8018864:	edd7 7a04 	vldr	s15, [r7, #16]
 8018868:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801886c:	eeb0 0a66 	vmov.f32	s0, s13
 8018870:	f7ff fea4 	bl	80185bc <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8018874:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8018878:	f7ff fed7 	bl	801862a <_ZNSt14numeric_limitsIlE3minEv>
 801887c:	ee07 0a90 	vmov	s15, r0
 8018880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018884:	ed97 7a07 	vldr	s14, [r7, #28]
 8018888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801888c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018890:	db0e      	blt.n	80188b0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8018892:	f7ff fdea 	bl	801846a <_ZNSt14numeric_limitsIlE3maxEv>
 8018896:	ee07 0a90 	vmov	s15, r0
 801889a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 801889e:	ed97 7a07 	vldr	s14, [r7, #28]
 80188a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188aa:	d801      	bhi.n	80188b0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 80188ac:	2301      	movs	r3, #1
 80188ae:	e000      	b.n	80188b2 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 80188b0:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 80188b2:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 80188b4:	7efb      	ldrb	r3, [r7, #27]
 80188b6:	f083 0301 	eor.w	r3, r3, #1
 80188ba:	b2db      	uxtb	r3, r3
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d00b      	beq.n	80188d8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 80188c0:	697b      	ldr	r3, [r7, #20]
 80188c2:	691c      	ldr	r4, [r3, #16]
 80188c4:	4b0c      	ldr	r3, [pc, #48]	; (80188f8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 80188c6:	9300      	str	r3, [sp, #0]
 80188c8:	f240 1357 	movw	r3, #343	; 0x157
 80188cc:	4a0b      	ldr	r2, [pc, #44]	; (80188fc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 80188ce:	490c      	ldr	r1, [pc, #48]	; (8018900 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 80188d0:	6978      	ldr	r0, [r7, #20]
 80188d2:	47a0      	blx	r4
 80188d4:	2301      	movs	r3, #1
 80188d6:	e00a      	b.n	80188ee <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 80188d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80188dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80188e0:	ee17 2a90 	vmov	r2, s15
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	441a      	add	r2, r3
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80188ec:	2300      	movs	r3, #0
}
 80188ee:	4618      	mov	r0, r3
 80188f0:	3724      	adds	r7, #36	; 0x24
 80188f2:	46bd      	mov	sp, r7
 80188f4:	bd90      	pop	{r4, r7, pc}
 80188f6:	bf00      	nop
 80188f8:	080239fc 	.word	0x080239fc
 80188fc:	08023790 	.word	0x08023790
 8018900:	08023888 	.word	0x08023888

08018904 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 8018904:	b580      	push	{r7, lr}
 8018906:	b08a      	sub	sp, #40	; 0x28
 8018908:	af00      	add	r7, sp, #0
 801890a:	60f8      	str	r0, [r7, #12]
 801890c:	607a      	str	r2, [r7, #4]
 801890e:	603b      	str	r3, [r7, #0]
 8018910:	460b      	mov	r3, r1
 8018912:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 8018914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018916:	68db      	ldr	r3, [r3, #12]
 8018918:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 801891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801891c:	691b      	ldr	r3, [r3, #16]
 801891e:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8018920:	7afb      	ldrb	r3, [r7, #11]
 8018922:	2b01      	cmp	r3, #1
 8018924:	d120      	bne.n	8018968 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 8018926:	f107 0314 	add.w	r3, r7, #20
 801892a:	461a      	mov	r2, r3
 801892c:	eddf 0a52 	vldr	s1, [pc, #328]	; 8018a78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8018930:	6a39      	ldr	r1, [r7, #32]
 8018932:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8018936:	68f8      	ldr	r0, [r7, #12]
 8018938:	f7ff ff88 	bl	801884c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 801893c:	4603      	mov	r3, r0
 801893e:	76fb      	strb	r3, [r7, #27]
 8018940:	7efb      	ldrb	r3, [r7, #27]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d001      	beq.n	801894a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 8018946:	7efb      	ldrb	r3, [r7, #27]
 8018948:	e091      	b.n	8018a6e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 801894a:	f107 0214 	add.w	r2, r7, #20
 801894e:	1d3b      	adds	r3, r7, #4
 8018950:	4611      	mov	r1, r2
 8018952:	4618      	mov	r0, r3
 8018954:	f7f2 f984 	bl	800ac60 <_ZSt3maxIlERKT_S2_S2_>
 8018958:	4603      	mov	r3, r0
 801895a:	681a      	ldr	r2, [r3, #0]
 801895c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801895e:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8018960:	683a      	ldr	r2, [r7, #0]
 8018962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018964:	601a      	str	r2, [r3, #0]
 8018966:	e081      	b.n	8018a6c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8018968:	7afb      	ldrb	r3, [r7, #11]
 801896a:	2b03      	cmp	r3, #3
 801896c:	d13a      	bne.n	80189e4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 801896e:	f107 0314 	add.w	r3, r7, #20
 8018972:	461a      	mov	r2, r3
 8018974:	eddf 0a40 	vldr	s1, [pc, #256]	; 8018a78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8018978:	6a39      	ldr	r1, [r7, #32]
 801897a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 801897e:	68f8      	ldr	r0, [r7, #12]
 8018980:	f7ff ff64 	bl	801884c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8018984:	4603      	mov	r3, r0
 8018986:	777b      	strb	r3, [r7, #29]
 8018988:	7f7b      	ldrb	r3, [r7, #29]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d001      	beq.n	8018992 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 801898e:	7f7b      	ldrb	r3, [r7, #29]
 8018990:	e06d      	b.n	8018a6e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8018992:	f107 0214 	add.w	r2, r7, #20
 8018996:	1d3b      	adds	r3, r7, #4
 8018998:	4611      	mov	r1, r2
 801899a:	4618      	mov	r0, r3
 801899c:	f7f2 f960 	bl	800ac60 <_ZSt3maxIlERKT_S2_S2_>
 80189a0:	4603      	mov	r3, r0
 80189a2:	681a      	ldr	r2, [r3, #0]
 80189a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189a6:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 80189a8:	f107 0314 	add.w	r3, r7, #20
 80189ac:	461a      	mov	r2, r3
 80189ae:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80189b2:	6a39      	ldr	r1, [r7, #32]
 80189b4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80189b8:	68f8      	ldr	r0, [r7, #12]
 80189ba:	f7ff ff47 	bl	801884c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80189be:	4603      	mov	r3, r0
 80189c0:	773b      	strb	r3, [r7, #28]
 80189c2:	7f3b      	ldrb	r3, [r7, #28]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d001      	beq.n	80189cc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 80189c8:	7f3b      	ldrb	r3, [r7, #28]
 80189ca:	e050      	b.n	8018a6e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 80189cc:	f107 0214 	add.w	r2, r7, #20
 80189d0:	463b      	mov	r3, r7
 80189d2:	4611      	mov	r1, r2
 80189d4:	4618      	mov	r0, r3
 80189d6:	f7f2 f92f 	bl	800ac38 <_ZSt3minIlERKT_S2_S2_>
 80189da:	4603      	mov	r3, r0
 80189dc:	681a      	ldr	r2, [r3, #0]
 80189de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189e0:	601a      	str	r2, [r3, #0]
 80189e2:	e043      	b.n	8018a6c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 80189e4:	7afb      	ldrb	r3, [r7, #11]
 80189e6:	2b02      	cmp	r3, #2
 80189e8:	d13a      	bne.n	8018a60 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 80189ea:	f107 0314 	add.w	r3, r7, #20
 80189ee:	461a      	mov	r2, r3
 80189f0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80189f4:	6a39      	ldr	r1, [r7, #32]
 80189f6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80189fa:	68f8      	ldr	r0, [r7, #12]
 80189fc:	f7ff ff26 	bl	801884c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8018a00:	4603      	mov	r3, r0
 8018a02:	77fb      	strb	r3, [r7, #31]
 8018a04:	7ffb      	ldrb	r3, [r7, #31]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d001      	beq.n	8018a0e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 8018a0a:	7ffb      	ldrb	r3, [r7, #31]
 8018a0c:	e02f      	b.n	8018a6e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8018a0e:	f107 0214 	add.w	r2, r7, #20
 8018a12:	1d3b      	adds	r3, r7, #4
 8018a14:	4611      	mov	r1, r2
 8018a16:	4618      	mov	r0, r3
 8018a18:	f7f2 f922 	bl	800ac60 <_ZSt3maxIlERKT_S2_S2_>
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	681a      	ldr	r2, [r3, #0]
 8018a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a22:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8018a24:	f107 0314 	add.w	r3, r7, #20
 8018a28:	461a      	mov	r2, r3
 8018a2a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8018a2e:	6a39      	ldr	r1, [r7, #32]
 8018a30:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8018a34:	68f8      	ldr	r0, [r7, #12]
 8018a36:	f7ff ff09 	bl	801884c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	77bb      	strb	r3, [r7, #30]
 8018a3e:	7fbb      	ldrb	r3, [r7, #30]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d001      	beq.n	8018a48 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 8018a44:	7fbb      	ldrb	r3, [r7, #30]
 8018a46:	e012      	b.n	8018a6e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8018a48:	f107 0214 	add.w	r2, r7, #20
 8018a4c:	463b      	mov	r3, r7
 8018a4e:	4611      	mov	r1, r2
 8018a50:	4618      	mov	r0, r3
 8018a52:	f7f2 f8f1 	bl	800ac38 <_ZSt3minIlERKT_S2_S2_>
 8018a56:	4603      	mov	r3, r0
 8018a58:	681a      	ldr	r2, [r3, #0]
 8018a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a5c:	601a      	str	r2, [r3, #0]
 8018a5e:	e005      	b.n	8018a6c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8018a60:	687a      	ldr	r2, [r7, #4]
 8018a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a64:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8018a66:	683a      	ldr	r2, [r7, #0]
 8018a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a6a:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 8018a6c:	2300      	movs	r3, #0
}
 8018a6e:	4618      	mov	r0, r3
 8018a70:	3728      	adds	r7, #40	; 0x28
 8018a72:	46bd      	mov	sp, r7
 8018a74:	bd80      	pop	{r7, pc}
 8018a76:	bf00      	nop
 8018a78:	00000000 	.word	0x00000000

08018a7c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8018a7c:	b590      	push	{r4, r7, lr}
 8018a7e:	b08b      	sub	sp, #44	; 0x2c
 8018a80:	af04      	add	r7, sp, #16
 8018a82:	60f8      	str	r0, [r7, #12]
 8018a84:	607a      	str	r2, [r7, #4]
 8018a86:	603b      	str	r3, [r7, #0]
 8018a88:	460b      	mov	r3, r1
 8018a8a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8018a90:	2300      	movs	r3, #0
 8018a92:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	2b03      	cmp	r3, #3
 8018a9a:	d108      	bne.n	8018aae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8018a9c:	f7ff fddf 	bl	801865e <_ZNSt14numeric_limitsIhE3minEv>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8018aa4:	f7ff fde3 	bl	801866e <_ZNSt14numeric_limitsIhE3maxEv>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	613b      	str	r3, [r7, #16]
 8018aac:	e025      	b.n	8018afa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	781b      	ldrb	r3, [r3, #0]
 8018ab2:	2b09      	cmp	r3, #9
 8018ab4:	d108      	bne.n	8018ac8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8018ab6:	f7ff fdc1 	bl	801863c <_ZNSt14numeric_limitsIaE3minEv>
 8018aba:	4603      	mov	r3, r0
 8018abc:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8018abe:	f7ff fdc6 	bl	801864e <_ZNSt14numeric_limitsIaE3maxEv>
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	613b      	str	r3, [r7, #16]
 8018ac6:	e018      	b.n	8018afa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	781b      	ldrb	r3, [r3, #0]
 8018acc:	2b07      	cmp	r3, #7
 8018ace:	d108      	bne.n	8018ae2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8018ad0:	f7ff fd98 	bl	8018604 <_ZNSt14numeric_limitsIsE3minEv>
 8018ad4:	4603      	mov	r3, r0
 8018ad6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8018ad8:	f7ff fd9e 	bl	8018618 <_ZNSt14numeric_limitsIsE3maxEv>
 8018adc:	4603      	mov	r3, r0
 8018ade:	613b      	str	r3, [r7, #16]
 8018ae0:	e00b      	b.n	8018afa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	691c      	ldr	r4, [r3, #16]
 8018ae6:	4b0e      	ldr	r3, [pc, #56]	; (8018b20 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8018ae8:	9300      	str	r3, [sp, #0]
 8018aea:	f240 138f 	movw	r3, #399	; 0x18f
 8018aee:	4a0d      	ldr	r2, [pc, #52]	; (8018b24 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8018af0:	490d      	ldr	r1, [pc, #52]	; (8018b28 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 8018af2:	68f8      	ldr	r0, [r7, #12]
 8018af4:	47a0      	blx	r4
 8018af6:	2301      	movs	r3, #1
 8018af8:	e00d      	b.n	8018b16 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 8018afa:	7af9      	ldrb	r1, [r7, #11]
 8018afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018afe:	9302      	str	r3, [sp, #8]
 8018b00:	683b      	ldr	r3, [r7, #0]
 8018b02:	9301      	str	r3, [sp, #4]
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	9300      	str	r3, [sp, #0]
 8018b08:	693b      	ldr	r3, [r7, #16]
 8018b0a:	697a      	ldr	r2, [r7, #20]
 8018b0c:	68f8      	ldr	r0, [r7, #12]
 8018b0e:	f7ff fef9 	bl	8018904 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 8018b12:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 8018b14:	bf00      	nop
}
 8018b16:	4618      	mov	r0, r3
 8018b18:	371c      	adds	r7, #28
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	bd90      	pop	{r4, r7, pc}
 8018b1e:	bf00      	nop
 8018b20:	08023a24 	.word	0x08023a24
 8018b24:	08023790 	.word	0x08023790
 8018b28:	08023888 	.word	0x08023888

08018b2c <_ZN6tflite12RuntimeShapeC1Ev>:
  // RuntimeShape in TFLM supports up to 5 dimensions.
  // The name kMaxSmallSize comes from the same file of the upstream
  // tensorflow lite repo and need to be kept the same for max reuse.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape() : size_(0) {}
 8018b2c:	b480      	push	{r7}
 8018b2e:	b083      	sub	sp, #12
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	6078      	str	r0, [r7, #4]
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	2200      	movs	r2, #0
 8018b38:	601a      	str	r2, [r3, #0]
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	370c      	adds	r7, #12
 8018b40:	46bd      	mov	sp, r7
 8018b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b46:	4770      	bx	lr

08018b48 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b084      	sub	sp, #16
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	60f8      	str	r0, [r7, #12]
 8018b50:	60b9      	str	r1, [r7, #8]
 8018b52:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	68ba      	ldr	r2, [r7, #8]
 8018b58:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8018b5a:	687a      	ldr	r2, [r7, #4]
 8018b5c:	68b9      	ldr	r1, [r7, #8]
 8018b5e:	68f8      	ldr	r0, [r7, #12]
 8018b60:	f000 f828 	bl	8018bb4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	4618      	mov	r0, r3
 8018b68:	3710      	adds	r7, #16
 8018b6a:	46bd      	mov	sp, r7
 8018b6c:	bd80      	pop	{r7, pc}

08018b6e <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 8018b6e:	b480      	push	{r7}
 8018b70:	b083      	sub	sp, #12
 8018b72:	af00      	add	r7, sp, #0
 8018b74:	6078      	str	r0, [r7, #4]
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	4618      	mov	r0, r3
 8018b7a:	370c      	adds	r7, #12
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b82:	4770      	bx	lr

08018b84 <_ZN6tflite12RuntimeShape8DimsDataEv>:

  static RuntimeShape ExtendedShape(int new_shape_size,
                                    const RuntimeShape& shape) {
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
 8018b84:	b480      	push	{r7}
 8018b86:	b083      	sub	sp, #12
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	3304      	adds	r3, #4
 8018b90:	4618      	mov	r0, r3
 8018b92:	370c      	adds	r7, #12
 8018b94:	46bd      	mov	sp, r7
 8018b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b9a:	4770      	bx	lr

08018b9c <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  const int32_t* DimsData() const { return dims_; }
 8018b9c:	b480      	push	{r7}
 8018b9e:	b083      	sub	sp, #12
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	3304      	adds	r3, #4
 8018ba8:	4618      	mov	r0, r3
 8018baa:	370c      	adds	r7, #12
 8018bac:	46bd      	mov	sp, r7
 8018bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bb2:	4770      	bx	lr

08018bb4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b086      	sub	sp, #24
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	60f8      	str	r0, [r7, #12]
 8018bbc:	60b9      	str	r1, [r7, #8]
 8018bbe:	607a      	str	r2, [r7, #4]
    size_ = dimensions_count;
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	68ba      	ldr	r2, [r7, #8]
 8018bc4:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 8018bc6:	68f8      	ldr	r0, [r7, #12]
 8018bc8:	f7ff ffdc 	bl	8018b84 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8018bcc:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8018bce:	68bb      	ldr	r3, [r7, #8]
 8018bd0:	009b      	lsls	r3, r3, #2
 8018bd2:	461a      	mov	r2, r3
 8018bd4:	6879      	ldr	r1, [r7, #4]
 8018bd6:	6978      	ldr	r0, [r7, #20]
 8018bd8:	f006 ff68 	bl	801faac <memcpy>
  }
 8018bdc:	bf00      	nop
 8018bde:	3718      	adds	r7, #24
 8018be0:	46bd      	mov	sp, r7
 8018be2:	bd80      	pop	{r7, pc}

08018be4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b086      	sub	sp, #24
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8018bec:	2301      	movs	r3, #1
 8018bee:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8018bf0:	6878      	ldr	r0, [r7, #4]
 8018bf2:	f7ff ffd3 	bl	8018b9c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8018bf6:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	613b      	str	r3, [r7, #16]
 8018bfc:	e00b      	b.n	8018c16 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 8018bfe:	693b      	ldr	r3, [r7, #16]
 8018c00:	009b      	lsls	r3, r3, #2
 8018c02:	68fa      	ldr	r2, [r7, #12]
 8018c04:	4413      	add	r3, r2
 8018c06:	681a      	ldr	r2, [r3, #0]
 8018c08:	697b      	ldr	r3, [r7, #20]
 8018c0a:	fb02 f303 	mul.w	r3, r2, r3
 8018c0e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8018c10:	693b      	ldr	r3, [r7, #16]
 8018c12:	3301      	adds	r3, #1
 8018c14:	613b      	str	r3, [r7, #16]
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	693a      	ldr	r2, [r7, #16]
 8018c1c:	429a      	cmp	r2, r3
 8018c1e:	dbee      	blt.n	8018bfe <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 8018c20:	697b      	ldr	r3, [r7, #20]
  }
 8018c22:	4618      	mov	r0, r3
 8018c24:	3718      	adds	r7, #24
 8018c26:	46bd      	mov	sp, r7
 8018c28:	bd80      	pop	{r7, pc}

08018c2a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8018c2a:	b580      	push	{r7, lr}
 8018c2c:	b086      	sub	sp, #24
 8018c2e:	af00      	add	r7, sp, #0
 8018c30:	6078      	str	r0, [r7, #4]
 8018c32:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8018c34:	683b      	ldr	r3, [r7, #0]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d103      	bne.n	8018c42 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8018c3a:	6878      	ldr	r0, [r7, #4]
 8018c3c:	f7ff ff76 	bl	8018b2c <_ZN6tflite12RuntimeShapeC1Ev>
 8018c40:	e00d      	b.n	8018c5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8018c42:	683b      	ldr	r3, [r7, #0]
 8018c44:	689b      	ldr	r3, [r3, #8]
 8018c46:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8018c48:	697b      	ldr	r3, [r7, #20]
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8018c4e:	697b      	ldr	r3, [r7, #20]
 8018c50:	3304      	adds	r3, #4
 8018c52:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8018c54:	68fa      	ldr	r2, [r7, #12]
 8018c56:	6939      	ldr	r1, [r7, #16]
 8018c58:	6878      	ldr	r0, [r7, #4]
 8018c5a:	f7ff ff75 	bl	8018b48 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8018c5e:	6878      	ldr	r0, [r7, #4]
 8018c60:	3718      	adds	r7, #24
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bd80      	pop	{r7, pc}

08018c66 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
 8018c66:	b480      	push	{r7}
 8018c68:	b083      	sub	sp, #12
 8018c6a:	af00      	add	r7, sp, #0
 8018c6c:	6078      	str	r0, [r7, #4]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d003      	beq.n	8018c7e <_ZN6tflite9NumInputsEPK10TfLiteNode+0x18>
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	e000      	b.n	8018c80 <_ZN6tflite9NumInputsEPK10TfLiteNode+0x1a>
 8018c7e:	2300      	movs	r3, #0
}
 8018c80:	4618      	mov	r0, r3
 8018c82:	370c      	adds	r7, #12
 8018c84:	46bd      	mov	sp, r7
 8018c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8a:	4770      	bx	lr

08018c8c <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) {
 8018c8c:	b480      	push	{r7}
 8018c8e:	b083      	sub	sp, #12
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	685b      	ldr	r3, [r3, #4]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d003      	beq.n	8018ca4 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x18>
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	685b      	ldr	r3, [r3, #4]
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	e000      	b.n	8018ca6 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x1a>
 8018ca4:	2300      	movs	r3, #0
}
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	370c      	adds	r7, #12
 8018caa:	46bd      	mov	sp, r7
 8018cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb0:	4770      	bx	lr

08018cb2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:
  int32_t DimensionsCount() const { return size_; }
 8018cb2:	b480      	push	{r7}
 8018cb4:	b083      	sub	sp, #12
 8018cb6:	af00      	add	r7, sp, #0
 8018cb8:	6078      	str	r0, [r7, #4]
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	370c      	adds	r7, #12
 8018cc2:	46bd      	mov	sp, r7
 8018cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc8:	4770      	bx	lr

08018cca <_ZN6tflite14AlignPointerUpEPhj>:
#include "edge-impulse-sdk/tensorflow/lite/micro/flatbuffer_conversions_bridge.h"
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8018cca:	b480      	push	{r7}
 8018ccc:	b085      	sub	sp, #20
 8018cce:	af00      	add	r7, sp, #0
 8018cd0:	6078      	str	r0, [r7, #4]
 8018cd2:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8018cd8:	683a      	ldr	r2, [r7, #0]
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	4413      	add	r3, r2
 8018cde:	1e5a      	subs	r2, r3, #1
 8018ce0:	683b      	ldr	r3, [r7, #0]
 8018ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8018ce6:	683a      	ldr	r2, [r7, #0]
 8018ce8:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8018cec:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8018cee:	68bb      	ldr	r3, [r7, #8]
}
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	3714      	adds	r7, #20
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfa:	4770      	bx	lr

08018cfc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
      bytes, MicroArenaBufferAlignment());
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b088      	sub	sp, #32
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	60f8      	str	r0, [r7, #12]
 8018d04:	60b9      	str	r1, [r7, #8]
 8018d06:	607a      	str	r2, [r7, #4]
 8018d08:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8018d0a:	68f8      	ldr	r0, [r7, #12]
 8018d0c:	f000 f854 	bl	8018db8 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8018d10:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8018d12:	2300      	movs	r3, #0
 8018d14:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8018d16:	2300      	movs	r3, #0
 8018d18:	61bb      	str	r3, [r7, #24]
 8018d1a:	e011      	b.n	8018d40 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8018d1c:	69ba      	ldr	r2, [r7, #24]
 8018d1e:	4613      	mov	r3, r2
 8018d20:	005b      	lsls	r3, r3, #1
 8018d22:	4413      	add	r3, r2
 8018d24:	009b      	lsls	r3, r3, #2
 8018d26:	461a      	mov	r2, r3
 8018d28:	697b      	ldr	r3, [r7, #20]
 8018d2a:	4413      	add	r3, r2
 8018d2c:	685b      	ldr	r3, [r3, #4]
 8018d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d32:	d102      	bne.n	8018d3a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 8018d34:	69fb      	ldr	r3, [r7, #28]
 8018d36:	3301      	adds	r3, #1
 8018d38:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8018d3a:	69bb      	ldr	r3, [r7, #24]
 8018d3c:	3301      	adds	r3, #1
 8018d3e:	61bb      	str	r3, [r7, #24]
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	699b      	ldr	r3, [r3, #24]
 8018d44:	69ba      	ldr	r2, [r7, #24]
 8018d46:	429a      	cmp	r2, r3
 8018d48:	d3e8      	bcc.n	8018d1c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x20>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8018d4a:	69fb      	ldr	r3, [r7, #28]
 8018d4c:	2b0b      	cmp	r3, #11
 8018d4e:	d905      	bls.n	8018d5c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x60>
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 8018d50:	4917      	ldr	r1, [pc, #92]	; (8018db0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb4>)
 8018d52:	4818      	ldr	r0, [pc, #96]	; (8018db4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb8>)
 8018d54:	f000 f83f 	bl	8018dd6 <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>
                kMaxScratchBuffersPerOp);
    return kTfLiteError;
 8018d58:	2301      	movs	r3, #1
 8018d5a:	e024      	b.n	8018da6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xaa>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	699a      	ldr	r2, [r3, #24]
 8018d60:	4613      	mov	r3, r2
 8018d62:	005b      	lsls	r3, r3, #1
 8018d64:	4413      	add	r3, r2
 8018d66:	009b      	lsls	r3, r3, #2
 8018d68:	461a      	mov	r2, r3
  internal::ScratchBufferRequest* current_request =
 8018d6a:	697b      	ldr	r3, [r7, #20]
 8018d6c:	4413      	add	r3, r2
 8018d6e:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8018d70:	693b      	ldr	r3, [r7, #16]
 8018d72:	461a      	mov	r2, r3
 8018d74:	2300      	movs	r3, #0
 8018d76:	6013      	str	r3, [r2, #0]
 8018d78:	6053      	str	r3, [r2, #4]
 8018d7a:	6093      	str	r3, [r2, #8]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8018d7c:	693b      	ldr	r3, [r7, #16]
 8018d7e:	68ba      	ldr	r2, [r7, #8]
 8018d80:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8018d82:	693b      	ldr	r3, [r7, #16]
 8018d84:	f04f 32ff 	mov.w	r2, #4294967295
 8018d88:	605a      	str	r2, [r3, #4]
  current_request->subgraph_idx = subgraph_idx;
 8018d8a:	693b      	ldr	r3, [r7, #16]
 8018d8c:	687a      	ldr	r2, [r7, #4]
 8018d8e:	609a      	str	r2, [r3, #8]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	699b      	ldr	r3, [r3, #24]
 8018d94:	461a      	mov	r2, r3
 8018d96:	683b      	ldr	r3, [r7, #0]
 8018d98:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	699b      	ldr	r3, [r3, #24]
 8018d9e:	1c5a      	adds	r2, r3, #1
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 8018da4:	2300      	movs	r3, #0
}
 8018da6:	4618      	mov	r0, r3
 8018da8:	3720      	adds	r7, #32
 8018daa:	46bd      	mov	sp, r7
 8018dac:	bd80      	pop	{r7, pc}
 8018dae:	bf00      	nop
 8018db0:	08025fb4 	.word	0x08025fb4
 8018db4:	08023c08 	.word	0x08023c08

08018db8 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:
  }

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b082      	sub	sp, #8
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	69db      	ldr	r3, [r3, #28]
 8018dc4:	2104      	movs	r1, #4
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7ff ff7f 	bl	8018cca <_ZN6tflite14AlignPointerUpEPhj>
 8018dcc:	4603      	mov	r3, r0
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}
 8018dce:	4618      	mov	r0, r3
 8018dd0:	3708      	adds	r7, #8
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	bd80      	pop	{r7, pc}

08018dd6 <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>:
namespace tflite {

// From
// https://stackoverflow.com/questions/23235910/variadic-unused-function-macro
template <typename... Args>
void Unused(Args&&... args) {
 8018dd6:	b480      	push	{r7}
 8018dd8:	b083      	sub	sp, #12
 8018dda:	af00      	add	r7, sp, #0
 8018ddc:	6078      	str	r0, [r7, #4]
 8018dde:	6039      	str	r1, [r7, #0]
  (void)(sizeof...(args));
}
 8018de0:	bf00      	nop
 8018de2:	370c      	adds	r7, #12
 8018de4:	46bd      	mov	sp, r7
 8018de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dea:	4770      	bx	lr

08018dec <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8018dec:	b480      	push	{r7}
 8018dee:	b083      	sub	sp, #12
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	695b      	ldr	r3, [r3, #20]
 8018df8:	4618      	mov	r0, r3
 8018dfa:	370c      	adds	r7, #12
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e02:	4770      	bx	lr

08018e04 <_ZN6tflite10MicroGraph14GetAllocationsEv>:
    current_subgraph_index_ = subgraph_idx;
  }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8018e04:	b480      	push	{r7}
 8018e06:	b083      	sub	sp, #12
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	691b      	ldr	r3, [r3, #16]
 8018e10:	4618      	mov	r0, r3
 8018e12:	370c      	adds	r7, #12
 8018e14:	46bd      	mov	sp, r7
 8018e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1a:	4770      	bx	lr

08018e1c <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
#include <cstdint>

#include "edge-impulse-sdk/tensorflow/lite/micro/micro_log.h"

namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
 8018e1c:	b480      	push	{r7}
 8018e1e:	b085      	sub	sp, #20
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	60f8      	str	r0, [r7, #12]
 8018e24:	60b9      	str	r1, [r7, #8]
 8018e26:	607a      	str	r2, [r7, #4]
 8018e28:	603b      	str	r3, [r7, #0]
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 8018e2a:	4a0c      	ldr	r2, [pc, #48]	; (8018e5c <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x40>)
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	601a      	str	r2, [r3, #0]
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	68ba      	ldr	r2, [r7, #8]
 8018e34:	605a      	str	r2, [r3, #4]
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	683a      	ldr	r2, [r7, #0]
 8018e3a:	609a      	str	r2, [r3, #8]
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	687a      	ldr	r2, [r7, #4]
 8018e40:	60da      	str	r2, [r3, #12]
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	2200      	movs	r2, #0
 8018e46:	611a      	str	r2, [r3, #16]
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	2200      	movs	r2, #0
 8018e4c:	615a      	str	r2, [r3, #20]
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	4618      	mov	r0, r3
 8018e52:	3714      	adds	r7, #20
 8018e54:	46bd      	mov	sp, r7
 8018e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e5a:	4770      	bx	lr
 8018e5c:	08025fc0 	.word	0x08025fc0

08018e60 <_ZN6tflite12MicroContextD1Ev>:

MicroContext::~MicroContext() {}
 8018e60:	b480      	push	{r7}
 8018e62:	b083      	sub	sp, #12
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	6078      	str	r0, [r7, #4]
 8018e68:	4a04      	ldr	r2, [pc, #16]	; (8018e7c <_ZN6tflite12MicroContextD1Ev+0x1c>)
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	601a      	str	r2, [r3, #0]
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	4618      	mov	r0, r3
 8018e72:	370c      	adds	r7, #12
 8018e74:	46bd      	mov	sp, r7
 8018e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7a:	4770      	bx	lr
 8018e7c:	08025fc0 	.word	0x08025fc0

08018e80 <_ZN6tflite12MicroContextD0Ev>:
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b082      	sub	sp, #8
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
 8018e88:	6878      	ldr	r0, [r7, #4]
 8018e8a:	f7ff ffe9 	bl	8018e60 <_ZN6tflite12MicroContextD1Ev>
 8018e8e:	2118      	movs	r1, #24
 8018e90:	6878      	ldr	r0, [r7, #4]
 8018e92:	f002 f863 	bl	801af5c <_ZdlPvj>
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	4618      	mov	r0, r3
 8018e9a:	3708      	adds	r7, #8
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd80      	pop	{r7, pc}

08018ea0 <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b082      	sub	sp, #8
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
 8018ea8:	6039      	str	r1, [r7, #0]
  return allocator_.AllocatePersistentBuffer(bytes);
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	685a      	ldr	r2, [r3, #4]
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	3314      	adds	r3, #20
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	6839      	ldr	r1, [r7, #0]
 8018eba:	4610      	mov	r0, r2
 8018ebc:	4798      	blx	r3
 8018ebe:	4603      	mov	r3, r0
}
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	3708      	adds	r7, #8
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bd80      	pop	{r7, pc}

08018ec8 <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroContext::RequestScratchBufferInArena(size_t bytes,
                                                       int* buffer_idx) {
 8018ec8:	b590      	push	{r4, r7, lr}
 8018eca:	b085      	sub	sp, #20
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	60f8      	str	r0, [r7, #12]
 8018ed0:	60b9      	str	r1, [r7, #8]
 8018ed2:	607a      	str	r2, [r7, #4]
  return allocator_.RequestScratchBufferInArena(
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	685c      	ldr	r4, [r3, #4]
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	689b      	ldr	r3, [r3, #8]
  return allocator_.RequestScratchBufferInArena(
 8018edc:	4618      	mov	r0, r3
 8018ede:	f7ff ff85 	bl	8018dec <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8018ee2:	4602      	mov	r2, r0
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	68b9      	ldr	r1, [r7, #8]
 8018ee8:	4620      	mov	r0, r4
 8018eea:	f7ff ff07 	bl	8018cfc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 8018eee:	4603      	mov	r3, r0
}
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	3714      	adds	r7, #20
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bd90      	pop	{r4, r7, pc}

08018ef8 <_ZN6tflite12MicroContext16GetScratchBufferEi>:

void* MicroContext::GetScratchBuffer(int buffer_idx) {
 8018ef8:	b480      	push	{r7}
 8018efa:	b085      	sub	sp, #20
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
 8018f00:	6039      	str	r1, [r7, #0]
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	691a      	ldr	r2, [r3, #16]
 8018f06:	683b      	ldr	r3, [r7, #0]
 8018f08:	009b      	lsls	r3, r3, #2
 8018f0a:	4413      	add	r3, r2
 8018f0c:	60fb      	str	r3, [r7, #12]
  return handle->data;
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	681b      	ldr	r3, [r3, #0]
}
 8018f12:	4618      	mov	r0, r3
 8018f14:	3714      	adds	r7, #20
 8018f16:	46bd      	mov	sp, r7
 8018f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f1c:	4770      	bx	lr

08018f1e <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 8018f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f22:	b084      	sub	sp, #16
 8018f24:	af02      	add	r7, sp, #8
 8018f26:	6078      	str	r0, [r7, #4]
 8018f28:	6039      	str	r1, [r7, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	685d      	ldr	r5, [r3, #4]
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	685b      	ldr	r3, [r3, #4]
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	3304      	adds	r3, #4
 8018f36:	681c      	ldr	r4, [r3, #0]
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	68de      	ldr	r6, [r3, #12]
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	689b      	ldr	r3, [r3, #8]
 8018f40:	4618      	mov	r0, r3
 8018f42:	f7ff ff5f 	bl	8018e04 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8018f46:	4680      	mov	r8, r0
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	689b      	ldr	r3, [r3, #8]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f7ff ff4d 	bl	8018dec <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8018f52:	4603      	mov	r3, r0
 8018f54:	9300      	str	r3, [sp, #0]
 8018f56:	683b      	ldr	r3, [r7, #0]
 8018f58:	4642      	mov	r2, r8
 8018f5a:	4631      	mov	r1, r6
 8018f5c:	4628      	mov	r0, r5
 8018f5e:	47a0      	blx	r4
 8018f60:	4603      	mov	r3, r0
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3708      	adds	r7, #8
 8018f66:	46bd      	mov	sp, r7
 8018f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f6c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:

int MicroContext::GetTensorIndex(int index, int max_size,
                                 const int* tensor_indices) {
 8018f6c:	b480      	push	{r7}
 8018f6e:	b087      	sub	sp, #28
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	60f8      	str	r0, [r7, #12]
 8018f74:	60b9      	str	r1, [r7, #8]
 8018f76:	607a      	str	r2, [r7, #4]
 8018f78:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8018f7a:	68bb      	ldr	r3, [r7, #8]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	db0f      	blt.n	8018fa0 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
 8018f80:	68ba      	ldr	r2, [r7, #8]
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	429a      	cmp	r2, r3
 8018f86:	da0b      	bge.n	8018fa0 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8018f88:	68bb      	ldr	r3, [r7, #8]
 8018f8a:	009b      	lsls	r3, r3, #2
 8018f8c:	683a      	ldr	r2, [r7, #0]
 8018f8e:	4413      	add	r3, r2
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8018f94:	697b      	ldr	r3, [r7, #20]
 8018f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f9a:	d001      	beq.n	8018fa0 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
      return tensor_index;
 8018f9c:	697b      	ldr	r3, [r7, #20]
 8018f9e:	e001      	b.n	8018fa4 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x38>
    }
  }
  return -1;
 8018fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	371c      	adds	r7, #28
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fae:	4770      	bx	lr

08018fb0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b086      	sub	sp, #24
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	60f8      	str	r0, [r7, #12]
 8018fb8:	60b9      	str	r1, [r7, #8]
 8018fba:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 8018fbc:	68bb      	ldr	r3, [r7, #8]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	681a      	ldr	r2, [r3, #0]
 8018fc2:	68bb      	ldr	r3, [r7, #8]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	3304      	adds	r3, #4
 8018fc8:	6879      	ldr	r1, [r7, #4]
 8018fca:	68f8      	ldr	r0, [r7, #12]
 8018fcc:	f7ff ffce 	bl	8018f6c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 8018fd0:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8018fd2:	697b      	ldr	r3, [r7, #20]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	da01      	bge.n	8018fdc <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8018fd8:	2300      	movs	r3, #0
 8018fda:	e008      	b.n	8018fee <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	3314      	adds	r3, #20
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	6979      	ldr	r1, [r7, #20]
 8018fe6:	68f8      	ldr	r0, [r7, #12]
 8018fe8:	4798      	blx	r3
 8018fea:	4603      	mov	r3, r0
 8018fec:	bf00      	nop
}
 8018fee:	4618      	mov	r0, r3
 8018ff0:	3718      	adds	r7, #24
 8018ff2:	46bd      	mov	sp, r7
 8018ff4:	bd80      	pop	{r7, pc}

08018ff6 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
 8018ff6:	b580      	push	{r7, lr}
 8018ff8:	b086      	sub	sp, #24
 8018ffa:	af00      	add	r7, sp, #0
 8018ffc:	60f8      	str	r0, [r7, #12]
 8018ffe:	60b9      	str	r1, [r7, #8]
 8019000:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 8019002:	68bb      	ldr	r3, [r7, #8]
 8019004:	685b      	ldr	r3, [r3, #4]
 8019006:	681a      	ldr	r2, [r3, #0]
 8019008:	68bb      	ldr	r3, [r7, #8]
 801900a:	685b      	ldr	r3, [r3, #4]
 801900c:	3304      	adds	r3, #4
 801900e:	6879      	ldr	r1, [r7, #4]
 8019010:	68f8      	ldr	r0, [r7, #12]
 8019012:	f7ff ffab 	bl	8018f6c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 8019016:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8019018:	697b      	ldr	r3, [r7, #20]
 801901a:	2b00      	cmp	r3, #0
 801901c:	da01      	bge.n	8019022 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 801901e:	2300      	movs	r3, #0
 8019020:	e008      	b.n	8019034 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	3314      	adds	r3, #20
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	6979      	ldr	r1, [r7, #20]
 801902c:	68f8      	ldr	r0, [r7, #12]
 801902e:	4798      	blx	r3
 8019030:	4603      	mov	r3, r0
 8019032:	bf00      	nop
}
 8019034:	4618      	mov	r0, r3
 8019036:	3718      	adds	r7, #24
 8019038:	46bd      	mov	sp, r7
 801903a:	bd80      	pop	{r7, pc}

0801903c <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempIntermediateTensor(
    const TfLiteNode* node, int index) {
 801903c:	b580      	push	{r7, lr}
 801903e:	b086      	sub	sp, #24
 8019040:	af00      	add	r7, sp, #0
 8019042:	60f8      	str	r0, [r7, #12]
 8019044:	60b9      	str	r1, [r7, #8]
 8019046:	607a      	str	r2, [r7, #4]
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 8019048:	68bb      	ldr	r3, [r7, #8]
 801904a:	689b      	ldr	r3, [r3, #8]
 801904c:	681a      	ldr	r2, [r3, #0]
                                          node->intermediates->data);
 801904e:	68bb      	ldr	r3, [r7, #8]
 8019050:	689b      	ldr	r3, [r3, #8]
 8019052:	3304      	adds	r3, #4
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 8019054:	6879      	ldr	r1, [r7, #4]
 8019056:	68f8      	ldr	r0, [r7, #12]
 8019058:	f7ff ff88 	bl	8018f6c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 801905c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801905e:	697b      	ldr	r3, [r7, #20]
 8019060:	2b00      	cmp	r3, #0
 8019062:	da01      	bge.n	8019068 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8019064:	2300      	movs	r3, #0
 8019066:	e008      	b.n	801907a <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	3314      	adds	r3, #20
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	6979      	ldr	r1, [r7, #20]
 8019072:	68f8      	ldr	r0, [r7, #12]
 8019074:	4798      	blx	r3
 8019076:	4603      	mov	r3, r0
 8019078:	bf00      	nop
}
 801907a:	4618      	mov	r0, r3
 801907c:	3718      	adds	r7, #24
 801907e:	46bd      	mov	sp, r7
 8019080:	bd80      	pop	{r7, pc}

08019082 <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 8019082:	b580      	push	{r7, lr}
 8019084:	b082      	sub	sp, #8
 8019086:	af00      	add	r7, sp, #0
 8019088:	6078      	str	r0, [r7, #4]
 801908a:	6039      	str	r1, [r7, #0]
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	685a      	ldr	r2, [r3, #4]
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	685b      	ldr	r3, [r3, #4]
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	3308      	adds	r3, #8
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	6839      	ldr	r1, [r7, #0]
 801909c:	4610      	mov	r0, r2
 801909e:	4798      	blx	r3
 80190a0:	bf00      	nop
}
 80190a2:	3708      	adds	r7, #8
 80190a4:	46bd      	mov	sp, r7
 80190a6:	bd80      	pop	{r7, pc}

080190a8 <_ZN6tflite12MicroContext13GetEvalTensorEi>:

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
 80190a8:	b590      	push	{r4, r7, lr}
 80190aa:	b083      	sub	sp, #12
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
 80190b0:	6039      	str	r1, [r7, #0]
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	689b      	ldr	r3, [r3, #8]
 80190b6:	4618      	mov	r0, r3
 80190b8:	f7ff fea4 	bl	8018e04 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80190bc:	4604      	mov	r4, r0
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	689b      	ldr	r3, [r3, #8]
 80190c2:	4618      	mov	r0, r3
 80190c4:	f7ff fe92 	bl	8018dec <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 80190c8:	4603      	mov	r3, r0
 80190ca:	00db      	lsls	r3, r3, #3
 80190cc:	4423      	add	r3, r4
              .tensors[tensor_idx];
 80190ce:	6859      	ldr	r1, [r3, #4]
 80190d0:	683a      	ldr	r2, [r7, #0]
 80190d2:	4613      	mov	r3, r2
 80190d4:	005b      	lsls	r3, r3, #1
 80190d6:	4413      	add	r3, r2
 80190d8:	009b      	lsls	r3, r3, #2
 80190da:	440b      	add	r3, r1
}
 80190dc:	4618      	mov	r0, r3
 80190de:	370c      	adds	r7, #12
 80190e0:	46bd      	mov	sp, r7
 80190e2:	bd90      	pop	{r4, r7, pc}

080190e4 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 80190e4:	b40e      	push	{r1, r2, r3}
 80190e6:	b580      	push	{r7, lr}
 80190e8:	b085      	sub	sp, #20
 80190ea:	af00      	add	r7, sp, #0
 80190ec:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 80190ee:	f107 0320 	add.w	r3, r7, #32
 80190f2:	60fb      	str	r3, [r7, #12]
  Log(format, args);
 80190f4:	68f9      	ldr	r1, [r7, #12]
 80190f6:	69f8      	ldr	r0, [r7, #28]
 80190f8:	f000 f81e 	bl	8019138 <_Z3LogPKcSt9__va_list>
  va_end(args);
}
 80190fc:	bf00      	nop
 80190fe:	3714      	adds	r7, #20
 8019100:	46bd      	mov	sp, r7
 8019102:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019106:	b003      	add	sp, #12
 8019108:	4770      	bx	lr

0801910a <_ZN6tflite15GetMicroContextEPK13TfLiteContext>:
  void* external_context_payload_ = nullptr;

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
 801910a:	b480      	push	{r7}
 801910c:	b083      	sub	sp, #12
 801910e:	af00      	add	r7, sp, #0
 8019110:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<MicroContext*>(context->impl_);
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	689b      	ldr	r3, [r3, #8]
}
 8019116:	4618      	mov	r0, r3
 8019118:	370c      	adds	r7, #12
 801911a:	46bd      	mov	sp, r7
 801911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019120:	4770      	bx	lr

08019122 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>:
void Unused(Args&&... args) {
 8019122:	b480      	push	{r7}
 8019124:	b083      	sub	sp, #12
 8019126:	af00      	add	r7, sp, #0
 8019128:	6078      	str	r0, [r7, #4]
 801912a:	6039      	str	r1, [r7, #0]
}
 801912c:	bf00      	nop
 801912e:	370c      	adds	r7, #12
 8019130:	46bd      	mov	sp, r7
 8019132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019136:	4770      	bx	lr

08019138 <_Z3LogPKcSt9__va_list>:
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
#include "edge-impulse-sdk/tensorflow/lite/micro/debug_log.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_string.h"
#endif

void Log(const char* format, va_list args) {
 8019138:	b480      	push	{r7}
 801913a:	b083      	sub	sp, #12
 801913c:	af00      	add	r7, sp, #0
 801913e:	6078      	str	r0, [r7, #4]
 8019140:	6039      	str	r1, [r7, #0]
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
 8019142:	bf00      	nop
 8019144:	370c      	adds	r7, #12
 8019146:	46bd      	mov	sp, r7
 8019148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914c:	4770      	bx	lr

0801914e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801914e:	b580      	push	{r7, lr}
 8019150:	b082      	sub	sp, #8
 8019152:	af00      	add	r7, sp, #0
 8019154:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d101      	bne.n	8019160 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 801915c:	f004 fcae 	bl	801dabc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	681b      	ldr	r3, [r3, #0]
}
 8019164:	4618      	mov	r0, r3
 8019166:	3708      	adds	r7, #8
 8019168:	46bd      	mov	sp, r7
 801916a:	bd80      	pop	{r7, pc}

0801916c <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801916c:	b580      	push	{r7, lr}
 801916e:	b082      	sub	sp, #8
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d101      	bne.n	801917e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x12>
 801917a:	f004 fc9f 	bl	801dabc <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
}
 8019182:	4618      	mov	r0, r3
 8019184:	3708      	adds	r7, #8
 8019186:	46bd      	mov	sp, r7
 8019188:	bd80      	pop	{r7, pc}

0801918a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801918a:	b580      	push	{r7, lr}
 801918c:	b082      	sub	sp, #8
 801918e:	af00      	add	r7, sp, #0
 8019190:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d101      	bne.n	801919c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8019198:	f004 fc90 	bl	801dabc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	681b      	ldr	r3, [r3, #0]
}
 80191a0:	4618      	mov	r0, r3
 80191a2:	3708      	adds	r7, #8
 80191a4:	46bd      	mov	sp, r7
 80191a6:	bd80      	pop	{r7, pc}

080191a8 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b082      	sub	sp, #8
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d101      	bne.n	80191ba <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x12>
 80191b6:	f004 fc81 	bl	801dabc <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	681b      	ldr	r3, [r3, #0]
}
 80191be:	4618      	mov	r0, r3
 80191c0:	3708      	adds	r7, #8
 80191c2:	46bd      	mov	sp, r7
 80191c4:	bd80      	pop	{r7, pc}

080191c6 <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 80191c6:	b580      	push	{r7, lr}
 80191c8:	b082      	sub	sp, #8
 80191ca:	af00      	add	r7, sp, #0
 80191cc:	6078      	str	r0, [r7, #4]
 80191ce:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 80191d0:	683b      	ldr	r3, [r7, #0]
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	da01      	bge.n	80191da <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 80191d6:	f004 fc71 	bl	801dabc <abort>
    TFLITE_DCHECK_LT(i, size_);
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	683a      	ldr	r2, [r7, #0]
 80191e0:	429a      	cmp	r2, r3
 80191e2:	db01      	blt.n	80191e8 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 80191e4:	f004 fc6a 	bl	801dabc <abort>
    return dims_[i];
 80191e8:	687a      	ldr	r2, [r7, #4]
 80191ea:	683b      	ldr	r3, [r7, #0]
 80191ec:	009b      	lsls	r3, r3, #2
 80191ee:	4413      	add	r3, r2
 80191f0:	685b      	ldr	r3, [r3, #4]
  }
 80191f2:	4618      	mov	r0, r3
 80191f4:	3708      	adds	r7, #8
 80191f6:	46bd      	mov	sp, r7
 80191f8:	bd80      	pop	{r7, pc}
	...

080191fc <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 80191fc:	b480      	push	{r7}
 80191fe:	af00      	add	r7, sp, #0
 8019200:	4b04      	ldr	r3, [pc, #16]	; (8019214 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8019202:	ee07 3a90 	vmov	s15, r3
 8019206:	eeb0 0a67 	vmov.f32	s0, s15
 801920a:	46bd      	mov	sp, r7
 801920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019210:	4770      	bx	lr
 8019212:	bf00      	nop
 8019214:	7f7fffff 	.word	0x7f7fffff

08019218 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8019218:	b480      	push	{r7}
 801921a:	af00      	add	r7, sp, #0
 801921c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8019220:	ee07 3a90 	vmov	s15, r3
 8019224:	eeb0 0a67 	vmov.f32	s0, s15
 8019228:	46bd      	mov	sp, r7
 801922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801922e:	4770      	bx	lr

08019230 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
      break;
  }
}

template <typename T>
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8019230:	b580      	push	{r7, lr}
 8019232:	b084      	sub	sp, #16
 8019234:	af00      	add	r7, sp, #0
 8019236:	ed87 0a03 	vstr	s0, [r7, #12]
 801923a:	edc7 0a02 	vstr	s1, [r7, #8]
 801923e:	ed87 1a01 	vstr	s2, [r7, #4]
                                      T output_activation_max) {
  using std::max;
  using std::min;
  return min(max(x, output_activation_min), output_activation_max);
 8019242:	f107 0208 	add.w	r2, r7, #8
 8019246:	f107 030c 	add.w	r3, r7, #12
 801924a:	4611      	mov	r1, r2
 801924c:	4618      	mov	r0, r3
 801924e:	f7f0 fb97 	bl	8009980 <_ZSt3maxIfERKT_S2_S2_>
 8019252:	4602      	mov	r2, r0
 8019254:	1d3b      	adds	r3, r7, #4
 8019256:	4619      	mov	r1, r3
 8019258:	4610      	mov	r0, r2
 801925a:	f7ff f8ed 	bl	8018438 <_ZSt3minIfERKT_S2_S2_>
 801925e:	4603      	mov	r3, r0
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	ee07 3a90 	vmov	s15, r3
}
 8019266:	eeb0 0a67 	vmov.f32	s0, s15
 801926a:	3710      	adds	r7, #16
 801926c:	46bd      	mov	sp, r7
 801926e:	bd80      	pop	{r7, pc}

08019270 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8019270:	b580      	push	{r7, lr}
 8019272:	b084      	sub	sp, #16
 8019274:	af00      	add	r7, sp, #0
 8019276:	4603      	mov	r3, r0
 8019278:	60b9      	str	r1, [r7, #8]
 801927a:	607a      	str	r2, [r7, #4]
 801927c:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 801927e:	7bfb      	ldrb	r3, [r7, #15]
 8019280:	2b01      	cmp	r3, #1
 8019282:	d10b      	bne.n	801929c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8019284:	68bb      	ldr	r3, [r7, #8]
 8019286:	f04f 0200 	mov.w	r2, #0
 801928a:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 801928c:	f7ff ffb6 	bl	80191fc <_ZNSt14numeric_limitsIfE3maxEv>
 8019290:	eef0 7a40 	vmov.f32	s15, s0
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 801929a:	e023      	b.n	80192e4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 801929c:	7bfb      	ldrb	r3, [r7, #15]
 801929e:	2b03      	cmp	r3, #3
 80192a0:	d107      	bne.n	80192b2 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 80192a2:	68bb      	ldr	r3, [r7, #8]
 80192a4:	f04f 0200 	mov.w	r2, #0
 80192a8:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	4a0f      	ldr	r2, [pc, #60]	; (80192ec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 80192ae:	601a      	str	r2, [r3, #0]
}
 80192b0:	e018      	b.n	80192e4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 80192b2:	7bfb      	ldrb	r3, [r7, #15]
 80192b4:	2b02      	cmp	r3, #2
 80192b6:	d107      	bne.n	80192c8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 80192b8:	68bb      	ldr	r3, [r7, #8]
 80192ba:	4a0d      	ldr	r2, [pc, #52]	; (80192f0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 80192bc:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80192c4:	601a      	str	r2, [r3, #0]
}
 80192c6:	e00d      	b.n	80192e4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 80192c8:	f7ff ffa6 	bl	8019218 <_ZNSt14numeric_limitsIfE6lowestEv>
 80192cc:	eef0 7a40 	vmov.f32	s15, s0
 80192d0:	68bb      	ldr	r3, [r7, #8]
 80192d2:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 80192d6:	f7ff ff91 	bl	80191fc <_ZNSt14numeric_limitsIfE3maxEv>
 80192da:	eef0 7a40 	vmov.f32	s15, s0
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	edc3 7a00 	vstr	s15, [r3]
}
 80192e4:	bf00      	nop
 80192e6:	3710      	adds	r7, #16
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}
 80192ec:	40c00000 	.word	0x40c00000
 80192f0:	bf800000 	.word	0xbf800000

080192f4 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 80192f4:	b480      	push	{r7}
 80192f6:	b085      	sub	sp, #20
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	60f8      	str	r0, [r7, #12]
 80192fc:	60b9      	str	r1, [r7, #8]
 80192fe:	607a      	str	r2, [r7, #4]
}
 8019300:	bf00      	nop
 8019302:	3714      	adds	r7, #20
 8019304:	46bd      	mov	sp, r7
 8019306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930a:	4770      	bx	lr

0801930c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 801930c:	b590      	push	{r4, r7, lr}
 801930e:	b087      	sub	sp, #28
 8019310:	af00      	add	r7, sp, #0
 8019312:	60f8      	str	r0, [r7, #12]
 8019314:	60b9      	str	r1, [r7, #8]
 8019316:	607a      	str	r2, [r7, #4]
 8019318:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 801931a:	68b9      	ldr	r1, [r7, #8]
 801931c:	68f8      	ldr	r0, [r7, #12]
 801931e:	f7ff ff52 	bl	80191c6 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019322:	4604      	mov	r4, r0
 8019324:	6839      	ldr	r1, [r7, #0]
 8019326:	6878      	ldr	r0, [r7, #4]
 8019328:	f7ff ff4d 	bl	80191c6 <_ZNK6tflite12RuntimeShape4DimsEi>
 801932c:	4603      	mov	r3, r0
 801932e:	429c      	cmp	r4, r3
 8019330:	d001      	beq.n	8019336 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8019332:	f004 fbc3 	bl	801dabc <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8019336:	68b9      	ldr	r1, [r7, #8]
 8019338:	68f8      	ldr	r0, [r7, #12]
 801933a:	f7ff ff44 	bl	80191c6 <_ZNK6tflite12RuntimeShape4DimsEi>
 801933e:	4603      	mov	r3, r0
 8019340:	613b      	str	r3, [r7, #16]
 8019342:	6839      	ldr	r1, [r7, #0]
 8019344:	6878      	ldr	r0, [r7, #4]
 8019346:	f7ff ff3e 	bl	80191c6 <_ZNK6tflite12RuntimeShape4DimsEi>
 801934a:	4603      	mov	r3, r0
 801934c:	617b      	str	r3, [r7, #20]
 801934e:	f107 0214 	add.w	r2, r7, #20
 8019352:	f107 0310 	add.w	r3, r7, #16
 8019356:	4611      	mov	r1, r2
 8019358:	4618      	mov	r0, r3
 801935a:	f7f1 fc6d 	bl	800ac38 <_ZSt3minIlERKT_S2_S2_>
 801935e:	4603      	mov	r3, r0
 8019360:	681b      	ldr	r3, [r3, #0]
}
 8019362:	4618      	mov	r0, r3
 8019364:	371c      	adds	r7, #28
 8019366:	46bd      	mov	sp, r7
 8019368:	bd90      	pop	{r4, r7, pc}

0801936a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801936a:	b580      	push	{r7, lr}
 801936c:	b086      	sub	sp, #24
 801936e:	af00      	add	r7, sp, #0
 8019370:	6078      	str	r0, [r7, #4]
 8019372:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8019374:	6878      	ldr	r0, [r7, #4]
 8019376:	f7ff fc9c 	bl	8018cb2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801937a:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 801937c:	683b      	ldr	r3, [r7, #0]
 801937e:	2b00      	cmp	r3, #0
 8019380:	db03      	blt.n	801938a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8019382:	683a      	ldr	r2, [r7, #0]
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	429a      	cmp	r2, r3
 8019388:	db01      	blt.n	801938e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 801938a:	f004 fb97 	bl	801dabc <abort>
  const auto* dims_data = shape.DimsData();
 801938e:	6878      	ldr	r0, [r7, #4]
 8019390:	f7ff fc04 	bl	8018b9c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8019394:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8019396:	2301      	movs	r3, #1
 8019398:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801939a:	2300      	movs	r3, #0
 801939c:	613b      	str	r3, [r7, #16]
 801939e:	e011      	b.n	80193c4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 80193a0:	693a      	ldr	r2, [r7, #16]
 80193a2:	683b      	ldr	r3, [r7, #0]
 80193a4:	429a      	cmp	r2, r3
 80193a6:	d005      	beq.n	80193b4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 80193a8:	693b      	ldr	r3, [r7, #16]
 80193aa:	009b      	lsls	r3, r3, #2
 80193ac:	68ba      	ldr	r2, [r7, #8]
 80193ae:	4413      	add	r3, r2
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	e000      	b.n	80193b6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 80193b4:	2301      	movs	r3, #1
 80193b6:	697a      	ldr	r2, [r7, #20]
 80193b8:	fb02 f303 	mul.w	r3, r2, r3
 80193bc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80193be:	693b      	ldr	r3, [r7, #16]
 80193c0:	3301      	adds	r3, #1
 80193c2:	613b      	str	r3, [r7, #16]
 80193c4:	693a      	ldr	r2, [r7, #16]
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	429a      	cmp	r2, r3
 80193ca:	dbe9      	blt.n	80193a0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 80193cc:	697b      	ldr	r3, [r7, #20]
}
 80193ce:	4618      	mov	r0, r3
 80193d0:	3718      	adds	r7, #24
 80193d2:	46bd      	mov	sp, r7
 80193d4:	bd80      	pop	{r7, pc}

080193d6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 80193d6:	b590      	push	{r4, r7, lr}
 80193d8:	b091      	sub	sp, #68	; 0x44
 80193da:	af00      	add	r7, sp, #0
 80193dc:	60f8      	str	r0, [r7, #12]
 80193de:	60b9      	str	r1, [r7, #8]
 80193e0:	607a      	str	r2, [r7, #4]
 80193e2:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	69db      	ldr	r3, [r3, #28]
 80193e8:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	6a1b      	ldr	r3, [r3, #32]
 80193ee:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 80193f0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80193f2:	f7ff fc5e 	bl	8018cb2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80193f6:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 80193f8:	6838      	ldr	r0, [r7, #0]
 80193fa:	f7ff fc5a 	bl	8018cb2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80193fe:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8019400:	6a3b      	ldr	r3, [r7, #32]
 8019402:	3b01      	subs	r3, #1
 8019404:	4619      	mov	r1, r3
 8019406:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019408:	f7ff ffaf 	bl	801936a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801940c:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 801940e:	69fb      	ldr	r3, [r7, #28]
 8019410:	1e99      	subs	r1, r3, #2
 8019412:	6a3b      	ldr	r3, [r7, #32]
 8019414:	3b01      	subs	r3, #1
 8019416:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019418:	6838      	ldr	r0, [r7, #0]
 801941a:	f7ff ff77 	bl	801930c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801941e:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8019420:	69fb      	ldr	r3, [r7, #28]
 8019422:	3b01      	subs	r3, #1
 8019424:	4619      	mov	r1, r3
 8019426:	6838      	ldr	r0, [r7, #0]
 8019428:	f7ff fecd 	bl	80191c6 <_ZNK6tflite12RuntimeShape4DimsEi>
 801942c:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 801942e:	2300      	movs	r3, #0
 8019430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019432:	e05e      	b.n	80194f2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8019434:	2300      	movs	r3, #0
 8019436:	63bb      	str	r3, [r7, #56]	; 0x38
 8019438:	e054      	b.n	80194e4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 801943a:	f04f 0300 	mov.w	r3, #0
 801943e:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8019440:	2300      	movs	r3, #0
 8019442:	633b      	str	r3, [r7, #48]	; 0x30
 8019444:	e020      	b.n	8019488 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 8019446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019448:	693a      	ldr	r2, [r7, #16]
 801944a:	fb03 f202 	mul.w	r2, r3, r2
 801944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019450:	4413      	add	r3, r2
 8019452:	009b      	lsls	r3, r3, #2
 8019454:	687a      	ldr	r2, [r7, #4]
 8019456:	4413      	add	r3, r2
 8019458:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 801945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801945e:	693a      	ldr	r2, [r7, #16]
 8019460:	fb03 f202 	mul.w	r2, r3, r2
 8019464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019466:	4413      	add	r3, r2
 8019468:	009b      	lsls	r3, r3, #2
 801946a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801946c:	4413      	add	r3, r2
 801946e:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8019472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019476:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801947a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801947e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8019482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019484:	3301      	adds	r3, #1
 8019486:	633b      	str	r3, [r7, #48]	; 0x30
 8019488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801948a:	693b      	ldr	r3, [r7, #16]
 801948c:	429a      	cmp	r2, r3
 801948e:	dbda      	blt.n	8019446 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 8019490:	f04f 0300 	mov.w	r3, #0
 8019494:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8019496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019498:	2b00      	cmp	r3, #0
 801949a:	d005      	beq.n	80194a8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 801949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801949e:	009b      	lsls	r3, r3, #2
 80194a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80194a2:	4413      	add	r3, r2
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 80194a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80194ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80194b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80194b4:	697b      	ldr	r3, [r7, #20]
 80194b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80194b8:	fb03 f202 	mul.w	r2, r3, r2
 80194bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194be:	4413      	add	r3, r2
 80194c0:	009b      	lsls	r3, r3, #2
 80194c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80194c4:	18d4      	adds	r4, r2, r3
 80194c6:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80194ca:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 80194ce:	eeb0 0a67 	vmov.f32	s0, s15
 80194d2:	f7ff fead 	bl	8019230 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 80194d6:	eef0 7a40 	vmov.f32	s15, s0
 80194da:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80194de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194e0:	3301      	adds	r3, #1
 80194e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80194e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194e6:	697b      	ldr	r3, [r7, #20]
 80194e8:	429a      	cmp	r2, r3
 80194ea:	dba6      	blt.n	801943a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 80194ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80194ee:	3301      	adds	r3, #1
 80194f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80194f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80194f4:	69bb      	ldr	r3, [r7, #24]
 80194f6:	429a      	cmp	r2, r3
 80194f8:	db9c      	blt.n	8019434 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 80194fa:	bf00      	nop
 80194fc:	bf00      	nop
 80194fe:	3744      	adds	r7, #68	; 0x44
 8019500:	46bd      	mov	sp, r7
 8019502:	bd90      	pop	{r4, r7, pc}

08019504 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t batches;
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8019504:	b580      	push	{r7, lr}
 8019506:	b084      	sub	sp, #16
 8019508:	af00      	add	r7, sp, #0
 801950a:	60f8      	str	r0, [r7, #12]
 801950c:	60b9      	str	r1, [r7, #8]
 801950e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019514:	2b00      	cmp	r3, #0
 8019516:	d101      	bne.n	801951c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8019518:	f004 fad0 	bl	801dabc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019520:	213c      	movs	r1, #60	; 0x3c
 8019522:	68f8      	ldr	r0, [r7, #12]
 8019524:	4798      	blx	r3
 8019526:	4603      	mov	r3, r0
}
 8019528:	4618      	mov	r0, r3
 801952a:	3710      	adds	r7, #16
 801952c:	46bd      	mov	sp, r7
 801952e:	bd80      	pop	{r7, pc}

08019530 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8019530:	b5b0      	push	{r4, r5, r7, lr}
 8019532:	b0b2      	sub	sp, #200	; 0xc8
 8019534:	af04      	add	r7, sp, #16
 8019536:	6078      	str	r0, [r7, #4]
 8019538:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801953a:	683b      	ldr	r3, [r7, #0]
 801953c:	691b      	ldr	r3, [r3, #16]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d101      	bne.n	8019546 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8019542:	f004 fabb 	bl	801dabc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8019546:	683b      	ldr	r3, [r7, #0]
 8019548:	695b      	ldr	r3, [r3, #20]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d101      	bne.n	8019552 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 801954e:	f004 fab5 	bl	801dabc <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8019552:	683b      	ldr	r3, [r7, #0]
 8019554:	691b      	ldr	r3, [r3, #16]
 8019556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto params =
 801955a:	683b      	ldr	r3, [r7, #0]
 801955c:	695b      	ldr	r3, [r3, #20]
 801955e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
 8019562:	6878      	ldr	r0, [r7, #4]
 8019564:	f7ff fdd1 	bl	801910a <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8019568:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 801956c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	3318      	adds	r3, #24
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	4ab7      	ldr	r2, [pc, #732]	; (8019854 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 8019578:	6812      	ldr	r2, [r2, #0]
 801957a:	6839      	ldr	r1, [r7, #0]
 801957c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8019580:	4798      	blx	r3
 8019582:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 8019586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801958a:	2b00      	cmp	r3, #0
 801958c:	d10a      	bne.n	80195a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x74>
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	691c      	ldr	r4, [r3, #16]
 8019592:	4bb1      	ldr	r3, [pc, #708]	; (8019858 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8019594:	9300      	str	r3, [sp, #0]
 8019596:	2347      	movs	r3, #71	; 0x47
 8019598:	4ab0      	ldr	r2, [pc, #704]	; (801985c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 801959a:	49b1      	ldr	r1, [pc, #708]	; (8019860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 801959c:	6878      	ldr	r0, [r7, #4]
 801959e:	47a0      	blx	r4
 80195a0:	2401      	movs	r4, #1
 80195a2:	e1a8      	b.n	80198f6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 80195a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	3318      	adds	r3, #24
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	4aad      	ldr	r2, [pc, #692]	; (8019864 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
 80195b0:	6812      	ldr	r2, [r2, #0]
 80195b2:	6839      	ldr	r1, [r7, #0]
 80195b4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80195b8:	4798      	blx	r3
 80195ba:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 80195be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d10a      	bne.n	80195dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	691c      	ldr	r4, [r3, #16]
 80195ca:	4ba7      	ldr	r3, [pc, #668]	; (8019868 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
 80195cc:	9300      	str	r3, [sp, #0]
 80195ce:	234a      	movs	r3, #74	; 0x4a
 80195d0:	4aa2      	ldr	r2, [pc, #648]	; (801985c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 80195d2:	49a3      	ldr	r1, [pc, #652]	; (8019860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 80195d4:	6878      	ldr	r0, [r7, #4]
 80195d6:	47a0      	blx	r4
 80195d8:	2401      	movs	r4, #1
 80195da:	e18c      	b.n	80198f6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 80195dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	3318      	adds	r3, #24
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	4aa1      	ldr	r2, [pc, #644]	; (801986c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
 80195e8:	6812      	ldr	r2, [r2, #0]
 80195ea:	6839      	ldr	r1, [r7, #0]
 80195ec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80195f0:	4798      	blx	r3
 80195f2:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 80195f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	331c      	adds	r3, #28
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	4a9b      	ldr	r2, [pc, #620]	; (8019870 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
 8019602:	6812      	ldr	r2, [r2, #0]
 8019604:	6839      	ldr	r1, [r7, #0]
 8019606:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801960a:	4798      	blx	r3
 801960c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      node, kFullyConnectedOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 8019610:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019614:	2b00      	cmp	r3, #0
 8019616:	d10a      	bne.n	801962e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	691c      	ldr	r4, [r3, #16]
 801961c:	4b95      	ldr	r3, [pc, #596]	; (8019874 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
 801961e:	9300      	str	r3, [sp, #0]
 8019620:	234f      	movs	r3, #79	; 0x4f
 8019622:	4a8e      	ldr	r2, [pc, #568]	; (801985c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8019624:	498e      	ldr	r1, [pc, #568]	; (8019860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8019626:	6878      	ldr	r0, [r7, #4]
 8019628:	47a0      	blx	r4
 801962a:	2401      	movs	r4, #1
 801962c:	e163      	b.n	80198f6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801962e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019632:	781a      	ldrb	r2, [r3, #0]
 8019634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019638:	781b      	ldrb	r3, [r3, #0]
 801963a:	429a      	cmp	r2, r3
 801963c:	d01c      	beq.n	8019678 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	691c      	ldr	r4, [r3, #16]
 8019642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019646:	781b      	ldrb	r3, [r3, #0]
 8019648:	4618      	mov	r0, r3
 801964a:	f7fe fe2f 	bl	80182ac <TfLiteTypeGetName>
 801964e:	4605      	mov	r5, r0
 8019650:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019654:	781b      	ldrb	r3, [r3, #0]
 8019656:	4618      	mov	r0, r3
 8019658:	f7fe fe28 	bl	80182ac <TfLiteTypeGetName>
 801965c:	4603      	mov	r3, r0
 801965e:	9303      	str	r3, [sp, #12]
 8019660:	9502      	str	r5, [sp, #8]
 8019662:	4b85      	ldr	r3, [pc, #532]	; (8019878 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
 8019664:	9301      	str	r3, [sp, #4]
 8019666:	4b85      	ldr	r3, [pc, #532]	; (801987c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
 8019668:	9300      	str	r3, [sp, #0]
 801966a:	2351      	movs	r3, #81	; 0x51
 801966c:	4a7b      	ldr	r2, [pc, #492]	; (801985c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 801966e:	4984      	ldr	r1, [pc, #528]	; (8019880 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
 8019670:	6878      	ldr	r0, [r7, #4]
 8019672:	47a0      	blx	r4
 8019674:	2401      	movs	r4, #1
 8019676:	e13e      	b.n	80198f6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  const RuntimeShape filter_shape = GetTensorShape(filter);
 8019678:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801967c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8019680:	4618      	mov	r0, r3
 8019682:	f7ff fad2 	bl	8018c2a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8019686:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801968a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801968e:	4618      	mov	r0, r3
 8019690:	f7ff facb 	bl	8018c2a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8019694:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019698:	4618      	mov	r0, r3
 801969a:	f7ff fb0a 	bl	8018cb2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801969e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  const int output_dim_count = output_shape.DimensionsCount();
 80196a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80196a6:	4618      	mov	r0, r3
 80196a8:	f7ff fb03 	bl	8018cb2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80196ac:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  cmsis_nn_dims filter_dims;
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 80196b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80196b4:	1e5a      	subs	r2, r3, #1
 80196b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80196ba:	4611      	mov	r1, r2
 80196bc:	4618      	mov	r0, r3
 80196be:	f7ff fd82 	bl	80191c6 <_ZNK6tflite12RuntimeShape4DimsEi>
 80196c2:	4603      	mov	r3, r0
 80196c4:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.h = 1;
 80196c6:	2301      	movs	r3, #1
 80196c8:	62bb      	str	r3, [r7, #40]	; 0x28
  filter_dims.w = 1;
 80196ca:	2301      	movs	r3, #1
 80196cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 80196ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80196d2:	1e5a      	subs	r2, r3, #1
 80196d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80196d8:	4611      	mov	r1, r2
 80196da:	4618      	mov	r0, r3
 80196dc:	f7ff fd73 	bl	80191c6 <_ZNK6tflite12RuntimeShape4DimsEi>
 80196e0:	4603      	mov	r3, r0
 80196e2:	633b      	str	r3, [r7, #48]	; 0x30

  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 80196e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80196e8:	1e5a      	subs	r2, r3, #1
 80196ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80196ee:	4611      	mov	r1, r2
 80196f0:	4618      	mov	r0, r3
 80196f2:	f7ff fd68 	bl	80191c6 <_ZNK6tflite12RuntimeShape4DimsEi>
 80196f6:	4602      	mov	r2, r0
 80196f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80196fc:	635a      	str	r2, [r3, #52]	; 0x34
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 80196fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019702:	1e5a      	subs	r2, r3, #1
 8019704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019708:	4611      	mov	r1, r2
 801970a:	4618      	mov	r0, r3
 801970c:	f7ff fe2d 	bl	801936a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8019710:	4602      	mov	r2, r0
 8019712:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019716:	631a      	str	r2, [r3, #48]	; 0x30
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 8019718:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801971c:	1e5a      	subs	r2, r3, #1
 801971e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019722:	4611      	mov	r1, r2
 8019724:	4618      	mov	r0, r3
 8019726:	f7ff fd4e 	bl	80191c6 <_ZNK6tflite12RuntimeShape4DimsEi>
 801972a:	4602      	mov	r2, r0
 801972c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019730:	639a      	str	r2, [r3, #56]	; 0x38

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8019732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019736:	f04f 32ff 	mov.w	r2, #4294967295
 801973a:	62da      	str	r2, [r3, #44]	; 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 801973c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019740:	7819      	ldrb	r1, [r3, #0]
 8019742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019746:	781a      	ldrb	r2, [r3, #0]
 8019748:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801974c:	9303      	str	r3, [sp, #12]
 801974e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019752:	9302      	str	r3, [sp, #8]
 8019754:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019758:	9301      	str	r3, [sp, #4]
 801975a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801975e:	9300      	str	r3, [sp, #0]
 8019760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019764:	6878      	ldr	r0, [r7, #4]
 8019766:	f000 fa31 	bl	8019bcc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 801976a:	4603      	mov	r3, r0
 801976c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8019770:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8019774:	2b00      	cmp	r3, #0
 8019776:	d002      	beq.n	801977e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24e>
 8019778:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 801977c:	e0b1      	b.n	80198e2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  int32_t buf_size = 0;
 801977e:	2300      	movs	r3, #0
 8019780:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  if (input->type == kTfLiteInt16) {
 8019784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019788:	781b      	ldrb	r3, [r3, #0]
 801978a:	2b07      	cmp	r3, #7
 801978c:	d10f      	bne.n	80197ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27e>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I16
        MicroPrintf("Filter data type %s currently not supported.",
 801978e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019792:	781b      	ldrb	r3, [r3, #0]
 8019794:	4618      	mov	r0, r3
 8019796:	f7fe fd89 	bl	80182ac <TfLiteTypeGetName>
 801979a:	4603      	mov	r3, r0
 801979c:	667b      	str	r3, [r7, #100]	; 0x64
 801979e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80197a2:	4619      	mov	r1, r3
 80197a4:	4837      	ldr	r0, [pc, #220]	; (8019884 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 80197a6:	f7ff fcbc 	bl	8019122 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 80197aa:	2401      	movs	r4, #1
 80197ac:	e099      	b.n	80198e2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
#endif
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
  } else if (input->type == kTfLiteInt8) {
 80197ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80197b2:	781b      	ldrb	r3, [r3, #0]
 80197b4:	2b09      	cmp	r3, #9
 80197b6:	d10f      	bne.n	80197d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I8
        MicroPrintf("Filter data type %s currently not supported.",
 80197b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80197bc:	781b      	ldrb	r3, [r3, #0]
 80197be:	4618      	mov	r0, r3
 80197c0:	f7fe fd74 	bl	80182ac <TfLiteTypeGetName>
 80197c4:	4603      	mov	r3, r0
 80197c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80197c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80197cc:	4619      	mov	r1, r3
 80197ce:	482d      	ldr	r0, [pc, #180]	; (8019884 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 80197d0:	f7ff fca7 	bl	8019122 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 80197d4:	2401      	movs	r4, #1
 80197d6:	e084      	b.n	80198e2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
    }
#endif
  }

  if (filter->type == kTfLiteInt4) {
 80197d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80197dc:	781b      	ldrb	r3, [r3, #0]
 80197de:	2b12      	cmp	r3, #18
 80197e0:	d121      	bne.n	8019826 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f6>
    int filter_size =
        RuntimeShape(filter->dims->size,
 80197e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80197e6:	689b      	ldr	r3, [r3, #8]
 80197e8:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 80197ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80197ee:	689b      	ldr	r3, [r3, #8]
 80197f0:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 80197f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80197f6:	4618      	mov	r0, r3
 80197f8:	f7ff f9a6 	bl	8018b48 <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 80197fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019800:	4618      	mov	r0, r3
 8019802:	f7ff f9ef 	bl	8018be4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8019806:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        RuntimeShape(filter->dims->size,
 801980a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801980e:	4618      	mov	r0, r3
 8019810:	f7ff f9ad 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019818:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801981c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8019820:	3220      	adds	r2, #32
 8019822:	6878      	ldr	r0, [r7, #4]
 8019824:	4798      	blx	r3
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (buf_size > 0) {
 8019826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801982a:	2b00      	cmp	r3, #0
 801982c:	dd2c      	ble.n	8019888 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019832:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8019836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801983a:	322c      	adds	r2, #44	; 0x2c
 801983c:	6878      	ldr	r0, [r7, #4]
 801983e:	4798      	blx	r3
 8019840:	4603      	mov	r3, r0
 8019842:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8019846:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801984a:	2b00      	cmp	r3, #0
 801984c:	d01c      	beq.n	8019888 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
 801984e:	f897 4087 	ldrb.w	r4, [r7, #135]	; 0x87
 8019852:	e046      	b.n	80198e2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
 8019854:	08025fec 	.word	0x08025fec
 8019858:	08024370 	.word	0x08024370
 801985c:	080242cc 	.word	0x080242cc
 8019860:	08024358 	.word	0x08024358
 8019864:	08025ff0 	.word	0x08025ff0
 8019868:	08024384 	.word	0x08024384
 801986c:	08025ff4 	.word	0x08025ff4
 8019870:	08025ff8 	.word	0x08025ff8
 8019874:	08024398 	.word	0x08024398
 8019878:	080243c8 	.word	0x080243c8
 801987c:	080243d8 	.word	0x080243d8
 8019880:	080243ac 	.word	0x080243ac
 8019884:	080243e4 	.word	0x080243e4
        context, buf_size, &data->buffer_idx));
  }

  micro_context->DeallocateTempTfLiteTensor(output);
 8019888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	3324      	adds	r3, #36	; 0x24
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8019896:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801989a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 801989c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	3324      	adds	r3, #36	; 0x24
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80198aa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80198ae:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 80198b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	3324      	adds	r3, #36	; 0x24
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80198be:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80198c2:	4798      	blx	r3
  if (bias != nullptr) {
 80198c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d009      	beq.n	80198e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b0>
    micro_context->DeallocateTempTfLiteTensor(bias);
 80198cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	3324      	adds	r3, #36	; 0x24
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80198da:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80198de:	4798      	blx	r3
  }

  return kTfLiteOk;
 80198e0:	2400      	movs	r4, #0
}
 80198e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80198e6:	4618      	mov	r0, r3
 80198e8:	f7ff f941 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
 80198ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80198f0:	4618      	mov	r0, r3
 80198f2:	f7ff f93c 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
 80198f6:	4623      	mov	r3, r4
 80198f8:	4618      	mov	r0, r3
 80198fa:	37b8      	adds	r7, #184	; 0xb8
 80198fc:	46bd      	mov	sp, r7
 80198fe:	bdb0      	pop	{r4, r5, r7, pc}

08019900 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8019900:	b5b0      	push	{r4, r5, r7, lr}
 8019902:	b0b8      	sub	sp, #224	; 0xe0
 8019904:	af06      	add	r7, sp, #24
 8019906:	6078      	str	r0, [r7, #4]
 8019908:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801990a:	683b      	ldr	r3, [r7, #0]
 801990c:	695b      	ldr	r3, [r3, #20]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d101      	bne.n	8019916 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8019912:	f004 f8d3 	bl	801dabc <abort>
  const auto* params =
 8019916:	683b      	ldr	r3, [r7, #0]
 8019918:	695b      	ldr	r3, [r3, #20]
 801991a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 801991e:	4b7f      	ldr	r3, [pc, #508]	; (8019b1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21c>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	461a      	mov	r2, r3
 8019924:	6839      	ldr	r1, [r7, #0]
 8019926:	6878      	ldr	r0, [r7, #4]
 8019928:	f000 fa21 	bl	8019d6e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801992c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8019930:	4b7b      	ldr	r3, [pc, #492]	; (8019b20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x220>)
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	461a      	mov	r2, r3
 8019936:	6839      	ldr	r1, [r7, #0]
 8019938:	6878      	ldr	r0, [r7, #4]
 801993a:	f000 fa18 	bl	8019d6e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801993e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8019942:	4b78      	ldr	r3, [pc, #480]	; (8019b24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>)
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	461a      	mov	r2, r3
 8019948:	6839      	ldr	r1, [r7, #0]
 801994a:	6878      	ldr	r0, [r7, #4]
 801994c:	f000 fa0f 	bl	8019d6e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8019950:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8019954:	4b74      	ldr	r3, [pc, #464]	; (8019b28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x228>)
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	461a      	mov	r2, r3
 801995a:	6839      	ldr	r1, [r7, #0]
 801995c:	6878      	ldr	r0, [r7, #4]
 801995e:	f000 fa16 	bl	8019d8e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8019962:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

  TFLITE_DCHECK(node->user_data != nullptr);
 8019966:	683b      	ldr	r3, [r7, #0]
 8019968:	691b      	ldr	r3, [r3, #16]
 801996a:	2b00      	cmp	r3, #0
 801996c:	d101      	bne.n	8019972 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 801996e:	f004 f8a5 	bl	801dabc <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8019972:	683b      	ldr	r3, [r7, #0]
 8019974:	691b      	ldr	r3, [r3, #16]
 8019976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
      context, data.reference_op_data.filter_buffer_index, filter);
 801997a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801997e:	6a1a      	ldr	r2, [r3, #32]
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
 8019980:	f107 0008 	add.w	r0, r7, #8
 8019984:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8019988:	6879      	ldr	r1, [r7, #4]
 801998a:	f000 fa42 	bl	8019e12 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 801998e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019992:	7a1b      	ldrb	r3, [r3, #8]
 8019994:	2b09      	cmp	r3, #9
 8019996:	d06e      	beq.n	8019a76 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
 8019998:	2b09      	cmp	r3, #9
 801999a:	f300 80a6 	bgt.w	8019aea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
 801999e:	2b01      	cmp	r3, #1
 80199a0:	d003      	beq.n	80199aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 80199a2:	2b07      	cmp	r3, #7
 80199a4:	f000 8090 	beq.w	8019ac8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 80199a8:	e09f      	b.n	8019aea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      MicroPrintf("Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
#endif
      const float* bias_data =
          tflite::micro::GetOptionalTensorData<float>(bias);
 80199aa:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80199ae:	f000 f8db 	bl	8019b68 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80199b2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 80199b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80199ba:	781a      	ldrb	r2, [r3, #0]
 80199bc:	f107 0314 	add.w	r3, r7, #20
 80199c0:	4611      	mov	r1, r2
 80199c2:	4618      	mov	r0, r3
 80199c4:	f000 f8ed 	bl	8019ba2 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 80199c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80199cc:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80199d0:	4618      	mov	r0, r3
 80199d2:	f000 f9fc 	bl	8019dce <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80199d6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80199da:	f7ff fbb8 	bl	801914e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80199de:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 80199e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80199e4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80199e8:	4618      	mov	r0, r3
 80199ea:	f000 f9f0 	bl	8019dce <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80199ee:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80199f2:	f7ff fbac 	bl	801914e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80199f6:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias), bias_data,
 80199f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80199fc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8019a00:	4618      	mov	r0, r3
 8019a02:	f000 f9e4 	bl	8019dce <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 8019a06:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8019a0a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f000 f9dd 	bl	8019dce <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8019a14:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8019a18:	f7ff fba8 	bl	801916c <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8019a1c:	4603      	mov	r3, r0
 8019a1e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8019a22:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8019a26:	f107 0014 	add.w	r0, r7, #20
 8019a2a:	9304      	str	r3, [sp, #16]
 8019a2c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8019a30:	9303      	str	r3, [sp, #12]
 8019a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019a36:	9302      	str	r3, [sp, #8]
 8019a38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019a3c:	9301      	str	r3, [sp, #4]
 8019a3e:	9400      	str	r4, [sp, #0]
 8019a40:	4613      	mov	r3, r2
 8019a42:	462a      	mov	r2, r5
 8019a44:	f7ff fcc7 	bl	80193d6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 8019a48:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f7ff f88e 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias), bias_data,
 8019a52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019a56:	4618      	mov	r0, r3
 8019a58:	f7ff f889 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8019a5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8019a60:	4618      	mov	r0, r3
 8019a62:	f7ff f884 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8019a66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	f7ff f87f 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8019a70:	bf00      	nop
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
 8019a72:	2300      	movs	r3, #0
 8019a74:	e04d      	b.n	8019b12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      switch (filter_int8.type) {
 8019a76:	7c3b      	ldrb	r3, [r7, #16]
 8019a78:	2b09      	cmp	r3, #9
 8019a7a:	d110      	bne.n	8019a9e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19e>
        MicroPrintf("Filter data type %s currently not supported.",
 8019a7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8019a80:	7a1b      	ldrb	r3, [r3, #8]
 8019a82:	4618      	mov	r0, r3
 8019a84:	f7fe fc12 	bl	80182ac <TfLiteTypeGetName>
 8019a88:	4603      	mov	r3, r0
 8019a8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019a8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8019a92:	4619      	mov	r1, r3
 8019a94:	4825      	ldr	r0, [pc, #148]	; (8019b2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 8019a96:	f7ff fb44 	bl	8019122 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 8019a9a:	2301      	movs	r3, #1
 8019a9c:	e039      	b.n	8019b12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
          MicroPrintf("Filter Type %s (%d) not supported.",
 8019a9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8019aa2:	7a1b      	ldrb	r3, [r3, #8]
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	f7fe fc01 	bl	80182ac <TfLiteTypeGetName>
 8019aaa:	4603      	mov	r3, r0
 8019aac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8019ab0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8019ab4:	f103 0208 	add.w	r2, r3, #8
 8019ab8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019abc:	4619      	mov	r1, r3
 8019abe:	481c      	ldr	r0, [pc, #112]	; (8019b30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>)
 8019ac0:	f000 f863 	bl	8019b8a <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>
          return kTfLiteError;
 8019ac4:	2301      	movs	r3, #1
 8019ac6:	e024      	b.n	8019b12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
        MicroPrintf("Filter data type %s currently not supported.",
 8019ac8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8019acc:	7a1b      	ldrb	r3, [r3, #8]
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7fe fbec 	bl	80182ac <TfLiteTypeGetName>
 8019ad4:	4603      	mov	r3, r0
 8019ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8019ada:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019ade:	4619      	mov	r1, r3
 8019ae0:	4812      	ldr	r0, [pc, #72]	; (8019b2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 8019ae2:	f7ff fb1e 	bl	8019122 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 8019ae6:	2301      	movs	r3, #1
 8019ae8:	e013      	b.n	8019b12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8019aea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019aee:	7a1b      	ldrb	r3, [r3, #8]
 8019af0:	4618      	mov	r0, r3
 8019af2:	f7fe fbdb 	bl	80182ac <TfLiteTypeGetName>
 8019af6:	4603      	mov	r3, r0
 8019af8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8019afc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019b00:	f103 0208 	add.w	r2, r3, #8
 8019b04:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8019b08:	4619      	mov	r1, r3
 8019b0a:	480a      	ldr	r0, [pc, #40]	; (8019b34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x234>)
 8019b0c:	f7ff fbf2 	bl	80192f4 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
      return kTfLiteError;
 8019b10:	2301      	movs	r3, #1
}
 8019b12:	4618      	mov	r0, r3
 8019b14:	37c8      	adds	r7, #200	; 0xc8
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bdb0      	pop	{r4, r5, r7, pc}
 8019b1a:	bf00      	nop
 8019b1c:	08025fec 	.word	0x08025fec
 8019b20:	08025ff0 	.word	0x08025ff0
 8019b24:	08025ff4 	.word	0x08025ff4
 8019b28:	08025ff8 	.word	0x08025ff8
 8019b2c:	080243e4 	.word	0x080243e4
 8019b30:	08024654 	.word	0x08024654
 8019b34:	08024678 	.word	0x08024678

08019b38 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt16(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8019b38:	b580      	push	{r7, lr}
 8019b3a:	b084      	sub	sp, #16
 8019b3c:	af02      	add	r7, sp, #8
 8019b3e:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 8019b40:	6878      	ldr	r0, [r7, #4]
 8019b42:	2300      	movs	r3, #0
 8019b44:	9300      	str	r3, [sp, #0]
 8019b46:	4b05      	ldr	r3, [pc, #20]	; (8019b5c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x24>)
 8019b48:	4a05      	ldr	r2, [pc, #20]	; (8019b60 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 8019b4a:	4906      	ldr	r1, [pc, #24]	; (8019b64 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x2c>)
 8019b4c:	f000 f8b6 	bl	8019cbc <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8019b50:	bf00      	nop
}
 8019b52:	6878      	ldr	r0, [r7, #4]
 8019b54:	3708      	adds	r7, #8
 8019b56:	46bd      	mov	sp, r7
 8019b58:	bd80      	pop	{r7, pc}
 8019b5a:	bf00      	nop
 8019b5c:	08019901 	.word	0x08019901
 8019b60:	08019531 	.word	0x08019531
 8019b64:	08019505 	.word	0x08019505

08019b68 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor == nullptr ? nullptr : reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 8019b68:	b480      	push	{r7}
 8019b6a:	b083      	sub	sp, #12
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d002      	beq.n	8019b7c <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x14>
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 8019b7a:	e000      	b.n	8019b7e <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 8019b7c:	2300      	movs	r3, #0
}
 8019b7e:	4618      	mov	r0, r3
 8019b80:	370c      	adds	r7, #12
 8019b82:	46bd      	mov	sp, r7
 8019b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b88:	4770      	bx	lr

08019b8a <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8019b8a:	b480      	push	{r7}
 8019b8c:	b085      	sub	sp, #20
 8019b8e:	af00      	add	r7, sp, #0
 8019b90:	60f8      	str	r0, [r7, #12]
 8019b92:	60b9      	str	r1, [r7, #8]
 8019b94:	607a      	str	r2, [r7, #4]
}
 8019b96:	bf00      	nop
 8019b98:	3714      	adds	r7, #20
 8019b9a:	46bd      	mov	sp, r7
 8019b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba0:	4770      	bx	lr

08019ba2 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  op_params.quantized_activation_max = op_data.output_activation_max;
  return op_params;
}

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 8019ba2:	b580      	push	{r7, lr}
 8019ba4:	b082      	sub	sp, #8
 8019ba6:	af00      	add	r7, sp, #0
 8019ba8:	6078      	str	r0, [r7, #4]
 8019baa:	460b      	mov	r3, r1
 8019bac:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	f103 0220 	add.w	r2, r3, #32
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	f103 011c 	add.w	r1, r3, #28
 8019bba:	78fb      	ldrb	r3, [r7, #3]
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	f7ff fb57 	bl	8019270 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 8019bc2:	bf00      	nop
}
 8019bc4:	6878      	ldr	r0, [r7, #4]
 8019bc6:	3708      	adds	r7, #8
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	bd80      	pop	{r7, pc}

08019bcc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8019bcc:	b580      	push	{r7, lr}
 8019bce:	b08a      	sub	sp, #40	; 0x28
 8019bd0:	af02      	add	r7, sp, #8
 8019bd2:	60f8      	str	r0, [r7, #12]
 8019bd4:	607b      	str	r3, [r7, #4]
 8019bd6:	460b      	mov	r3, r1
 8019bd8:	72fb      	strb	r3, [r7, #11]
 8019bda:	4613      	mov	r3, r2
 8019bdc:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8019bde:	7abb      	ldrb	r3, [r7, #10]
 8019be0:	2b01      	cmp	r3, #1
 8019be2:	d044      	beq.n	8019c6e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 8019be4:	f04f 0200 	mov.w	r2, #0
 8019be8:	f04f 0300 	mov.w	r3, #0
 8019bec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8019bf0:	f107 0310 	add.w	r3, r7, #16
 8019bf4:	9301      	str	r3, [sp, #4]
 8019bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bf8:	9300      	str	r3, [sp, #0]
 8019bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bfe:	6879      	ldr	r1, [r7, #4]
 8019c00:	68f8      	ldr	r0, [r7, #12]
 8019c02:	f7fe fd49 	bl	8018698 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8019c06:	4603      	mov	r3, r0
 8019c08:	77fb      	strb	r3, [r7, #31]
 8019c0a:	7ffb      	ldrb	r3, [r7, #31]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d001      	beq.n	8019c14 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 8019c10:	7ffb      	ldrb	r3, [r7, #31]
 8019c12:	e02d      	b.n	8019c70 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8019c14:	ed97 7b04 	vldr	d7, [r7, #16]
 8019c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c1c:	3304      	adds	r3, #4
 8019c1e:	4619      	mov	r1, r3
 8019c20:	4610      	mov	r0, r2
 8019c22:	eeb0 0a47 	vmov.f32	s0, s14
 8019c26:	eef0 0a67 	vmov.f32	s1, s15
 8019c2a:	f7fe fc27 	bl	801847c <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	691a      	ldr	r2, [r3, #16]
 8019c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c34:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 8019c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c38:	691b      	ldr	r3, [r3, #16]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d001      	beq.n	8019c42 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 8019c3e:	f003 ff3d 	bl	801dabc <abort>
    data->filter_zero_point = filter->params.zero_point;
 8019c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c44:	691a      	ldr	r2, [r3, #16]
 8019c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c48:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8019c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c4c:	691a      	ldr	r2, [r3, #16]
 8019c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c50:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 8019c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c54:	f103 0208 	add.w	r2, r3, #8
 8019c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c5a:	330c      	adds	r3, #12
 8019c5c:	7af9      	ldrb	r1, [r7, #11]
 8019c5e:	9300      	str	r3, [sp, #0]
 8019c60:	4613      	mov	r3, r2
 8019c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c64:	68f8      	ldr	r0, [r7, #12]
 8019c66:	f7fe ff09 	bl	8018a7c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8019c6a:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8019c6c:	e000      	b.n	8019c70 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 8019c6e:	2300      	movs	r3, #0
}
 8019c70:	4618      	mov	r0, r3
 8019c72:	3720      	adds	r7, #32
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}

08019c78 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
namespace micro {

namespace {

int ValidateTensorIndexing(const TfLiteContext* context, int index,
                           int max_size, const int* tensor_indices) {
 8019c78:	b480      	push	{r7}
 8019c7a:	b087      	sub	sp, #28
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	60f8      	str	r0, [r7, #12]
 8019c80:	60b9      	str	r1, [r7, #8]
 8019c82:	607a      	str	r2, [r7, #4]
 8019c84:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	db0f      	blt.n	8019cac <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8019c8c:	68ba      	ldr	r2, [r7, #8]
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	429a      	cmp	r2, r3
 8019c92:	da0b      	bge.n	8019cac <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8019c94:	68bb      	ldr	r3, [r7, #8]
 8019c96:	009b      	lsls	r3, r3, #2
 8019c98:	683a      	ldr	r2, [r7, #0]
 8019c9a:	4413      	add	r3, r2
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8019ca0:	697b      	ldr	r3, [r7, #20]
 8019ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ca6:	d001      	beq.n	8019cac <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8019ca8:	697b      	ldr	r3, [r7, #20]
 8019caa:	e001      	b.n	8019cb0 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8019cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	371c      	adds	r7, #28
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cba:	4770      	bx	lr

08019cbc <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:

TfLiteRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer)) {
 8019cbc:	b480      	push	{r7}
 8019cbe:	b085      	sub	sp, #20
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	60f8      	str	r0, [r7, #12]
 8019cc4:	60b9      	str	r1, [r7, #8]
 8019cc6:	607a      	str	r2, [r7, #4]
 8019cc8:	603b      	str	r3, [r7, #0]
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	68ba      	ldr	r2, [r7, #8]
 8019cce:	601a      	str	r2, [r3, #0]
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	69ba      	ldr	r2, [r7, #24]
 8019cd4:	605a      	str	r2, [r3, #4]
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	687a      	ldr	r2, [r7, #4]
 8019cda:	609a      	str	r2, [r3, #8]
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	683a      	ldr	r2, [r7, #0]
 8019ce0:	60da      	str	r2, [r3, #12]
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	2200      	movs	r2, #0
 8019ce6:	611a      	str	r2, [r3, #16]
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	2200      	movs	r2, #0
 8019cec:	615a      	str	r2, [r3, #20]
 8019cee:	68fb      	ldr	r3, [r7, #12]
 8019cf0:	2200      	movs	r2, #0
 8019cf2:	619a      	str	r2, [r3, #24]
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	61da      	str	r2, [r3, #28]
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	2200      	movs	r2, #0
 8019cfe:	621a      	str	r2, [r3, #32]
}
 8019d00:	68f8      	ldr	r0, [r7, #12]
 8019d02:	3714      	adds	r7, #20
 8019d04:	46bd      	mov	sp, r7
 8019d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0a:	4770      	bx	lr

08019d0c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 8019d0c:	b580      	push	{r7, lr}
 8019d0e:	b086      	sub	sp, #24
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	60f8      	str	r0, [r7, #12]
 8019d14:	60b9      	str	r1, [r7, #8]
 8019d16:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d101      	bne.n	8019d22 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8019d1e:	f003 fecd 	bl	801dabc <abort>
  TFLITE_DCHECK(node != nullptr);
 8019d22:	68bb      	ldr	r3, [r7, #8]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d101      	bne.n	8019d2c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8019d28:	f003 fec8 	bl	801dabc <abort>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8019d2c:	68bb      	ldr	r3, [r7, #8]
 8019d2e:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8019d30:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8019d32:	68bb      	ldr	r3, [r7, #8]
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8019d38:	6879      	ldr	r1, [r7, #4]
 8019d3a:	68f8      	ldr	r0, [r7, #12]
 8019d3c:	f7ff ff9c 	bl	8019c78 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8019d40:	6178      	str	r0, [r7, #20]

  if (tensor_index < 0) {
 8019d42:	697b      	ldr	r3, [r7, #20]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	da01      	bge.n	8019d4c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x40>
    return nullptr;
 8019d48:	2300      	movs	r3, #0
 8019d4a:	e00c      	b.n	8019d66 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x5a>
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019d50:	68bb      	ldr	r3, [r7, #8]
 8019d52:	6819      	ldr	r1, [r3, #0]
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	009b      	lsls	r3, r3, #2
 8019d58:	440b      	add	r3, r1
 8019d5a:	685b      	ldr	r3, [r3, #4]
 8019d5c:	4619      	mov	r1, r3
 8019d5e:	68f8      	ldr	r0, [r7, #12]
 8019d60:	4790      	blx	r2
 8019d62:	4603      	mov	r3, r0
 8019d64:	bf00      	nop
}
 8019d66:	4618      	mov	r0, r3
 8019d68:	3718      	adds	r7, #24
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	bd80      	pop	{r7, pc}

08019d6e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8019d6e:	b580      	push	{r7, lr}
 8019d70:	b084      	sub	sp, #16
 8019d72:	af00      	add	r7, sp, #0
 8019d74:	60f8      	str	r0, [r7, #12]
 8019d76:	60b9      	str	r1, [r7, #8]
 8019d78:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8019d7a:	687a      	ldr	r2, [r7, #4]
 8019d7c:	68b9      	ldr	r1, [r7, #8]
 8019d7e:	68f8      	ldr	r0, [r7, #12]
 8019d80:	f7ff ffc4 	bl	8019d0c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8019d84:	4603      	mov	r3, r0
}
 8019d86:	4618      	mov	r0, r3
 8019d88:	3710      	adds	r7, #16
 8019d8a:	46bd      	mov	sp, r7
 8019d8c:	bd80      	pop	{r7, pc}

08019d8e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 8019d8e:	b580      	push	{r7, lr}
 8019d90:	b084      	sub	sp, #16
 8019d92:	af00      	add	r7, sp, #0
 8019d94:	60f8      	str	r0, [r7, #12]
 8019d96:	60b9      	str	r1, [r7, #8]
 8019d98:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d101      	bne.n	8019da4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8019da0:	f003 fe8c 	bl	801dabc <abort>
  TFLITE_DCHECK(node != nullptr);
 8019da4:	68bb      	ldr	r3, [r7, #8]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d101      	bne.n	8019dae <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8019daa:	f003 fe87 	bl	801dabc <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019db2:	68bb      	ldr	r3, [r7, #8]
 8019db4:	6859      	ldr	r1, [r3, #4]
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	009b      	lsls	r3, r3, #2
 8019dba:	440b      	add	r3, r1
 8019dbc:	685b      	ldr	r3, [r3, #4]
 8019dbe:	4619      	mov	r1, r3
 8019dc0:	68f8      	ldr	r0, [r7, #12]
 8019dc2:	4790      	blx	r2
 8019dc4:	4603      	mov	r3, r0
}
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	3710      	adds	r7, #16
 8019dca:	46bd      	mov	sp, r7
 8019dcc:	bd80      	pop	{r7, pc}

08019dce <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8019dce:	b580      	push	{r7, lr}
 8019dd0:	b086      	sub	sp, #24
 8019dd2:	af00      	add	r7, sp, #0
 8019dd4:	6078      	str	r0, [r7, #4]
 8019dd6:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8019dd8:	683b      	ldr	r3, [r7, #0]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d003      	beq.n	8019de6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8019dde:	683b      	ldr	r3, [r7, #0]
 8019de0:	685b      	ldr	r3, [r3, #4]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d103      	bne.n	8019dee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8019de6:	6878      	ldr	r0, [r7, #4]
 8019de8:	f7fe fea0 	bl	8018b2c <_ZN6tflite12RuntimeShapeC1Ev>
 8019dec:	e00d      	b.n	8019e0a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8019dee:	683b      	ldr	r3, [r7, #0]
 8019df0:	685b      	ldr	r3, [r3, #4]
 8019df2:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8019df4:	697b      	ldr	r3, [r7, #20]
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8019dfa:	697b      	ldr	r3, [r7, #20]
 8019dfc:	3304      	adds	r3, #4
 8019dfe:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8019e00:	68fa      	ldr	r2, [r7, #12]
 8019e02:	6939      	ldr	r1, [r7, #16]
 8019e04:	6878      	ldr	r0, [r7, #4]
 8019e06:	f7fe fe9f 	bl	8018b48 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8019e0a:	6878      	ldr	r0, [r7, #4]
 8019e0c:	3718      	adds	r7, #24
 8019e0e:	46bd      	mov	sp, r7
 8019e10:	bd80      	pop	{r7, pc}

08019e12 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
 8019e12:	b5b0      	push	{r4, r5, r7, lr}
 8019e14:	b08e      	sub	sp, #56	; 0x38
 8019e16:	af00      	add	r7, sp, #0
 8019e18:	60f8      	str	r0, [r7, #12]
 8019e1a:	60b9      	str	r1, [r7, #8]
 8019e1c:	607a      	str	r2, [r7, #4]
 8019e1e:	603b      	str	r3, [r7, #0]
  if (tensor->type != kTfLiteInt4) {
 8019e20:	683b      	ldr	r3, [r7, #0]
 8019e22:	7a1b      	ldrb	r3, [r3, #8]
 8019e24:	2b12      	cmp	r3, #18
 8019e26:	d005      	beq.n	8019e34 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x22>
    return *tensor;
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	683a      	ldr	r2, [r7, #0]
 8019e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8019e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019e32:	e033      	b.n	8019e9c <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x8a>
  }

  TfLiteEvalTensor new_tensor;
  new_tensor.data.data = static_cast<int8_t*>(
      context->GetScratchBuffer(context, scratch_buffer_index));
 8019e34:	68bb      	ldr	r3, [r7, #8]
 8019e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e38:	6879      	ldr	r1, [r7, #4]
 8019e3a:	68b8      	ldr	r0, [r7, #8]
 8019e3c:	4798      	blx	r3
 8019e3e:	4603      	mov	r3, r0
  new_tensor.data.data = static_cast<int8_t*>(
 8019e40:	617b      	str	r3, [r7, #20]
  new_tensor.dims = tensor->dims;
 8019e42:	683b      	ldr	r3, [r7, #0]
 8019e44:	685b      	ldr	r3, [r3, #4]
 8019e46:	61bb      	str	r3, [r7, #24]
  new_tensor.type = kTfLiteInt8;
 8019e48:	2309      	movs	r3, #9
 8019e4a:	773b      	strb	r3, [r7, #28]
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 8019e4c:	6838      	ldr	r0, [r7, #0]
 8019e4e:	f7ff f99c 	bl	801918a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8019e52:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 8019e54:	f107 0320 	add.w	r3, r7, #32
 8019e58:	6839      	ldr	r1, [r7, #0]
 8019e5a:	4618      	mov	r0, r3
 8019e5c:	f7ff ffb7 	bl	8019dce <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 8019e60:	f107 0320 	add.w	r3, r7, #32
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7fe febd 	bl	8018be4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8019e6a:	4605      	mov	r5, r0
 8019e6c:	f107 0314 	add.w	r3, r7, #20
 8019e70:	4618      	mov	r0, r3
 8019e72:	f7ff f999 	bl	80191a8 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8019e76:	4603      	mov	r3, r0
 8019e78:	461a      	mov	r2, r3
 8019e7a:	4629      	mov	r1, r5
 8019e7c:	4620      	mov	r0, r4
 8019e7e:	f7fe fa9d 	bl	80183bc <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 8019e82:	f107 0320 	add.w	r3, r7, #32
 8019e86:	4618      	mov	r0, r3
 8019e88:	f7fe fe71 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	461c      	mov	r4, r3
 8019e90:	f107 0314 	add.w	r3, r7, #20
 8019e94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019e98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8019e9c:	68f8      	ldr	r0, [r7, #12]
 8019e9e:	3738      	adds	r7, #56	; 0x38
 8019ea0:	46bd      	mov	sp, r7
 8019ea2:	bdb0      	pop	{r4, r5, r7, pc}

08019ea4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8019ea4:	b590      	push	{r4, r7, lr}
 8019ea6:	b087      	sub	sp, #28
 8019ea8:	af00      	add	r7, sp, #0
 8019eaa:	60f8      	str	r0, [r7, #12]
 8019eac:	60b9      	str	r1, [r7, #8]
 8019eae:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8019eb0:	68f8      	ldr	r0, [r7, #12]
 8019eb2:	f7fe fefe 	bl	8018cb2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019eb6:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8019eb8:	2300      	movs	r3, #0
 8019eba:	617b      	str	r3, [r7, #20]
 8019ebc:	e014      	b.n	8019ee8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
    if (i != skip_dim) {
 8019ebe:	697a      	ldr	r2, [r7, #20]
 8019ec0:	68bb      	ldr	r3, [r7, #8]
 8019ec2:	429a      	cmp	r2, r3
 8019ec4:	d00d      	beq.n	8019ee2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8019ec6:	6979      	ldr	r1, [r7, #20]
 8019ec8:	68f8      	ldr	r0, [r7, #12]
 8019eca:	f7ff f97c 	bl	80191c6 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019ece:	4604      	mov	r4, r0
 8019ed0:	6979      	ldr	r1, [r7, #20]
 8019ed2:	6878      	ldr	r0, [r7, #4]
 8019ed4:	f7ff f977 	bl	80191c6 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019ed8:	4603      	mov	r3, r0
 8019eda:	429c      	cmp	r4, r3
 8019edc:	d001      	beq.n	8019ee2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
 8019ede:	f003 fded 	bl	801dabc <abort>
  for (int i = 0; i < dims_count; ++i) {
 8019ee2:	697b      	ldr	r3, [r7, #20]
 8019ee4:	3301      	adds	r3, #1
 8019ee6:	617b      	str	r3, [r7, #20]
 8019ee8:	697a      	ldr	r2, [r7, #20]
 8019eea:	693b      	ldr	r3, [r7, #16]
 8019eec:	429a      	cmp	r2, r3
 8019eee:	dbe6      	blt.n	8019ebe <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8019ef0:	68b9      	ldr	r1, [r7, #8]
 8019ef2:	68f8      	ldr	r0, [r7, #12]
 8019ef4:	f7ff fa39 	bl	801936a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8019ef8:	4603      	mov	r3, r0
}
 8019efa:	4618      	mov	r0, r3
 8019efc:	371c      	adds	r7, #28
 8019efe:	46bd      	mov	sp, r7
 8019f00:	bd90      	pop	{r4, r7, pc}

08019f02 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 8019f02:	b580      	push	{r7, lr}
 8019f04:	ed2d 8b02 	vpush	{d8}
 8019f08:	b08e      	sub	sp, #56	; 0x38
 8019f0a:	af00      	add	r7, sp, #0
 8019f0c:	60f8      	str	r0, [r7, #12]
 8019f0e:	60b9      	str	r1, [r7, #8]
 8019f10:	607a      	str	r2, [r7, #4]
 8019f12:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8019f14:	68b8      	ldr	r0, [r7, #8]
 8019f16:	f7fe fecc 	bl	8018cb2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019f1a:	4603      	mov	r3, r0
 8019f1c:	3b01      	subs	r3, #1
 8019f1e:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8019f20:	683a      	ldr	r2, [r7, #0]
 8019f22:	6a39      	ldr	r1, [r7, #32]
 8019f24:	68b8      	ldr	r0, [r7, #8]
 8019f26:	f7ff ffbd 	bl	8019ea4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8019f2a:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8019f2c:	6a3b      	ldr	r3, [r7, #32]
 8019f2e:	683a      	ldr	r2, [r7, #0]
 8019f30:	6a39      	ldr	r1, [r7, #32]
 8019f32:	68b8      	ldr	r0, [r7, #8]
 8019f34:	f7ff f9ea 	bl	801930c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019f38:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8019f3e:	e085      	b.n	801a04c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14a>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8019f40:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8019f44:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8019f46:	2300      	movs	r3, #0
 8019f48:	633b      	str	r3, [r7, #48]	; 0x30
 8019f4a:	e014      	b.n	8019f76 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x74>
      max = std::max(max, input_data[i * depth + c]);
 8019f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f4e:	69ba      	ldr	r2, [r7, #24]
 8019f50:	fb03 f202 	mul.w	r2, r3, r2
 8019f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f56:	4413      	add	r3, r2
 8019f58:	009b      	lsls	r3, r3, #2
 8019f5a:	687a      	ldr	r2, [r7, #4]
 8019f5c:	441a      	add	r2, r3
 8019f5e:	f107 0310 	add.w	r3, r7, #16
 8019f62:	4611      	mov	r1, r2
 8019f64:	4618      	mov	r0, r3
 8019f66:	f7ef fd0b 	bl	8009980 <_ZSt3maxIfERKT_S2_S2_>
 8019f6a:	4603      	mov	r3, r0
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8019f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f72:	3301      	adds	r3, #1
 8019f74:	633b      	str	r3, [r7, #48]	; 0x30
 8019f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f78:	69bb      	ldr	r3, [r7, #24]
 8019f7a:	429a      	cmp	r2, r3
 8019f7c:	dbe6      	blt.n	8019f4c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4a>
    }

    // Compute sum.
    float sum = 0.f;
 8019f7e:	f04f 0300 	mov.w	r3, #0
 8019f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8019f84:	2300      	movs	r3, #0
 8019f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f88:	e035      	b.n	8019ff6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf4>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8019f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f8c:	69ba      	ldr	r2, [r7, #24]
 8019f8e:	fb03 f202 	mul.w	r2, r3, r2
 8019f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f94:	4413      	add	r3, r2
 8019f96:	009b      	lsls	r3, r3, #2
 8019f98:	687a      	ldr	r2, [r7, #4]
 8019f9a:	4413      	add	r3, r2
 8019f9c:	ed93 7a00 	vldr	s14, [r3]
 8019fa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8019fa4:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fae:	4610      	mov	r0, r2
 8019fb0:	4619      	mov	r1, r3
 8019fb2:	f7e6 fe29 	bl	8000c08 <__aeabi_d2f>
 8019fb6:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8019fba:	ee68 7a27 	vmul.f32	s15, s16, s15
 8019fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8019fc2:	f7e7 fdb3 	bl	8001b2c <_ZSt3expf>
 8019fc6:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 8019fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019fcc:	69ba      	ldr	r2, [r7, #24]
 8019fce:	fb03 f202 	mul.w	r2, r3, r2
 8019fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fd4:	4413      	add	r3, r2
 8019fd6:	009b      	lsls	r3, r3, #2
 8019fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019fda:	4413      	add	r3, r2
 8019fdc:	697a      	ldr	r2, [r7, #20]
 8019fde:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 8019fe0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019fe4:	edd7 7a05 	vldr	s15, [r7, #20]
 8019fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019fec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8019ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ff2:	3301      	adds	r3, #1
 8019ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8019ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ff8:	69bb      	ldr	r3, [r7, #24]
 8019ffa:	429a      	cmp	r2, r3
 8019ffc:	dbc5      	blt.n	8019f8a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 8019ffe:	2300      	movs	r3, #0
 801a000:	627b      	str	r3, [r7, #36]	; 0x24
 801a002:	e01c      	b.n	801a03e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 801a004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a006:	69ba      	ldr	r2, [r7, #24]
 801a008:	fb03 f202 	mul.w	r2, r3, r2
 801a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a00e:	4413      	add	r3, r2
 801a010:	009b      	lsls	r3, r3, #2
 801a012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a014:	4413      	add	r3, r2
 801a016:	edd3 6a00 	vldr	s13, [r3]
 801a01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a01c:	69ba      	ldr	r2, [r7, #24]
 801a01e:	fb03 f202 	mul.w	r2, r3, r2
 801a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a024:	4413      	add	r3, r2
 801a026:	009b      	lsls	r3, r3, #2
 801a028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a02a:	4413      	add	r3, r2
 801a02c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801a030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a034:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 801a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a03a:	3301      	adds	r3, #1
 801a03c:	627b      	str	r3, [r7, #36]	; 0x24
 801a03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a040:	69bb      	ldr	r3, [r7, #24]
 801a042:	429a      	cmp	r2, r3
 801a044:	dbde      	blt.n	801a004 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x102>
  for (int i = 0; i < outer_size; ++i) {
 801a046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a048:	3301      	adds	r3, #1
 801a04a:	637b      	str	r3, [r7, #52]	; 0x34
 801a04c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a04e:	69fb      	ldr	r3, [r7, #28]
 801a050:	429a      	cmp	r2, r3
 801a052:	f6ff af75 	blt.w	8019f40 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
    }
  }
}
 801a056:	bf00      	nop
 801a058:	bf00      	nop
 801a05a:	3738      	adds	r7, #56	; 0x38
 801a05c:	46bd      	mov	sp, r7
 801a05e:	ecbd 8b02 	vpop	{d8}
 801a062:	bd80      	pop	{r7, pc}

0801a064 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  SoftmaxParams softmax_params;
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801a064:	b580      	push	{r7, lr}
 801a066:	b084      	sub	sp, #16
 801a068:	af00      	add	r7, sp, #0
 801a06a:	60f8      	str	r0, [r7, #12]
 801a06c:	60b9      	str	r1, [r7, #8]
 801a06e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a074:	2b00      	cmp	r3, #0
 801a076:	d101      	bne.n	801a07c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 801a078:	f003 fd20 	bl	801dabc <abort>
  return context->AllocatePersistentBuffer(context,
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a080:	2140      	movs	r1, #64	; 0x40
 801a082:	68f8      	ldr	r0, [r7, #12]
 801a084:	4798      	blx	r3
 801a086:	4603      	mov	r3, r0
                                           sizeof(CMSISNNSoftmaxParams));
}
 801a088:	4618      	mov	r0, r3
 801a08a:	3710      	adds	r7, #16
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd80      	pop	{r7, pc}

0801a090 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801a090:	b590      	push	{r4, r7, lr}
 801a092:	b09d      	sub	sp, #116	; 0x74
 801a094:	af04      	add	r7, sp, #16
 801a096:	6078      	str	r0, [r7, #4]
 801a098:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 801a09a:	6878      	ldr	r0, [r7, #4]
 801a09c:	f7ff f835 	bl	801910a <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 801a0a0:	65f8      	str	r0, [r7, #92]	; 0x5c

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801a0a2:	6838      	ldr	r0, [r7, #0]
 801a0a4:	f7fe fddf 	bl	8018c66 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801a0a8:	4603      	mov	r3, r0
 801a0aa:	2b01      	cmp	r3, #1
 801a0ac:	bf14      	ite	ne
 801a0ae:	2301      	movne	r3, #1
 801a0b0:	2300      	moveq	r3, #0
 801a0b2:	b2db      	uxtb	r3, r3
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d013      	beq.n	801a0e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x50>
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	691c      	ldr	r4, [r3, #16]
 801a0bc:	6838      	ldr	r0, [r7, #0]
 801a0be:	f7fe fdd2 	bl	8018c66 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	2201      	movs	r2, #1
 801a0c6:	9203      	str	r2, [sp, #12]
 801a0c8:	9302      	str	r3, [sp, #8]
 801a0ca:	4b6c      	ldr	r3, [pc, #432]	; (801a27c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801a0cc:	9301      	str	r3, [sp, #4]
 801a0ce:	4b6c      	ldr	r3, [pc, #432]	; (801a280 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f0>)
 801a0d0:	9300      	str	r3, [sp, #0]
 801a0d2:	2334      	movs	r3, #52	; 0x34
 801a0d4:	4a6b      	ldr	r2, [pc, #428]	; (801a284 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 801a0d6:	496c      	ldr	r1, [pc, #432]	; (801a288 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 801a0d8:	6878      	ldr	r0, [r7, #4]
 801a0da:	47a0      	blx	r4
 801a0dc:	2401      	movs	r4, #1
 801a0de:	e0c8      	b.n	801a272 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801a0e0:	6838      	ldr	r0, [r7, #0]
 801a0e2:	f7fe fdd3 	bl	8018c8c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801a0e6:	4603      	mov	r3, r0
 801a0e8:	2b01      	cmp	r3, #1
 801a0ea:	bf14      	ite	ne
 801a0ec:	2301      	movne	r3, #1
 801a0ee:	2300      	moveq	r3, #0
 801a0f0:	b2db      	uxtb	r3, r3
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d013      	beq.n	801a11e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	691c      	ldr	r4, [r3, #16]
 801a0fa:	6838      	ldr	r0, [r7, #0]
 801a0fc:	f7fe fdc6 	bl	8018c8c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801a100:	4603      	mov	r3, r0
 801a102:	2201      	movs	r2, #1
 801a104:	9203      	str	r2, [sp, #12]
 801a106:	9302      	str	r3, [sp, #8]
 801a108:	4b5c      	ldr	r3, [pc, #368]	; (801a27c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801a10a:	9301      	str	r3, [sp, #4]
 801a10c:	4b5f      	ldr	r3, [pc, #380]	; (801a28c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 801a10e:	9300      	str	r3, [sp, #0]
 801a110:	2335      	movs	r3, #53	; 0x35
 801a112:	4a5c      	ldr	r2, [pc, #368]	; (801a284 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 801a114:	495c      	ldr	r1, [pc, #368]	; (801a288 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 801a116:	6878      	ldr	r0, [r7, #4]
 801a118:	47a0      	blx	r4
 801a11a:	2401      	movs	r4, #1
 801a11c:	e0a9      	b.n	801a272 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 801a11e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	3318      	adds	r3, #24
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	2200      	movs	r2, #0
 801a128:	6839      	ldr	r1, [r7, #0]
 801a12a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a12c:	4798      	blx	r3
 801a12e:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, input != nullptr);
 801a130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a132:	2b00      	cmp	r3, #0
 801a134:	d10a      	bne.n	801a14c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	691c      	ldr	r4, [r3, #16]
 801a13a:	4b55      	ldr	r3, [pc, #340]	; (801a290 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 801a13c:	9300      	str	r3, [sp, #0]
 801a13e:	2337      	movs	r3, #55	; 0x37
 801a140:	4a50      	ldr	r2, [pc, #320]	; (801a284 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 801a142:	4954      	ldr	r1, [pc, #336]	; (801a294 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 801a144:	6878      	ldr	r0, [r7, #4]
 801a146:	47a0      	blx	r4
 801a148:	2401      	movs	r4, #1
 801a14a:	e092      	b.n	801a272 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801a14c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801a14e:	f7fe fa96 	bl	801867e <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 801a152:	4603      	mov	r3, r0
 801a154:	2b00      	cmp	r3, #0
 801a156:	bfd4      	ite	le
 801a158:	2301      	movle	r3, #1
 801a15a:	2300      	movgt	r3, #0
 801a15c:	b2db      	uxtb	r3, r3
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d00a      	beq.n	801a178 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe8>
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	691c      	ldr	r4, [r3, #16]
 801a166:	4b4c      	ldr	r3, [pc, #304]	; (801a298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 801a168:	9300      	str	r3, [sp, #0]
 801a16a:	2338      	movs	r3, #56	; 0x38
 801a16c:	4a45      	ldr	r2, [pc, #276]	; (801a284 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 801a16e:	4949      	ldr	r1, [pc, #292]	; (801a294 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 801a170:	6878      	ldr	r0, [r7, #4]
 801a172:	47a0      	blx	r4
 801a174:	2401      	movs	r4, #1
 801a176:	e07c      	b.n	801a272 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 801a178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	331c      	adds	r3, #28
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	2200      	movs	r2, #0
 801a182:	6839      	ldr	r1, [r7, #0]
 801a184:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a186:	4798      	blx	r3
 801a188:	6578      	str	r0, [r7, #84]	; 0x54
  TF_LITE_ENSURE(context, output != nullptr);
 801a18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d10a      	bne.n	801a1a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x116>
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	691c      	ldr	r4, [r3, #16]
 801a194:	4b41      	ldr	r3, [pc, #260]	; (801a29c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 801a196:	9300      	str	r3, [sp, #0]
 801a198:	233a      	movs	r3, #58	; 0x3a
 801a19a:	4a3a      	ldr	r2, [pc, #232]	; (801a284 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 801a19c:	493d      	ldr	r1, [pc, #244]	; (801a294 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 801a19e:	6878      	ldr	r0, [r7, #4]
 801a1a0:	47a0      	blx	r4
 801a1a2:	2401      	movs	r4, #1
 801a1a4:	e065      	b.n	801a272 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>

  TF_LITE_ENSURE(context, node->user_data != nullptr);
 801a1a6:	683b      	ldr	r3, [r7, #0]
 801a1a8:	691b      	ldr	r3, [r3, #16]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d10a      	bne.n	801a1c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	691c      	ldr	r4, [r3, #16]
 801a1b2:	4b3b      	ldr	r3, [pc, #236]	; (801a2a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 801a1b4:	9300      	str	r3, [sp, #0]
 801a1b6:	233c      	movs	r3, #60	; 0x3c
 801a1b8:	4a32      	ldr	r2, [pc, #200]	; (801a284 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 801a1ba:	4936      	ldr	r1, [pc, #216]	; (801a294 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 801a1bc:	6878      	ldr	r0, [r7, #4]
 801a1be:	47a0      	blx	r4
 801a1c0:	2401      	movs	r4, #1
 801a1c2:	e056      	b.n	801a272 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  CMSISNNSoftmaxParams* op_data =
 801a1c4:	683b      	ldr	r3, [r7, #0]
 801a1c6:	691b      	ldr	r3, [r3, #16]
 801a1c8:	653b      	str	r3, [r7, #80]	; 0x50
      static_cast<CMSISNNSoftmaxParams*>(node->user_data);

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 801a1ca:	683b      	ldr	r3, [r7, #0]
 801a1cc:	695b      	ldr	r3, [r3, #20]
 801a1ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
 801a1d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1d2:	9300      	str	r3, [sp, #0]
 801a1d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a1d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801a1da:	6878      	ldr	r0, [r7, #4]
 801a1dc:	f000 f920 	bl	801a420 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                                        &op_data->softmax_params);

  const auto input_shape = GetTensorShape(input);
 801a1e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a1ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	f7fe fd1c 	bl	8018c2a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const auto output_shape = GetTensorShape(output);
 801a1f2:	f107 030c 	add.w	r3, r7, #12
 801a1f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a1f8:	4618      	mov	r0, r3
 801a1fa:	f7fe fd16 	bl	8018c2a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801a1fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a202:	4618      	mov	r0, r3
 801a204:	f7fe fd55 	bl	8018cb2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801a208:	4603      	mov	r3, r0
 801a20a:	3b01      	subs	r3, #1
 801a20c:	647b      	str	r3, [r7, #68]	; 0x44
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801a20e:	f107 020c 	add.w	r2, r7, #12
 801a212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a218:	4618      	mov	r0, r3
 801a21a:	f7ff fe43 	bl	8019ea4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801a21e:	6438      	str	r0, [r7, #64]	; 0x40
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801a220:	f107 020c 	add.w	r2, r7, #12
 801a224:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801a228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a22a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a22c:	f7ff f86e 	bl	801930c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801a230:	63f8      	str	r0, [r7, #60]	; 0x3c
  op_data->num_rows = outer_size;
 801a232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a236:	639a      	str	r2, [r3, #56]	; 0x38
  op_data->row_size = depth;
 801a238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a23a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a23c:	63da      	str	r2, [r3, #60]	; 0x3c

  micro_context->DeallocateTempTfLiteTensor(input);
 801a23e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	3324      	adds	r3, #36	; 0x24
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801a248:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a24a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 801a24c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	3324      	adds	r3, #36	; 0x24
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a256:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a258:	4798      	blx	r3
  return ret_val;
 801a25a:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
}
 801a25e:	f107 030c 	add.w	r3, r7, #12
 801a262:	4618      	mov	r0, r3
 801a264:	f7fe fc83 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
 801a268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a26c:	4618      	mov	r0, r3
 801a26e:	f7fe fc7e 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
 801a272:	4623      	mov	r3, r4
 801a274:	4618      	mov	r0, r3
 801a276:	3764      	adds	r7, #100	; 0x64
 801a278:	46bd      	mov	sp, r7
 801a27a:	bd90      	pop	{r4, r7, pc}
 801a27c:	08024734 	.word	0x08024734
 801a280:	08024738 	.word	0x08024738
 801a284:	08024694 	.word	0x08024694
 801a288:	08024718 	.word	0x08024718
 801a28c:	08024748 	.word	0x08024748
 801a290:	08024774 	.word	0x08024774
 801a294:	0802475c 	.word	0x0802475c
 801a298:	08024788 	.word	0x08024788
 801a29c:	080247a4 	.word	0x080247a4
 801a2a0:	080247b8 	.word	0x080247b8

0801a2a4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801a2a4:	b5b0      	push	{r4, r5, r7, lr}
 801a2a6:	b0aa      	sub	sp, #168	; 0xa8
 801a2a8:	af02      	add	r7, sp, #8
 801a2aa:	6078      	str	r0, [r7, #4]
 801a2ac:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801a2ae:	2200      	movs	r2, #0
 801a2b0:	6839      	ldr	r1, [r7, #0]
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f7ff fd5b 	bl	8019d6e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801a2b8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801a2bc:	2200      	movs	r2, #0
 801a2be:	6839      	ldr	r1, [r7, #0]
 801a2c0:	6878      	ldr	r0, [r7, #4]
 801a2c2:	f7ff fd64 	bl	8019d8e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801a2c6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

  TFLITE_DCHECK(node->user_data != nullptr);
 801a2ca:	683b      	ldr	r3, [r7, #0]
 801a2cc:	691b      	ldr	r3, [r3, #16]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d101      	bne.n	801a2d6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x32>
 801a2d2:	f003 fbf3 	bl	801dabc <abort>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);
 801a2d6:	683b      	ldr	r3, [r7, #0]
 801a2d8:	691b      	ldr	r3, [r3, #16]
  const CMSISNNSoftmaxParams op_data =
 801a2da:	f107 0410 	add.w	r4, r7, #16
 801a2de:	461d      	mov	r5, r3
 801a2e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a2e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a2e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a2e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a2e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a2ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a2ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801a2f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  switch (input->type) {
 801a2f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a2f8:	7a1b      	ldrb	r3, [r3, #8]
 801a2fa:	2b09      	cmp	r3, #9
 801a2fc:	d034      	beq.n	801a368 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
 801a2fe:	2b09      	cmp	r3, #9
 801a300:	dc5c      	bgt.n	801a3bc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
 801a302:	2b01      	cmp	r3, #1
 801a304:	d002      	beq.n	801a30c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x68>
 801a306:	2b07      	cmp	r3, #7
 801a308:	d043      	beq.n	801a392 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
 801a30a:	e057      	b.n	801a3bc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
      tflite::reference_ops::Softmax(
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 801a30c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801a310:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801a314:	4618      	mov	r0, r3
 801a316:	f7ff fd5a 	bl	8019dce <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801a31a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801a31e:	f7fe ff16 	bl	801914e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801a322:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 801a324:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801a328:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801a32c:	4618      	mov	r0, r3
 801a32e:	f7ff fd4e 	bl	8019dce <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801a332:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801a336:	f7fe ff19 	bl	801916c <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801a33a:	4602      	mov	r2, r0
 801a33c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801a340:	f107 0154 	add.w	r1, r7, #84	; 0x54
 801a344:	f107 0010 	add.w	r0, r7, #16
 801a348:	9200      	str	r2, [sp, #0]
 801a34a:	4622      	mov	r2, r4
 801a34c:	f7ff fdd9 	bl	8019f02 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 801a350:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801a354:	4618      	mov	r0, r3
 801a356:	f7fe fc0a 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 801a35a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801a35e:	4618      	mov	r0, r3
 801a360:	f7fe fc05 	bl	8018b6e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 801a364:	2300      	movs	r3, #0
 801a366:	e03d      	b.n	801a3e4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    }
    case kTfLiteInt8: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 801a368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a36c:	7a1b      	ldrb	r3, [r3, #8]
 801a36e:	4618      	mov	r0, r3
 801a370:	f7fd ff9c 	bl	80182ac <TfLiteTypeGetName>
 801a374:	4603      	mov	r3, r0
 801a376:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801a37a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a37e:	f103 0208 	add.w	r2, r3, #8
 801a382:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801a386:	4619      	mov	r1, r3
 801a388:	4818      	ldr	r0, [pc, #96]	; (801a3ec <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 801a38a:	f7fe ffb3 	bl	80192f4 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 801a38e:	2301      	movs	r3, #1
 801a390:	e028      	b.n	801a3e4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
      }
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 801a392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a396:	7a1b      	ldrb	r3, [r3, #8]
 801a398:	4618      	mov	r0, r3
 801a39a:	f7fd ff87 	bl	80182ac <TfLiteTypeGetName>
 801a39e:	4603      	mov	r3, r0
 801a3a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a3a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a3a8:	f103 0208 	add.w	r2, r3, #8
 801a3ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801a3b0:	4619      	mov	r1, r3
 801a3b2:	480e      	ldr	r0, [pc, #56]	; (801a3ec <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 801a3b4:	f7fe ff9e 	bl	80192f4 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 801a3b8:	2301      	movs	r3, #1
 801a3ba:	e013      	b.n	801a3e4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
              tflite::micro::GetTensorData<int16_t>(output)),
          ARM_CMSIS_NN_SUCCESS);
      return kTfLiteOk;
    }
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 801a3bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a3c0:	7a1b      	ldrb	r3, [r3, #8]
 801a3c2:	4618      	mov	r0, r3
 801a3c4:	f7fd ff72 	bl	80182ac <TfLiteTypeGetName>
 801a3c8:	4603      	mov	r3, r0
 801a3ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a3ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a3d2:	f103 0208 	add.w	r2, r3, #8
 801a3d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801a3da:	4619      	mov	r1, r3
 801a3dc:	4803      	ldr	r0, [pc, #12]	; (801a3ec <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 801a3de:	f7fe ff89 	bl	80192f4 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 801a3e2:	2301      	movs	r3, #1
  }
}
 801a3e4:	4618      	mov	r0, r3
 801a3e6:	37a0      	adds	r7, #160	; 0xa0
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	bdb0      	pop	{r4, r5, r7, pc}
 801a3ec:	080247d4 	.word	0x080247d4

0801a3f0 <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b084      	sub	sp, #16
 801a3f4:	af02      	add	r7, sp, #8
 801a3f6:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
 801a3f8:	6878      	ldr	r0, [r7, #4]
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	9300      	str	r3, [sp, #0]
 801a3fe:	4b05      	ldr	r3, [pc, #20]	; (801a414 <_ZN6tflite16Register_SOFTMAXEv+0x24>)
 801a400:	4a05      	ldr	r2, [pc, #20]	; (801a418 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 801a402:	4906      	ldr	r1, [pc, #24]	; (801a41c <_ZN6tflite16Register_SOFTMAXEv+0x2c>)
 801a404:	f7ff fc5a 	bl	8019cbc <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 801a408:	bf00      	nop
}
 801a40a:	6878      	ldr	r0, [r7, #4]
 801a40c:	3708      	adds	r7, #8
 801a40e:	46bd      	mov	sp, r7
 801a410:	bd80      	pop	{r7, pc}
 801a412:	bf00      	nop
 801a414:	0801a2a5 	.word	0x0801a2a5
 801a418:	0801a091 	.word	0x0801a091
 801a41c:	0801a065 	.word	0x0801a065

0801a420 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 801a420:	b5b0      	push	{r4, r5, r7, lr}
 801a422:	b08a      	sub	sp, #40	; 0x28
 801a424:	af04      	add	r7, sp, #16
 801a426:	60f8      	str	r0, [r7, #12]
 801a428:	60b9      	str	r1, [r7, #8]
 801a42a:	607a      	str	r2, [r7, #4]
 801a42c:	603b      	str	r3, [r7, #0]
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 801a42e:	68bb      	ldr	r3, [r7, #8]
 801a430:	781b      	ldrb	r3, [r3, #0]
 801a432:	2b09      	cmp	r3, #9
 801a434:	d003      	beq.n	801a43e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
 801a436:	68bb      	ldr	r3, [r7, #8]
 801a438:	781b      	ldrb	r3, [r3, #0]
 801a43a:	2b07      	cmp	r3, #7
 801a43c:	d121      	bne.n	801a482 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x62>
    if (input->type == kTfLiteInt16) {
 801a43e:	68bb      	ldr	r3, [r7, #8]
 801a440:	781b      	ldrb	r3, [r3, #0]
 801a442:	2b07      	cmp	r3, #7
 801a444:	d10e      	bne.n	801a464 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x44>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801a446:	68fb      	ldr	r3, [r7, #12]
 801a448:	691c      	ldr	r4, [r3, #16]
 801a44a:	68bb      	ldr	r3, [r7, #8]
 801a44c:	781b      	ldrb	r3, [r3, #0]
 801a44e:	4618      	mov	r0, r3
 801a450:	f7fd ff2c 	bl	80182ac <TfLiteTypeGetName>
 801a454:	4602      	mov	r2, r0
 801a456:	68bb      	ldr	r3, [r7, #8]
 801a458:	781b      	ldrb	r3, [r3, #0]
 801a45a:	492e      	ldr	r1, [pc, #184]	; (801a514 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 801a45c:	68f8      	ldr	r0, [r7, #12]
 801a45e:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801a460:	2301      	movs	r3, #1
 801a462:	e053      	b.n	801a50c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801a464:	68fb      	ldr	r3, [r7, #12]
 801a466:	691c      	ldr	r4, [r3, #16]
 801a468:	68bb      	ldr	r3, [r7, #8]
 801a46a:	781b      	ldrb	r3, [r3, #0]
 801a46c:	4618      	mov	r0, r3
 801a46e:	f7fd ff1d 	bl	80182ac <TfLiteTypeGetName>
 801a472:	4602      	mov	r2, r0
 801a474:	68bb      	ldr	r3, [r7, #8]
 801a476:	781b      	ldrb	r3, [r3, #0]
 801a478:	4926      	ldr	r1, [pc, #152]	; (801a514 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 801a47a:	68f8      	ldr	r0, [r7, #12]
 801a47c:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801a47e:	2301      	movs	r3, #1
 801a480:	e044      	b.n	801a50c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                    TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
#endif
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801a482:	68bb      	ldr	r3, [r7, #8]
 801a484:	781b      	ldrb	r3, [r3, #0]
 801a486:	2b01      	cmp	r3, #1
 801a488:	d018      	beq.n	801a4bc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9c>
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	691c      	ldr	r4, [r3, #16]
 801a48e:	68bb      	ldr	r3, [r7, #8]
 801a490:	781b      	ldrb	r3, [r3, #0]
 801a492:	4618      	mov	r0, r3
 801a494:	f7fd ff0a 	bl	80182ac <TfLiteTypeGetName>
 801a498:	4605      	mov	r5, r0
 801a49a:	2001      	movs	r0, #1
 801a49c:	f7fd ff06 	bl	80182ac <TfLiteTypeGetName>
 801a4a0:	4603      	mov	r3, r0
 801a4a2:	9303      	str	r3, [sp, #12]
 801a4a4:	9502      	str	r5, [sp, #8]
 801a4a6:	4b1c      	ldr	r3, [pc, #112]	; (801a518 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 801a4a8:	9301      	str	r3, [sp, #4]
 801a4aa:	4b1c      	ldr	r3, [pc, #112]	; (801a51c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfc>)
 801a4ac:	9300      	str	r3, [sp, #0]
 801a4ae:	23a0      	movs	r3, #160	; 0xa0
 801a4b0:	4a1b      	ldr	r2, [pc, #108]	; (801a520 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 801a4b2:	491c      	ldr	r1, [pc, #112]	; (801a524 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 801a4b4:	68f8      	ldr	r0, [r7, #12]
 801a4b6:	47a0      	blx	r4
 801a4b8:	2301      	movs	r3, #1
 801a4ba:	e027      	b.n	801a50c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	781b      	ldrb	r3, [r3, #0]
 801a4c0:	2b01      	cmp	r3, #1
 801a4c2:	d018      	beq.n	801a4f6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd6>
 801a4c4:	68fb      	ldr	r3, [r7, #12]
 801a4c6:	691c      	ldr	r4, [r3, #16]
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	781b      	ldrb	r3, [r3, #0]
 801a4cc:	4618      	mov	r0, r3
 801a4ce:	f7fd feed 	bl	80182ac <TfLiteTypeGetName>
 801a4d2:	4605      	mov	r5, r0
 801a4d4:	2001      	movs	r0, #1
 801a4d6:	f7fd fee9 	bl	80182ac <TfLiteTypeGetName>
 801a4da:	4603      	mov	r3, r0
 801a4dc:	9303      	str	r3, [sp, #12]
 801a4de:	9502      	str	r5, [sp, #8]
 801a4e0:	4b0d      	ldr	r3, [pc, #52]	; (801a518 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 801a4e2:	9301      	str	r3, [sp, #4]
 801a4e4:	4b10      	ldr	r3, [pc, #64]	; (801a528 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x108>)
 801a4e6:	9300      	str	r3, [sp, #0]
 801a4e8:	23a1      	movs	r3, #161	; 0xa1
 801a4ea:	4a0d      	ldr	r2, [pc, #52]	; (801a520 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 801a4ec:	490d      	ldr	r1, [pc, #52]	; (801a524 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 801a4ee:	68f8      	ldr	r0, [r7, #12]
 801a4f0:	47a0      	blx	r4
 801a4f2:	2301      	movs	r3, #1
 801a4f4:	e00a      	b.n	801a50c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    op_data->beta = static_cast<double>(params->beta);
 801a4f6:	683b      	ldr	r3, [r7, #0]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	f7e6 f834 	bl	8000568 <__aeabi_f2d>
 801a500:	4602      	mov	r2, r0
 801a502:	460b      	mov	r3, r1
 801a504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a506:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 801a50a:	2300      	movs	r3, #0
}
 801a50c:	4618      	mov	r0, r3
 801a50e:	3718      	adds	r7, #24
 801a510:	46bd      	mov	sp, r7
 801a512:	bdb0      	pop	{r4, r5, r7, pc}
 801a514:	08024964 	.word	0x08024964
 801a518:	0802499c 	.word	0x0802499c
 801a51c:	08024938 	.word	0x08024938
 801a520:	080247f0 	.word	0x080247f0
 801a524:	08024980 	.word	0x08024980
 801a528:	08024928 	.word	0x08024928

0801a52c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 801a52c:	b480      	push	{r7}
 801a52e:	b085      	sub	sp, #20
 801a530:	af00      	add	r7, sp, #0
 801a532:	6078      	str	r0, [r7, #4]
 801a534:	6039      	str	r1, [r7, #0]
  tensor->type = kTfLiteFloat32;
 801a536:	683b      	ldr	r3, [r7, #0]
 801a538:	2201      	movs	r2, #1
 801a53a:	701a      	strb	r2, [r3, #0]
  tensor->is_variable = 0;
 801a53c:	683b      	ldr	r3, [r7, #0]
 801a53e:	2200      	movs	r2, #0
 801a540:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 801a544:	4a1d      	ldr	r2, [pc, #116]	; (801a5bc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	011b      	lsls	r3, r3, #4
 801a54a:	4413      	add	r3, r2
 801a54c:	781a      	ldrb	r2, [r3, #0]
 801a54e:	683b      	ldr	r3, [r7, #0]
 801a550:	751a      	strb	r2, [r3, #20]
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
 801a552:	4a1a      	ldr	r2, [pc, #104]	; (801a5bc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	011b      	lsls	r3, r3, #4
 801a558:	4413      	add	r3, r2
 801a55a:	330c      	adds	r3, #12
 801a55c:	681a      	ldr	r2, [r3, #0]
 801a55e:	683b      	ldr	r3, [r7, #0]
 801a560:	619a      	str	r2, [r3, #24]
  tensor->dims = tensorData[i].dims;
 801a562:	4a16      	ldr	r2, [pc, #88]	; (801a5bc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	011b      	lsls	r3, r3, #4
 801a568:	4413      	add	r3, r2
 801a56a:	3308      	adds	r3, #8
 801a56c:	681a      	ldr	r2, [r3, #0]
 801a56e:	683b      	ldr	r3, [r7, #0]
 801a570:	609a      	str	r2, [r3, #8]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 801a572:	683b      	ldr	r3, [r7, #0]
 801a574:	7d1b      	ldrb	r3, [r3, #20]
 801a576:	2b02      	cmp	r3, #2
 801a578:	d10e      	bne.n	801a598 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x6c>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801a57a:	4a10      	ldr	r2, [pc, #64]	; (801a5bc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	011b      	lsls	r3, r3, #4
 801a580:	4413      	add	r3, r2
 801a582:	3304      	adds	r3, #4
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	461a      	mov	r2, r3
 801a588:	4b0d      	ldr	r3, [pc, #52]	; (801a5c0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x94>)
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	4413      	add	r3, r2
 801a58e:	60fb      	str	r3, [r7, #12]

    tensor->data.data =  start;
 801a590:	683b      	ldr	r3, [r7, #0]
 801a592:	68fa      	ldr	r2, [r7, #12]
 801a594:	605a      	str	r2, [r3, #4]
 801a596:	e007      	b.n	801a5a8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x7c>
  }
  else {
      tensor->data.data = tensorData[i].data;
 801a598:	4a08      	ldr	r2, [pc, #32]	; (801a5bc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	011b      	lsls	r3, r3, #4
 801a59e:	4413      	add	r3, r2
 801a5a0:	3304      	adds	r3, #4
 801a5a2:	681a      	ldr	r2, [r3, #0]
 801a5a4:	683b      	ldr	r3, [r7, #0]
 801a5a6:	605a      	str	r2, [r3, #4]
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;
 801a5a8:	683b      	ldr	r3, [r7, #0]
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

}
 801a5b0:	bf00      	nop
 801a5b2:	3714      	adds	r7, #20
 801a5b4:	46bd      	mov	sp, r7
 801a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ba:	4770      	bx	lr
 801a5bc:	2000018c 	.word	0x2000018c
 801a5c0:	20000f0c 	.word	0x20000f0c

0801a5c4 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>:

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
 801a5c4:	b480      	push	{r7}
 801a5c6:	b085      	sub	sp, #20
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	6078      	str	r0, [r7, #4]
 801a5cc:	6039      	str	r1, [r7, #0]

  tensor->type = kTfLiteFloat32;
 801a5ce:	683b      	ldr	r3, [r7, #0]
 801a5d0:	2201      	movs	r2, #1
 801a5d2:	721a      	strb	r2, [r3, #8]

  tensor->dims = tensorData[i].dims;
 801a5d4:	4a16      	ldr	r2, [pc, #88]	; (801a630 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	011b      	lsls	r3, r3, #4
 801a5da:	4413      	add	r3, r2
 801a5dc:	3308      	adds	r3, #8
 801a5de:	681a      	ldr	r2, [r3, #0]
 801a5e0:	683b      	ldr	r3, [r7, #0]
 801a5e2:	605a      	str	r2, [r3, #4]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
 801a5e4:	4a12      	ldr	r2, [pc, #72]	; (801a630 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	011b      	lsls	r3, r3, #4
 801a5ea:	4413      	add	r3, r2
 801a5ec:	781b      	ldrb	r3, [r3, #0]
 801a5ee:	73fb      	strb	r3, [r7, #15]
  if(allocation_type == kTfLiteArenaRw) {
 801a5f0:	7bfb      	ldrb	r3, [r7, #15]
 801a5f2:	2b02      	cmp	r3, #2
 801a5f4:	d10e      	bne.n	801a614 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x50>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801a5f6:	4a0e      	ldr	r2, [pc, #56]	; (801a630 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	011b      	lsls	r3, r3, #4
 801a5fc:	4413      	add	r3, r2
 801a5fe:	3304      	adds	r3, #4
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	461a      	mov	r2, r3
 801a604:	4b0b      	ldr	r3, [pc, #44]	; (801a634 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x70>)
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	4413      	add	r3, r2
 801a60a:	60bb      	str	r3, [r7, #8]

    tensor->data.data =  start;
 801a60c:	683b      	ldr	r3, [r7, #0]
 801a60e:	68ba      	ldr	r2, [r7, #8]
 801a610:	601a      	str	r2, [r3, #0]
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}
 801a612:	e007      	b.n	801a624 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x60>
    tensor->data.data = tensorData[i].data;
 801a614:	4a06      	ldr	r2, [pc, #24]	; (801a630 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	011b      	lsls	r3, r3, #4
 801a61a:	4413      	add	r3, r2
 801a61c:	3304      	adds	r3, #4
 801a61e:	681a      	ldr	r2, [r3, #0]
 801a620:	683b      	ldr	r3, [r7, #0]
 801a622:	601a      	str	r2, [r3, #0]
}
 801a624:	bf00      	nop
 801a626:	3714      	adds	r7, #20
 801a628:	46bd      	mov	sp, r7
 801a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a62e:	4770      	bx	lr
 801a630:	2000018c 	.word	0x2000018c
 801a634:	20000f0c 	.word	0x20000f0c

0801a638 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
 801a638:	b580      	push	{r7, lr}
 801a63a:	b084      	sub	sp, #16
 801a63c:	af00      	add	r7, sp, #0
 801a63e:	6078      	str	r0, [r7, #4]
 801a640:	6039      	str	r1, [r7, #0]
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
 801a642:	683b      	ldr	r3, [r7, #0]
 801a644:	f003 030f 	and.w	r3, r3, #15
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d005      	beq.n	801a658 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x20>
 801a64c:	683b      	ldr	r3, [r7, #0]
 801a64e:	f003 030f 	and.w	r3, r3, #15
 801a652:	f1c3 0310 	rsb	r3, r3, #16
 801a656:	e000      	b.n	801a65a <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x22>
 801a658:	2300      	movs	r3, #0
 801a65a:	60fb      	str	r3, [r7, #12]

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
 801a65c:	4b29      	ldr	r3, [pc, #164]	; (801a704 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801a65e:	681a      	ldr	r2, [r3, #0]
 801a660:	6839      	ldr	r1, [r7, #0]
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	440b      	add	r3, r1
 801a666:	425b      	negs	r3, r3
 801a668:	441a      	add	r2, r3
 801a66a:	4b27      	ldr	r3, [pc, #156]	; (801a708 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd0>)
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	429a      	cmp	r2, r3
 801a670:	d224      	bcs.n	801a6bc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 801a672:	4b26      	ldr	r3, [pc, #152]	; (801a70c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	2b09      	cmp	r3, #9
 801a678:	d906      	bls.n	801a688 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 801a67a:	683b      	ldr	r3, [r7, #0]
 801a67c:	4619      	mov	r1, r3
 801a67e:	4824      	ldr	r0, [pc, #144]	; (801a710 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd8>)
 801a680:	f7fd fcb9 	bl	8017ff6 <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 801a684:	2300      	movs	r3, #0
 801a686:	e039      	b.n	801a6fc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 801a688:	2101      	movs	r1, #1
 801a68a:	6838      	ldr	r0, [r7, #0]
 801a68c:	f7fd fdd8 	bl	8018240 <_Z9ei_callocjj>
 801a690:	60b8      	str	r0, [r7, #8]
    if (ptr == NULL) {
 801a692:	68bb      	ldr	r3, [r7, #8]
 801a694:	2b00      	cmp	r3, #0
 801a696:	d106      	bne.n	801a6a6 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6e>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 801a698:	683b      	ldr	r3, [r7, #0]
 801a69a:	4619      	mov	r1, r3
 801a69c:	481d      	ldr	r0, [pc, #116]	; (801a714 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xdc>)
 801a69e:	f7fd fcaa 	bl	8017ff6 <_Z9ei_printfPKcz>
      return NULL;
 801a6a2:	2300      	movs	r3, #0
 801a6a4:	e02a      	b.n	801a6fc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 801a6a6:	4b19      	ldr	r3, [pc, #100]	; (801a70c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	1c5a      	adds	r2, r3, #1
 801a6ac:	4917      	ldr	r1, [pc, #92]	; (801a70c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 801a6ae:	600a      	str	r2, [r1, #0]
 801a6b0:	4919      	ldr	r1, [pc, #100]	; (801a718 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xe0>)
 801a6b2:	68ba      	ldr	r2, [r7, #8]
 801a6b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 801a6b8:	68bb      	ldr	r3, [r7, #8]
 801a6ba:	e01f      	b.n	801a6fc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
  }

  current_location -= bytes;
 801a6bc:	4b11      	ldr	r3, [pc, #68]	; (801a704 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801a6be:	681a      	ldr	r2, [r3, #0]
 801a6c0:	683b      	ldr	r3, [r7, #0]
 801a6c2:	425b      	negs	r3, r3
 801a6c4:	4413      	add	r3, r2
 801a6c6:	4a0f      	ldr	r2, [pc, #60]	; (801a704 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801a6c8:	6013      	str	r3, [r2, #0]

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
 801a6ca:	4b0e      	ldr	r3, [pc, #56]	; (801a704 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	3b0f      	subs	r3, #15
 801a6d0:	4a0c      	ldr	r2, [pc, #48]	; (801a704 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801a6d2:	6013      	str	r3, [r2, #0]
  current_location += 16 - ((uintptr_t)(current_location) & 15);
 801a6d4:	4b0b      	ldr	r3, [pc, #44]	; (801a704 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801a6d6:	681a      	ldr	r2, [r3, #0]
 801a6d8:	4b0a      	ldr	r3, [pc, #40]	; (801a704 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	f003 030f 	and.w	r3, r3, #15
 801a6e0:	f1c3 0310 	rsb	r3, r3, #16
 801a6e4:	4413      	add	r3, r2
 801a6e6:	4a07      	ldr	r2, [pc, #28]	; (801a704 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801a6e8:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 801a6ea:	4b06      	ldr	r3, [pc, #24]	; (801a704 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	60bb      	str	r3, [r7, #8]
  memset(ptr, 0, bytes);
 801a6f0:	683a      	ldr	r2, [r7, #0]
 801a6f2:	2100      	movs	r1, #0
 801a6f4:	68b8      	ldr	r0, [r7, #8]
 801a6f6:	f005 f8f5 	bl	801f8e4 <memset>

  return ptr;
 801a6fa:	68bb      	ldr	r3, [r7, #8]
}
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	3710      	adds	r7, #16
 801a700:	46bd      	mov	sp, r7
 801a702:	bd80      	pop	{r7, pc}
 801a704:	20000f14 	.word	0x20000f14
 801a708:	20000f10 	.word	0x20000f10
 801a70c:	20001134 	.word	0x20001134
 801a710:	08024a34 	.word	0x08024a34
 801a714:	08024ab4 	.word	0x08024ab4
 801a718:	2000110c 	.word	0x2000110c

0801a71c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 801a71c:	b580      	push	{r7, lr}
 801a71e:	b086      	sub	sp, #24
 801a720:	af00      	add	r7, sp, #0
 801a722:	60f8      	str	r0, [r7, #12]
 801a724:	60b9      	str	r1, [r7, #8]
 801a726:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 801a728:	4b1b      	ldr	r3, [pc, #108]	; (801a798 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	2b03      	cmp	r3, #3
 801a72e:	d906      	bls.n	801a73e <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 801a730:	68bb      	ldr	r3, [r7, #8]
 801a732:	4619      	mov	r1, r3
 801a734:	4819      	ldr	r0, [pc, #100]	; (801a79c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x80>)
 801a736:	f7fd fc5e 	bl	8017ff6 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801a73a:	2301      	movs	r3, #1
 801a73c:	e028      	b.n	801a790 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 801a73e:	68bb      	ldr	r3, [r7, #8]
 801a740:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
 801a742:	693b      	ldr	r3, [r7, #16]
 801a744:	4619      	mov	r1, r3
 801a746:	68f8      	ldr	r0, [r7, #12]
 801a748:	f7ff ff76 	bl	801a638 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 801a74c:	4603      	mov	r3, r0
 801a74e:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 801a750:	697b      	ldr	r3, [r7, #20]
 801a752:	2b00      	cmp	r3, #0
 801a754:	d106      	bne.n	801a764 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 801a756:	68bb      	ldr	r3, [r7, #8]
 801a758:	4619      	mov	r1, r3
 801a75a:	4811      	ldr	r0, [pc, #68]	; (801a7a0 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x84>)
 801a75c:	f7fd fc4b 	bl	8017ff6 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801a760:	2301      	movs	r3, #1
 801a762:	e015      	b.n	801a790 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 801a764:	4b0c      	ldr	r3, [pc, #48]	; (801a798 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	4a0e      	ldr	r2, [pc, #56]	; (801a7a4 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x88>)
 801a76a:	00db      	lsls	r3, r3, #3
 801a76c:	4413      	add	r3, r2
 801a76e:	f107 0210 	add.w	r2, r7, #16
 801a772:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a776:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 801a77a:	4b07      	ldr	r3, [pc, #28]	; (801a798 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	461a      	mov	r2, r3
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 801a784:	4b04      	ldr	r3, [pc, #16]	; (801a798 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	3301      	adds	r3, #1
 801a78a:	4a03      	ldr	r2, [pc, #12]	; (801a798 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 801a78c:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 801a78e:	2300      	movs	r3, #0
}
 801a790:	4618      	mov	r0, r3
 801a792:	3718      	adds	r7, #24
 801a794:	46bd      	mov	sp, r7
 801a796:	bd80      	pop	{r7, pc}
 801a798:	20001158 	.word	0x20001158
 801a79c:	08024aec 	.word	0x08024aec
 801a7a0:	08024b44 	.word	0x08024b44
 801a7a4:	20001138 	.word	0x20001138

0801a7a8 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
 801a7a8:	b480      	push	{r7}
 801a7aa:	b083      	sub	sp, #12
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	6078      	str	r0, [r7, #4]
 801a7b0:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 801a7b2:	4b09      	ldr	r3, [pc, #36]	; (801a7d8 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x30>)
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	461a      	mov	r2, r3
 801a7b8:	683b      	ldr	r3, [r7, #0]
 801a7ba:	4293      	cmp	r3, r2
 801a7bc:	dd01      	ble.n	801a7c2 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x1a>
    return NULL;
 801a7be:	2300      	movs	r3, #0
 801a7c0:	e004      	b.n	801a7cc <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 801a7c2:	4a06      	ldr	r2, [pc, #24]	; (801a7dc <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x34>)
 801a7c4:	683b      	ldr	r3, [r7, #0]
 801a7c6:	00db      	lsls	r3, r3, #3
 801a7c8:	4413      	add	r3, r2
 801a7ca:	685b      	ldr	r3, [r3, #4]
}
 801a7cc:	4618      	mov	r0, r3
 801a7ce:	370c      	adds	r7, #12
 801a7d0:	46bd      	mov	sp, r7
 801a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7d6:	4770      	bx	lr
 801a7d8:	20001158 	.word	0x20001158
 801a7dc:	20001138 	.word	0x20001138

0801a7e0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
 801a7e0:	b480      	push	{r7}
 801a7e2:	b083      	sub	sp, #12
 801a7e4:	af00      	add	r7, sp, #0
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 801a7e6:	2300      	movs	r3, #0
 801a7e8:	607b      	str	r3, [r7, #4]
 801a7ea:	e00d      	b.n	801a808 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 801a7ec:	4914      	ldr	r1, [pc, #80]	; (801a840 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x60>)
 801a7ee:	687a      	ldr	r2, [r7, #4]
 801a7f0:	4613      	mov	r3, r2
 801a7f2:	011b      	lsls	r3, r3, #4
 801a7f4:	4413      	add	r3, r2
 801a7f6:	009b      	lsls	r3, r3, #2
 801a7f8:	440b      	add	r3, r1
 801a7fa:	3340      	adds	r3, #64	; 0x40
 801a7fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a800:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	3301      	adds	r3, #1
 801a806:	607b      	str	r3, [r7, #4]
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	2b03      	cmp	r3, #3
 801a80c:	d9ee      	bls.n	801a7ec <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0xc>
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 801a80e:	2300      	movs	r3, #0
 801a810:	603b      	str	r3, [r7, #0]
 801a812:	e00a      	b.n	801a82a <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x4a>
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 801a814:	4a0b      	ldr	r2, [pc, #44]	; (801a844 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x64>)
 801a816:	683b      	ldr	r3, [r7, #0]
 801a818:	011b      	lsls	r3, r3, #4
 801a81a:	4413      	add	r3, r2
 801a81c:	330c      	adds	r3, #12
 801a81e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a822:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 801a824:	683b      	ldr	r3, [r7, #0]
 801a826:	3301      	adds	r3, #1
 801a828:	603b      	str	r3, [r7, #0]
 801a82a:	683b      	ldr	r3, [r7, #0]
 801a82c:	2b03      	cmp	r3, #3
 801a82e:	d9f1      	bls.n	801a814 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x34>
  }
}
 801a830:	bf00      	nop
 801a832:	bf00      	nop
 801a834:	370c      	adds	r7, #12
 801a836:	46bd      	mov	sp, r7
 801a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a83c:	4770      	bx	lr
 801a83e:	bf00      	nop
 801a840:	20000f70 	.word	0x20000f70
 801a844:	20001080 	.word	0x20001080

0801a848 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {
 801a848:	b580      	push	{r7, lr}
 801a84a:	b084      	sub	sp, #16
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
 801a850:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 801a852:	4b2e      	ldr	r3, [pc, #184]	; (801a90c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc4>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	4a2e      	ldr	r2, [pc, #184]	; (801a910 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc8>)
 801a858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801a85c:	683b      	ldr	r3, [r7, #0]
 801a85e:	4413      	add	r3, r2
 801a860:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 801a862:	2300      	movs	r3, #0
 801a864:	60fb      	str	r3, [r7, #12]
 801a866:	e045      	b.n	801a8f4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xac>
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
 801a868:	492a      	ldr	r1, [pc, #168]	; (801a914 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 801a86a:	68fa      	ldr	r2, [r7, #12]
 801a86c:	4613      	mov	r3, r2
 801a86e:	011b      	lsls	r3, r3, #4
 801a870:	4413      	add	r3, r2
 801a872:	009b      	lsls	r3, r3, #2
 801a874:	440b      	add	r3, r1
 801a876:	3340      	adds	r3, #64	; 0x40
 801a878:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a87c:	461a      	mov	r2, r3
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	4293      	cmp	r3, r2
 801a882:	d107      	bne.n	801a894 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x4c>
      return &tflTensors[ix].tensor;
 801a884:	68fa      	ldr	r2, [r7, #12]
 801a886:	4613      	mov	r3, r2
 801a888:	011b      	lsls	r3, r3, #4
 801a88a:	4413      	add	r3, r2
 801a88c:	009b      	lsls	r3, r3, #2
 801a88e:	4a21      	ldr	r2, [pc, #132]	; (801a914 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 801a890:	4413      	add	r3, r2
 801a892:	e037      	b.n	801a904 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 801a894:	491f      	ldr	r1, [pc, #124]	; (801a914 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 801a896:	68fa      	ldr	r2, [r7, #12]
 801a898:	4613      	mov	r3, r2
 801a89a:	011b      	lsls	r3, r3, #4
 801a89c:	4413      	add	r3, r2
 801a89e:	009b      	lsls	r3, r3, #2
 801a8a0:	440b      	add	r3, r1
 801a8a2:	3340      	adds	r3, #64	; 0x40
 801a8a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a8a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a8ac:	4293      	cmp	r3, r2
 801a8ae:	d11e      	bne.n	801a8ee <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xa6>
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 801a8b0:	6838      	ldr	r0, [r7, #0]
 801a8b2:	68fa      	ldr	r2, [r7, #12]
 801a8b4:	4613      	mov	r3, r2
 801a8b6:	011b      	lsls	r3, r3, #4
 801a8b8:	4413      	add	r3, r2
 801a8ba:	009b      	lsls	r3, r3, #2
 801a8bc:	4a15      	ldr	r2, [pc, #84]	; (801a914 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 801a8be:	4413      	add	r3, r2
 801a8c0:	4619      	mov	r1, r3
 801a8c2:	f7ff fe33 	bl	801a52c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 801a8c6:	683b      	ldr	r3, [r7, #0]
 801a8c8:	b218      	sxth	r0, r3
 801a8ca:	4912      	ldr	r1, [pc, #72]	; (801a914 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 801a8cc:	68fa      	ldr	r2, [r7, #12]
 801a8ce:	4613      	mov	r3, r2
 801a8d0:	011b      	lsls	r3, r3, #4
 801a8d2:	4413      	add	r3, r2
 801a8d4:	009b      	lsls	r3, r3, #2
 801a8d6:	440b      	add	r3, r1
 801a8d8:	3340      	adds	r3, #64	; 0x40
 801a8da:	4602      	mov	r2, r0
 801a8dc:	801a      	strh	r2, [r3, #0]
      return &tflTensors[ix].tensor;
 801a8de:	68fa      	ldr	r2, [r7, #12]
 801a8e0:	4613      	mov	r3, r2
 801a8e2:	011b      	lsls	r3, r3, #4
 801a8e4:	4413      	add	r3, r2
 801a8e6:	009b      	lsls	r3, r3, #2
 801a8e8:	4a0a      	ldr	r2, [pc, #40]	; (801a914 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 801a8ea:	4413      	add	r3, r2
 801a8ec:	e00a      	b.n	801a904 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	3301      	adds	r3, #1
 801a8f2:	60fb      	str	r3, [r7, #12]
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	2b03      	cmp	r3, #3
 801a8f8:	d9b6      	bls.n	801a868 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 801a8fa:	2104      	movs	r1, #4
 801a8fc:	4806      	ldr	r0, [pc, #24]	; (801a918 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xd0>)
 801a8fe:	f7fd fb7a 	bl	8017ff6 <_Z9ei_printfPKcz>
  return nullptr;
 801a902:	2300      	movs	r3, #0
}
 801a904:	4618      	mov	r0, r3
 801a906:	3710      	adds	r7, #16
 801a908:	46bd      	mov	sp, r7
 801a90a:	bd80      	pop	{r7, pc}
 801a90c:	20001108 	.word	0x20001108
 801a910:	0802cdec 	.word	0x0802cdec
 801a914:	20000f70 	.word	0x20000f70
 801a918:	08024b78 	.word	0x08024b78

0801a91c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b084      	sub	sp, #16
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
 801a924:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 801a926:	4b25      	ldr	r3, [pc, #148]	; (801a9bc <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa0>)
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	4a25      	ldr	r2, [pc, #148]	; (801a9c0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa4>)
 801a92c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	4413      	add	r3, r2
 801a934:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 801a936:	2300      	movs	r3, #0
 801a938:	60fb      	str	r3, [r7, #12]
 801a93a:	e033      	b.n	801a9a4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x88>
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
 801a93c:	4a21      	ldr	r2, [pc, #132]	; (801a9c4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	011b      	lsls	r3, r3, #4
 801a942:	4413      	add	r3, r2
 801a944:	330c      	adds	r3, #12
 801a946:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a94a:	461a      	mov	r2, r3
 801a94c:	683b      	ldr	r3, [r7, #0]
 801a94e:	4293      	cmp	r3, r2
 801a950:	d104      	bne.n	801a95c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x40>
      return &tflEvalTensors[ix].tensor;
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	011b      	lsls	r3, r3, #4
 801a956:	4a1b      	ldr	r2, [pc, #108]	; (801a9c4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 801a958:	4413      	add	r3, r2
 801a95a:	e02b      	b.n	801a9b4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 801a95c:	4a19      	ldr	r2, [pc, #100]	; (801a9c4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	011b      	lsls	r3, r3, #4
 801a962:	4413      	add	r3, r2
 801a964:	330c      	adds	r3, #12
 801a966:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a96a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a96e:	4293      	cmp	r3, r2
 801a970:	d115      	bne.n	801a99e <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x82>
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	011b      	lsls	r3, r3, #4
 801a976:	4a13      	ldr	r2, [pc, #76]	; (801a9c4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 801a978:	4413      	add	r3, r2
 801a97a:	4619      	mov	r1, r3
 801a97c:	6838      	ldr	r0, [r7, #0]
 801a97e:	f7ff fe21 	bl	801a5c4 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>
      tflEvalTensors[ix].index = tensor_idx;
 801a982:	683b      	ldr	r3, [r7, #0]
 801a984:	b219      	sxth	r1, r3
 801a986:	4a0f      	ldr	r2, [pc, #60]	; (801a9c4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	011b      	lsls	r3, r3, #4
 801a98c:	4413      	add	r3, r2
 801a98e:	330c      	adds	r3, #12
 801a990:	460a      	mov	r2, r1
 801a992:	801a      	strh	r2, [r3, #0]
      return &tflEvalTensors[ix].tensor;
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	011b      	lsls	r3, r3, #4
 801a998:	4a0a      	ldr	r2, [pc, #40]	; (801a9c4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 801a99a:	4413      	add	r3, r2
 801a99c:	e00a      	b.n	801a9b4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 801a99e:	68fb      	ldr	r3, [r7, #12]
 801a9a0:	3301      	adds	r3, #1
 801a9a2:	60fb      	str	r3, [r7, #12]
 801a9a4:	68fb      	ldr	r3, [r7, #12]
 801a9a6:	2b03      	cmp	r3, #3
 801a9a8:	d9c8      	bls.n	801a93c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 801a9aa:	2104      	movs	r1, #4
 801a9ac:	4806      	ldr	r0, [pc, #24]	; (801a9c8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xac>)
 801a9ae:	f7fd fb22 	bl	8017ff6 <_Z9ei_printfPKcz>
  return nullptr;
 801a9b2:	2300      	movs	r3, #0
}
 801a9b4:	4618      	mov	r0, r3
 801a9b6:	3710      	adds	r7, #16
 801a9b8:	46bd      	mov	sp, r7
 801a9ba:	bd80      	pop	{r7, pc}
 801a9bc:	20001108 	.word	0x20001108
 801a9c0:	0802cdec 	.word	0x0802cdec
 801a9c4:	20001080 	.word	0x20001080
 801a9c8:	08024bb0 	.word	0x08024bb0

0801a9cc <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>:

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 801a9cc:	b580      	push	{r7, lr}
 801a9ce:	b082      	sub	sp, #8
 801a9d0:	af00      	add	r7, sp, #0
 801a9d2:	6078      	str	r0, [r7, #4]
 801a9d4:	6878      	ldr	r0, [r7, #4]
 801a9d6:	2300      	movs	r3, #0
 801a9d8:	2200      	movs	r2, #0
 801a9da:	2100      	movs	r1, #0
 801a9dc:	f7fe fa1e 	bl	8018e1c <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
 801a9e0:	4a03      	ldr	r2, [pc, #12]	; (801a9f0 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev+0x24>)
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	601a      	str	r2, [r3, #0]
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	4618      	mov	r0, r3
 801a9ea:	3708      	adds	r7, #8
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}
 801a9f0:	0802ce04 	.word	0x0802ce04

0801a9f4 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:

  void* AllocatePersistentBuffer(size_t bytes) {
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b082      	sub	sp, #8
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	6078      	str	r0, [r7, #4]
 801a9fc:	6039      	str	r1, [r7, #0]
    return AllocatePersistentBufferImpl(nullptr, bytes);
 801a9fe:	6839      	ldr	r1, [r7, #0]
 801aa00:	2000      	movs	r0, #0
 801aa02:	f7ff fe19 	bl	801a638 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 801aa06:	4603      	mov	r3, r0
  }
 801aa08:	4618      	mov	r0, r3
 801aa0a:	3708      	adds	r7, #8
 801aa0c:	46bd      	mov	sp, r7
 801aa0e:	bd80      	pop	{r7, pc}

0801aa10 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
 801aa10:	b580      	push	{r7, lr}
 801aa12:	b084      	sub	sp, #16
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	60f8      	str	r0, [r7, #12]
 801aa18:	60b9      	str	r1, [r7, #8]
 801aa1a:	607a      	str	r2, [r7, #4]
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
 801aa1c:	687a      	ldr	r2, [r7, #4]
 801aa1e:	68b9      	ldr	r1, [r7, #8]
 801aa20:	2000      	movs	r0, #0
 801aa22:	f7ff fe7b 	bl	801a71c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>
 801aa26:	4603      	mov	r3, r0
  }
 801aa28:	4618      	mov	r0, r3
 801aa2a:	3710      	adds	r7, #16
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	bd80      	pop	{r7, pc}

0801aa30 <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:

  void* GetScratchBuffer(int buffer_index) {
 801aa30:	b580      	push	{r7, lr}
 801aa32:	b082      	sub	sp, #8
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
 801aa38:	6039      	str	r1, [r7, #0]
    return GetScratchBufferImpl(nullptr, buffer_index);
 801aa3a:	6839      	ldr	r1, [r7, #0]
 801aa3c:	2000      	movs	r0, #0
 801aa3e:	f7ff feb3 	bl	801a7a8 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>
 801aa42:	4603      	mov	r3, r0
  }
 801aa44:	4618      	mov	r0, r3
 801aa46:	3708      	adds	r7, #8
 801aa48:	46bd      	mov	sp, r7
 801aa4a:	bd80      	pop	{r7, pc}

0801aa4c <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
 801aa4c:	b580      	push	{r7, lr}
 801aa4e:	b082      	sub	sp, #8
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	6078      	str	r0, [r7, #4]
 801aa54:	6039      	str	r1, [r7, #0]
    return GetTensorImpl(nullptr, tensor_index);
 801aa56:	6839      	ldr	r1, [r7, #0]
 801aa58:	2000      	movs	r0, #0
 801aa5a:	f7ff fef5 	bl	801a848 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
 801aa5e:	4603      	mov	r3, r0
  }
 801aa60:	4618      	mov	r0, r3
 801aa62:	3708      	adds	r7, #8
 801aa64:	46bd      	mov	sp, r7
 801aa66:	bd80      	pop	{r7, pc}

0801aa68 <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 801aa68:	b480      	push	{r7}
 801aa6a:	b083      	sub	sp, #12
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	6078      	str	r0, [r7, #4]
 801aa70:	6039      	str	r1, [r7, #0]
    return;
 801aa72:	bf00      	nop
  }
 801aa74:	370c      	adds	r7, #12
 801aa76:	46bd      	mov	sp, r7
 801aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7c:	4770      	bx	lr

0801aa7e <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
 801aa7e:	b580      	push	{r7, lr}
 801aa80:	b082      	sub	sp, #8
 801aa82:	af00      	add	r7, sp, #0
 801aa84:	6078      	str	r0, [r7, #4]
 801aa86:	6039      	str	r1, [r7, #0]
    return GetEvalTensorImpl(nullptr, tensor_index);
 801aa88:	6839      	ldr	r1, [r7, #0]
 801aa8a:	2000      	movs	r0, #0
 801aa8c:	f7ff ff46 	bl	801a91c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
 801aa90:	4603      	mov	r3, r0
  }
 801aa92:	4618      	mov	r0, r3
 801aa94:	3708      	adds	r7, #8
 801aa96:	46bd      	mov	sp, r7
 801aa98:	bd80      	pop	{r7, pc}
	...

0801aa9c <_Z20tflite_learn_29_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_29_init( void*(*alloc_fnc)(size_t,size_t) ) {
 801aa9c:	b5b0      	push	{r4, r5, r7, lr}
 801aa9e:	b0aa      	sub	sp, #168	; 0xa8
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 801aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaa6:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801aaaa:	2010      	movs	r0, #16
 801aaac:	4798      	blx	r3
 801aaae:	4603      	mov	r3, r0
 801aab0:	4aa7      	ldr	r2, [pc, #668]	; (801ad50 <_Z20tflite_learn_29_initPFPvjjE+0x2b4>)
 801aab2:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 801aab4:	4ba6      	ldr	r3, [pc, #664]	; (801ad50 <_Z20tflite_learn_29_initPFPvjjE+0x2b4>)
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d104      	bne.n	801aac6 <_Z20tflite_learn_29_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 801aabc:	48a5      	ldr	r0, [pc, #660]	; (801ad54 <_Z20tflite_learn_29_initPFPvjjE+0x2b8>)
 801aabe:	f7fd fa9a 	bl	8017ff6 <_Z9ei_printfPKcz>
    return kTfLiteError;
 801aac2:	2401      	movs	r4, #1
 801aac4:	e13f      	b.n	801ad46 <_Z20tflite_learn_29_initPFPvjjE+0x2aa>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801aac6:	4ba2      	ldr	r3, [pc, #648]	; (801ad50 <_Z20tflite_learn_29_initPFPvjjE+0x2b4>)
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	4aa3      	ldr	r2, [pc, #652]	; (801ad58 <_Z20tflite_learn_29_initPFPvjjE+0x2bc>)
 801aacc:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801aace:	4ba0      	ldr	r3, [pc, #640]	; (801ad50 <_Z20tflite_learn_29_initPFPvjjE+0x2b4>)
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 801aad6:	4aa1      	ldr	r2, [pc, #644]	; (801ad5c <_Z20tflite_learn_29_initPFPvjjE+0x2c0>)
 801aad8:	6013      	str	r3, [r2, #0]

  EonMicroContext micro_context_;
 801aada:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801aade:	4618      	mov	r0, r3
 801aae0:	f7ff ff74 	bl	801a9cc <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
 801aae4:	4a9e      	ldr	r2, [pc, #632]	; (801ad60 <_Z20tflite_learn_29_initPFPvjjE+0x2c4>)
 801aae6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801aaea:	6093      	str	r3, [r2, #8]
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
 801aaec:	4b9c      	ldr	r3, [pc, #624]	; (801ad60 <_Z20tflite_learn_29_initPFPvjjE+0x2c4>)
 801aaee:	4a9d      	ldr	r2, [pc, #628]	; (801ad64 <_Z20tflite_learn_29_initPFPvjjE+0x2c8>)
 801aaf0:	635a      	str	r2, [r3, #52]	; 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
 801aaf2:	4b9b      	ldr	r3, [pc, #620]	; (801ad60 <_Z20tflite_learn_29_initPFPvjjE+0x2c4>)
 801aaf4:	4a9c      	ldr	r2, [pc, #624]	; (801ad68 <_Z20tflite_learn_29_initPFPvjjE+0x2cc>)
 801aaf6:	63da      	str	r2, [r3, #60]	; 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
 801aaf8:	4b99      	ldr	r3, [pc, #612]	; (801ad60 <_Z20tflite_learn_29_initPFPvjjE+0x2c4>)
 801aafa:	4a9c      	ldr	r2, [pc, #624]	; (801ad6c <_Z20tflite_learn_29_initPFPvjjE+0x2d0>)
 801aafc:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetTensor = &GetTensorImpl;
 801aafe:	4b98      	ldr	r3, [pc, #608]	; (801ad60 <_Z20tflite_learn_29_initPFPvjjE+0x2c4>)
 801ab00:	4a9b      	ldr	r2, [pc, #620]	; (801ad70 <_Z20tflite_learn_29_initPFPvjjE+0x2d4>)
 801ab02:	64da      	str	r2, [r3, #76]	; 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
 801ab04:	4b96      	ldr	r3, [pc, #600]	; (801ad60 <_Z20tflite_learn_29_initPFPvjjE+0x2c4>)
 801ab06:	4a9b      	ldr	r2, [pc, #620]	; (801ad74 <_Z20tflite_learn_29_initPFPvjjE+0x2d8>)
 801ab08:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.ReportError = &MicroContextReportOpError;
 801ab0a:	4b95      	ldr	r3, [pc, #596]	; (801ad60 <_Z20tflite_learn_29_initPFPvjjE+0x2c4>)
 801ab0c:	4a9a      	ldr	r2, [pc, #616]	; (801ad78 <_Z20tflite_learn_29_initPFPvjjE+0x2dc>)
 801ab0e:	611a      	str	r2, [r3, #16]

  ctx.tensors_size = 11;
 801ab10:	4b93      	ldr	r3, [pc, #588]	; (801ad60 <_Z20tflite_learn_29_initPFPvjjE+0x2c4>)
 801ab12:	220b      	movs	r2, #11
 801ab14:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 801ab16:	2300      	movs	r3, #0
 801ab18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801ab1c:	e024      	b.n	801ab68 <_Z20tflite_learn_29_initPFPvjjE+0xcc>
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
 801ab1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ab22:	4619      	mov	r1, r3
 801ab24:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801ab28:	f7ff fd00 	bl	801a52c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 801ab2c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801ab30:	2b02      	cmp	r3, #2
 801ab32:	d114      	bne.n	801ab5e <_Z20tflite_learn_29_initPFPvjjE+0xc2>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 801ab34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ab36:	4991      	ldr	r1, [pc, #580]	; (801ad7c <_Z20tflite_learn_29_initPFPvjjE+0x2e0>)
 801ab38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ab3c:	011b      	lsls	r3, r3, #4
 801ab3e:	440b      	add	r3, r1
 801ab40:	330c      	adds	r3, #12
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	4413      	add	r3, r2
 801ab46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (data_end_ptr > tensor_boundary) {
 801ab4a:	4b83      	ldr	r3, [pc, #524]	; (801ad58 <_Z20tflite_learn_29_initPFPvjjE+0x2bc>)
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801ab52:	429a      	cmp	r2, r3
 801ab54:	d903      	bls.n	801ab5e <_Z20tflite_learn_29_initPFPvjjE+0xc2>
        tensor_boundary = data_end_ptr;
 801ab56:	4a80      	ldr	r2, [pc, #512]	; (801ad58 <_Z20tflite_learn_29_initPFPvjjE+0x2bc>)
 801ab58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ab5c:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 801ab5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ab62:	3301      	adds	r3, #1
 801ab64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801ab68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ab6c:	2b0a      	cmp	r3, #10
 801ab6e:	d9d6      	bls.n	801ab1e <_Z20tflite_learn_29_initPFPvjjE+0x82>
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
 801ab70:	4b79      	ldr	r3, [pc, #484]	; (801ad58 <_Z20tflite_learn_29_initPFPvjjE+0x2bc>)
 801ab72:	681a      	ldr	r2, [r3, #0]
 801ab74:	4b79      	ldr	r3, [pc, #484]	; (801ad5c <_Z20tflite_learn_29_initPFPvjjE+0x2c0>)
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	429a      	cmp	r2, r3
 801ab7a:	d904      	bls.n	801ab86 <_Z20tflite_learn_29_initPFPvjjE+0xea>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 801ab7c:	4880      	ldr	r0, [pc, #512]	; (801ad80 <_Z20tflite_learn_29_initPFPvjjE+0x2e4>)
 801ab7e:	f7fd fa3a 	bl	8017ff6 <_Z9ei_printfPKcz>
    return kTfLiteError;
 801ab82:	2401      	movs	r4, #1
 801ab84:	e0da      	b.n	801ad3c <_Z20tflite_learn_29_initPFPvjjE+0x2a0>
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 801ab86:	4c7f      	ldr	r4, [pc, #508]	; (801ad84 <_Z20tflite_learn_29_initPFPvjjE+0x2e8>)
 801ab88:	463b      	mov	r3, r7
 801ab8a:	4618      	mov	r0, r3
 801ab8c:	f7fe ffd4 	bl	8019b38 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 801ab90:	4625      	mov	r5, r4
 801ab92:	463c      	mov	r4, r7
 801ab94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ab96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ab98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ab9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ab9c:	6823      	ldr	r3, [r4, #0]
 801ab9e:	602b      	str	r3, [r5, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 801aba0:	4c78      	ldr	r4, [pc, #480]	; (801ad84 <_Z20tflite_learn_29_initPFPvjjE+0x2e8>)
 801aba2:	463b      	mov	r3, r7
 801aba4:	4618      	mov	r0, r3
 801aba6:	f7ff fc23 	bl	801a3f0 <_ZN6tflite16Register_SOFTMAXEv>
 801abaa:	3424      	adds	r4, #36	; 0x24
 801abac:	463d      	mov	r5, r7
 801abae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801abb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801abb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abb6:	682b      	ldr	r3, [r5, #0]
 801abb8:	6023      	str	r3, [r4, #0]

  for (size_t g = 0; g < 1; ++g) {
 801abba:	2300      	movs	r3, #0
 801abbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801abc0:	e054      	b.n	801ac6c <_Z20tflite_learn_29_initPFPvjjE+0x1d0>
    current_subgraph_index = g;
 801abc2:	4a71      	ldr	r2, [pc, #452]	; (801ad88 <_Z20tflite_learn_29_initPFPvjjE+0x2ec>)
 801abc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801abc8:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 801abca:	4a70      	ldr	r2, [pc, #448]	; (801ad8c <_Z20tflite_learn_29_initPFPvjjE+0x2f0>)
 801abcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801abd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801abd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801abd8:	e039      	b.n	801ac4e <_Z20tflite_learn_29_initPFPvjjE+0x1b2>
      if (registrations[used_ops[i]].init) {
 801abda:	4a6d      	ldr	r2, [pc, #436]	; (801ad90 <_Z20tflite_learn_29_initPFPvjjE+0x2f4>)
 801abdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801abe0:	4413      	add	r3, r2
 801abe2:	781b      	ldrb	r3, [r3, #0]
 801abe4:	4619      	mov	r1, r3
 801abe6:	4a67      	ldr	r2, [pc, #412]	; (801ad84 <_Z20tflite_learn_29_initPFPvjjE+0x2e8>)
 801abe8:	460b      	mov	r3, r1
 801abea:	00db      	lsls	r3, r3, #3
 801abec:	440b      	add	r3, r1
 801abee:	009b      	lsls	r3, r3, #2
 801abf0:	4413      	add	r3, r2
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d025      	beq.n	801ac44 <_Z20tflite_learn_29_initPFPvjjE+0x1a8>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 801abf8:	4a65      	ldr	r2, [pc, #404]	; (801ad90 <_Z20tflite_learn_29_initPFPvjjE+0x2f4>)
 801abfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801abfe:	4413      	add	r3, r2
 801ac00:	781b      	ldrb	r3, [r3, #0]
 801ac02:	4619      	mov	r1, r3
 801ac04:	4a5f      	ldr	r2, [pc, #380]	; (801ad84 <_Z20tflite_learn_29_initPFPvjjE+0x2e8>)
 801ac06:	460b      	mov	r3, r1
 801ac08:	00db      	lsls	r3, r3, #3
 801ac0a:	440b      	add	r3, r1
 801ac0c:	009b      	lsls	r3, r3, #2
 801ac0e:	4413      	add	r3, r2
 801ac10:	681c      	ldr	r4, [r3, #0]
 801ac12:	4960      	ldr	r1, [pc, #384]	; (801ad94 <_Z20tflite_learn_29_initPFPvjjE+0x2f8>)
 801ac14:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801ac18:	4613      	mov	r3, r2
 801ac1a:	009b      	lsls	r3, r3, #2
 801ac1c:	4413      	add	r3, r2
 801ac1e:	00db      	lsls	r3, r3, #3
 801ac20:	440b      	add	r3, r1
 801ac22:	3314      	adds	r3, #20
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	2200      	movs	r2, #0
 801ac28:	4619      	mov	r1, r3
 801ac2a:	484d      	ldr	r0, [pc, #308]	; (801ad60 <_Z20tflite_learn_29_initPFPvjjE+0x2c4>)
 801ac2c:	47a0      	blx	r4
 801ac2e:	4601      	mov	r1, r0
 801ac30:	4858      	ldr	r0, [pc, #352]	; (801ad94 <_Z20tflite_learn_29_initPFPvjjE+0x2f8>)
 801ac32:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801ac36:	4613      	mov	r3, r2
 801ac38:	009b      	lsls	r3, r3, #2
 801ac3a:	4413      	add	r3, r2
 801ac3c:	00db      	lsls	r3, r3, #3
 801ac3e:	4403      	add	r3, r0
 801ac40:	3310      	adds	r3, #16
 801ac42:	6019      	str	r1, [r3, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 801ac44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ac48:	3301      	adds	r3, #1
 801ac4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801ac4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ac52:	3301      	adds	r3, #1
 801ac54:	4a4d      	ldr	r2, [pc, #308]	; (801ad8c <_Z20tflite_learn_29_initPFPvjjE+0x2f0>)
 801ac56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac5a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801ac5e:	429a      	cmp	r2, r3
 801ac60:	d3bb      	bcc.n	801abda <_Z20tflite_learn_29_initPFPvjjE+0x13e>
  for (size_t g = 0; g < 1; ++g) {
 801ac62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ac66:	3301      	adds	r3, #1
 801ac68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801ac6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d0a6      	beq.n	801abc2 <_Z20tflite_learn_29_initPFPvjjE+0x126>
      }
    }
  }
  current_subgraph_index = 0;
 801ac74:	4b44      	ldr	r3, [pc, #272]	; (801ad88 <_Z20tflite_learn_29_initPFPvjjE+0x2ec>)
 801ac76:	2200      	movs	r2, #0
 801ac78:	601a      	str	r2, [r3, #0]

  for(size_t g = 0; g < 1; ++g) {
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801ac80:	e054      	b.n	801ad2c <_Z20tflite_learn_29_initPFPvjjE+0x290>
    current_subgraph_index = g;
 801ac82:	4a41      	ldr	r2, [pc, #260]	; (801ad88 <_Z20tflite_learn_29_initPFPvjjE+0x2ec>)
 801ac84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ac88:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 801ac8a:	4a40      	ldr	r2, [pc, #256]	; (801ad8c <_Z20tflite_learn_29_initPFPvjjE+0x2f0>)
 801ac8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ac90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ac98:	e039      	b.n	801ad0e <_Z20tflite_learn_29_initPFPvjjE+0x272>
      if (registrations[used_ops[i]].prepare) {
 801ac9a:	4a3d      	ldr	r2, [pc, #244]	; (801ad90 <_Z20tflite_learn_29_initPFPvjjE+0x2f4>)
 801ac9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801aca0:	4413      	add	r3, r2
 801aca2:	781b      	ldrb	r3, [r3, #0]
 801aca4:	4619      	mov	r1, r3
 801aca6:	4a37      	ldr	r2, [pc, #220]	; (801ad84 <_Z20tflite_learn_29_initPFPvjjE+0x2e8>)
 801aca8:	460b      	mov	r3, r1
 801acaa:	00db      	lsls	r3, r3, #3
 801acac:	440b      	add	r3, r1
 801acae:	009b      	lsls	r3, r3, #2
 801acb0:	4413      	add	r3, r2
 801acb2:	3308      	adds	r3, #8
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d024      	beq.n	801ad04 <_Z20tflite_learn_29_initPFPvjjE+0x268>
        ResetTensors();
 801acba:	f7ff fd91 	bl	801a7e0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
 801acbe:	4a34      	ldr	r2, [pc, #208]	; (801ad90 <_Z20tflite_learn_29_initPFPvjjE+0x2f4>)
 801acc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801acc4:	4413      	add	r3, r2
 801acc6:	781b      	ldrb	r3, [r3, #0]
 801acc8:	4619      	mov	r1, r3
 801acca:	4a2e      	ldr	r2, [pc, #184]	; (801ad84 <_Z20tflite_learn_29_initPFPvjjE+0x2e8>)
 801accc:	460b      	mov	r3, r1
 801acce:	00db      	lsls	r3, r3, #3
 801acd0:	440b      	add	r3, r1
 801acd2:	009b      	lsls	r3, r3, #2
 801acd4:	4413      	add	r3, r2
 801acd6:	3308      	adds	r3, #8
 801acd8:	681c      	ldr	r4, [r3, #0]
 801acda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801acde:	4613      	mov	r3, r2
 801ace0:	009b      	lsls	r3, r3, #2
 801ace2:	4413      	add	r3, r2
 801ace4:	00db      	lsls	r3, r3, #3
 801ace6:	4a2b      	ldr	r2, [pc, #172]	; (801ad94 <_Z20tflite_learn_29_initPFPvjjE+0x2f8>)
 801ace8:	4413      	add	r3, r2
 801acea:	4619      	mov	r1, r3
 801acec:	481c      	ldr	r0, [pc, #112]	; (801ad60 <_Z20tflite_learn_29_initPFPvjjE+0x2c4>)
 801acee:	47a0      	blx	r4
 801acf0:	4603      	mov	r3, r0
 801acf2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (status != kTfLiteOk) {
 801acf6:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d002      	beq.n	801ad04 <_Z20tflite_learn_29_initPFPvjjE+0x268>
          return status;
 801acfe:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 801ad02:	e01b      	b.n	801ad3c <_Z20tflite_learn_29_initPFPvjjE+0x2a0>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 801ad04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ad08:	3301      	adds	r3, #1
 801ad0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ad0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ad12:	3301      	adds	r3, #1
 801ad14:	4a1d      	ldr	r2, [pc, #116]	; (801ad8c <_Z20tflite_learn_29_initPFPvjjE+0x2f0>)
 801ad16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ad1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801ad1e:	429a      	cmp	r2, r3
 801ad20:	d3bb      	bcc.n	801ac9a <_Z20tflite_learn_29_initPFPvjjE+0x1fe>
  for(size_t g = 0; g < 1; ++g) {
 801ad22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ad26:	3301      	adds	r3, #1
 801ad28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801ad2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d0a6      	beq.n	801ac82 <_Z20tflite_learn_29_initPFPvjjE+0x1e6>
        }
      }
    }
  }
  current_subgraph_index = 0;
 801ad34:	4b14      	ldr	r3, [pc, #80]	; (801ad88 <_Z20tflite_learn_29_initPFPvjjE+0x2ec>)
 801ad36:	2200      	movs	r2, #0
 801ad38:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 801ad3a:	2400      	movs	r4, #0
}
 801ad3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801ad40:	4618      	mov	r0, r3
 801ad42:	f000 f8af 	bl	801aea4 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 801ad46:	4623      	mov	r3, r4
 801ad48:	4618      	mov	r0, r3
 801ad4a:	37a8      	adds	r7, #168	; 0xa8
 801ad4c:	46bd      	mov	sp, r7
 801ad4e:	bdb0      	pop	{r4, r5, r7, pc}
 801ad50:	20000f0c 	.word	0x20000f0c
 801ad54:	08024be8 	.word	0x08024be8
 801ad58:	20000f10 	.word	0x20000f10
 801ad5c:	20000f14 	.word	0x20000f14
 801ad60:	20000f18 	.word	0x20000f18
 801ad64:	0801a639 	.word	0x0801a639
 801ad68:	0801a71d 	.word	0x0801a71d
 801ad6c:	0801a7a9 	.word	0x0801a7a9
 801ad70:	0801a849 	.word	0x0801a849
 801ad74:	0801a91d 	.word	0x0801a91d
 801ad78:	080190e5 	.word	0x080190e5
 801ad7c:	2000018c 	.word	0x2000018c
 801ad80:	08024c10 	.word	0x08024c10
 801ad84:	200010c0 	.word	0x200010c0
 801ad88:	20001108 	.word	0x20001108
 801ad8c:	0802cdf4 	.word	0x0802cdf4
 801ad90:	200002dc 	.word	0x200002dc
 801ad94:	2000023c 	.word	0x2000023c

0801ad98 <_Z21tflite_learn_29_inputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_29_input(int index, TfLiteTensor *tensor) {
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	b082      	sub	sp, #8
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	6078      	str	r0, [r7, #4]
 801ada0:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(in_tensor_indices[index], tensor);
 801ada2:	2300      	movs	r3, #0
 801ada4:	6839      	ldr	r1, [r7, #0]
 801ada6:	4618      	mov	r0, r3
 801ada8:	f7ff fbc0 	bl	801a52c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 801adac:	2300      	movs	r3, #0
}
 801adae:	4618      	mov	r0, r3
 801adb0:	3708      	adds	r7, #8
 801adb2:	46bd      	mov	sp, r7
 801adb4:	bd80      	pop	{r7, pc}

0801adb6 <_Z22tflite_learn_29_outputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_29_output(int index, TfLiteTensor *tensor) {
 801adb6:	b580      	push	{r7, lr}
 801adb8:	b082      	sub	sp, #8
 801adba:	af00      	add	r7, sp, #0
 801adbc:	6078      	str	r0, [r7, #4]
 801adbe:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(out_tensor_indices[index], tensor);
 801adc0:	230a      	movs	r3, #10
 801adc2:	6839      	ldr	r1, [r7, #0]
 801adc4:	4618      	mov	r0, r3
 801adc6:	f7ff fbb1 	bl	801a52c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 801adca:	2300      	movs	r3, #0
}
 801adcc:	4618      	mov	r0, r3
 801adce:	3708      	adds	r7, #8
 801add0:	46bd      	mov	sp, r7
 801add2:	bd80      	pop	{r7, pc}

0801add4 <_Z22tflite_learn_29_invokev>:

TfLiteStatus tflite_learn_29_invoke() {
 801add4:	b590      	push	{r4, r7, lr}
 801add6:	b083      	sub	sp, #12
 801add8:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 801adda:	2300      	movs	r3, #0
 801addc:	607b      	str	r3, [r7, #4]
 801adde:	e022      	b.n	801ae26 <_Z22tflite_learn_29_invokev+0x52>
    ResetTensors();
 801ade0:	f7ff fcfe 	bl	801a7e0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
 801ade4:	4a14      	ldr	r2, [pc, #80]	; (801ae38 <_Z22tflite_learn_29_invokev+0x64>)
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	4413      	add	r3, r2
 801adea:	781b      	ldrb	r3, [r3, #0]
 801adec:	4619      	mov	r1, r3
 801adee:	4a13      	ldr	r2, [pc, #76]	; (801ae3c <_Z22tflite_learn_29_invokev+0x68>)
 801adf0:	460b      	mov	r3, r1
 801adf2:	00db      	lsls	r3, r3, #3
 801adf4:	440b      	add	r3, r1
 801adf6:	009b      	lsls	r3, r3, #2
 801adf8:	4413      	add	r3, r2
 801adfa:	330c      	adds	r3, #12
 801adfc:	681c      	ldr	r4, [r3, #0]
 801adfe:	687a      	ldr	r2, [r7, #4]
 801ae00:	4613      	mov	r3, r2
 801ae02:	009b      	lsls	r3, r3, #2
 801ae04:	4413      	add	r3, r2
 801ae06:	00db      	lsls	r3, r3, #3
 801ae08:	4a0d      	ldr	r2, [pc, #52]	; (801ae40 <_Z22tflite_learn_29_invokev+0x6c>)
 801ae0a:	4413      	add	r3, r2
 801ae0c:	4619      	mov	r1, r3
 801ae0e:	480d      	ldr	r0, [pc, #52]	; (801ae44 <_Z22tflite_learn_29_invokev+0x70>)
 801ae10:	47a0      	blx	r4
 801ae12:	4603      	mov	r3, r0
 801ae14:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 801ae16:	78fb      	ldrb	r3, [r7, #3]
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d001      	beq.n	801ae20 <_Z22tflite_learn_29_invokev+0x4c>
      return status;
 801ae1c:	78fb      	ldrb	r3, [r7, #3]
 801ae1e:	e006      	b.n	801ae2e <_Z22tflite_learn_29_invokev+0x5a>
  for (size_t i = 0; i < 4; ++i) {
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	3301      	adds	r3, #1
 801ae24:	607b      	str	r3, [r7, #4]
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	2b03      	cmp	r3, #3
 801ae2a:	d9d9      	bls.n	801ade0 <_Z22tflite_learn_29_invokev+0xc>
    }
  }
  return kTfLiteOk;
 801ae2c:	2300      	movs	r3, #0
}
 801ae2e:	4618      	mov	r0, r3
 801ae30:	370c      	adds	r7, #12
 801ae32:	46bd      	mov	sp, r7
 801ae34:	bd90      	pop	{r4, r7, pc}
 801ae36:	bf00      	nop
 801ae38:	200002dc 	.word	0x200002dc
 801ae3c:	200010c0 	.word	0x200010c0
 801ae40:	2000023c 	.word	0x2000023c
 801ae44:	20000f18 	.word	0x20000f18

0801ae48 <_Z21tflite_learn_29_resetPFvPvE>:

TfLiteStatus tflite_learn_29_reset( void (*free_fnc)(void* ptr) ) {
 801ae48:	b580      	push	{r7, lr}
 801ae4a:	b084      	sub	sp, #16
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 801ae50:	4b10      	ldr	r3, [pc, #64]	; (801ae94 <_Z21tflite_learn_29_resetPFvPvE+0x4c>)
 801ae52:	681a      	ldr	r2, [r3, #0]
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	4610      	mov	r0, r2
 801ae58:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 801ae5a:	4b0f      	ldr	r3, [pc, #60]	; (801ae98 <_Z21tflite_learn_29_resetPFvPvE+0x50>)
 801ae5c:	2200      	movs	r2, #0
 801ae5e:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 801ae60:	2300      	movs	r3, #0
 801ae62:	60fb      	str	r3, [r7, #12]
 801ae64:	e009      	b.n	801ae7a <_Z21tflite_learn_29_resetPFvPvE+0x32>
    ei_free(overflow_buffers[ix]);
 801ae66:	4a0d      	ldr	r2, [pc, #52]	; (801ae9c <_Z21tflite_learn_29_resetPFvPvE+0x54>)
 801ae68:	68fb      	ldr	r3, [r7, #12]
 801ae6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ae6e:	4618      	mov	r0, r3
 801ae70:	f7fd f9f4 	bl	801825c <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	3301      	adds	r3, #1
 801ae78:	60fb      	str	r3, [r7, #12]
 801ae7a:	4b09      	ldr	r3, [pc, #36]	; (801aea0 <_Z21tflite_learn_29_resetPFvPvE+0x58>)
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	68fa      	ldr	r2, [r7, #12]
 801ae80:	429a      	cmp	r2, r3
 801ae82:	d3f0      	bcc.n	801ae66 <_Z21tflite_learn_29_resetPFvPvE+0x1e>
  }
  overflow_buffers_ix = 0;
 801ae84:	4b06      	ldr	r3, [pc, #24]	; (801aea0 <_Z21tflite_learn_29_resetPFvPvE+0x58>)
 801ae86:	2200      	movs	r2, #0
 801ae88:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801ae8a:	2300      	movs	r3, #0
}
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	3710      	adds	r7, #16
 801ae90:	46bd      	mov	sp, r7
 801ae92:	bd80      	pop	{r7, pc}
 801ae94:	20000f0c 	.word	0x20000f0c
 801ae98:	20001158 	.word	0x20001158
 801ae9c:	2000110c 	.word	0x2000110c
 801aea0:	20001134 	.word	0x20001134

0801aea4 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
 801aea4:	b580      	push	{r7, lr}
 801aea6:	b082      	sub	sp, #8
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	6078      	str	r0, [r7, #4]
 801aeac:	4a05      	ldr	r2, [pc, #20]	; (801aec4 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x20>)
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	601a      	str	r2, [r3, #0]
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	4618      	mov	r0, r3
 801aeb6:	f7fd ffd3 	bl	8018e60 <_ZN6tflite12MicroContextD1Ev>
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	4618      	mov	r0, r3
 801aebe:	3708      	adds	r7, #8
 801aec0:	46bd      	mov	sp, r7
 801aec2:	bd80      	pop	{r7, pc}
 801aec4:	0802ce04 	.word	0x0802ce04

0801aec8 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
 801aec8:	b580      	push	{r7, lr}
 801aeca:	b082      	sub	sp, #8
 801aecc:	af00      	add	r7, sp, #0
 801aece:	6078      	str	r0, [r7, #4]
 801aed0:	6878      	ldr	r0, [r7, #4]
 801aed2:	f7ff ffe7 	bl	801aea4 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 801aed6:	2118      	movs	r1, #24
 801aed8:	6878      	ldr	r0, [r7, #4]
 801aeda:	f000 f83f 	bl	801af5c <_ZdlPvj>
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	4618      	mov	r0, r3
 801aee2:	3708      	adds	r7, #8
 801aee4:	46bd      	mov	sp, r7
 801aee6:	bd80      	pop	{r7, pc}

0801aee8 <_Z41__static_initialization_and_destruction_0ii>:
}
 801aee8:	b480      	push	{r7}
 801aeea:	b083      	sub	sp, #12
 801aeec:	af00      	add	r7, sp, #0
 801aeee:	6078      	str	r0, [r7, #4]
 801aef0:	6039      	str	r1, [r7, #0]
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	2b01      	cmp	r3, #1
 801aef6:	d11e      	bne.n	801af36 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 801aef8:	683b      	ldr	r3, [r7, #0]
 801aefa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aefe:	4293      	cmp	r3, r2
 801af00:	d119      	bne.n	801af36 <_Z41__static_initialization_and_destruction_0ii+0x4e>
};
 801af02:	4b10      	ldr	r3, [pc, #64]	; (801af44 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	4a10      	ldr	r2, [pc, #64]	; (801af48 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801af08:	6053      	str	r3, [r2, #4]
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 416), (TfLiteIntArray*)&g0::tensor_dimension7, 208, },
 801af0a:	4b0e      	ldr	r3, [pc, #56]	; (801af44 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
};
 801af12:	4a0d      	ldr	r2, [pc, #52]	; (801af48 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801af14:	6753      	str	r3, [r2, #116]	; 0x74
 801af16:	4b0b      	ldr	r3, [pc, #44]	; (801af44 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	4a0b      	ldr	r2, [pc, #44]	; (801af48 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801af1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 112), (TfLiteIntArray*)&g0::tensor_dimension9, 20, },
 801af20:	4b08      	ldr	r3, [pc, #32]	; (801af44 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	3370      	adds	r3, #112	; 0x70
};
 801af26:	4a08      	ldr	r2, [pc, #32]	; (801af48 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801af28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 801af2c:	4b05      	ldr	r3, [pc, #20]	; (801af44 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	4a05      	ldr	r2, [pc, #20]	; (801af48 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801af32:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
}
 801af36:	bf00      	nop
 801af38:	370c      	adds	r7, #12
 801af3a:	46bd      	mov	sp, r7
 801af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af40:	4770      	bx	lr
 801af42:	bf00      	nop
 801af44:	20000f0c 	.word	0x20000f0c
 801af48:	2000018c 	.word	0x2000018c

0801af4c <_GLOBAL__sub_I__Z20tflite_learn_29_initPFPvjjE>:
 801af4c:	b580      	push	{r7, lr}
 801af4e:	af00      	add	r7, sp, #0
 801af50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801af54:	2001      	movs	r0, #1
 801af56:	f7ff ffc7 	bl	801aee8 <_Z41__static_initialization_and_destruction_0ii>
 801af5a:	bd80      	pop	{r7, pc}

0801af5c <_ZdlPvj>:
 801af5c:	f000 b81d 	b.w	801af9a <_ZdlPv>

0801af60 <_ZdaPv>:
 801af60:	f000 b81b 	b.w	801af9a <_ZdlPv>

0801af64 <_ZdaPvj>:
 801af64:	f7ff bffc 	b.w	801af60 <_ZdaPv>

0801af68 <_Znwj>:
 801af68:	2801      	cmp	r0, #1
 801af6a:	bf38      	it	cc
 801af6c:	2001      	movcc	r0, #1
 801af6e:	b510      	push	{r4, lr}
 801af70:	4604      	mov	r4, r0
 801af72:	4620      	mov	r0, r4
 801af74:	f002 fdea 	bl	801db4c <malloc>
 801af78:	b100      	cbz	r0, 801af7c <_Znwj+0x14>
 801af7a:	bd10      	pop	{r4, pc}
 801af7c:	f000 f810 	bl	801afa0 <_ZSt15get_new_handlerv>
 801af80:	b908      	cbnz	r0, 801af86 <_Znwj+0x1e>
 801af82:	f002 fd9b 	bl	801dabc <abort>
 801af86:	4780      	blx	r0
 801af88:	e7f3      	b.n	801af72 <_Znwj+0xa>

0801af8a <_Znaj>:
 801af8a:	f7ff bfed 	b.w	801af68 <_Znwj>

0801af8e <_ZSt20__throw_length_errorPKc>:
 801af8e:	b508      	push	{r3, lr}
 801af90:	f002 fd94 	bl	801dabc <abort>

0801af94 <_ZSt25__throw_bad_function_callv>:
 801af94:	b508      	push	{r3, lr}
 801af96:	f002 fd91 	bl	801dabc <abort>

0801af9a <_ZdlPv>:
 801af9a:	f002 bddf 	b.w	801db5c <free>
	...

0801afa0 <_ZSt15get_new_handlerv>:
 801afa0:	4b02      	ldr	r3, [pc, #8]	; (801afac <_ZSt15get_new_handlerv+0xc>)
 801afa2:	6818      	ldr	r0, [r3, #0]
 801afa4:	f3bf 8f5b 	dmb	ish
 801afa8:	4770      	bx	lr
 801afaa:	bf00      	nop
 801afac:	2000115c 	.word	0x2000115c

0801afb0 <pow>:
 801afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afb2:	ed2d 8b02 	vpush	{d8}
 801afb6:	eeb0 8a40 	vmov.f32	s16, s0
 801afba:	eef0 8a60 	vmov.f32	s17, s1
 801afbe:	ec55 4b11 	vmov	r4, r5, d1
 801afc2:	f001 f829 	bl	801c018 <__ieee754_pow>
 801afc6:	4622      	mov	r2, r4
 801afc8:	462b      	mov	r3, r5
 801afca:	4620      	mov	r0, r4
 801afcc:	4629      	mov	r1, r5
 801afce:	ec57 6b10 	vmov	r6, r7, d0
 801afd2:	f7e5 fdbb 	bl	8000b4c <__aeabi_dcmpun>
 801afd6:	2800      	cmp	r0, #0
 801afd8:	d13b      	bne.n	801b052 <pow+0xa2>
 801afda:	ec51 0b18 	vmov	r0, r1, d8
 801afde:	2200      	movs	r2, #0
 801afe0:	2300      	movs	r3, #0
 801afe2:	f7e5 fd81 	bl	8000ae8 <__aeabi_dcmpeq>
 801afe6:	b1b8      	cbz	r0, 801b018 <pow+0x68>
 801afe8:	2200      	movs	r2, #0
 801afea:	2300      	movs	r3, #0
 801afec:	4620      	mov	r0, r4
 801afee:	4629      	mov	r1, r5
 801aff0:	f7e5 fd7a 	bl	8000ae8 <__aeabi_dcmpeq>
 801aff4:	2800      	cmp	r0, #0
 801aff6:	d146      	bne.n	801b086 <pow+0xd6>
 801aff8:	ec45 4b10 	vmov	d0, r4, r5
 801affc:	f000 fa62 	bl	801b4c4 <finite>
 801b000:	b338      	cbz	r0, 801b052 <pow+0xa2>
 801b002:	2200      	movs	r2, #0
 801b004:	2300      	movs	r3, #0
 801b006:	4620      	mov	r0, r4
 801b008:	4629      	mov	r1, r5
 801b00a:	f7e5 fd77 	bl	8000afc <__aeabi_dcmplt>
 801b00e:	b300      	cbz	r0, 801b052 <pow+0xa2>
 801b010:	f004 fd20 	bl	801fa54 <__errno>
 801b014:	2322      	movs	r3, #34	; 0x22
 801b016:	e01b      	b.n	801b050 <pow+0xa0>
 801b018:	ec47 6b10 	vmov	d0, r6, r7
 801b01c:	f000 fa52 	bl	801b4c4 <finite>
 801b020:	b9e0      	cbnz	r0, 801b05c <pow+0xac>
 801b022:	eeb0 0a48 	vmov.f32	s0, s16
 801b026:	eef0 0a68 	vmov.f32	s1, s17
 801b02a:	f000 fa4b 	bl	801b4c4 <finite>
 801b02e:	b1a8      	cbz	r0, 801b05c <pow+0xac>
 801b030:	ec45 4b10 	vmov	d0, r4, r5
 801b034:	f000 fa46 	bl	801b4c4 <finite>
 801b038:	b180      	cbz	r0, 801b05c <pow+0xac>
 801b03a:	4632      	mov	r2, r6
 801b03c:	463b      	mov	r3, r7
 801b03e:	4630      	mov	r0, r6
 801b040:	4639      	mov	r1, r7
 801b042:	f7e5 fd83 	bl	8000b4c <__aeabi_dcmpun>
 801b046:	2800      	cmp	r0, #0
 801b048:	d0e2      	beq.n	801b010 <pow+0x60>
 801b04a:	f004 fd03 	bl	801fa54 <__errno>
 801b04e:	2321      	movs	r3, #33	; 0x21
 801b050:	6003      	str	r3, [r0, #0]
 801b052:	ecbd 8b02 	vpop	{d8}
 801b056:	ec47 6b10 	vmov	d0, r6, r7
 801b05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b05c:	2200      	movs	r2, #0
 801b05e:	2300      	movs	r3, #0
 801b060:	4630      	mov	r0, r6
 801b062:	4639      	mov	r1, r7
 801b064:	f7e5 fd40 	bl	8000ae8 <__aeabi_dcmpeq>
 801b068:	2800      	cmp	r0, #0
 801b06a:	d0f2      	beq.n	801b052 <pow+0xa2>
 801b06c:	eeb0 0a48 	vmov.f32	s0, s16
 801b070:	eef0 0a68 	vmov.f32	s1, s17
 801b074:	f000 fa26 	bl	801b4c4 <finite>
 801b078:	2800      	cmp	r0, #0
 801b07a:	d0ea      	beq.n	801b052 <pow+0xa2>
 801b07c:	ec45 4b10 	vmov	d0, r4, r5
 801b080:	f000 fa20 	bl	801b4c4 <finite>
 801b084:	e7c3      	b.n	801b00e <pow+0x5e>
 801b086:	4f01      	ldr	r7, [pc, #4]	; (801b08c <pow+0xdc>)
 801b088:	2600      	movs	r6, #0
 801b08a:	e7e2      	b.n	801b052 <pow+0xa2>
 801b08c:	3ff00000 	.word	0x3ff00000

0801b090 <sqrt>:
 801b090:	b538      	push	{r3, r4, r5, lr}
 801b092:	ed2d 8b02 	vpush	{d8}
 801b096:	ec55 4b10 	vmov	r4, r5, d0
 801b09a:	f000 fa5f 	bl	801b55c <__ieee754_sqrt>
 801b09e:	4622      	mov	r2, r4
 801b0a0:	462b      	mov	r3, r5
 801b0a2:	4620      	mov	r0, r4
 801b0a4:	4629      	mov	r1, r5
 801b0a6:	eeb0 8a40 	vmov.f32	s16, s0
 801b0aa:	eef0 8a60 	vmov.f32	s17, s1
 801b0ae:	f7e5 fd4d 	bl	8000b4c <__aeabi_dcmpun>
 801b0b2:	b990      	cbnz	r0, 801b0da <sqrt+0x4a>
 801b0b4:	2200      	movs	r2, #0
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	4620      	mov	r0, r4
 801b0ba:	4629      	mov	r1, r5
 801b0bc:	f7e5 fd1e 	bl	8000afc <__aeabi_dcmplt>
 801b0c0:	b158      	cbz	r0, 801b0da <sqrt+0x4a>
 801b0c2:	f004 fcc7 	bl	801fa54 <__errno>
 801b0c6:	2321      	movs	r3, #33	; 0x21
 801b0c8:	6003      	str	r3, [r0, #0]
 801b0ca:	2200      	movs	r2, #0
 801b0cc:	2300      	movs	r3, #0
 801b0ce:	4610      	mov	r0, r2
 801b0d0:	4619      	mov	r1, r3
 801b0d2:	f7e5 fbcb 	bl	800086c <__aeabi_ddiv>
 801b0d6:	ec41 0b18 	vmov	d8, r0, r1
 801b0da:	eeb0 0a48 	vmov.f32	s0, s16
 801b0de:	eef0 0a68 	vmov.f32	s1, s17
 801b0e2:	ecbd 8b02 	vpop	{d8}
 801b0e6:	bd38      	pop	{r3, r4, r5, pc}

0801b0e8 <cos>:
 801b0e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b0ea:	ec53 2b10 	vmov	r2, r3, d0
 801b0ee:	4826      	ldr	r0, [pc, #152]	; (801b188 <cos+0xa0>)
 801b0f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b0f4:	4281      	cmp	r1, r0
 801b0f6:	dc06      	bgt.n	801b106 <cos+0x1e>
 801b0f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801b180 <cos+0x98>
 801b0fc:	b005      	add	sp, #20
 801b0fe:	f85d eb04 	ldr.w	lr, [sp], #4
 801b102:	f000 bbf5 	b.w	801b8f0 <__kernel_cos>
 801b106:	4821      	ldr	r0, [pc, #132]	; (801b18c <cos+0xa4>)
 801b108:	4281      	cmp	r1, r0
 801b10a:	dd09      	ble.n	801b120 <cos+0x38>
 801b10c:	ee10 0a10 	vmov	r0, s0
 801b110:	4619      	mov	r1, r3
 801b112:	f7e5 f8c9 	bl	80002a8 <__aeabi_dsub>
 801b116:	ec41 0b10 	vmov	d0, r0, r1
 801b11a:	b005      	add	sp, #20
 801b11c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b120:	4668      	mov	r0, sp
 801b122:	f001 fca5 	bl	801ca70 <__ieee754_rem_pio2>
 801b126:	f000 0003 	and.w	r0, r0, #3
 801b12a:	2801      	cmp	r0, #1
 801b12c:	d00b      	beq.n	801b146 <cos+0x5e>
 801b12e:	2802      	cmp	r0, #2
 801b130:	d016      	beq.n	801b160 <cos+0x78>
 801b132:	b9e0      	cbnz	r0, 801b16e <cos+0x86>
 801b134:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b138:	ed9d 0b00 	vldr	d0, [sp]
 801b13c:	f000 fbd8 	bl	801b8f0 <__kernel_cos>
 801b140:	ec51 0b10 	vmov	r0, r1, d0
 801b144:	e7e7      	b.n	801b116 <cos+0x2e>
 801b146:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b14a:	ed9d 0b00 	vldr	d0, [sp]
 801b14e:	f000 fc97 	bl	801ba80 <__kernel_sin>
 801b152:	ec53 2b10 	vmov	r2, r3, d0
 801b156:	ee10 0a10 	vmov	r0, s0
 801b15a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b15e:	e7da      	b.n	801b116 <cos+0x2e>
 801b160:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b164:	ed9d 0b00 	vldr	d0, [sp]
 801b168:	f000 fbc2 	bl	801b8f0 <__kernel_cos>
 801b16c:	e7f1      	b.n	801b152 <cos+0x6a>
 801b16e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b172:	ed9d 0b00 	vldr	d0, [sp]
 801b176:	2001      	movs	r0, #1
 801b178:	f000 fc82 	bl	801ba80 <__kernel_sin>
 801b17c:	e7e0      	b.n	801b140 <cos+0x58>
 801b17e:	bf00      	nop
	...
 801b188:	3fe921fb 	.word	0x3fe921fb
 801b18c:	7fefffff 	.word	0x7fefffff

0801b190 <frexp>:
 801b190:	b570      	push	{r4, r5, r6, lr}
 801b192:	2100      	movs	r1, #0
 801b194:	ec55 4b10 	vmov	r4, r5, d0
 801b198:	6001      	str	r1, [r0, #0]
 801b19a:	4916      	ldr	r1, [pc, #88]	; (801b1f4 <frexp+0x64>)
 801b19c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801b1a0:	428a      	cmp	r2, r1
 801b1a2:	4606      	mov	r6, r0
 801b1a4:	462b      	mov	r3, r5
 801b1a6:	dc22      	bgt.n	801b1ee <frexp+0x5e>
 801b1a8:	ee10 1a10 	vmov	r1, s0
 801b1ac:	4311      	orrs	r1, r2
 801b1ae:	d01e      	beq.n	801b1ee <frexp+0x5e>
 801b1b0:	4911      	ldr	r1, [pc, #68]	; (801b1f8 <frexp+0x68>)
 801b1b2:	4029      	ands	r1, r5
 801b1b4:	b969      	cbnz	r1, 801b1d2 <frexp+0x42>
 801b1b6:	4b11      	ldr	r3, [pc, #68]	; (801b1fc <frexp+0x6c>)
 801b1b8:	2200      	movs	r2, #0
 801b1ba:	ee10 0a10 	vmov	r0, s0
 801b1be:	4629      	mov	r1, r5
 801b1c0:	f7e5 fa2a 	bl	8000618 <__aeabi_dmul>
 801b1c4:	460b      	mov	r3, r1
 801b1c6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801b1ca:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801b1ce:	4604      	mov	r4, r0
 801b1d0:	6031      	str	r1, [r6, #0]
 801b1d2:	6831      	ldr	r1, [r6, #0]
 801b1d4:	1512      	asrs	r2, r2, #20
 801b1d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b1da:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 801b1de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b1e2:	4411      	add	r1, r2
 801b1e4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801b1e8:	6031      	str	r1, [r6, #0]
 801b1ea:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801b1ee:	ec45 4b10 	vmov	d0, r4, r5
 801b1f2:	bd70      	pop	{r4, r5, r6, pc}
 801b1f4:	7fefffff 	.word	0x7fefffff
 801b1f8:	7ff00000 	.word	0x7ff00000
 801b1fc:	43500000 	.word	0x43500000

0801b200 <sin>:
 801b200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b202:	ec53 2b10 	vmov	r2, r3, d0
 801b206:	4828      	ldr	r0, [pc, #160]	; (801b2a8 <sin+0xa8>)
 801b208:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b20c:	4281      	cmp	r1, r0
 801b20e:	dc07      	bgt.n	801b220 <sin+0x20>
 801b210:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801b2a0 <sin+0xa0>
 801b214:	2000      	movs	r0, #0
 801b216:	b005      	add	sp, #20
 801b218:	f85d eb04 	ldr.w	lr, [sp], #4
 801b21c:	f000 bc30 	b.w	801ba80 <__kernel_sin>
 801b220:	4822      	ldr	r0, [pc, #136]	; (801b2ac <sin+0xac>)
 801b222:	4281      	cmp	r1, r0
 801b224:	dd09      	ble.n	801b23a <sin+0x3a>
 801b226:	ee10 0a10 	vmov	r0, s0
 801b22a:	4619      	mov	r1, r3
 801b22c:	f7e5 f83c 	bl	80002a8 <__aeabi_dsub>
 801b230:	ec41 0b10 	vmov	d0, r0, r1
 801b234:	b005      	add	sp, #20
 801b236:	f85d fb04 	ldr.w	pc, [sp], #4
 801b23a:	4668      	mov	r0, sp
 801b23c:	f001 fc18 	bl	801ca70 <__ieee754_rem_pio2>
 801b240:	f000 0003 	and.w	r0, r0, #3
 801b244:	2801      	cmp	r0, #1
 801b246:	d00c      	beq.n	801b262 <sin+0x62>
 801b248:	2802      	cmp	r0, #2
 801b24a:	d011      	beq.n	801b270 <sin+0x70>
 801b24c:	b9f0      	cbnz	r0, 801b28c <sin+0x8c>
 801b24e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b252:	ed9d 0b00 	vldr	d0, [sp]
 801b256:	2001      	movs	r0, #1
 801b258:	f000 fc12 	bl	801ba80 <__kernel_sin>
 801b25c:	ec51 0b10 	vmov	r0, r1, d0
 801b260:	e7e6      	b.n	801b230 <sin+0x30>
 801b262:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b266:	ed9d 0b00 	vldr	d0, [sp]
 801b26a:	f000 fb41 	bl	801b8f0 <__kernel_cos>
 801b26e:	e7f5      	b.n	801b25c <sin+0x5c>
 801b270:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b274:	ed9d 0b00 	vldr	d0, [sp]
 801b278:	2001      	movs	r0, #1
 801b27a:	f000 fc01 	bl	801ba80 <__kernel_sin>
 801b27e:	ec53 2b10 	vmov	r2, r3, d0
 801b282:	ee10 0a10 	vmov	r0, s0
 801b286:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b28a:	e7d1      	b.n	801b230 <sin+0x30>
 801b28c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b290:	ed9d 0b00 	vldr	d0, [sp]
 801b294:	f000 fb2c 	bl	801b8f0 <__kernel_cos>
 801b298:	e7f1      	b.n	801b27e <sin+0x7e>
 801b29a:	bf00      	nop
 801b29c:	f3af 8000 	nop.w
	...
 801b2a8:	3fe921fb 	.word	0x3fe921fb
 801b2ac:	7fefffff 	.word	0x7fefffff

0801b2b0 <tan>:
 801b2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b2b2:	ec53 2b10 	vmov	r2, r3, d0
 801b2b6:	4816      	ldr	r0, [pc, #88]	; (801b310 <tan+0x60>)
 801b2b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b2bc:	4281      	cmp	r1, r0
 801b2be:	dc07      	bgt.n	801b2d0 <tan+0x20>
 801b2c0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 801b308 <tan+0x58>
 801b2c4:	2001      	movs	r0, #1
 801b2c6:	b005      	add	sp, #20
 801b2c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b2cc:	f000 bc98 	b.w	801bc00 <__kernel_tan>
 801b2d0:	4810      	ldr	r0, [pc, #64]	; (801b314 <tan+0x64>)
 801b2d2:	4281      	cmp	r1, r0
 801b2d4:	dd09      	ble.n	801b2ea <tan+0x3a>
 801b2d6:	ee10 0a10 	vmov	r0, s0
 801b2da:	4619      	mov	r1, r3
 801b2dc:	f7e4 ffe4 	bl	80002a8 <__aeabi_dsub>
 801b2e0:	ec41 0b10 	vmov	d0, r0, r1
 801b2e4:	b005      	add	sp, #20
 801b2e6:	f85d fb04 	ldr.w	pc, [sp], #4
 801b2ea:	4668      	mov	r0, sp
 801b2ec:	f001 fbc0 	bl	801ca70 <__ieee754_rem_pio2>
 801b2f0:	0040      	lsls	r0, r0, #1
 801b2f2:	f000 0002 	and.w	r0, r0, #2
 801b2f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b2fa:	ed9d 0b00 	vldr	d0, [sp]
 801b2fe:	f1c0 0001 	rsb	r0, r0, #1
 801b302:	f000 fc7d 	bl	801bc00 <__kernel_tan>
 801b306:	e7ed      	b.n	801b2e4 <tan+0x34>
	...
 801b310:	3fe921fb 	.word	0x3fe921fb
 801b314:	7fefffff 	.word	0x7fefffff

0801b318 <expf>:
 801b318:	b508      	push	{r3, lr}
 801b31a:	ed2d 8b02 	vpush	{d8}
 801b31e:	eef0 8a40 	vmov.f32	s17, s0
 801b322:	f001 fdb5 	bl	801ce90 <__ieee754_expf>
 801b326:	eeb0 8a40 	vmov.f32	s16, s0
 801b32a:	eeb0 0a68 	vmov.f32	s0, s17
 801b32e:	f000 f8df 	bl	801b4f0 <finitef>
 801b332:	b160      	cbz	r0, 801b34e <expf+0x36>
 801b334:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801b374 <expf+0x5c>
 801b338:	eef4 8ae7 	vcmpe.f32	s17, s15
 801b33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b340:	dd0a      	ble.n	801b358 <expf+0x40>
 801b342:	f004 fb87 	bl	801fa54 <__errno>
 801b346:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801b378 <expf+0x60>
 801b34a:	2322      	movs	r3, #34	; 0x22
 801b34c:	6003      	str	r3, [r0, #0]
 801b34e:	eeb0 0a48 	vmov.f32	s0, s16
 801b352:	ecbd 8b02 	vpop	{d8}
 801b356:	bd08      	pop	{r3, pc}
 801b358:	eddf 7a08 	vldr	s15, [pc, #32]	; 801b37c <expf+0x64>
 801b35c:	eef4 8ae7 	vcmpe.f32	s17, s15
 801b360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b364:	d5f3      	bpl.n	801b34e <expf+0x36>
 801b366:	f004 fb75 	bl	801fa54 <__errno>
 801b36a:	2322      	movs	r3, #34	; 0x22
 801b36c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801b380 <expf+0x68>
 801b370:	6003      	str	r3, [r0, #0]
 801b372:	e7ec      	b.n	801b34e <expf+0x36>
 801b374:	42b17217 	.word	0x42b17217
 801b378:	7f800000 	.word	0x7f800000
 801b37c:	c2cff1b5 	.word	0xc2cff1b5
 801b380:	00000000 	.word	0x00000000

0801b384 <logf>:
 801b384:	b508      	push	{r3, lr}
 801b386:	ed2d 8b02 	vpush	{d8}
 801b38a:	eeb0 8a40 	vmov.f32	s16, s0
 801b38e:	f001 fe4d 	bl	801d02c <__ieee754_logf>
 801b392:	eeb4 8a48 	vcmp.f32	s16, s16
 801b396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b39a:	d60f      	bvs.n	801b3bc <logf+0x38>
 801b39c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3a4:	dc0a      	bgt.n	801b3bc <logf+0x38>
 801b3a6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3ae:	d108      	bne.n	801b3c2 <logf+0x3e>
 801b3b0:	f004 fb50 	bl	801fa54 <__errno>
 801b3b4:	2322      	movs	r3, #34	; 0x22
 801b3b6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801b3d8 <logf+0x54>
 801b3ba:	6003      	str	r3, [r0, #0]
 801b3bc:	ecbd 8b02 	vpop	{d8}
 801b3c0:	bd08      	pop	{r3, pc}
 801b3c2:	f004 fb47 	bl	801fa54 <__errno>
 801b3c6:	ecbd 8b02 	vpop	{d8}
 801b3ca:	2321      	movs	r3, #33	; 0x21
 801b3cc:	6003      	str	r3, [r0, #0]
 801b3ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b3d2:	4802      	ldr	r0, [pc, #8]	; (801b3dc <logf+0x58>)
 801b3d4:	f000 b89a 	b.w	801b50c <nanf>
 801b3d8:	ff800000 	.word	0xff800000
 801b3dc:	0802d08b 	.word	0x0802d08b

0801b3e0 <log10f>:
 801b3e0:	b508      	push	{r3, lr}
 801b3e2:	ed2d 8b02 	vpush	{d8}
 801b3e6:	eeb0 8a40 	vmov.f32	s16, s0
 801b3ea:	f001 ff11 	bl	801d210 <__ieee754_log10f>
 801b3ee:	eeb4 8a48 	vcmp.f32	s16, s16
 801b3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3f6:	d60f      	bvs.n	801b418 <log10f+0x38>
 801b3f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b400:	d80a      	bhi.n	801b418 <log10f+0x38>
 801b402:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b40a:	d108      	bne.n	801b41e <log10f+0x3e>
 801b40c:	f004 fb22 	bl	801fa54 <__errno>
 801b410:	2322      	movs	r3, #34	; 0x22
 801b412:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801b434 <log10f+0x54>
 801b416:	6003      	str	r3, [r0, #0]
 801b418:	ecbd 8b02 	vpop	{d8}
 801b41c:	bd08      	pop	{r3, pc}
 801b41e:	f004 fb19 	bl	801fa54 <__errno>
 801b422:	ecbd 8b02 	vpop	{d8}
 801b426:	2321      	movs	r3, #33	; 0x21
 801b428:	6003      	str	r3, [r0, #0]
 801b42a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b42e:	4802      	ldr	r0, [pc, #8]	; (801b438 <log10f+0x58>)
 801b430:	f000 b86c 	b.w	801b50c <nanf>
 801b434:	ff800000 	.word	0xff800000
 801b438:	0802d08b 	.word	0x0802d08b

0801b43c <sqrtf>:
 801b43c:	b508      	push	{r3, lr}
 801b43e:	ed2d 8b02 	vpush	{d8}
 801b442:	eeb0 8a40 	vmov.f32	s16, s0
 801b446:	f000 f963 	bl	801b710 <__ieee754_sqrtf>
 801b44a:	eeb4 8a48 	vcmp.f32	s16, s16
 801b44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b452:	d60c      	bvs.n	801b46e <sqrtf+0x32>
 801b454:	eddf 8a07 	vldr	s17, [pc, #28]	; 801b474 <sqrtf+0x38>
 801b458:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801b45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b460:	d505      	bpl.n	801b46e <sqrtf+0x32>
 801b462:	f004 faf7 	bl	801fa54 <__errno>
 801b466:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801b46a:	2321      	movs	r3, #33	; 0x21
 801b46c:	6003      	str	r3, [r0, #0]
 801b46e:	ecbd 8b02 	vpop	{d8}
 801b472:	bd08      	pop	{r3, pc}
 801b474:	00000000 	.word	0x00000000

0801b478 <frexpf>:
 801b478:	ee10 3a10 	vmov	r3, s0
 801b47c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b480:	2100      	movs	r1, #0
 801b482:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b486:	6001      	str	r1, [r0, #0]
 801b488:	da19      	bge.n	801b4be <frexpf+0x46>
 801b48a:	b1c2      	cbz	r2, 801b4be <frexpf+0x46>
 801b48c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b490:	d10a      	bne.n	801b4a8 <frexpf+0x30>
 801b492:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801b4c0 <frexpf+0x48>
 801b496:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b49a:	f06f 0118 	mvn.w	r1, #24
 801b49e:	ee17 3a90 	vmov	r3, s15
 801b4a2:	6001      	str	r1, [r0, #0]
 801b4a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b4a8:	6801      	ldr	r1, [r0, #0]
 801b4aa:	15d2      	asrs	r2, r2, #23
 801b4ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b4b0:	3a7e      	subs	r2, #126	; 0x7e
 801b4b2:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 801b4b6:	4411      	add	r1, r2
 801b4b8:	ee00 3a10 	vmov	s0, r3
 801b4bc:	6001      	str	r1, [r0, #0]
 801b4be:	4770      	bx	lr
 801b4c0:	4c000000 	.word	0x4c000000

0801b4c4 <finite>:
 801b4c4:	b082      	sub	sp, #8
 801b4c6:	ed8d 0b00 	vstr	d0, [sp]
 801b4ca:	9801      	ldr	r0, [sp, #4]
 801b4cc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801b4d0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801b4d4:	0fc0      	lsrs	r0, r0, #31
 801b4d6:	b002      	add	sp, #8
 801b4d8:	4770      	bx	lr
 801b4da:	0000      	movs	r0, r0
 801b4dc:	0000      	movs	r0, r0
	...

0801b4e0 <nan>:
 801b4e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b4e8 <nan+0x8>
 801b4e4:	4770      	bx	lr
 801b4e6:	bf00      	nop
 801b4e8:	00000000 	.word	0x00000000
 801b4ec:	7ff80000 	.word	0x7ff80000

0801b4f0 <finitef>:
 801b4f0:	b082      	sub	sp, #8
 801b4f2:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b4f6:	9801      	ldr	r0, [sp, #4]
 801b4f8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b4fc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801b500:	bfac      	ite	ge
 801b502:	2000      	movge	r0, #0
 801b504:	2001      	movlt	r0, #1
 801b506:	b002      	add	sp, #8
 801b508:	4770      	bx	lr
	...

0801b50c <nanf>:
 801b50c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b514 <nanf+0x8>
 801b510:	4770      	bx	lr
 801b512:	bf00      	nop
 801b514:	7fc00000 	.word	0x7fc00000

0801b518 <with_errnof>:
 801b518:	b513      	push	{r0, r1, r4, lr}
 801b51a:	4604      	mov	r4, r0
 801b51c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b520:	f004 fa98 	bl	801fa54 <__errno>
 801b524:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b528:	6004      	str	r4, [r0, #0]
 801b52a:	b002      	add	sp, #8
 801b52c:	bd10      	pop	{r4, pc}

0801b52e <xflowf>:
 801b52e:	b130      	cbz	r0, 801b53e <xflowf+0x10>
 801b530:	eef1 7a40 	vneg.f32	s15, s0
 801b534:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b538:	2022      	movs	r0, #34	; 0x22
 801b53a:	f7ff bfed 	b.w	801b518 <with_errnof>
 801b53e:	eef0 7a40 	vmov.f32	s15, s0
 801b542:	e7f7      	b.n	801b534 <xflowf+0x6>

0801b544 <__math_uflowf>:
 801b544:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b54c <__math_uflowf+0x8>
 801b548:	f7ff bff1 	b.w	801b52e <xflowf>
 801b54c:	10000000 	.word	0x10000000

0801b550 <__math_oflowf>:
 801b550:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b558 <__math_oflowf+0x8>
 801b554:	f7ff bfeb 	b.w	801b52e <xflowf>
 801b558:	70000000 	.word	0x70000000

0801b55c <__ieee754_sqrt>:
 801b55c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b560:	ec55 4b10 	vmov	r4, r5, d0
 801b564:	4e67      	ldr	r6, [pc, #412]	; (801b704 <__ieee754_sqrt+0x1a8>)
 801b566:	43ae      	bics	r6, r5
 801b568:	ee10 0a10 	vmov	r0, s0
 801b56c:	ee10 2a10 	vmov	r2, s0
 801b570:	4629      	mov	r1, r5
 801b572:	462b      	mov	r3, r5
 801b574:	d10d      	bne.n	801b592 <__ieee754_sqrt+0x36>
 801b576:	f7e5 f84f 	bl	8000618 <__aeabi_dmul>
 801b57a:	4602      	mov	r2, r0
 801b57c:	460b      	mov	r3, r1
 801b57e:	4620      	mov	r0, r4
 801b580:	4629      	mov	r1, r5
 801b582:	f7e4 fe93 	bl	80002ac <__adddf3>
 801b586:	4604      	mov	r4, r0
 801b588:	460d      	mov	r5, r1
 801b58a:	ec45 4b10 	vmov	d0, r4, r5
 801b58e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b592:	2d00      	cmp	r5, #0
 801b594:	dc0b      	bgt.n	801b5ae <__ieee754_sqrt+0x52>
 801b596:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b59a:	4326      	orrs	r6, r4
 801b59c:	d0f5      	beq.n	801b58a <__ieee754_sqrt+0x2e>
 801b59e:	b135      	cbz	r5, 801b5ae <__ieee754_sqrt+0x52>
 801b5a0:	f7e4 fe82 	bl	80002a8 <__aeabi_dsub>
 801b5a4:	4602      	mov	r2, r0
 801b5a6:	460b      	mov	r3, r1
 801b5a8:	f7e5 f960 	bl	800086c <__aeabi_ddiv>
 801b5ac:	e7eb      	b.n	801b586 <__ieee754_sqrt+0x2a>
 801b5ae:	1509      	asrs	r1, r1, #20
 801b5b0:	f000 808d 	beq.w	801b6ce <__ieee754_sqrt+0x172>
 801b5b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b5b8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801b5bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b5c0:	07c9      	lsls	r1, r1, #31
 801b5c2:	bf5c      	itt	pl
 801b5c4:	005b      	lslpl	r3, r3, #1
 801b5c6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801b5ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b5ce:	bf58      	it	pl
 801b5d0:	0052      	lslpl	r2, r2, #1
 801b5d2:	2500      	movs	r5, #0
 801b5d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801b5d8:	1076      	asrs	r6, r6, #1
 801b5da:	0052      	lsls	r2, r2, #1
 801b5dc:	f04f 0e16 	mov.w	lr, #22
 801b5e0:	46ac      	mov	ip, r5
 801b5e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b5e6:	eb0c 0001 	add.w	r0, ip, r1
 801b5ea:	4298      	cmp	r0, r3
 801b5ec:	bfde      	ittt	le
 801b5ee:	1a1b      	suble	r3, r3, r0
 801b5f0:	eb00 0c01 	addle.w	ip, r0, r1
 801b5f4:	186d      	addle	r5, r5, r1
 801b5f6:	005b      	lsls	r3, r3, #1
 801b5f8:	f1be 0e01 	subs.w	lr, lr, #1
 801b5fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801b600:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b604:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801b608:	d1ed      	bne.n	801b5e6 <__ieee754_sqrt+0x8a>
 801b60a:	4674      	mov	r4, lr
 801b60c:	2720      	movs	r7, #32
 801b60e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801b612:	4563      	cmp	r3, ip
 801b614:	eb01 000e 	add.w	r0, r1, lr
 801b618:	dc02      	bgt.n	801b620 <__ieee754_sqrt+0xc4>
 801b61a:	d113      	bne.n	801b644 <__ieee754_sqrt+0xe8>
 801b61c:	4290      	cmp	r0, r2
 801b61e:	d811      	bhi.n	801b644 <__ieee754_sqrt+0xe8>
 801b620:	2800      	cmp	r0, #0
 801b622:	eb00 0e01 	add.w	lr, r0, r1
 801b626:	da57      	bge.n	801b6d8 <__ieee754_sqrt+0x17c>
 801b628:	f1be 0f00 	cmp.w	lr, #0
 801b62c:	db54      	blt.n	801b6d8 <__ieee754_sqrt+0x17c>
 801b62e:	f10c 0801 	add.w	r8, ip, #1
 801b632:	eba3 030c 	sub.w	r3, r3, ip
 801b636:	4290      	cmp	r0, r2
 801b638:	bf88      	it	hi
 801b63a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801b63e:	1a12      	subs	r2, r2, r0
 801b640:	440c      	add	r4, r1
 801b642:	46c4      	mov	ip, r8
 801b644:	005b      	lsls	r3, r3, #1
 801b646:	3f01      	subs	r7, #1
 801b648:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801b64c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b650:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801b654:	d1dd      	bne.n	801b612 <__ieee754_sqrt+0xb6>
 801b656:	4313      	orrs	r3, r2
 801b658:	d01b      	beq.n	801b692 <__ieee754_sqrt+0x136>
 801b65a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801b708 <__ieee754_sqrt+0x1ac>
 801b65e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801b70c <__ieee754_sqrt+0x1b0>
 801b662:	e9da 0100 	ldrd	r0, r1, [sl]
 801b666:	e9db 2300 	ldrd	r2, r3, [fp]
 801b66a:	f7e4 fe1d 	bl	80002a8 <__aeabi_dsub>
 801b66e:	e9da 8900 	ldrd	r8, r9, [sl]
 801b672:	4602      	mov	r2, r0
 801b674:	460b      	mov	r3, r1
 801b676:	4640      	mov	r0, r8
 801b678:	4649      	mov	r1, r9
 801b67a:	f7e5 fa49 	bl	8000b10 <__aeabi_dcmple>
 801b67e:	b140      	cbz	r0, 801b692 <__ieee754_sqrt+0x136>
 801b680:	f1b4 3fff 	cmp.w	r4, #4294967295
 801b684:	e9da 0100 	ldrd	r0, r1, [sl]
 801b688:	e9db 2300 	ldrd	r2, r3, [fp]
 801b68c:	d126      	bne.n	801b6dc <__ieee754_sqrt+0x180>
 801b68e:	3501      	adds	r5, #1
 801b690:	463c      	mov	r4, r7
 801b692:	106a      	asrs	r2, r5, #1
 801b694:	0863      	lsrs	r3, r4, #1
 801b696:	07e9      	lsls	r1, r5, #31
 801b698:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801b69c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801b6a0:	bf48      	it	mi
 801b6a2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801b6a6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801b6aa:	461c      	mov	r4, r3
 801b6ac:	e76d      	b.n	801b58a <__ieee754_sqrt+0x2e>
 801b6ae:	0ad3      	lsrs	r3, r2, #11
 801b6b0:	3815      	subs	r0, #21
 801b6b2:	0552      	lsls	r2, r2, #21
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d0fa      	beq.n	801b6ae <__ieee754_sqrt+0x152>
 801b6b8:	02dc      	lsls	r4, r3, #11
 801b6ba:	d50a      	bpl.n	801b6d2 <__ieee754_sqrt+0x176>
 801b6bc:	f1c1 0420 	rsb	r4, r1, #32
 801b6c0:	fa22 f404 	lsr.w	r4, r2, r4
 801b6c4:	1e4d      	subs	r5, r1, #1
 801b6c6:	408a      	lsls	r2, r1
 801b6c8:	4323      	orrs	r3, r4
 801b6ca:	1b41      	subs	r1, r0, r5
 801b6cc:	e772      	b.n	801b5b4 <__ieee754_sqrt+0x58>
 801b6ce:	4608      	mov	r0, r1
 801b6d0:	e7f0      	b.n	801b6b4 <__ieee754_sqrt+0x158>
 801b6d2:	005b      	lsls	r3, r3, #1
 801b6d4:	3101      	adds	r1, #1
 801b6d6:	e7ef      	b.n	801b6b8 <__ieee754_sqrt+0x15c>
 801b6d8:	46e0      	mov	r8, ip
 801b6da:	e7aa      	b.n	801b632 <__ieee754_sqrt+0xd6>
 801b6dc:	f7e4 fde6 	bl	80002ac <__adddf3>
 801b6e0:	e9da 8900 	ldrd	r8, r9, [sl]
 801b6e4:	4602      	mov	r2, r0
 801b6e6:	460b      	mov	r3, r1
 801b6e8:	4640      	mov	r0, r8
 801b6ea:	4649      	mov	r1, r9
 801b6ec:	f7e5 fa06 	bl	8000afc <__aeabi_dcmplt>
 801b6f0:	b120      	cbz	r0, 801b6fc <__ieee754_sqrt+0x1a0>
 801b6f2:	1ca0      	adds	r0, r4, #2
 801b6f4:	bf08      	it	eq
 801b6f6:	3501      	addeq	r5, #1
 801b6f8:	3402      	adds	r4, #2
 801b6fa:	e7ca      	b.n	801b692 <__ieee754_sqrt+0x136>
 801b6fc:	3401      	adds	r4, #1
 801b6fe:	f024 0401 	bic.w	r4, r4, #1
 801b702:	e7c6      	b.n	801b692 <__ieee754_sqrt+0x136>
 801b704:	7ff00000 	.word	0x7ff00000
 801b708:	200002e0 	.word	0x200002e0
 801b70c:	200002e8 	.word	0x200002e8

0801b710 <__ieee754_sqrtf>:
 801b710:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b714:	4770      	bx	lr
	...

0801b718 <floor>:
 801b718:	ec51 0b10 	vmov	r0, r1, d0
 801b71c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b724:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801b728:	2e13      	cmp	r6, #19
 801b72a:	ee10 5a10 	vmov	r5, s0
 801b72e:	ee10 8a10 	vmov	r8, s0
 801b732:	460c      	mov	r4, r1
 801b734:	dc31      	bgt.n	801b79a <floor+0x82>
 801b736:	2e00      	cmp	r6, #0
 801b738:	da14      	bge.n	801b764 <floor+0x4c>
 801b73a:	a333      	add	r3, pc, #204	; (adr r3, 801b808 <floor+0xf0>)
 801b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b740:	f7e4 fdb4 	bl	80002ac <__adddf3>
 801b744:	2200      	movs	r2, #0
 801b746:	2300      	movs	r3, #0
 801b748:	f7e5 f9f6 	bl	8000b38 <__aeabi_dcmpgt>
 801b74c:	b138      	cbz	r0, 801b75e <floor+0x46>
 801b74e:	2c00      	cmp	r4, #0
 801b750:	da53      	bge.n	801b7fa <floor+0xe2>
 801b752:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801b756:	4325      	orrs	r5, r4
 801b758:	d052      	beq.n	801b800 <floor+0xe8>
 801b75a:	4c2d      	ldr	r4, [pc, #180]	; (801b810 <floor+0xf8>)
 801b75c:	2500      	movs	r5, #0
 801b75e:	4621      	mov	r1, r4
 801b760:	4628      	mov	r0, r5
 801b762:	e024      	b.n	801b7ae <floor+0x96>
 801b764:	4f2b      	ldr	r7, [pc, #172]	; (801b814 <floor+0xfc>)
 801b766:	4137      	asrs	r7, r6
 801b768:	ea01 0307 	and.w	r3, r1, r7
 801b76c:	4303      	orrs	r3, r0
 801b76e:	d01e      	beq.n	801b7ae <floor+0x96>
 801b770:	a325      	add	r3, pc, #148	; (adr r3, 801b808 <floor+0xf0>)
 801b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b776:	f7e4 fd99 	bl	80002ac <__adddf3>
 801b77a:	2200      	movs	r2, #0
 801b77c:	2300      	movs	r3, #0
 801b77e:	f7e5 f9db 	bl	8000b38 <__aeabi_dcmpgt>
 801b782:	2800      	cmp	r0, #0
 801b784:	d0eb      	beq.n	801b75e <floor+0x46>
 801b786:	2c00      	cmp	r4, #0
 801b788:	bfbe      	ittt	lt
 801b78a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b78e:	4133      	asrlt	r3, r6
 801b790:	18e4      	addlt	r4, r4, r3
 801b792:	ea24 0407 	bic.w	r4, r4, r7
 801b796:	2500      	movs	r5, #0
 801b798:	e7e1      	b.n	801b75e <floor+0x46>
 801b79a:	2e33      	cmp	r6, #51	; 0x33
 801b79c:	dd0b      	ble.n	801b7b6 <floor+0x9e>
 801b79e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b7a2:	d104      	bne.n	801b7ae <floor+0x96>
 801b7a4:	ee10 2a10 	vmov	r2, s0
 801b7a8:	460b      	mov	r3, r1
 801b7aa:	f7e4 fd7f 	bl	80002ac <__adddf3>
 801b7ae:	ec41 0b10 	vmov	d0, r0, r1
 801b7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7b6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801b7ba:	f04f 37ff 	mov.w	r7, #4294967295
 801b7be:	40df      	lsrs	r7, r3
 801b7c0:	4238      	tst	r0, r7
 801b7c2:	d0f4      	beq.n	801b7ae <floor+0x96>
 801b7c4:	a310      	add	r3, pc, #64	; (adr r3, 801b808 <floor+0xf0>)
 801b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7ca:	f7e4 fd6f 	bl	80002ac <__adddf3>
 801b7ce:	2200      	movs	r2, #0
 801b7d0:	2300      	movs	r3, #0
 801b7d2:	f7e5 f9b1 	bl	8000b38 <__aeabi_dcmpgt>
 801b7d6:	2800      	cmp	r0, #0
 801b7d8:	d0c1      	beq.n	801b75e <floor+0x46>
 801b7da:	2c00      	cmp	r4, #0
 801b7dc:	da0a      	bge.n	801b7f4 <floor+0xdc>
 801b7de:	2e14      	cmp	r6, #20
 801b7e0:	d101      	bne.n	801b7e6 <floor+0xce>
 801b7e2:	3401      	adds	r4, #1
 801b7e4:	e006      	b.n	801b7f4 <floor+0xdc>
 801b7e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b7ea:	2301      	movs	r3, #1
 801b7ec:	40b3      	lsls	r3, r6
 801b7ee:	441d      	add	r5, r3
 801b7f0:	45a8      	cmp	r8, r5
 801b7f2:	d8f6      	bhi.n	801b7e2 <floor+0xca>
 801b7f4:	ea25 0507 	bic.w	r5, r5, r7
 801b7f8:	e7b1      	b.n	801b75e <floor+0x46>
 801b7fa:	2500      	movs	r5, #0
 801b7fc:	462c      	mov	r4, r5
 801b7fe:	e7ae      	b.n	801b75e <floor+0x46>
 801b800:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b804:	e7ab      	b.n	801b75e <floor+0x46>
 801b806:	bf00      	nop
 801b808:	8800759c 	.word	0x8800759c
 801b80c:	7e37e43c 	.word	0x7e37e43c
 801b810:	bff00000 	.word	0xbff00000
 801b814:	000fffff 	.word	0x000fffff

0801b818 <round>:
 801b818:	ec53 2b10 	vmov	r2, r3, d0
 801b81c:	b570      	push	{r4, r5, r6, lr}
 801b81e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801b822:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801b826:	2813      	cmp	r0, #19
 801b828:	ee10 5a10 	vmov	r5, s0
 801b82c:	4619      	mov	r1, r3
 801b82e:	dc18      	bgt.n	801b862 <round+0x4a>
 801b830:	2800      	cmp	r0, #0
 801b832:	da09      	bge.n	801b848 <round+0x30>
 801b834:	3001      	adds	r0, #1
 801b836:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801b83a:	d103      	bne.n	801b844 <round+0x2c>
 801b83c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801b840:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801b844:	2300      	movs	r3, #0
 801b846:	e02a      	b.n	801b89e <round+0x86>
 801b848:	4c16      	ldr	r4, [pc, #88]	; (801b8a4 <round+0x8c>)
 801b84a:	4104      	asrs	r4, r0
 801b84c:	ea03 0604 	and.w	r6, r3, r4
 801b850:	4316      	orrs	r6, r2
 801b852:	d011      	beq.n	801b878 <round+0x60>
 801b854:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801b858:	4103      	asrs	r3, r0
 801b85a:	440b      	add	r3, r1
 801b85c:	ea23 0104 	bic.w	r1, r3, r4
 801b860:	e7f0      	b.n	801b844 <round+0x2c>
 801b862:	2833      	cmp	r0, #51	; 0x33
 801b864:	dd0b      	ble.n	801b87e <round+0x66>
 801b866:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801b86a:	d105      	bne.n	801b878 <round+0x60>
 801b86c:	ee10 0a10 	vmov	r0, s0
 801b870:	f7e4 fd1c 	bl	80002ac <__adddf3>
 801b874:	4602      	mov	r2, r0
 801b876:	460b      	mov	r3, r1
 801b878:	ec43 2b10 	vmov	d0, r2, r3
 801b87c:	bd70      	pop	{r4, r5, r6, pc}
 801b87e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801b882:	f04f 34ff 	mov.w	r4, #4294967295
 801b886:	40f4      	lsrs	r4, r6
 801b888:	4214      	tst	r4, r2
 801b88a:	d0f5      	beq.n	801b878 <round+0x60>
 801b88c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801b890:	2301      	movs	r3, #1
 801b892:	4083      	lsls	r3, r0
 801b894:	195b      	adds	r3, r3, r5
 801b896:	bf28      	it	cs
 801b898:	3101      	addcs	r1, #1
 801b89a:	ea23 0304 	bic.w	r3, r3, r4
 801b89e:	461a      	mov	r2, r3
 801b8a0:	460b      	mov	r3, r1
 801b8a2:	e7e9      	b.n	801b878 <round+0x60>
 801b8a4:	000fffff 	.word	0x000fffff

0801b8a8 <roundf>:
 801b8a8:	ee10 0a10 	vmov	r0, s0
 801b8ac:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801b8b0:	3a7f      	subs	r2, #127	; 0x7f
 801b8b2:	2a16      	cmp	r2, #22
 801b8b4:	dc15      	bgt.n	801b8e2 <roundf+0x3a>
 801b8b6:	2a00      	cmp	r2, #0
 801b8b8:	da08      	bge.n	801b8cc <roundf+0x24>
 801b8ba:	3201      	adds	r2, #1
 801b8bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801b8c0:	d101      	bne.n	801b8c6 <roundf+0x1e>
 801b8c2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801b8c6:	ee00 3a10 	vmov	s0, r3
 801b8ca:	4770      	bx	lr
 801b8cc:	4907      	ldr	r1, [pc, #28]	; (801b8ec <roundf+0x44>)
 801b8ce:	4111      	asrs	r1, r2
 801b8d0:	4208      	tst	r0, r1
 801b8d2:	d0fa      	beq.n	801b8ca <roundf+0x22>
 801b8d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b8d8:	4113      	asrs	r3, r2
 801b8da:	4403      	add	r3, r0
 801b8dc:	ea23 0301 	bic.w	r3, r3, r1
 801b8e0:	e7f1      	b.n	801b8c6 <roundf+0x1e>
 801b8e2:	2a80      	cmp	r2, #128	; 0x80
 801b8e4:	d1f1      	bne.n	801b8ca <roundf+0x22>
 801b8e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b8ea:	4770      	bx	lr
 801b8ec:	007fffff 	.word	0x007fffff

0801b8f0 <__kernel_cos>:
 801b8f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8f4:	ec57 6b10 	vmov	r6, r7, d0
 801b8f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b8fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b900:	ed8d 1b00 	vstr	d1, [sp]
 801b904:	da07      	bge.n	801b916 <__kernel_cos+0x26>
 801b906:	ee10 0a10 	vmov	r0, s0
 801b90a:	4639      	mov	r1, r7
 801b90c:	f7e5 f934 	bl	8000b78 <__aeabi_d2iz>
 801b910:	2800      	cmp	r0, #0
 801b912:	f000 8088 	beq.w	801ba26 <__kernel_cos+0x136>
 801b916:	4632      	mov	r2, r6
 801b918:	463b      	mov	r3, r7
 801b91a:	4630      	mov	r0, r6
 801b91c:	4639      	mov	r1, r7
 801b91e:	f7e4 fe7b 	bl	8000618 <__aeabi_dmul>
 801b922:	4b51      	ldr	r3, [pc, #324]	; (801ba68 <__kernel_cos+0x178>)
 801b924:	2200      	movs	r2, #0
 801b926:	4604      	mov	r4, r0
 801b928:	460d      	mov	r5, r1
 801b92a:	f7e4 fe75 	bl	8000618 <__aeabi_dmul>
 801b92e:	a340      	add	r3, pc, #256	; (adr r3, 801ba30 <__kernel_cos+0x140>)
 801b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b934:	4682      	mov	sl, r0
 801b936:	468b      	mov	fp, r1
 801b938:	4620      	mov	r0, r4
 801b93a:	4629      	mov	r1, r5
 801b93c:	f7e4 fe6c 	bl	8000618 <__aeabi_dmul>
 801b940:	a33d      	add	r3, pc, #244	; (adr r3, 801ba38 <__kernel_cos+0x148>)
 801b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b946:	f7e4 fcb1 	bl	80002ac <__adddf3>
 801b94a:	4622      	mov	r2, r4
 801b94c:	462b      	mov	r3, r5
 801b94e:	f7e4 fe63 	bl	8000618 <__aeabi_dmul>
 801b952:	a33b      	add	r3, pc, #236	; (adr r3, 801ba40 <__kernel_cos+0x150>)
 801b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b958:	f7e4 fca6 	bl	80002a8 <__aeabi_dsub>
 801b95c:	4622      	mov	r2, r4
 801b95e:	462b      	mov	r3, r5
 801b960:	f7e4 fe5a 	bl	8000618 <__aeabi_dmul>
 801b964:	a338      	add	r3, pc, #224	; (adr r3, 801ba48 <__kernel_cos+0x158>)
 801b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b96a:	f7e4 fc9f 	bl	80002ac <__adddf3>
 801b96e:	4622      	mov	r2, r4
 801b970:	462b      	mov	r3, r5
 801b972:	f7e4 fe51 	bl	8000618 <__aeabi_dmul>
 801b976:	a336      	add	r3, pc, #216	; (adr r3, 801ba50 <__kernel_cos+0x160>)
 801b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b97c:	f7e4 fc94 	bl	80002a8 <__aeabi_dsub>
 801b980:	4622      	mov	r2, r4
 801b982:	462b      	mov	r3, r5
 801b984:	f7e4 fe48 	bl	8000618 <__aeabi_dmul>
 801b988:	a333      	add	r3, pc, #204	; (adr r3, 801ba58 <__kernel_cos+0x168>)
 801b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b98e:	f7e4 fc8d 	bl	80002ac <__adddf3>
 801b992:	4622      	mov	r2, r4
 801b994:	462b      	mov	r3, r5
 801b996:	f7e4 fe3f 	bl	8000618 <__aeabi_dmul>
 801b99a:	4622      	mov	r2, r4
 801b99c:	462b      	mov	r3, r5
 801b99e:	f7e4 fe3b 	bl	8000618 <__aeabi_dmul>
 801b9a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b9a6:	4604      	mov	r4, r0
 801b9a8:	460d      	mov	r5, r1
 801b9aa:	4630      	mov	r0, r6
 801b9ac:	4639      	mov	r1, r7
 801b9ae:	f7e4 fe33 	bl	8000618 <__aeabi_dmul>
 801b9b2:	460b      	mov	r3, r1
 801b9b4:	4602      	mov	r2, r0
 801b9b6:	4629      	mov	r1, r5
 801b9b8:	4620      	mov	r0, r4
 801b9ba:	f7e4 fc75 	bl	80002a8 <__aeabi_dsub>
 801b9be:	4b2b      	ldr	r3, [pc, #172]	; (801ba6c <__kernel_cos+0x17c>)
 801b9c0:	4598      	cmp	r8, r3
 801b9c2:	4606      	mov	r6, r0
 801b9c4:	460f      	mov	r7, r1
 801b9c6:	dc10      	bgt.n	801b9ea <__kernel_cos+0xfa>
 801b9c8:	4602      	mov	r2, r0
 801b9ca:	460b      	mov	r3, r1
 801b9cc:	4650      	mov	r0, sl
 801b9ce:	4659      	mov	r1, fp
 801b9d0:	f7e4 fc6a 	bl	80002a8 <__aeabi_dsub>
 801b9d4:	460b      	mov	r3, r1
 801b9d6:	4926      	ldr	r1, [pc, #152]	; (801ba70 <__kernel_cos+0x180>)
 801b9d8:	4602      	mov	r2, r0
 801b9da:	2000      	movs	r0, #0
 801b9dc:	f7e4 fc64 	bl	80002a8 <__aeabi_dsub>
 801b9e0:	ec41 0b10 	vmov	d0, r0, r1
 801b9e4:	b003      	add	sp, #12
 801b9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9ea:	4b22      	ldr	r3, [pc, #136]	; (801ba74 <__kernel_cos+0x184>)
 801b9ec:	4920      	ldr	r1, [pc, #128]	; (801ba70 <__kernel_cos+0x180>)
 801b9ee:	4598      	cmp	r8, r3
 801b9f0:	bfcc      	ite	gt
 801b9f2:	4d21      	ldrgt	r5, [pc, #132]	; (801ba78 <__kernel_cos+0x188>)
 801b9f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b9f8:	2400      	movs	r4, #0
 801b9fa:	4622      	mov	r2, r4
 801b9fc:	462b      	mov	r3, r5
 801b9fe:	2000      	movs	r0, #0
 801ba00:	f7e4 fc52 	bl	80002a8 <__aeabi_dsub>
 801ba04:	4622      	mov	r2, r4
 801ba06:	4680      	mov	r8, r0
 801ba08:	4689      	mov	r9, r1
 801ba0a:	462b      	mov	r3, r5
 801ba0c:	4650      	mov	r0, sl
 801ba0e:	4659      	mov	r1, fp
 801ba10:	f7e4 fc4a 	bl	80002a8 <__aeabi_dsub>
 801ba14:	4632      	mov	r2, r6
 801ba16:	463b      	mov	r3, r7
 801ba18:	f7e4 fc46 	bl	80002a8 <__aeabi_dsub>
 801ba1c:	4602      	mov	r2, r0
 801ba1e:	460b      	mov	r3, r1
 801ba20:	4640      	mov	r0, r8
 801ba22:	4649      	mov	r1, r9
 801ba24:	e7da      	b.n	801b9dc <__kernel_cos+0xec>
 801ba26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801ba60 <__kernel_cos+0x170>
 801ba2a:	e7db      	b.n	801b9e4 <__kernel_cos+0xf4>
 801ba2c:	f3af 8000 	nop.w
 801ba30:	be8838d4 	.word	0xbe8838d4
 801ba34:	bda8fae9 	.word	0xbda8fae9
 801ba38:	bdb4b1c4 	.word	0xbdb4b1c4
 801ba3c:	3e21ee9e 	.word	0x3e21ee9e
 801ba40:	809c52ad 	.word	0x809c52ad
 801ba44:	3e927e4f 	.word	0x3e927e4f
 801ba48:	19cb1590 	.word	0x19cb1590
 801ba4c:	3efa01a0 	.word	0x3efa01a0
 801ba50:	16c15177 	.word	0x16c15177
 801ba54:	3f56c16c 	.word	0x3f56c16c
 801ba58:	5555554c 	.word	0x5555554c
 801ba5c:	3fa55555 	.word	0x3fa55555
 801ba60:	00000000 	.word	0x00000000
 801ba64:	3ff00000 	.word	0x3ff00000
 801ba68:	3fe00000 	.word	0x3fe00000
 801ba6c:	3fd33332 	.word	0x3fd33332
 801ba70:	3ff00000 	.word	0x3ff00000
 801ba74:	3fe90000 	.word	0x3fe90000
 801ba78:	3fd20000 	.word	0x3fd20000
 801ba7c:	00000000 	.word	0x00000000

0801ba80 <__kernel_sin>:
 801ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba84:	ed2d 8b04 	vpush	{d8-d9}
 801ba88:	eeb0 8a41 	vmov.f32	s16, s2
 801ba8c:	eef0 8a61 	vmov.f32	s17, s3
 801ba90:	ec55 4b10 	vmov	r4, r5, d0
 801ba94:	b083      	sub	sp, #12
 801ba96:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ba9a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ba9e:	9001      	str	r0, [sp, #4]
 801baa0:	da06      	bge.n	801bab0 <__kernel_sin+0x30>
 801baa2:	ee10 0a10 	vmov	r0, s0
 801baa6:	4629      	mov	r1, r5
 801baa8:	f7e5 f866 	bl	8000b78 <__aeabi_d2iz>
 801baac:	2800      	cmp	r0, #0
 801baae:	d051      	beq.n	801bb54 <__kernel_sin+0xd4>
 801bab0:	4622      	mov	r2, r4
 801bab2:	462b      	mov	r3, r5
 801bab4:	4620      	mov	r0, r4
 801bab6:	4629      	mov	r1, r5
 801bab8:	f7e4 fdae 	bl	8000618 <__aeabi_dmul>
 801babc:	4682      	mov	sl, r0
 801babe:	468b      	mov	fp, r1
 801bac0:	4602      	mov	r2, r0
 801bac2:	460b      	mov	r3, r1
 801bac4:	4620      	mov	r0, r4
 801bac6:	4629      	mov	r1, r5
 801bac8:	f7e4 fda6 	bl	8000618 <__aeabi_dmul>
 801bacc:	a341      	add	r3, pc, #260	; (adr r3, 801bbd4 <__kernel_sin+0x154>)
 801bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bad2:	4680      	mov	r8, r0
 801bad4:	4689      	mov	r9, r1
 801bad6:	4650      	mov	r0, sl
 801bad8:	4659      	mov	r1, fp
 801bada:	f7e4 fd9d 	bl	8000618 <__aeabi_dmul>
 801bade:	a33f      	add	r3, pc, #252	; (adr r3, 801bbdc <__kernel_sin+0x15c>)
 801bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bae4:	f7e4 fbe0 	bl	80002a8 <__aeabi_dsub>
 801bae8:	4652      	mov	r2, sl
 801baea:	465b      	mov	r3, fp
 801baec:	f7e4 fd94 	bl	8000618 <__aeabi_dmul>
 801baf0:	a33c      	add	r3, pc, #240	; (adr r3, 801bbe4 <__kernel_sin+0x164>)
 801baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baf6:	f7e4 fbd9 	bl	80002ac <__adddf3>
 801bafa:	4652      	mov	r2, sl
 801bafc:	465b      	mov	r3, fp
 801bafe:	f7e4 fd8b 	bl	8000618 <__aeabi_dmul>
 801bb02:	a33a      	add	r3, pc, #232	; (adr r3, 801bbec <__kernel_sin+0x16c>)
 801bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb08:	f7e4 fbce 	bl	80002a8 <__aeabi_dsub>
 801bb0c:	4652      	mov	r2, sl
 801bb0e:	465b      	mov	r3, fp
 801bb10:	f7e4 fd82 	bl	8000618 <__aeabi_dmul>
 801bb14:	a337      	add	r3, pc, #220	; (adr r3, 801bbf4 <__kernel_sin+0x174>)
 801bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb1a:	f7e4 fbc7 	bl	80002ac <__adddf3>
 801bb1e:	9b01      	ldr	r3, [sp, #4]
 801bb20:	4606      	mov	r6, r0
 801bb22:	460f      	mov	r7, r1
 801bb24:	b9eb      	cbnz	r3, 801bb62 <__kernel_sin+0xe2>
 801bb26:	4602      	mov	r2, r0
 801bb28:	460b      	mov	r3, r1
 801bb2a:	4650      	mov	r0, sl
 801bb2c:	4659      	mov	r1, fp
 801bb2e:	f7e4 fd73 	bl	8000618 <__aeabi_dmul>
 801bb32:	a325      	add	r3, pc, #148	; (adr r3, 801bbc8 <__kernel_sin+0x148>)
 801bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb38:	f7e4 fbb6 	bl	80002a8 <__aeabi_dsub>
 801bb3c:	4642      	mov	r2, r8
 801bb3e:	464b      	mov	r3, r9
 801bb40:	f7e4 fd6a 	bl	8000618 <__aeabi_dmul>
 801bb44:	4602      	mov	r2, r0
 801bb46:	460b      	mov	r3, r1
 801bb48:	4620      	mov	r0, r4
 801bb4a:	4629      	mov	r1, r5
 801bb4c:	f7e4 fbae 	bl	80002ac <__adddf3>
 801bb50:	4604      	mov	r4, r0
 801bb52:	460d      	mov	r5, r1
 801bb54:	ec45 4b10 	vmov	d0, r4, r5
 801bb58:	b003      	add	sp, #12
 801bb5a:	ecbd 8b04 	vpop	{d8-d9}
 801bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb62:	4b1b      	ldr	r3, [pc, #108]	; (801bbd0 <__kernel_sin+0x150>)
 801bb64:	ec51 0b18 	vmov	r0, r1, d8
 801bb68:	2200      	movs	r2, #0
 801bb6a:	f7e4 fd55 	bl	8000618 <__aeabi_dmul>
 801bb6e:	4632      	mov	r2, r6
 801bb70:	ec41 0b19 	vmov	d9, r0, r1
 801bb74:	463b      	mov	r3, r7
 801bb76:	4640      	mov	r0, r8
 801bb78:	4649      	mov	r1, r9
 801bb7a:	f7e4 fd4d 	bl	8000618 <__aeabi_dmul>
 801bb7e:	4602      	mov	r2, r0
 801bb80:	460b      	mov	r3, r1
 801bb82:	ec51 0b19 	vmov	r0, r1, d9
 801bb86:	f7e4 fb8f 	bl	80002a8 <__aeabi_dsub>
 801bb8a:	4652      	mov	r2, sl
 801bb8c:	465b      	mov	r3, fp
 801bb8e:	f7e4 fd43 	bl	8000618 <__aeabi_dmul>
 801bb92:	ec53 2b18 	vmov	r2, r3, d8
 801bb96:	f7e4 fb87 	bl	80002a8 <__aeabi_dsub>
 801bb9a:	a30b      	add	r3, pc, #44	; (adr r3, 801bbc8 <__kernel_sin+0x148>)
 801bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bba0:	4606      	mov	r6, r0
 801bba2:	460f      	mov	r7, r1
 801bba4:	4640      	mov	r0, r8
 801bba6:	4649      	mov	r1, r9
 801bba8:	f7e4 fd36 	bl	8000618 <__aeabi_dmul>
 801bbac:	4602      	mov	r2, r0
 801bbae:	460b      	mov	r3, r1
 801bbb0:	4630      	mov	r0, r6
 801bbb2:	4639      	mov	r1, r7
 801bbb4:	f7e4 fb7a 	bl	80002ac <__adddf3>
 801bbb8:	4602      	mov	r2, r0
 801bbba:	460b      	mov	r3, r1
 801bbbc:	4620      	mov	r0, r4
 801bbbe:	4629      	mov	r1, r5
 801bbc0:	f7e4 fb72 	bl	80002a8 <__aeabi_dsub>
 801bbc4:	e7c4      	b.n	801bb50 <__kernel_sin+0xd0>
 801bbc6:	bf00      	nop
 801bbc8:	55555549 	.word	0x55555549
 801bbcc:	3fc55555 	.word	0x3fc55555
 801bbd0:	3fe00000 	.word	0x3fe00000
 801bbd4:	5acfd57c 	.word	0x5acfd57c
 801bbd8:	3de5d93a 	.word	0x3de5d93a
 801bbdc:	8a2b9ceb 	.word	0x8a2b9ceb
 801bbe0:	3e5ae5e6 	.word	0x3e5ae5e6
 801bbe4:	57b1fe7d 	.word	0x57b1fe7d
 801bbe8:	3ec71de3 	.word	0x3ec71de3
 801bbec:	19c161d5 	.word	0x19c161d5
 801bbf0:	3f2a01a0 	.word	0x3f2a01a0
 801bbf4:	1110f8a6 	.word	0x1110f8a6
 801bbf8:	3f811111 	.word	0x3f811111
 801bbfc:	00000000 	.word	0x00000000

0801bc00 <__kernel_tan>:
 801bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc04:	ed2d 8b06 	vpush	{d8-d10}
 801bc08:	ec5b ab10 	vmov	sl, fp, d0
 801bc0c:	4be0      	ldr	r3, [pc, #896]	; (801bf90 <__kernel_tan+0x390>)
 801bc0e:	b083      	sub	sp, #12
 801bc10:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801bc14:	429f      	cmp	r7, r3
 801bc16:	ec59 8b11 	vmov	r8, r9, d1
 801bc1a:	4606      	mov	r6, r0
 801bc1c:	f8cd b000 	str.w	fp, [sp]
 801bc20:	dc61      	bgt.n	801bce6 <__kernel_tan+0xe6>
 801bc22:	ee10 0a10 	vmov	r0, s0
 801bc26:	4659      	mov	r1, fp
 801bc28:	f7e4 ffa6 	bl	8000b78 <__aeabi_d2iz>
 801bc2c:	4605      	mov	r5, r0
 801bc2e:	2800      	cmp	r0, #0
 801bc30:	f040 8083 	bne.w	801bd3a <__kernel_tan+0x13a>
 801bc34:	1c73      	adds	r3, r6, #1
 801bc36:	4652      	mov	r2, sl
 801bc38:	4313      	orrs	r3, r2
 801bc3a:	433b      	orrs	r3, r7
 801bc3c:	d112      	bne.n	801bc64 <__kernel_tan+0x64>
 801bc3e:	ec4b ab10 	vmov	d0, sl, fp
 801bc42:	f001 f91b 	bl	801ce7c <fabs>
 801bc46:	49d3      	ldr	r1, [pc, #844]	; (801bf94 <__kernel_tan+0x394>)
 801bc48:	ec53 2b10 	vmov	r2, r3, d0
 801bc4c:	2000      	movs	r0, #0
 801bc4e:	f7e4 fe0d 	bl	800086c <__aeabi_ddiv>
 801bc52:	4682      	mov	sl, r0
 801bc54:	468b      	mov	fp, r1
 801bc56:	ec4b ab10 	vmov	d0, sl, fp
 801bc5a:	b003      	add	sp, #12
 801bc5c:	ecbd 8b06 	vpop	{d8-d10}
 801bc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc64:	2e01      	cmp	r6, #1
 801bc66:	d0f6      	beq.n	801bc56 <__kernel_tan+0x56>
 801bc68:	4642      	mov	r2, r8
 801bc6a:	464b      	mov	r3, r9
 801bc6c:	4650      	mov	r0, sl
 801bc6e:	4659      	mov	r1, fp
 801bc70:	f7e4 fb1c 	bl	80002ac <__adddf3>
 801bc74:	4602      	mov	r2, r0
 801bc76:	460b      	mov	r3, r1
 801bc78:	460f      	mov	r7, r1
 801bc7a:	2000      	movs	r0, #0
 801bc7c:	49c6      	ldr	r1, [pc, #792]	; (801bf98 <__kernel_tan+0x398>)
 801bc7e:	f7e4 fdf5 	bl	800086c <__aeabi_ddiv>
 801bc82:	e9cd 0100 	strd	r0, r1, [sp]
 801bc86:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc8a:	462e      	mov	r6, r5
 801bc8c:	4652      	mov	r2, sl
 801bc8e:	462c      	mov	r4, r5
 801bc90:	4630      	mov	r0, r6
 801bc92:	461d      	mov	r5, r3
 801bc94:	4639      	mov	r1, r7
 801bc96:	465b      	mov	r3, fp
 801bc98:	f7e4 fb06 	bl	80002a8 <__aeabi_dsub>
 801bc9c:	4602      	mov	r2, r0
 801bc9e:	460b      	mov	r3, r1
 801bca0:	4640      	mov	r0, r8
 801bca2:	4649      	mov	r1, r9
 801bca4:	f7e4 fb00 	bl	80002a8 <__aeabi_dsub>
 801bca8:	4632      	mov	r2, r6
 801bcaa:	462b      	mov	r3, r5
 801bcac:	f7e4 fcb4 	bl	8000618 <__aeabi_dmul>
 801bcb0:	4632      	mov	r2, r6
 801bcb2:	4680      	mov	r8, r0
 801bcb4:	4689      	mov	r9, r1
 801bcb6:	462b      	mov	r3, r5
 801bcb8:	4630      	mov	r0, r6
 801bcba:	4639      	mov	r1, r7
 801bcbc:	f7e4 fcac 	bl	8000618 <__aeabi_dmul>
 801bcc0:	4bb4      	ldr	r3, [pc, #720]	; (801bf94 <__kernel_tan+0x394>)
 801bcc2:	2200      	movs	r2, #0
 801bcc4:	f7e4 faf2 	bl	80002ac <__adddf3>
 801bcc8:	4602      	mov	r2, r0
 801bcca:	460b      	mov	r3, r1
 801bccc:	4640      	mov	r0, r8
 801bcce:	4649      	mov	r1, r9
 801bcd0:	f7e4 faec 	bl	80002ac <__adddf3>
 801bcd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bcd8:	f7e4 fc9e 	bl	8000618 <__aeabi_dmul>
 801bcdc:	4622      	mov	r2, r4
 801bcde:	462b      	mov	r3, r5
 801bce0:	f7e4 fae4 	bl	80002ac <__adddf3>
 801bce4:	e7b5      	b.n	801bc52 <__kernel_tan+0x52>
 801bce6:	4bad      	ldr	r3, [pc, #692]	; (801bf9c <__kernel_tan+0x39c>)
 801bce8:	429f      	cmp	r7, r3
 801bcea:	dd26      	ble.n	801bd3a <__kernel_tan+0x13a>
 801bcec:	9b00      	ldr	r3, [sp, #0]
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	da09      	bge.n	801bd06 <__kernel_tan+0x106>
 801bcf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801bcf6:	469b      	mov	fp, r3
 801bcf8:	ee10 aa10 	vmov	sl, s0
 801bcfc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801bd00:	ee11 8a10 	vmov	r8, s2
 801bd04:	4699      	mov	r9, r3
 801bd06:	4652      	mov	r2, sl
 801bd08:	465b      	mov	r3, fp
 801bd0a:	a183      	add	r1, pc, #524	; (adr r1, 801bf18 <__kernel_tan+0x318>)
 801bd0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd10:	f7e4 faca 	bl	80002a8 <__aeabi_dsub>
 801bd14:	4642      	mov	r2, r8
 801bd16:	464b      	mov	r3, r9
 801bd18:	4604      	mov	r4, r0
 801bd1a:	460d      	mov	r5, r1
 801bd1c:	a180      	add	r1, pc, #512	; (adr r1, 801bf20 <__kernel_tan+0x320>)
 801bd1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd22:	f7e4 fac1 	bl	80002a8 <__aeabi_dsub>
 801bd26:	4622      	mov	r2, r4
 801bd28:	462b      	mov	r3, r5
 801bd2a:	f7e4 fabf 	bl	80002ac <__adddf3>
 801bd2e:	f04f 0800 	mov.w	r8, #0
 801bd32:	4682      	mov	sl, r0
 801bd34:	468b      	mov	fp, r1
 801bd36:	f04f 0900 	mov.w	r9, #0
 801bd3a:	4652      	mov	r2, sl
 801bd3c:	465b      	mov	r3, fp
 801bd3e:	4650      	mov	r0, sl
 801bd40:	4659      	mov	r1, fp
 801bd42:	f7e4 fc69 	bl	8000618 <__aeabi_dmul>
 801bd46:	4602      	mov	r2, r0
 801bd48:	460b      	mov	r3, r1
 801bd4a:	ec43 2b18 	vmov	d8, r2, r3
 801bd4e:	f7e4 fc63 	bl	8000618 <__aeabi_dmul>
 801bd52:	ec53 2b18 	vmov	r2, r3, d8
 801bd56:	4604      	mov	r4, r0
 801bd58:	460d      	mov	r5, r1
 801bd5a:	4650      	mov	r0, sl
 801bd5c:	4659      	mov	r1, fp
 801bd5e:	f7e4 fc5b 	bl	8000618 <__aeabi_dmul>
 801bd62:	a371      	add	r3, pc, #452	; (adr r3, 801bf28 <__kernel_tan+0x328>)
 801bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd68:	ec41 0b19 	vmov	d9, r0, r1
 801bd6c:	4620      	mov	r0, r4
 801bd6e:	4629      	mov	r1, r5
 801bd70:	f7e4 fc52 	bl	8000618 <__aeabi_dmul>
 801bd74:	a36e      	add	r3, pc, #440	; (adr r3, 801bf30 <__kernel_tan+0x330>)
 801bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd7a:	f7e4 fa97 	bl	80002ac <__adddf3>
 801bd7e:	4622      	mov	r2, r4
 801bd80:	462b      	mov	r3, r5
 801bd82:	f7e4 fc49 	bl	8000618 <__aeabi_dmul>
 801bd86:	a36c      	add	r3, pc, #432	; (adr r3, 801bf38 <__kernel_tan+0x338>)
 801bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd8c:	f7e4 fa8e 	bl	80002ac <__adddf3>
 801bd90:	4622      	mov	r2, r4
 801bd92:	462b      	mov	r3, r5
 801bd94:	f7e4 fc40 	bl	8000618 <__aeabi_dmul>
 801bd98:	a369      	add	r3, pc, #420	; (adr r3, 801bf40 <__kernel_tan+0x340>)
 801bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd9e:	f7e4 fa85 	bl	80002ac <__adddf3>
 801bda2:	4622      	mov	r2, r4
 801bda4:	462b      	mov	r3, r5
 801bda6:	f7e4 fc37 	bl	8000618 <__aeabi_dmul>
 801bdaa:	a367      	add	r3, pc, #412	; (adr r3, 801bf48 <__kernel_tan+0x348>)
 801bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdb0:	f7e4 fa7c 	bl	80002ac <__adddf3>
 801bdb4:	4622      	mov	r2, r4
 801bdb6:	462b      	mov	r3, r5
 801bdb8:	f7e4 fc2e 	bl	8000618 <__aeabi_dmul>
 801bdbc:	a364      	add	r3, pc, #400	; (adr r3, 801bf50 <__kernel_tan+0x350>)
 801bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdc2:	f7e4 fa73 	bl	80002ac <__adddf3>
 801bdc6:	ec53 2b18 	vmov	r2, r3, d8
 801bdca:	f7e4 fc25 	bl	8000618 <__aeabi_dmul>
 801bdce:	a362      	add	r3, pc, #392	; (adr r3, 801bf58 <__kernel_tan+0x358>)
 801bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdd4:	ec41 0b1a 	vmov	d10, r0, r1
 801bdd8:	4620      	mov	r0, r4
 801bdda:	4629      	mov	r1, r5
 801bddc:	f7e4 fc1c 	bl	8000618 <__aeabi_dmul>
 801bde0:	a35f      	add	r3, pc, #380	; (adr r3, 801bf60 <__kernel_tan+0x360>)
 801bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bde6:	f7e4 fa61 	bl	80002ac <__adddf3>
 801bdea:	4622      	mov	r2, r4
 801bdec:	462b      	mov	r3, r5
 801bdee:	f7e4 fc13 	bl	8000618 <__aeabi_dmul>
 801bdf2:	a35d      	add	r3, pc, #372	; (adr r3, 801bf68 <__kernel_tan+0x368>)
 801bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdf8:	f7e4 fa58 	bl	80002ac <__adddf3>
 801bdfc:	4622      	mov	r2, r4
 801bdfe:	462b      	mov	r3, r5
 801be00:	f7e4 fc0a 	bl	8000618 <__aeabi_dmul>
 801be04:	a35a      	add	r3, pc, #360	; (adr r3, 801bf70 <__kernel_tan+0x370>)
 801be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be0a:	f7e4 fa4f 	bl	80002ac <__adddf3>
 801be0e:	4622      	mov	r2, r4
 801be10:	462b      	mov	r3, r5
 801be12:	f7e4 fc01 	bl	8000618 <__aeabi_dmul>
 801be16:	a358      	add	r3, pc, #352	; (adr r3, 801bf78 <__kernel_tan+0x378>)
 801be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be1c:	f7e4 fa46 	bl	80002ac <__adddf3>
 801be20:	4622      	mov	r2, r4
 801be22:	462b      	mov	r3, r5
 801be24:	f7e4 fbf8 	bl	8000618 <__aeabi_dmul>
 801be28:	a355      	add	r3, pc, #340	; (adr r3, 801bf80 <__kernel_tan+0x380>)
 801be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be2e:	f7e4 fa3d 	bl	80002ac <__adddf3>
 801be32:	4602      	mov	r2, r0
 801be34:	460b      	mov	r3, r1
 801be36:	ec51 0b1a 	vmov	r0, r1, d10
 801be3a:	f7e4 fa37 	bl	80002ac <__adddf3>
 801be3e:	ec53 2b19 	vmov	r2, r3, d9
 801be42:	f7e4 fbe9 	bl	8000618 <__aeabi_dmul>
 801be46:	4642      	mov	r2, r8
 801be48:	464b      	mov	r3, r9
 801be4a:	f7e4 fa2f 	bl	80002ac <__adddf3>
 801be4e:	ec53 2b18 	vmov	r2, r3, d8
 801be52:	f7e4 fbe1 	bl	8000618 <__aeabi_dmul>
 801be56:	4642      	mov	r2, r8
 801be58:	464b      	mov	r3, r9
 801be5a:	f7e4 fa27 	bl	80002ac <__adddf3>
 801be5e:	a34a      	add	r3, pc, #296	; (adr r3, 801bf88 <__kernel_tan+0x388>)
 801be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be64:	4604      	mov	r4, r0
 801be66:	460d      	mov	r5, r1
 801be68:	ec51 0b19 	vmov	r0, r1, d9
 801be6c:	f7e4 fbd4 	bl	8000618 <__aeabi_dmul>
 801be70:	4622      	mov	r2, r4
 801be72:	462b      	mov	r3, r5
 801be74:	f7e4 fa1a 	bl	80002ac <__adddf3>
 801be78:	460b      	mov	r3, r1
 801be7a:	ec41 0b18 	vmov	d8, r0, r1
 801be7e:	4602      	mov	r2, r0
 801be80:	4659      	mov	r1, fp
 801be82:	4650      	mov	r0, sl
 801be84:	f7e4 fa12 	bl	80002ac <__adddf3>
 801be88:	4b44      	ldr	r3, [pc, #272]	; (801bf9c <__kernel_tan+0x39c>)
 801be8a:	429f      	cmp	r7, r3
 801be8c:	4604      	mov	r4, r0
 801be8e:	460d      	mov	r5, r1
 801be90:	f340 8086 	ble.w	801bfa0 <__kernel_tan+0x3a0>
 801be94:	4630      	mov	r0, r6
 801be96:	f7e4 fb55 	bl	8000544 <__aeabi_i2d>
 801be9a:	4622      	mov	r2, r4
 801be9c:	4680      	mov	r8, r0
 801be9e:	4689      	mov	r9, r1
 801bea0:	462b      	mov	r3, r5
 801bea2:	4620      	mov	r0, r4
 801bea4:	4629      	mov	r1, r5
 801bea6:	f7e4 fbb7 	bl	8000618 <__aeabi_dmul>
 801beaa:	4642      	mov	r2, r8
 801beac:	4606      	mov	r6, r0
 801beae:	460f      	mov	r7, r1
 801beb0:	464b      	mov	r3, r9
 801beb2:	4620      	mov	r0, r4
 801beb4:	4629      	mov	r1, r5
 801beb6:	f7e4 f9f9 	bl	80002ac <__adddf3>
 801beba:	4602      	mov	r2, r0
 801bebc:	460b      	mov	r3, r1
 801bebe:	4630      	mov	r0, r6
 801bec0:	4639      	mov	r1, r7
 801bec2:	f7e4 fcd3 	bl	800086c <__aeabi_ddiv>
 801bec6:	ec53 2b18 	vmov	r2, r3, d8
 801beca:	f7e4 f9ed 	bl	80002a8 <__aeabi_dsub>
 801bece:	4602      	mov	r2, r0
 801bed0:	460b      	mov	r3, r1
 801bed2:	4650      	mov	r0, sl
 801bed4:	4659      	mov	r1, fp
 801bed6:	f7e4 f9e7 	bl	80002a8 <__aeabi_dsub>
 801beda:	4602      	mov	r2, r0
 801bedc:	460b      	mov	r3, r1
 801bede:	f7e4 f9e5 	bl	80002ac <__adddf3>
 801bee2:	4602      	mov	r2, r0
 801bee4:	460b      	mov	r3, r1
 801bee6:	4640      	mov	r0, r8
 801bee8:	4649      	mov	r1, r9
 801beea:	f7e4 f9dd 	bl	80002a8 <__aeabi_dsub>
 801beee:	9b00      	ldr	r3, [sp, #0]
 801bef0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801bef4:	f00a 0a02 	and.w	sl, sl, #2
 801bef8:	4604      	mov	r4, r0
 801befa:	f1ca 0001 	rsb	r0, sl, #1
 801befe:	460d      	mov	r5, r1
 801bf00:	f7e4 fb20 	bl	8000544 <__aeabi_i2d>
 801bf04:	4602      	mov	r2, r0
 801bf06:	460b      	mov	r3, r1
 801bf08:	4620      	mov	r0, r4
 801bf0a:	4629      	mov	r1, r5
 801bf0c:	f7e4 fb84 	bl	8000618 <__aeabi_dmul>
 801bf10:	e69f      	b.n	801bc52 <__kernel_tan+0x52>
 801bf12:	bf00      	nop
 801bf14:	f3af 8000 	nop.w
 801bf18:	54442d18 	.word	0x54442d18
 801bf1c:	3fe921fb 	.word	0x3fe921fb
 801bf20:	33145c07 	.word	0x33145c07
 801bf24:	3c81a626 	.word	0x3c81a626
 801bf28:	74bf7ad4 	.word	0x74bf7ad4
 801bf2c:	3efb2a70 	.word	0x3efb2a70
 801bf30:	32f0a7e9 	.word	0x32f0a7e9
 801bf34:	3f12b80f 	.word	0x3f12b80f
 801bf38:	1a8d1068 	.word	0x1a8d1068
 801bf3c:	3f3026f7 	.word	0x3f3026f7
 801bf40:	fee08315 	.word	0xfee08315
 801bf44:	3f57dbc8 	.word	0x3f57dbc8
 801bf48:	e96e8493 	.word	0xe96e8493
 801bf4c:	3f8226e3 	.word	0x3f8226e3
 801bf50:	1bb341fe 	.word	0x1bb341fe
 801bf54:	3faba1ba 	.word	0x3faba1ba
 801bf58:	db605373 	.word	0xdb605373
 801bf5c:	bef375cb 	.word	0xbef375cb
 801bf60:	a03792a6 	.word	0xa03792a6
 801bf64:	3f147e88 	.word	0x3f147e88
 801bf68:	f2f26501 	.word	0xf2f26501
 801bf6c:	3f4344d8 	.word	0x3f4344d8
 801bf70:	c9560328 	.word	0xc9560328
 801bf74:	3f6d6d22 	.word	0x3f6d6d22
 801bf78:	8406d637 	.word	0x8406d637
 801bf7c:	3f9664f4 	.word	0x3f9664f4
 801bf80:	1110fe7a 	.word	0x1110fe7a
 801bf84:	3fc11111 	.word	0x3fc11111
 801bf88:	55555563 	.word	0x55555563
 801bf8c:	3fd55555 	.word	0x3fd55555
 801bf90:	3e2fffff 	.word	0x3e2fffff
 801bf94:	3ff00000 	.word	0x3ff00000
 801bf98:	bff00000 	.word	0xbff00000
 801bf9c:	3fe59427 	.word	0x3fe59427
 801bfa0:	2e01      	cmp	r6, #1
 801bfa2:	d02f      	beq.n	801c004 <__kernel_tan+0x404>
 801bfa4:	460f      	mov	r7, r1
 801bfa6:	4602      	mov	r2, r0
 801bfa8:	460b      	mov	r3, r1
 801bfaa:	4689      	mov	r9, r1
 801bfac:	2000      	movs	r0, #0
 801bfae:	4917      	ldr	r1, [pc, #92]	; (801c00c <__kernel_tan+0x40c>)
 801bfb0:	f7e4 fc5c 	bl	800086c <__aeabi_ddiv>
 801bfb4:	2600      	movs	r6, #0
 801bfb6:	e9cd 0100 	strd	r0, r1, [sp]
 801bfba:	4652      	mov	r2, sl
 801bfbc:	465b      	mov	r3, fp
 801bfbe:	4630      	mov	r0, r6
 801bfc0:	4639      	mov	r1, r7
 801bfc2:	f7e4 f971 	bl	80002a8 <__aeabi_dsub>
 801bfc6:	e9dd 4500 	ldrd	r4, r5, [sp]
 801bfca:	4602      	mov	r2, r0
 801bfcc:	460b      	mov	r3, r1
 801bfce:	ec51 0b18 	vmov	r0, r1, d8
 801bfd2:	f7e4 f969 	bl	80002a8 <__aeabi_dsub>
 801bfd6:	4632      	mov	r2, r6
 801bfd8:	462b      	mov	r3, r5
 801bfda:	f7e4 fb1d 	bl	8000618 <__aeabi_dmul>
 801bfde:	46b0      	mov	r8, r6
 801bfe0:	460f      	mov	r7, r1
 801bfe2:	4642      	mov	r2, r8
 801bfe4:	462b      	mov	r3, r5
 801bfe6:	4634      	mov	r4, r6
 801bfe8:	4649      	mov	r1, r9
 801bfea:	4606      	mov	r6, r0
 801bfec:	4640      	mov	r0, r8
 801bfee:	f7e4 fb13 	bl	8000618 <__aeabi_dmul>
 801bff2:	4b07      	ldr	r3, [pc, #28]	; (801c010 <__kernel_tan+0x410>)
 801bff4:	2200      	movs	r2, #0
 801bff6:	f7e4 f959 	bl	80002ac <__adddf3>
 801bffa:	4602      	mov	r2, r0
 801bffc:	460b      	mov	r3, r1
 801bffe:	4630      	mov	r0, r6
 801c000:	4639      	mov	r1, r7
 801c002:	e665      	b.n	801bcd0 <__kernel_tan+0xd0>
 801c004:	4682      	mov	sl, r0
 801c006:	468b      	mov	fp, r1
 801c008:	e625      	b.n	801bc56 <__kernel_tan+0x56>
 801c00a:	bf00      	nop
 801c00c:	bff00000 	.word	0xbff00000
 801c010:	3ff00000 	.word	0x3ff00000
 801c014:	00000000 	.word	0x00000000

0801c018 <__ieee754_pow>:
 801c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c01c:	ed2d 8b06 	vpush	{d8-d10}
 801c020:	b089      	sub	sp, #36	; 0x24
 801c022:	ed8d 1b00 	vstr	d1, [sp]
 801c026:	e9dd 2900 	ldrd	r2, r9, [sp]
 801c02a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801c02e:	ea58 0102 	orrs.w	r1, r8, r2
 801c032:	ec57 6b10 	vmov	r6, r7, d0
 801c036:	d115      	bne.n	801c064 <__ieee754_pow+0x4c>
 801c038:	19b3      	adds	r3, r6, r6
 801c03a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801c03e:	4152      	adcs	r2, r2
 801c040:	4299      	cmp	r1, r3
 801c042:	4b89      	ldr	r3, [pc, #548]	; (801c268 <__ieee754_pow+0x250>)
 801c044:	4193      	sbcs	r3, r2
 801c046:	f080 84d1 	bcs.w	801c9ec <__ieee754_pow+0x9d4>
 801c04a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c04e:	4630      	mov	r0, r6
 801c050:	4639      	mov	r1, r7
 801c052:	f7e4 f92b 	bl	80002ac <__adddf3>
 801c056:	ec41 0b10 	vmov	d0, r0, r1
 801c05a:	b009      	add	sp, #36	; 0x24
 801c05c:	ecbd 8b06 	vpop	{d8-d10}
 801c060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c064:	4b81      	ldr	r3, [pc, #516]	; (801c26c <__ieee754_pow+0x254>)
 801c066:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801c06a:	429c      	cmp	r4, r3
 801c06c:	ee10 aa10 	vmov	sl, s0
 801c070:	463d      	mov	r5, r7
 801c072:	dc06      	bgt.n	801c082 <__ieee754_pow+0x6a>
 801c074:	d101      	bne.n	801c07a <__ieee754_pow+0x62>
 801c076:	2e00      	cmp	r6, #0
 801c078:	d1e7      	bne.n	801c04a <__ieee754_pow+0x32>
 801c07a:	4598      	cmp	r8, r3
 801c07c:	dc01      	bgt.n	801c082 <__ieee754_pow+0x6a>
 801c07e:	d10f      	bne.n	801c0a0 <__ieee754_pow+0x88>
 801c080:	b172      	cbz	r2, 801c0a0 <__ieee754_pow+0x88>
 801c082:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801c086:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801c08a:	ea55 050a 	orrs.w	r5, r5, sl
 801c08e:	d1dc      	bne.n	801c04a <__ieee754_pow+0x32>
 801c090:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c094:	18db      	adds	r3, r3, r3
 801c096:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801c09a:	4152      	adcs	r2, r2
 801c09c:	429d      	cmp	r5, r3
 801c09e:	e7d0      	b.n	801c042 <__ieee754_pow+0x2a>
 801c0a0:	2d00      	cmp	r5, #0
 801c0a2:	da3b      	bge.n	801c11c <__ieee754_pow+0x104>
 801c0a4:	4b72      	ldr	r3, [pc, #456]	; (801c270 <__ieee754_pow+0x258>)
 801c0a6:	4598      	cmp	r8, r3
 801c0a8:	dc51      	bgt.n	801c14e <__ieee754_pow+0x136>
 801c0aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801c0ae:	4598      	cmp	r8, r3
 801c0b0:	f340 84ab 	ble.w	801ca0a <__ieee754_pow+0x9f2>
 801c0b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c0b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c0bc:	2b14      	cmp	r3, #20
 801c0be:	dd0f      	ble.n	801c0e0 <__ieee754_pow+0xc8>
 801c0c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801c0c4:	fa22 f103 	lsr.w	r1, r2, r3
 801c0c8:	fa01 f303 	lsl.w	r3, r1, r3
 801c0cc:	4293      	cmp	r3, r2
 801c0ce:	f040 849c 	bne.w	801ca0a <__ieee754_pow+0x9f2>
 801c0d2:	f001 0101 	and.w	r1, r1, #1
 801c0d6:	f1c1 0302 	rsb	r3, r1, #2
 801c0da:	9304      	str	r3, [sp, #16]
 801c0dc:	b182      	cbz	r2, 801c100 <__ieee754_pow+0xe8>
 801c0de:	e05f      	b.n	801c1a0 <__ieee754_pow+0x188>
 801c0e0:	2a00      	cmp	r2, #0
 801c0e2:	d15b      	bne.n	801c19c <__ieee754_pow+0x184>
 801c0e4:	f1c3 0314 	rsb	r3, r3, #20
 801c0e8:	fa48 f103 	asr.w	r1, r8, r3
 801c0ec:	fa01 f303 	lsl.w	r3, r1, r3
 801c0f0:	4543      	cmp	r3, r8
 801c0f2:	f040 8487 	bne.w	801ca04 <__ieee754_pow+0x9ec>
 801c0f6:	f001 0101 	and.w	r1, r1, #1
 801c0fa:	f1c1 0302 	rsb	r3, r1, #2
 801c0fe:	9304      	str	r3, [sp, #16]
 801c100:	4b5c      	ldr	r3, [pc, #368]	; (801c274 <__ieee754_pow+0x25c>)
 801c102:	4598      	cmp	r8, r3
 801c104:	d132      	bne.n	801c16c <__ieee754_pow+0x154>
 801c106:	f1b9 0f00 	cmp.w	r9, #0
 801c10a:	f280 8477 	bge.w	801c9fc <__ieee754_pow+0x9e4>
 801c10e:	4959      	ldr	r1, [pc, #356]	; (801c274 <__ieee754_pow+0x25c>)
 801c110:	4632      	mov	r2, r6
 801c112:	463b      	mov	r3, r7
 801c114:	2000      	movs	r0, #0
 801c116:	f7e4 fba9 	bl	800086c <__aeabi_ddiv>
 801c11a:	e79c      	b.n	801c056 <__ieee754_pow+0x3e>
 801c11c:	2300      	movs	r3, #0
 801c11e:	9304      	str	r3, [sp, #16]
 801c120:	2a00      	cmp	r2, #0
 801c122:	d13d      	bne.n	801c1a0 <__ieee754_pow+0x188>
 801c124:	4b51      	ldr	r3, [pc, #324]	; (801c26c <__ieee754_pow+0x254>)
 801c126:	4598      	cmp	r8, r3
 801c128:	d1ea      	bne.n	801c100 <__ieee754_pow+0xe8>
 801c12a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801c12e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c132:	ea53 030a 	orrs.w	r3, r3, sl
 801c136:	f000 8459 	beq.w	801c9ec <__ieee754_pow+0x9d4>
 801c13a:	4b4f      	ldr	r3, [pc, #316]	; (801c278 <__ieee754_pow+0x260>)
 801c13c:	429c      	cmp	r4, r3
 801c13e:	dd08      	ble.n	801c152 <__ieee754_pow+0x13a>
 801c140:	f1b9 0f00 	cmp.w	r9, #0
 801c144:	f2c0 8456 	blt.w	801c9f4 <__ieee754_pow+0x9dc>
 801c148:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c14c:	e783      	b.n	801c056 <__ieee754_pow+0x3e>
 801c14e:	2302      	movs	r3, #2
 801c150:	e7e5      	b.n	801c11e <__ieee754_pow+0x106>
 801c152:	f1b9 0f00 	cmp.w	r9, #0
 801c156:	f04f 0000 	mov.w	r0, #0
 801c15a:	f04f 0100 	mov.w	r1, #0
 801c15e:	f6bf af7a 	bge.w	801c056 <__ieee754_pow+0x3e>
 801c162:	e9dd 0300 	ldrd	r0, r3, [sp]
 801c166:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c16a:	e774      	b.n	801c056 <__ieee754_pow+0x3e>
 801c16c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801c170:	d106      	bne.n	801c180 <__ieee754_pow+0x168>
 801c172:	4632      	mov	r2, r6
 801c174:	463b      	mov	r3, r7
 801c176:	4630      	mov	r0, r6
 801c178:	4639      	mov	r1, r7
 801c17a:	f7e4 fa4d 	bl	8000618 <__aeabi_dmul>
 801c17e:	e76a      	b.n	801c056 <__ieee754_pow+0x3e>
 801c180:	4b3e      	ldr	r3, [pc, #248]	; (801c27c <__ieee754_pow+0x264>)
 801c182:	4599      	cmp	r9, r3
 801c184:	d10c      	bne.n	801c1a0 <__ieee754_pow+0x188>
 801c186:	2d00      	cmp	r5, #0
 801c188:	db0a      	blt.n	801c1a0 <__ieee754_pow+0x188>
 801c18a:	ec47 6b10 	vmov	d0, r6, r7
 801c18e:	b009      	add	sp, #36	; 0x24
 801c190:	ecbd 8b06 	vpop	{d8-d10}
 801c194:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c198:	f7ff b9e0 	b.w	801b55c <__ieee754_sqrt>
 801c19c:	2300      	movs	r3, #0
 801c19e:	9304      	str	r3, [sp, #16]
 801c1a0:	ec47 6b10 	vmov	d0, r6, r7
 801c1a4:	f000 fe6a 	bl	801ce7c <fabs>
 801c1a8:	ec51 0b10 	vmov	r0, r1, d0
 801c1ac:	f1ba 0f00 	cmp.w	sl, #0
 801c1b0:	d129      	bne.n	801c206 <__ieee754_pow+0x1ee>
 801c1b2:	b124      	cbz	r4, 801c1be <__ieee754_pow+0x1a6>
 801c1b4:	4b2f      	ldr	r3, [pc, #188]	; (801c274 <__ieee754_pow+0x25c>)
 801c1b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801c1ba:	429a      	cmp	r2, r3
 801c1bc:	d123      	bne.n	801c206 <__ieee754_pow+0x1ee>
 801c1be:	f1b9 0f00 	cmp.w	r9, #0
 801c1c2:	da05      	bge.n	801c1d0 <__ieee754_pow+0x1b8>
 801c1c4:	4602      	mov	r2, r0
 801c1c6:	460b      	mov	r3, r1
 801c1c8:	2000      	movs	r0, #0
 801c1ca:	492a      	ldr	r1, [pc, #168]	; (801c274 <__ieee754_pow+0x25c>)
 801c1cc:	f7e4 fb4e 	bl	800086c <__aeabi_ddiv>
 801c1d0:	2d00      	cmp	r5, #0
 801c1d2:	f6bf af40 	bge.w	801c056 <__ieee754_pow+0x3e>
 801c1d6:	9b04      	ldr	r3, [sp, #16]
 801c1d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c1dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c1e0:	431c      	orrs	r4, r3
 801c1e2:	d108      	bne.n	801c1f6 <__ieee754_pow+0x1de>
 801c1e4:	4602      	mov	r2, r0
 801c1e6:	460b      	mov	r3, r1
 801c1e8:	4610      	mov	r0, r2
 801c1ea:	4619      	mov	r1, r3
 801c1ec:	f7e4 f85c 	bl	80002a8 <__aeabi_dsub>
 801c1f0:	4602      	mov	r2, r0
 801c1f2:	460b      	mov	r3, r1
 801c1f4:	e78f      	b.n	801c116 <__ieee754_pow+0xfe>
 801c1f6:	9b04      	ldr	r3, [sp, #16]
 801c1f8:	2b01      	cmp	r3, #1
 801c1fa:	f47f af2c 	bne.w	801c056 <__ieee754_pow+0x3e>
 801c1fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c202:	4619      	mov	r1, r3
 801c204:	e727      	b.n	801c056 <__ieee754_pow+0x3e>
 801c206:	0feb      	lsrs	r3, r5, #31
 801c208:	3b01      	subs	r3, #1
 801c20a:	9306      	str	r3, [sp, #24]
 801c20c:	9a06      	ldr	r2, [sp, #24]
 801c20e:	9b04      	ldr	r3, [sp, #16]
 801c210:	4313      	orrs	r3, r2
 801c212:	d102      	bne.n	801c21a <__ieee754_pow+0x202>
 801c214:	4632      	mov	r2, r6
 801c216:	463b      	mov	r3, r7
 801c218:	e7e6      	b.n	801c1e8 <__ieee754_pow+0x1d0>
 801c21a:	4b19      	ldr	r3, [pc, #100]	; (801c280 <__ieee754_pow+0x268>)
 801c21c:	4598      	cmp	r8, r3
 801c21e:	f340 80fb 	ble.w	801c418 <__ieee754_pow+0x400>
 801c222:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801c226:	4598      	cmp	r8, r3
 801c228:	4b13      	ldr	r3, [pc, #76]	; (801c278 <__ieee754_pow+0x260>)
 801c22a:	dd0c      	ble.n	801c246 <__ieee754_pow+0x22e>
 801c22c:	429c      	cmp	r4, r3
 801c22e:	dc0f      	bgt.n	801c250 <__ieee754_pow+0x238>
 801c230:	f1b9 0f00 	cmp.w	r9, #0
 801c234:	da0f      	bge.n	801c256 <__ieee754_pow+0x23e>
 801c236:	2000      	movs	r0, #0
 801c238:	b009      	add	sp, #36	; 0x24
 801c23a:	ecbd 8b06 	vpop	{d8-d10}
 801c23e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c242:	f001 b8e2 	b.w	801d40a <__math_oflow>
 801c246:	429c      	cmp	r4, r3
 801c248:	dbf2      	blt.n	801c230 <__ieee754_pow+0x218>
 801c24a:	4b0a      	ldr	r3, [pc, #40]	; (801c274 <__ieee754_pow+0x25c>)
 801c24c:	429c      	cmp	r4, r3
 801c24e:	dd19      	ble.n	801c284 <__ieee754_pow+0x26c>
 801c250:	f1b9 0f00 	cmp.w	r9, #0
 801c254:	dcef      	bgt.n	801c236 <__ieee754_pow+0x21e>
 801c256:	2000      	movs	r0, #0
 801c258:	b009      	add	sp, #36	; 0x24
 801c25a:	ecbd 8b06 	vpop	{d8-d10}
 801c25e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c262:	f001 b8c9 	b.w	801d3f8 <__math_uflow>
 801c266:	bf00      	nop
 801c268:	fff00000 	.word	0xfff00000
 801c26c:	7ff00000 	.word	0x7ff00000
 801c270:	433fffff 	.word	0x433fffff
 801c274:	3ff00000 	.word	0x3ff00000
 801c278:	3fefffff 	.word	0x3fefffff
 801c27c:	3fe00000 	.word	0x3fe00000
 801c280:	41e00000 	.word	0x41e00000
 801c284:	4b60      	ldr	r3, [pc, #384]	; (801c408 <__ieee754_pow+0x3f0>)
 801c286:	2200      	movs	r2, #0
 801c288:	f7e4 f80e 	bl	80002a8 <__aeabi_dsub>
 801c28c:	a354      	add	r3, pc, #336	; (adr r3, 801c3e0 <__ieee754_pow+0x3c8>)
 801c28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c292:	4604      	mov	r4, r0
 801c294:	460d      	mov	r5, r1
 801c296:	f7e4 f9bf 	bl	8000618 <__aeabi_dmul>
 801c29a:	a353      	add	r3, pc, #332	; (adr r3, 801c3e8 <__ieee754_pow+0x3d0>)
 801c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2a0:	4606      	mov	r6, r0
 801c2a2:	460f      	mov	r7, r1
 801c2a4:	4620      	mov	r0, r4
 801c2a6:	4629      	mov	r1, r5
 801c2a8:	f7e4 f9b6 	bl	8000618 <__aeabi_dmul>
 801c2ac:	4b57      	ldr	r3, [pc, #348]	; (801c40c <__ieee754_pow+0x3f4>)
 801c2ae:	4682      	mov	sl, r0
 801c2b0:	468b      	mov	fp, r1
 801c2b2:	2200      	movs	r2, #0
 801c2b4:	4620      	mov	r0, r4
 801c2b6:	4629      	mov	r1, r5
 801c2b8:	f7e4 f9ae 	bl	8000618 <__aeabi_dmul>
 801c2bc:	4602      	mov	r2, r0
 801c2be:	460b      	mov	r3, r1
 801c2c0:	a14b      	add	r1, pc, #300	; (adr r1, 801c3f0 <__ieee754_pow+0x3d8>)
 801c2c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c2c6:	f7e3 ffef 	bl	80002a8 <__aeabi_dsub>
 801c2ca:	4622      	mov	r2, r4
 801c2cc:	462b      	mov	r3, r5
 801c2ce:	f7e4 f9a3 	bl	8000618 <__aeabi_dmul>
 801c2d2:	4602      	mov	r2, r0
 801c2d4:	460b      	mov	r3, r1
 801c2d6:	2000      	movs	r0, #0
 801c2d8:	494d      	ldr	r1, [pc, #308]	; (801c410 <__ieee754_pow+0x3f8>)
 801c2da:	f7e3 ffe5 	bl	80002a8 <__aeabi_dsub>
 801c2de:	4622      	mov	r2, r4
 801c2e0:	4680      	mov	r8, r0
 801c2e2:	4689      	mov	r9, r1
 801c2e4:	462b      	mov	r3, r5
 801c2e6:	4620      	mov	r0, r4
 801c2e8:	4629      	mov	r1, r5
 801c2ea:	f7e4 f995 	bl	8000618 <__aeabi_dmul>
 801c2ee:	4602      	mov	r2, r0
 801c2f0:	460b      	mov	r3, r1
 801c2f2:	4640      	mov	r0, r8
 801c2f4:	4649      	mov	r1, r9
 801c2f6:	f7e4 f98f 	bl	8000618 <__aeabi_dmul>
 801c2fa:	a33f      	add	r3, pc, #252	; (adr r3, 801c3f8 <__ieee754_pow+0x3e0>)
 801c2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c300:	f7e4 f98a 	bl	8000618 <__aeabi_dmul>
 801c304:	4602      	mov	r2, r0
 801c306:	460b      	mov	r3, r1
 801c308:	4650      	mov	r0, sl
 801c30a:	4659      	mov	r1, fp
 801c30c:	f7e3 ffcc 	bl	80002a8 <__aeabi_dsub>
 801c310:	4602      	mov	r2, r0
 801c312:	460b      	mov	r3, r1
 801c314:	4680      	mov	r8, r0
 801c316:	4689      	mov	r9, r1
 801c318:	4630      	mov	r0, r6
 801c31a:	4639      	mov	r1, r7
 801c31c:	f7e3 ffc6 	bl	80002ac <__adddf3>
 801c320:	2000      	movs	r0, #0
 801c322:	4632      	mov	r2, r6
 801c324:	463b      	mov	r3, r7
 801c326:	4604      	mov	r4, r0
 801c328:	460d      	mov	r5, r1
 801c32a:	f7e3 ffbd 	bl	80002a8 <__aeabi_dsub>
 801c32e:	4602      	mov	r2, r0
 801c330:	460b      	mov	r3, r1
 801c332:	4640      	mov	r0, r8
 801c334:	4649      	mov	r1, r9
 801c336:	f7e3 ffb7 	bl	80002a8 <__aeabi_dsub>
 801c33a:	9b04      	ldr	r3, [sp, #16]
 801c33c:	9a06      	ldr	r2, [sp, #24]
 801c33e:	3b01      	subs	r3, #1
 801c340:	4313      	orrs	r3, r2
 801c342:	4682      	mov	sl, r0
 801c344:	468b      	mov	fp, r1
 801c346:	f040 81e7 	bne.w	801c718 <__ieee754_pow+0x700>
 801c34a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801c400 <__ieee754_pow+0x3e8>
 801c34e:	eeb0 8a47 	vmov.f32	s16, s14
 801c352:	eef0 8a67 	vmov.f32	s17, s15
 801c356:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c35a:	2600      	movs	r6, #0
 801c35c:	4632      	mov	r2, r6
 801c35e:	463b      	mov	r3, r7
 801c360:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c364:	f7e3 ffa0 	bl	80002a8 <__aeabi_dsub>
 801c368:	4622      	mov	r2, r4
 801c36a:	462b      	mov	r3, r5
 801c36c:	f7e4 f954 	bl	8000618 <__aeabi_dmul>
 801c370:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c374:	4680      	mov	r8, r0
 801c376:	4689      	mov	r9, r1
 801c378:	4650      	mov	r0, sl
 801c37a:	4659      	mov	r1, fp
 801c37c:	f7e4 f94c 	bl	8000618 <__aeabi_dmul>
 801c380:	4602      	mov	r2, r0
 801c382:	460b      	mov	r3, r1
 801c384:	4640      	mov	r0, r8
 801c386:	4649      	mov	r1, r9
 801c388:	f7e3 ff90 	bl	80002ac <__adddf3>
 801c38c:	4632      	mov	r2, r6
 801c38e:	463b      	mov	r3, r7
 801c390:	4680      	mov	r8, r0
 801c392:	4689      	mov	r9, r1
 801c394:	4620      	mov	r0, r4
 801c396:	4629      	mov	r1, r5
 801c398:	f7e4 f93e 	bl	8000618 <__aeabi_dmul>
 801c39c:	460b      	mov	r3, r1
 801c39e:	4604      	mov	r4, r0
 801c3a0:	460d      	mov	r5, r1
 801c3a2:	4602      	mov	r2, r0
 801c3a4:	4649      	mov	r1, r9
 801c3a6:	4640      	mov	r0, r8
 801c3a8:	f7e3 ff80 	bl	80002ac <__adddf3>
 801c3ac:	4b19      	ldr	r3, [pc, #100]	; (801c414 <__ieee754_pow+0x3fc>)
 801c3ae:	4299      	cmp	r1, r3
 801c3b0:	ec45 4b19 	vmov	d9, r4, r5
 801c3b4:	4606      	mov	r6, r0
 801c3b6:	460f      	mov	r7, r1
 801c3b8:	468b      	mov	fp, r1
 801c3ba:	f340 82f0 	ble.w	801c99e <__ieee754_pow+0x986>
 801c3be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801c3c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801c3c6:	4303      	orrs	r3, r0
 801c3c8:	f000 81e4 	beq.w	801c794 <__ieee754_pow+0x77c>
 801c3cc:	ec51 0b18 	vmov	r0, r1, d8
 801c3d0:	2200      	movs	r2, #0
 801c3d2:	2300      	movs	r3, #0
 801c3d4:	f7e4 fb92 	bl	8000afc <__aeabi_dcmplt>
 801c3d8:	3800      	subs	r0, #0
 801c3da:	bf18      	it	ne
 801c3dc:	2001      	movne	r0, #1
 801c3de:	e72b      	b.n	801c238 <__ieee754_pow+0x220>
 801c3e0:	60000000 	.word	0x60000000
 801c3e4:	3ff71547 	.word	0x3ff71547
 801c3e8:	f85ddf44 	.word	0xf85ddf44
 801c3ec:	3e54ae0b 	.word	0x3e54ae0b
 801c3f0:	55555555 	.word	0x55555555
 801c3f4:	3fd55555 	.word	0x3fd55555
 801c3f8:	652b82fe 	.word	0x652b82fe
 801c3fc:	3ff71547 	.word	0x3ff71547
 801c400:	00000000 	.word	0x00000000
 801c404:	bff00000 	.word	0xbff00000
 801c408:	3ff00000 	.word	0x3ff00000
 801c40c:	3fd00000 	.word	0x3fd00000
 801c410:	3fe00000 	.word	0x3fe00000
 801c414:	408fffff 	.word	0x408fffff
 801c418:	4bd5      	ldr	r3, [pc, #852]	; (801c770 <__ieee754_pow+0x758>)
 801c41a:	402b      	ands	r3, r5
 801c41c:	2200      	movs	r2, #0
 801c41e:	b92b      	cbnz	r3, 801c42c <__ieee754_pow+0x414>
 801c420:	4bd4      	ldr	r3, [pc, #848]	; (801c774 <__ieee754_pow+0x75c>)
 801c422:	f7e4 f8f9 	bl	8000618 <__aeabi_dmul>
 801c426:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801c42a:	460c      	mov	r4, r1
 801c42c:	1523      	asrs	r3, r4, #20
 801c42e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c432:	4413      	add	r3, r2
 801c434:	9305      	str	r3, [sp, #20]
 801c436:	4bd0      	ldr	r3, [pc, #832]	; (801c778 <__ieee754_pow+0x760>)
 801c438:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c43c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801c440:	429c      	cmp	r4, r3
 801c442:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801c446:	dd08      	ble.n	801c45a <__ieee754_pow+0x442>
 801c448:	4bcc      	ldr	r3, [pc, #816]	; (801c77c <__ieee754_pow+0x764>)
 801c44a:	429c      	cmp	r4, r3
 801c44c:	f340 8162 	ble.w	801c714 <__ieee754_pow+0x6fc>
 801c450:	9b05      	ldr	r3, [sp, #20]
 801c452:	3301      	adds	r3, #1
 801c454:	9305      	str	r3, [sp, #20]
 801c456:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801c45a:	2400      	movs	r4, #0
 801c45c:	00e3      	lsls	r3, r4, #3
 801c45e:	9307      	str	r3, [sp, #28]
 801c460:	4bc7      	ldr	r3, [pc, #796]	; (801c780 <__ieee754_pow+0x768>)
 801c462:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c466:	ed93 7b00 	vldr	d7, [r3]
 801c46a:	4629      	mov	r1, r5
 801c46c:	ec53 2b17 	vmov	r2, r3, d7
 801c470:	eeb0 9a47 	vmov.f32	s18, s14
 801c474:	eef0 9a67 	vmov.f32	s19, s15
 801c478:	4682      	mov	sl, r0
 801c47a:	f7e3 ff15 	bl	80002a8 <__aeabi_dsub>
 801c47e:	4652      	mov	r2, sl
 801c480:	4606      	mov	r6, r0
 801c482:	460f      	mov	r7, r1
 801c484:	462b      	mov	r3, r5
 801c486:	ec51 0b19 	vmov	r0, r1, d9
 801c48a:	f7e3 ff0f 	bl	80002ac <__adddf3>
 801c48e:	4602      	mov	r2, r0
 801c490:	460b      	mov	r3, r1
 801c492:	2000      	movs	r0, #0
 801c494:	49bb      	ldr	r1, [pc, #748]	; (801c784 <__ieee754_pow+0x76c>)
 801c496:	f7e4 f9e9 	bl	800086c <__aeabi_ddiv>
 801c49a:	ec41 0b1a 	vmov	d10, r0, r1
 801c49e:	4602      	mov	r2, r0
 801c4a0:	460b      	mov	r3, r1
 801c4a2:	4630      	mov	r0, r6
 801c4a4:	4639      	mov	r1, r7
 801c4a6:	f7e4 f8b7 	bl	8000618 <__aeabi_dmul>
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c4b0:	9302      	str	r3, [sp, #8]
 801c4b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c4b6:	46ab      	mov	fp, r5
 801c4b8:	106d      	asrs	r5, r5, #1
 801c4ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801c4be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801c4c2:	ec41 0b18 	vmov	d8, r0, r1
 801c4c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	4640      	mov	r0, r8
 801c4ce:	4649      	mov	r1, r9
 801c4d0:	4614      	mov	r4, r2
 801c4d2:	461d      	mov	r5, r3
 801c4d4:	f7e4 f8a0 	bl	8000618 <__aeabi_dmul>
 801c4d8:	4602      	mov	r2, r0
 801c4da:	460b      	mov	r3, r1
 801c4dc:	4630      	mov	r0, r6
 801c4de:	4639      	mov	r1, r7
 801c4e0:	f7e3 fee2 	bl	80002a8 <__aeabi_dsub>
 801c4e4:	ec53 2b19 	vmov	r2, r3, d9
 801c4e8:	4606      	mov	r6, r0
 801c4ea:	460f      	mov	r7, r1
 801c4ec:	4620      	mov	r0, r4
 801c4ee:	4629      	mov	r1, r5
 801c4f0:	f7e3 feda 	bl	80002a8 <__aeabi_dsub>
 801c4f4:	4602      	mov	r2, r0
 801c4f6:	460b      	mov	r3, r1
 801c4f8:	4650      	mov	r0, sl
 801c4fa:	4659      	mov	r1, fp
 801c4fc:	f7e3 fed4 	bl	80002a8 <__aeabi_dsub>
 801c500:	4642      	mov	r2, r8
 801c502:	464b      	mov	r3, r9
 801c504:	f7e4 f888 	bl	8000618 <__aeabi_dmul>
 801c508:	4602      	mov	r2, r0
 801c50a:	460b      	mov	r3, r1
 801c50c:	4630      	mov	r0, r6
 801c50e:	4639      	mov	r1, r7
 801c510:	f7e3 feca 	bl	80002a8 <__aeabi_dsub>
 801c514:	ec53 2b1a 	vmov	r2, r3, d10
 801c518:	f7e4 f87e 	bl	8000618 <__aeabi_dmul>
 801c51c:	ec53 2b18 	vmov	r2, r3, d8
 801c520:	ec41 0b19 	vmov	d9, r0, r1
 801c524:	ec51 0b18 	vmov	r0, r1, d8
 801c528:	f7e4 f876 	bl	8000618 <__aeabi_dmul>
 801c52c:	a37c      	add	r3, pc, #496	; (adr r3, 801c720 <__ieee754_pow+0x708>)
 801c52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c532:	4604      	mov	r4, r0
 801c534:	460d      	mov	r5, r1
 801c536:	f7e4 f86f 	bl	8000618 <__aeabi_dmul>
 801c53a:	a37b      	add	r3, pc, #492	; (adr r3, 801c728 <__ieee754_pow+0x710>)
 801c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c540:	f7e3 feb4 	bl	80002ac <__adddf3>
 801c544:	4622      	mov	r2, r4
 801c546:	462b      	mov	r3, r5
 801c548:	f7e4 f866 	bl	8000618 <__aeabi_dmul>
 801c54c:	a378      	add	r3, pc, #480	; (adr r3, 801c730 <__ieee754_pow+0x718>)
 801c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c552:	f7e3 feab 	bl	80002ac <__adddf3>
 801c556:	4622      	mov	r2, r4
 801c558:	462b      	mov	r3, r5
 801c55a:	f7e4 f85d 	bl	8000618 <__aeabi_dmul>
 801c55e:	a376      	add	r3, pc, #472	; (adr r3, 801c738 <__ieee754_pow+0x720>)
 801c560:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c564:	f7e3 fea2 	bl	80002ac <__adddf3>
 801c568:	4622      	mov	r2, r4
 801c56a:	462b      	mov	r3, r5
 801c56c:	f7e4 f854 	bl	8000618 <__aeabi_dmul>
 801c570:	a373      	add	r3, pc, #460	; (adr r3, 801c740 <__ieee754_pow+0x728>)
 801c572:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c576:	f7e3 fe99 	bl	80002ac <__adddf3>
 801c57a:	4622      	mov	r2, r4
 801c57c:	462b      	mov	r3, r5
 801c57e:	f7e4 f84b 	bl	8000618 <__aeabi_dmul>
 801c582:	a371      	add	r3, pc, #452	; (adr r3, 801c748 <__ieee754_pow+0x730>)
 801c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c588:	f7e3 fe90 	bl	80002ac <__adddf3>
 801c58c:	4622      	mov	r2, r4
 801c58e:	4606      	mov	r6, r0
 801c590:	460f      	mov	r7, r1
 801c592:	462b      	mov	r3, r5
 801c594:	4620      	mov	r0, r4
 801c596:	4629      	mov	r1, r5
 801c598:	f7e4 f83e 	bl	8000618 <__aeabi_dmul>
 801c59c:	4602      	mov	r2, r0
 801c59e:	460b      	mov	r3, r1
 801c5a0:	4630      	mov	r0, r6
 801c5a2:	4639      	mov	r1, r7
 801c5a4:	f7e4 f838 	bl	8000618 <__aeabi_dmul>
 801c5a8:	4642      	mov	r2, r8
 801c5aa:	4604      	mov	r4, r0
 801c5ac:	460d      	mov	r5, r1
 801c5ae:	464b      	mov	r3, r9
 801c5b0:	ec51 0b18 	vmov	r0, r1, d8
 801c5b4:	f7e3 fe7a 	bl	80002ac <__adddf3>
 801c5b8:	ec53 2b19 	vmov	r2, r3, d9
 801c5bc:	f7e4 f82c 	bl	8000618 <__aeabi_dmul>
 801c5c0:	4622      	mov	r2, r4
 801c5c2:	462b      	mov	r3, r5
 801c5c4:	f7e3 fe72 	bl	80002ac <__adddf3>
 801c5c8:	4642      	mov	r2, r8
 801c5ca:	4682      	mov	sl, r0
 801c5cc:	468b      	mov	fp, r1
 801c5ce:	464b      	mov	r3, r9
 801c5d0:	4640      	mov	r0, r8
 801c5d2:	4649      	mov	r1, r9
 801c5d4:	f7e4 f820 	bl	8000618 <__aeabi_dmul>
 801c5d8:	4b6b      	ldr	r3, [pc, #428]	; (801c788 <__ieee754_pow+0x770>)
 801c5da:	2200      	movs	r2, #0
 801c5dc:	4606      	mov	r6, r0
 801c5de:	460f      	mov	r7, r1
 801c5e0:	f7e3 fe64 	bl	80002ac <__adddf3>
 801c5e4:	4652      	mov	r2, sl
 801c5e6:	465b      	mov	r3, fp
 801c5e8:	f7e3 fe60 	bl	80002ac <__adddf3>
 801c5ec:	2000      	movs	r0, #0
 801c5ee:	4604      	mov	r4, r0
 801c5f0:	460d      	mov	r5, r1
 801c5f2:	4602      	mov	r2, r0
 801c5f4:	460b      	mov	r3, r1
 801c5f6:	4640      	mov	r0, r8
 801c5f8:	4649      	mov	r1, r9
 801c5fa:	f7e4 f80d 	bl	8000618 <__aeabi_dmul>
 801c5fe:	4b62      	ldr	r3, [pc, #392]	; (801c788 <__ieee754_pow+0x770>)
 801c600:	4680      	mov	r8, r0
 801c602:	4689      	mov	r9, r1
 801c604:	2200      	movs	r2, #0
 801c606:	4620      	mov	r0, r4
 801c608:	4629      	mov	r1, r5
 801c60a:	f7e3 fe4d 	bl	80002a8 <__aeabi_dsub>
 801c60e:	4632      	mov	r2, r6
 801c610:	463b      	mov	r3, r7
 801c612:	f7e3 fe49 	bl	80002a8 <__aeabi_dsub>
 801c616:	4602      	mov	r2, r0
 801c618:	460b      	mov	r3, r1
 801c61a:	4650      	mov	r0, sl
 801c61c:	4659      	mov	r1, fp
 801c61e:	f7e3 fe43 	bl	80002a8 <__aeabi_dsub>
 801c622:	ec53 2b18 	vmov	r2, r3, d8
 801c626:	f7e3 fff7 	bl	8000618 <__aeabi_dmul>
 801c62a:	4622      	mov	r2, r4
 801c62c:	4606      	mov	r6, r0
 801c62e:	460f      	mov	r7, r1
 801c630:	462b      	mov	r3, r5
 801c632:	ec51 0b19 	vmov	r0, r1, d9
 801c636:	f7e3 ffef 	bl	8000618 <__aeabi_dmul>
 801c63a:	4602      	mov	r2, r0
 801c63c:	460b      	mov	r3, r1
 801c63e:	4630      	mov	r0, r6
 801c640:	4639      	mov	r1, r7
 801c642:	f7e3 fe33 	bl	80002ac <__adddf3>
 801c646:	4606      	mov	r6, r0
 801c648:	460f      	mov	r7, r1
 801c64a:	4602      	mov	r2, r0
 801c64c:	460b      	mov	r3, r1
 801c64e:	4640      	mov	r0, r8
 801c650:	4649      	mov	r1, r9
 801c652:	f7e3 fe2b 	bl	80002ac <__adddf3>
 801c656:	a33e      	add	r3, pc, #248	; (adr r3, 801c750 <__ieee754_pow+0x738>)
 801c658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c65c:	2000      	movs	r0, #0
 801c65e:	4604      	mov	r4, r0
 801c660:	460d      	mov	r5, r1
 801c662:	f7e3 ffd9 	bl	8000618 <__aeabi_dmul>
 801c666:	4642      	mov	r2, r8
 801c668:	ec41 0b18 	vmov	d8, r0, r1
 801c66c:	464b      	mov	r3, r9
 801c66e:	4620      	mov	r0, r4
 801c670:	4629      	mov	r1, r5
 801c672:	f7e3 fe19 	bl	80002a8 <__aeabi_dsub>
 801c676:	4602      	mov	r2, r0
 801c678:	460b      	mov	r3, r1
 801c67a:	4630      	mov	r0, r6
 801c67c:	4639      	mov	r1, r7
 801c67e:	f7e3 fe13 	bl	80002a8 <__aeabi_dsub>
 801c682:	a335      	add	r3, pc, #212	; (adr r3, 801c758 <__ieee754_pow+0x740>)
 801c684:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c688:	f7e3 ffc6 	bl	8000618 <__aeabi_dmul>
 801c68c:	a334      	add	r3, pc, #208	; (adr r3, 801c760 <__ieee754_pow+0x748>)
 801c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c692:	4606      	mov	r6, r0
 801c694:	460f      	mov	r7, r1
 801c696:	4620      	mov	r0, r4
 801c698:	4629      	mov	r1, r5
 801c69a:	f7e3 ffbd 	bl	8000618 <__aeabi_dmul>
 801c69e:	4602      	mov	r2, r0
 801c6a0:	460b      	mov	r3, r1
 801c6a2:	4630      	mov	r0, r6
 801c6a4:	4639      	mov	r1, r7
 801c6a6:	f7e3 fe01 	bl	80002ac <__adddf3>
 801c6aa:	9a07      	ldr	r2, [sp, #28]
 801c6ac:	4b37      	ldr	r3, [pc, #220]	; (801c78c <__ieee754_pow+0x774>)
 801c6ae:	4413      	add	r3, r2
 801c6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6b4:	f7e3 fdfa 	bl	80002ac <__adddf3>
 801c6b8:	4682      	mov	sl, r0
 801c6ba:	9805      	ldr	r0, [sp, #20]
 801c6bc:	468b      	mov	fp, r1
 801c6be:	f7e3 ff41 	bl	8000544 <__aeabi_i2d>
 801c6c2:	9a07      	ldr	r2, [sp, #28]
 801c6c4:	4b32      	ldr	r3, [pc, #200]	; (801c790 <__ieee754_pow+0x778>)
 801c6c6:	4413      	add	r3, r2
 801c6c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c6cc:	4606      	mov	r6, r0
 801c6ce:	460f      	mov	r7, r1
 801c6d0:	4652      	mov	r2, sl
 801c6d2:	465b      	mov	r3, fp
 801c6d4:	ec51 0b18 	vmov	r0, r1, d8
 801c6d8:	f7e3 fde8 	bl	80002ac <__adddf3>
 801c6dc:	4642      	mov	r2, r8
 801c6de:	464b      	mov	r3, r9
 801c6e0:	f7e3 fde4 	bl	80002ac <__adddf3>
 801c6e4:	4632      	mov	r2, r6
 801c6e6:	463b      	mov	r3, r7
 801c6e8:	f7e3 fde0 	bl	80002ac <__adddf3>
 801c6ec:	2000      	movs	r0, #0
 801c6ee:	4632      	mov	r2, r6
 801c6f0:	463b      	mov	r3, r7
 801c6f2:	4604      	mov	r4, r0
 801c6f4:	460d      	mov	r5, r1
 801c6f6:	f7e3 fdd7 	bl	80002a8 <__aeabi_dsub>
 801c6fa:	4642      	mov	r2, r8
 801c6fc:	464b      	mov	r3, r9
 801c6fe:	f7e3 fdd3 	bl	80002a8 <__aeabi_dsub>
 801c702:	ec53 2b18 	vmov	r2, r3, d8
 801c706:	f7e3 fdcf 	bl	80002a8 <__aeabi_dsub>
 801c70a:	4602      	mov	r2, r0
 801c70c:	460b      	mov	r3, r1
 801c70e:	4650      	mov	r0, sl
 801c710:	4659      	mov	r1, fp
 801c712:	e610      	b.n	801c336 <__ieee754_pow+0x31e>
 801c714:	2401      	movs	r4, #1
 801c716:	e6a1      	b.n	801c45c <__ieee754_pow+0x444>
 801c718:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801c768 <__ieee754_pow+0x750>
 801c71c:	e617      	b.n	801c34e <__ieee754_pow+0x336>
 801c71e:	bf00      	nop
 801c720:	4a454eef 	.word	0x4a454eef
 801c724:	3fca7e28 	.word	0x3fca7e28
 801c728:	93c9db65 	.word	0x93c9db65
 801c72c:	3fcd864a 	.word	0x3fcd864a
 801c730:	a91d4101 	.word	0xa91d4101
 801c734:	3fd17460 	.word	0x3fd17460
 801c738:	518f264d 	.word	0x518f264d
 801c73c:	3fd55555 	.word	0x3fd55555
 801c740:	db6fabff 	.word	0xdb6fabff
 801c744:	3fdb6db6 	.word	0x3fdb6db6
 801c748:	33333303 	.word	0x33333303
 801c74c:	3fe33333 	.word	0x3fe33333
 801c750:	e0000000 	.word	0xe0000000
 801c754:	3feec709 	.word	0x3feec709
 801c758:	dc3a03fd 	.word	0xdc3a03fd
 801c75c:	3feec709 	.word	0x3feec709
 801c760:	145b01f5 	.word	0x145b01f5
 801c764:	be3e2fe0 	.word	0xbe3e2fe0
 801c768:	00000000 	.word	0x00000000
 801c76c:	3ff00000 	.word	0x3ff00000
 801c770:	7ff00000 	.word	0x7ff00000
 801c774:	43400000 	.word	0x43400000
 801c778:	0003988e 	.word	0x0003988e
 801c77c:	000bb679 	.word	0x000bb679
 801c780:	0802ce30 	.word	0x0802ce30
 801c784:	3ff00000 	.word	0x3ff00000
 801c788:	40080000 	.word	0x40080000
 801c78c:	0802ce50 	.word	0x0802ce50
 801c790:	0802ce40 	.word	0x0802ce40
 801c794:	a3b3      	add	r3, pc, #716	; (adr r3, 801ca64 <__ieee754_pow+0xa4c>)
 801c796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c79a:	4640      	mov	r0, r8
 801c79c:	4649      	mov	r1, r9
 801c79e:	f7e3 fd85 	bl	80002ac <__adddf3>
 801c7a2:	4622      	mov	r2, r4
 801c7a4:	ec41 0b1a 	vmov	d10, r0, r1
 801c7a8:	462b      	mov	r3, r5
 801c7aa:	4630      	mov	r0, r6
 801c7ac:	4639      	mov	r1, r7
 801c7ae:	f7e3 fd7b 	bl	80002a8 <__aeabi_dsub>
 801c7b2:	4602      	mov	r2, r0
 801c7b4:	460b      	mov	r3, r1
 801c7b6:	ec51 0b1a 	vmov	r0, r1, d10
 801c7ba:	f7e4 f9bd 	bl	8000b38 <__aeabi_dcmpgt>
 801c7be:	2800      	cmp	r0, #0
 801c7c0:	f47f ae04 	bne.w	801c3cc <__ieee754_pow+0x3b4>
 801c7c4:	4aa2      	ldr	r2, [pc, #648]	; (801ca50 <__ieee754_pow+0xa38>)
 801c7c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c7ca:	4293      	cmp	r3, r2
 801c7cc:	f340 8107 	ble.w	801c9de <__ieee754_pow+0x9c6>
 801c7d0:	151b      	asrs	r3, r3, #20
 801c7d2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801c7d6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801c7da:	fa4a fa03 	asr.w	sl, sl, r3
 801c7de:	44da      	add	sl, fp
 801c7e0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801c7e4:	489b      	ldr	r0, [pc, #620]	; (801ca54 <__ieee754_pow+0xa3c>)
 801c7e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801c7ea:	4108      	asrs	r0, r1
 801c7ec:	ea00 030a 	and.w	r3, r0, sl
 801c7f0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801c7f4:	f1c1 0114 	rsb	r1, r1, #20
 801c7f8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801c7fc:	fa4a fa01 	asr.w	sl, sl, r1
 801c800:	f1bb 0f00 	cmp.w	fp, #0
 801c804:	f04f 0200 	mov.w	r2, #0
 801c808:	4620      	mov	r0, r4
 801c80a:	4629      	mov	r1, r5
 801c80c:	bfb8      	it	lt
 801c80e:	f1ca 0a00 	rsblt	sl, sl, #0
 801c812:	f7e3 fd49 	bl	80002a8 <__aeabi_dsub>
 801c816:	ec41 0b19 	vmov	d9, r0, r1
 801c81a:	4642      	mov	r2, r8
 801c81c:	464b      	mov	r3, r9
 801c81e:	ec51 0b19 	vmov	r0, r1, d9
 801c822:	f7e3 fd43 	bl	80002ac <__adddf3>
 801c826:	a37a      	add	r3, pc, #488	; (adr r3, 801ca10 <__ieee754_pow+0x9f8>)
 801c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c82c:	2000      	movs	r0, #0
 801c82e:	4604      	mov	r4, r0
 801c830:	460d      	mov	r5, r1
 801c832:	f7e3 fef1 	bl	8000618 <__aeabi_dmul>
 801c836:	ec53 2b19 	vmov	r2, r3, d9
 801c83a:	4606      	mov	r6, r0
 801c83c:	460f      	mov	r7, r1
 801c83e:	4620      	mov	r0, r4
 801c840:	4629      	mov	r1, r5
 801c842:	f7e3 fd31 	bl	80002a8 <__aeabi_dsub>
 801c846:	4602      	mov	r2, r0
 801c848:	460b      	mov	r3, r1
 801c84a:	4640      	mov	r0, r8
 801c84c:	4649      	mov	r1, r9
 801c84e:	f7e3 fd2b 	bl	80002a8 <__aeabi_dsub>
 801c852:	a371      	add	r3, pc, #452	; (adr r3, 801ca18 <__ieee754_pow+0xa00>)
 801c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c858:	f7e3 fede 	bl	8000618 <__aeabi_dmul>
 801c85c:	a370      	add	r3, pc, #448	; (adr r3, 801ca20 <__ieee754_pow+0xa08>)
 801c85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c862:	4680      	mov	r8, r0
 801c864:	4689      	mov	r9, r1
 801c866:	4620      	mov	r0, r4
 801c868:	4629      	mov	r1, r5
 801c86a:	f7e3 fed5 	bl	8000618 <__aeabi_dmul>
 801c86e:	4602      	mov	r2, r0
 801c870:	460b      	mov	r3, r1
 801c872:	4640      	mov	r0, r8
 801c874:	4649      	mov	r1, r9
 801c876:	f7e3 fd19 	bl	80002ac <__adddf3>
 801c87a:	4604      	mov	r4, r0
 801c87c:	460d      	mov	r5, r1
 801c87e:	4602      	mov	r2, r0
 801c880:	460b      	mov	r3, r1
 801c882:	4630      	mov	r0, r6
 801c884:	4639      	mov	r1, r7
 801c886:	f7e3 fd11 	bl	80002ac <__adddf3>
 801c88a:	4632      	mov	r2, r6
 801c88c:	463b      	mov	r3, r7
 801c88e:	4680      	mov	r8, r0
 801c890:	4689      	mov	r9, r1
 801c892:	f7e3 fd09 	bl	80002a8 <__aeabi_dsub>
 801c896:	4602      	mov	r2, r0
 801c898:	460b      	mov	r3, r1
 801c89a:	4620      	mov	r0, r4
 801c89c:	4629      	mov	r1, r5
 801c89e:	f7e3 fd03 	bl	80002a8 <__aeabi_dsub>
 801c8a2:	4642      	mov	r2, r8
 801c8a4:	4606      	mov	r6, r0
 801c8a6:	460f      	mov	r7, r1
 801c8a8:	464b      	mov	r3, r9
 801c8aa:	4640      	mov	r0, r8
 801c8ac:	4649      	mov	r1, r9
 801c8ae:	f7e3 feb3 	bl	8000618 <__aeabi_dmul>
 801c8b2:	a35d      	add	r3, pc, #372	; (adr r3, 801ca28 <__ieee754_pow+0xa10>)
 801c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8b8:	4604      	mov	r4, r0
 801c8ba:	460d      	mov	r5, r1
 801c8bc:	f7e3 feac 	bl	8000618 <__aeabi_dmul>
 801c8c0:	a35b      	add	r3, pc, #364	; (adr r3, 801ca30 <__ieee754_pow+0xa18>)
 801c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8c6:	f7e3 fcef 	bl	80002a8 <__aeabi_dsub>
 801c8ca:	4622      	mov	r2, r4
 801c8cc:	462b      	mov	r3, r5
 801c8ce:	f7e3 fea3 	bl	8000618 <__aeabi_dmul>
 801c8d2:	a359      	add	r3, pc, #356	; (adr r3, 801ca38 <__ieee754_pow+0xa20>)
 801c8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8d8:	f7e3 fce8 	bl	80002ac <__adddf3>
 801c8dc:	4622      	mov	r2, r4
 801c8de:	462b      	mov	r3, r5
 801c8e0:	f7e3 fe9a 	bl	8000618 <__aeabi_dmul>
 801c8e4:	a356      	add	r3, pc, #344	; (adr r3, 801ca40 <__ieee754_pow+0xa28>)
 801c8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ea:	f7e3 fcdd 	bl	80002a8 <__aeabi_dsub>
 801c8ee:	4622      	mov	r2, r4
 801c8f0:	462b      	mov	r3, r5
 801c8f2:	f7e3 fe91 	bl	8000618 <__aeabi_dmul>
 801c8f6:	a354      	add	r3, pc, #336	; (adr r3, 801ca48 <__ieee754_pow+0xa30>)
 801c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8fc:	f7e3 fcd6 	bl	80002ac <__adddf3>
 801c900:	4622      	mov	r2, r4
 801c902:	462b      	mov	r3, r5
 801c904:	f7e3 fe88 	bl	8000618 <__aeabi_dmul>
 801c908:	4602      	mov	r2, r0
 801c90a:	460b      	mov	r3, r1
 801c90c:	4640      	mov	r0, r8
 801c90e:	4649      	mov	r1, r9
 801c910:	f7e3 fcca 	bl	80002a8 <__aeabi_dsub>
 801c914:	4604      	mov	r4, r0
 801c916:	460d      	mov	r5, r1
 801c918:	4602      	mov	r2, r0
 801c91a:	460b      	mov	r3, r1
 801c91c:	4640      	mov	r0, r8
 801c91e:	4649      	mov	r1, r9
 801c920:	f7e3 fe7a 	bl	8000618 <__aeabi_dmul>
 801c924:	2200      	movs	r2, #0
 801c926:	ec41 0b19 	vmov	d9, r0, r1
 801c92a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c92e:	4620      	mov	r0, r4
 801c930:	4629      	mov	r1, r5
 801c932:	f7e3 fcb9 	bl	80002a8 <__aeabi_dsub>
 801c936:	4602      	mov	r2, r0
 801c938:	460b      	mov	r3, r1
 801c93a:	ec51 0b19 	vmov	r0, r1, d9
 801c93e:	f7e3 ff95 	bl	800086c <__aeabi_ddiv>
 801c942:	4632      	mov	r2, r6
 801c944:	4604      	mov	r4, r0
 801c946:	460d      	mov	r5, r1
 801c948:	463b      	mov	r3, r7
 801c94a:	4640      	mov	r0, r8
 801c94c:	4649      	mov	r1, r9
 801c94e:	f7e3 fe63 	bl	8000618 <__aeabi_dmul>
 801c952:	4632      	mov	r2, r6
 801c954:	463b      	mov	r3, r7
 801c956:	f7e3 fca9 	bl	80002ac <__adddf3>
 801c95a:	4602      	mov	r2, r0
 801c95c:	460b      	mov	r3, r1
 801c95e:	4620      	mov	r0, r4
 801c960:	4629      	mov	r1, r5
 801c962:	f7e3 fca1 	bl	80002a8 <__aeabi_dsub>
 801c966:	4642      	mov	r2, r8
 801c968:	464b      	mov	r3, r9
 801c96a:	f7e3 fc9d 	bl	80002a8 <__aeabi_dsub>
 801c96e:	460b      	mov	r3, r1
 801c970:	4602      	mov	r2, r0
 801c972:	4939      	ldr	r1, [pc, #228]	; (801ca58 <__ieee754_pow+0xa40>)
 801c974:	2000      	movs	r0, #0
 801c976:	f7e3 fc97 	bl	80002a8 <__aeabi_dsub>
 801c97a:	ec41 0b10 	vmov	d0, r0, r1
 801c97e:	ee10 3a90 	vmov	r3, s1
 801c982:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801c986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c98a:	da2b      	bge.n	801c9e4 <__ieee754_pow+0x9cc>
 801c98c:	4650      	mov	r0, sl
 801c98e:	f000 fc97 	bl	801d2c0 <scalbn>
 801c992:	ec51 0b10 	vmov	r0, r1, d0
 801c996:	ec53 2b18 	vmov	r2, r3, d8
 801c99a:	f7ff bbee 	b.w	801c17a <__ieee754_pow+0x162>
 801c99e:	4b2f      	ldr	r3, [pc, #188]	; (801ca5c <__ieee754_pow+0xa44>)
 801c9a0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c9a4:	429e      	cmp	r6, r3
 801c9a6:	f77f af0d 	ble.w	801c7c4 <__ieee754_pow+0x7ac>
 801c9aa:	4b2d      	ldr	r3, [pc, #180]	; (801ca60 <__ieee754_pow+0xa48>)
 801c9ac:	440b      	add	r3, r1
 801c9ae:	4303      	orrs	r3, r0
 801c9b0:	d009      	beq.n	801c9c6 <__ieee754_pow+0x9ae>
 801c9b2:	ec51 0b18 	vmov	r0, r1, d8
 801c9b6:	2200      	movs	r2, #0
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	f7e4 f89f 	bl	8000afc <__aeabi_dcmplt>
 801c9be:	3800      	subs	r0, #0
 801c9c0:	bf18      	it	ne
 801c9c2:	2001      	movne	r0, #1
 801c9c4:	e448      	b.n	801c258 <__ieee754_pow+0x240>
 801c9c6:	4622      	mov	r2, r4
 801c9c8:	462b      	mov	r3, r5
 801c9ca:	f7e3 fc6d 	bl	80002a8 <__aeabi_dsub>
 801c9ce:	4642      	mov	r2, r8
 801c9d0:	464b      	mov	r3, r9
 801c9d2:	f7e4 f8a7 	bl	8000b24 <__aeabi_dcmpge>
 801c9d6:	2800      	cmp	r0, #0
 801c9d8:	f43f aef4 	beq.w	801c7c4 <__ieee754_pow+0x7ac>
 801c9dc:	e7e9      	b.n	801c9b2 <__ieee754_pow+0x99a>
 801c9de:	f04f 0a00 	mov.w	sl, #0
 801c9e2:	e71a      	b.n	801c81a <__ieee754_pow+0x802>
 801c9e4:	ec51 0b10 	vmov	r0, r1, d0
 801c9e8:	4619      	mov	r1, r3
 801c9ea:	e7d4      	b.n	801c996 <__ieee754_pow+0x97e>
 801c9ec:	491a      	ldr	r1, [pc, #104]	; (801ca58 <__ieee754_pow+0xa40>)
 801c9ee:	2000      	movs	r0, #0
 801c9f0:	f7ff bb31 	b.w	801c056 <__ieee754_pow+0x3e>
 801c9f4:	2000      	movs	r0, #0
 801c9f6:	2100      	movs	r1, #0
 801c9f8:	f7ff bb2d 	b.w	801c056 <__ieee754_pow+0x3e>
 801c9fc:	4630      	mov	r0, r6
 801c9fe:	4639      	mov	r1, r7
 801ca00:	f7ff bb29 	b.w	801c056 <__ieee754_pow+0x3e>
 801ca04:	9204      	str	r2, [sp, #16]
 801ca06:	f7ff bb7b 	b.w	801c100 <__ieee754_pow+0xe8>
 801ca0a:	2300      	movs	r3, #0
 801ca0c:	f7ff bb65 	b.w	801c0da <__ieee754_pow+0xc2>
 801ca10:	00000000 	.word	0x00000000
 801ca14:	3fe62e43 	.word	0x3fe62e43
 801ca18:	fefa39ef 	.word	0xfefa39ef
 801ca1c:	3fe62e42 	.word	0x3fe62e42
 801ca20:	0ca86c39 	.word	0x0ca86c39
 801ca24:	be205c61 	.word	0xbe205c61
 801ca28:	72bea4d0 	.word	0x72bea4d0
 801ca2c:	3e663769 	.word	0x3e663769
 801ca30:	c5d26bf1 	.word	0xc5d26bf1
 801ca34:	3ebbbd41 	.word	0x3ebbbd41
 801ca38:	af25de2c 	.word	0xaf25de2c
 801ca3c:	3f11566a 	.word	0x3f11566a
 801ca40:	16bebd93 	.word	0x16bebd93
 801ca44:	3f66c16c 	.word	0x3f66c16c
 801ca48:	5555553e 	.word	0x5555553e
 801ca4c:	3fc55555 	.word	0x3fc55555
 801ca50:	3fe00000 	.word	0x3fe00000
 801ca54:	fff00000 	.word	0xfff00000
 801ca58:	3ff00000 	.word	0x3ff00000
 801ca5c:	4090cbff 	.word	0x4090cbff
 801ca60:	3f6f3400 	.word	0x3f6f3400
 801ca64:	652b82fe 	.word	0x652b82fe
 801ca68:	3c971547 	.word	0x3c971547
 801ca6c:	00000000 	.word	0x00000000

0801ca70 <__ieee754_rem_pio2>:
 801ca70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca74:	ed2d 8b02 	vpush	{d8}
 801ca78:	ec55 4b10 	vmov	r4, r5, d0
 801ca7c:	4bca      	ldr	r3, [pc, #808]	; (801cda8 <__ieee754_rem_pio2+0x338>)
 801ca7e:	b08b      	sub	sp, #44	; 0x2c
 801ca80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801ca84:	4598      	cmp	r8, r3
 801ca86:	4682      	mov	sl, r0
 801ca88:	9502      	str	r5, [sp, #8]
 801ca8a:	dc08      	bgt.n	801ca9e <__ieee754_rem_pio2+0x2e>
 801ca8c:	2200      	movs	r2, #0
 801ca8e:	2300      	movs	r3, #0
 801ca90:	ed80 0b00 	vstr	d0, [r0]
 801ca94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ca98:	f04f 0b00 	mov.w	fp, #0
 801ca9c:	e028      	b.n	801caf0 <__ieee754_rem_pio2+0x80>
 801ca9e:	4bc3      	ldr	r3, [pc, #780]	; (801cdac <__ieee754_rem_pio2+0x33c>)
 801caa0:	4598      	cmp	r8, r3
 801caa2:	dc78      	bgt.n	801cb96 <__ieee754_rem_pio2+0x126>
 801caa4:	9b02      	ldr	r3, [sp, #8]
 801caa6:	4ec2      	ldr	r6, [pc, #776]	; (801cdb0 <__ieee754_rem_pio2+0x340>)
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	ee10 0a10 	vmov	r0, s0
 801caae:	a3b0      	add	r3, pc, #704	; (adr r3, 801cd70 <__ieee754_rem_pio2+0x300>)
 801cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cab4:	4629      	mov	r1, r5
 801cab6:	dd39      	ble.n	801cb2c <__ieee754_rem_pio2+0xbc>
 801cab8:	f7e3 fbf6 	bl	80002a8 <__aeabi_dsub>
 801cabc:	45b0      	cmp	r8, r6
 801cabe:	4604      	mov	r4, r0
 801cac0:	460d      	mov	r5, r1
 801cac2:	d01b      	beq.n	801cafc <__ieee754_rem_pio2+0x8c>
 801cac4:	a3ac      	add	r3, pc, #688	; (adr r3, 801cd78 <__ieee754_rem_pio2+0x308>)
 801cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caca:	f7e3 fbed 	bl	80002a8 <__aeabi_dsub>
 801cace:	4602      	mov	r2, r0
 801cad0:	460b      	mov	r3, r1
 801cad2:	e9ca 2300 	strd	r2, r3, [sl]
 801cad6:	4620      	mov	r0, r4
 801cad8:	4629      	mov	r1, r5
 801cada:	f7e3 fbe5 	bl	80002a8 <__aeabi_dsub>
 801cade:	a3a6      	add	r3, pc, #664	; (adr r3, 801cd78 <__ieee754_rem_pio2+0x308>)
 801cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cae4:	f7e3 fbe0 	bl	80002a8 <__aeabi_dsub>
 801cae8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801caec:	f04f 0b01 	mov.w	fp, #1
 801caf0:	4658      	mov	r0, fp
 801caf2:	b00b      	add	sp, #44	; 0x2c
 801caf4:	ecbd 8b02 	vpop	{d8}
 801caf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cafc:	a3a0      	add	r3, pc, #640	; (adr r3, 801cd80 <__ieee754_rem_pio2+0x310>)
 801cafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb02:	f7e3 fbd1 	bl	80002a8 <__aeabi_dsub>
 801cb06:	a3a0      	add	r3, pc, #640	; (adr r3, 801cd88 <__ieee754_rem_pio2+0x318>)
 801cb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb0c:	4604      	mov	r4, r0
 801cb0e:	460d      	mov	r5, r1
 801cb10:	f7e3 fbca 	bl	80002a8 <__aeabi_dsub>
 801cb14:	4602      	mov	r2, r0
 801cb16:	460b      	mov	r3, r1
 801cb18:	e9ca 2300 	strd	r2, r3, [sl]
 801cb1c:	4620      	mov	r0, r4
 801cb1e:	4629      	mov	r1, r5
 801cb20:	f7e3 fbc2 	bl	80002a8 <__aeabi_dsub>
 801cb24:	a398      	add	r3, pc, #608	; (adr r3, 801cd88 <__ieee754_rem_pio2+0x318>)
 801cb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb2a:	e7db      	b.n	801cae4 <__ieee754_rem_pio2+0x74>
 801cb2c:	f7e3 fbbe 	bl	80002ac <__adddf3>
 801cb30:	45b0      	cmp	r8, r6
 801cb32:	4604      	mov	r4, r0
 801cb34:	460d      	mov	r5, r1
 801cb36:	d016      	beq.n	801cb66 <__ieee754_rem_pio2+0xf6>
 801cb38:	a38f      	add	r3, pc, #572	; (adr r3, 801cd78 <__ieee754_rem_pio2+0x308>)
 801cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb3e:	f7e3 fbb5 	bl	80002ac <__adddf3>
 801cb42:	4602      	mov	r2, r0
 801cb44:	460b      	mov	r3, r1
 801cb46:	e9ca 2300 	strd	r2, r3, [sl]
 801cb4a:	4620      	mov	r0, r4
 801cb4c:	4629      	mov	r1, r5
 801cb4e:	f7e3 fbab 	bl	80002a8 <__aeabi_dsub>
 801cb52:	a389      	add	r3, pc, #548	; (adr r3, 801cd78 <__ieee754_rem_pio2+0x308>)
 801cb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb58:	f7e3 fba8 	bl	80002ac <__adddf3>
 801cb5c:	f04f 3bff 	mov.w	fp, #4294967295
 801cb60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801cb64:	e7c4      	b.n	801caf0 <__ieee754_rem_pio2+0x80>
 801cb66:	a386      	add	r3, pc, #536	; (adr r3, 801cd80 <__ieee754_rem_pio2+0x310>)
 801cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb6c:	f7e3 fb9e 	bl	80002ac <__adddf3>
 801cb70:	a385      	add	r3, pc, #532	; (adr r3, 801cd88 <__ieee754_rem_pio2+0x318>)
 801cb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb76:	4604      	mov	r4, r0
 801cb78:	460d      	mov	r5, r1
 801cb7a:	f7e3 fb97 	bl	80002ac <__adddf3>
 801cb7e:	4602      	mov	r2, r0
 801cb80:	460b      	mov	r3, r1
 801cb82:	e9ca 2300 	strd	r2, r3, [sl]
 801cb86:	4620      	mov	r0, r4
 801cb88:	4629      	mov	r1, r5
 801cb8a:	f7e3 fb8d 	bl	80002a8 <__aeabi_dsub>
 801cb8e:	a37e      	add	r3, pc, #504	; (adr r3, 801cd88 <__ieee754_rem_pio2+0x318>)
 801cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb94:	e7e0      	b.n	801cb58 <__ieee754_rem_pio2+0xe8>
 801cb96:	4b87      	ldr	r3, [pc, #540]	; (801cdb4 <__ieee754_rem_pio2+0x344>)
 801cb98:	4598      	cmp	r8, r3
 801cb9a:	f300 80d8 	bgt.w	801cd4e <__ieee754_rem_pio2+0x2de>
 801cb9e:	f000 f96d 	bl	801ce7c <fabs>
 801cba2:	ec55 4b10 	vmov	r4, r5, d0
 801cba6:	ee10 0a10 	vmov	r0, s0
 801cbaa:	a379      	add	r3, pc, #484	; (adr r3, 801cd90 <__ieee754_rem_pio2+0x320>)
 801cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbb0:	4629      	mov	r1, r5
 801cbb2:	f7e3 fd31 	bl	8000618 <__aeabi_dmul>
 801cbb6:	4b80      	ldr	r3, [pc, #512]	; (801cdb8 <__ieee754_rem_pio2+0x348>)
 801cbb8:	2200      	movs	r2, #0
 801cbba:	f7e3 fb77 	bl	80002ac <__adddf3>
 801cbbe:	f7e3 ffdb 	bl	8000b78 <__aeabi_d2iz>
 801cbc2:	4683      	mov	fp, r0
 801cbc4:	f7e3 fcbe 	bl	8000544 <__aeabi_i2d>
 801cbc8:	4602      	mov	r2, r0
 801cbca:	460b      	mov	r3, r1
 801cbcc:	ec43 2b18 	vmov	d8, r2, r3
 801cbd0:	a367      	add	r3, pc, #412	; (adr r3, 801cd70 <__ieee754_rem_pio2+0x300>)
 801cbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbd6:	f7e3 fd1f 	bl	8000618 <__aeabi_dmul>
 801cbda:	4602      	mov	r2, r0
 801cbdc:	460b      	mov	r3, r1
 801cbde:	4620      	mov	r0, r4
 801cbe0:	4629      	mov	r1, r5
 801cbe2:	f7e3 fb61 	bl	80002a8 <__aeabi_dsub>
 801cbe6:	a364      	add	r3, pc, #400	; (adr r3, 801cd78 <__ieee754_rem_pio2+0x308>)
 801cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbec:	4606      	mov	r6, r0
 801cbee:	460f      	mov	r7, r1
 801cbf0:	ec51 0b18 	vmov	r0, r1, d8
 801cbf4:	f7e3 fd10 	bl	8000618 <__aeabi_dmul>
 801cbf8:	f1bb 0f1f 	cmp.w	fp, #31
 801cbfc:	4604      	mov	r4, r0
 801cbfe:	460d      	mov	r5, r1
 801cc00:	dc0d      	bgt.n	801cc1e <__ieee754_rem_pio2+0x1ae>
 801cc02:	4b6e      	ldr	r3, [pc, #440]	; (801cdbc <__ieee754_rem_pio2+0x34c>)
 801cc04:	f10b 32ff 	add.w	r2, fp, #4294967295
 801cc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cc0c:	4543      	cmp	r3, r8
 801cc0e:	d006      	beq.n	801cc1e <__ieee754_rem_pio2+0x1ae>
 801cc10:	4622      	mov	r2, r4
 801cc12:	462b      	mov	r3, r5
 801cc14:	4630      	mov	r0, r6
 801cc16:	4639      	mov	r1, r7
 801cc18:	f7e3 fb46 	bl	80002a8 <__aeabi_dsub>
 801cc1c:	e00e      	b.n	801cc3c <__ieee754_rem_pio2+0x1cc>
 801cc1e:	462b      	mov	r3, r5
 801cc20:	4622      	mov	r2, r4
 801cc22:	4630      	mov	r0, r6
 801cc24:	4639      	mov	r1, r7
 801cc26:	f7e3 fb3f 	bl	80002a8 <__aeabi_dsub>
 801cc2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801cc2e:	9303      	str	r3, [sp, #12]
 801cc30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801cc34:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801cc38:	2b10      	cmp	r3, #16
 801cc3a:	dc02      	bgt.n	801cc42 <__ieee754_rem_pio2+0x1d2>
 801cc3c:	e9ca 0100 	strd	r0, r1, [sl]
 801cc40:	e039      	b.n	801ccb6 <__ieee754_rem_pio2+0x246>
 801cc42:	a34f      	add	r3, pc, #316	; (adr r3, 801cd80 <__ieee754_rem_pio2+0x310>)
 801cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc48:	ec51 0b18 	vmov	r0, r1, d8
 801cc4c:	f7e3 fce4 	bl	8000618 <__aeabi_dmul>
 801cc50:	4604      	mov	r4, r0
 801cc52:	460d      	mov	r5, r1
 801cc54:	4602      	mov	r2, r0
 801cc56:	460b      	mov	r3, r1
 801cc58:	4630      	mov	r0, r6
 801cc5a:	4639      	mov	r1, r7
 801cc5c:	f7e3 fb24 	bl	80002a8 <__aeabi_dsub>
 801cc60:	4602      	mov	r2, r0
 801cc62:	460b      	mov	r3, r1
 801cc64:	4680      	mov	r8, r0
 801cc66:	4689      	mov	r9, r1
 801cc68:	4630      	mov	r0, r6
 801cc6a:	4639      	mov	r1, r7
 801cc6c:	f7e3 fb1c 	bl	80002a8 <__aeabi_dsub>
 801cc70:	4622      	mov	r2, r4
 801cc72:	462b      	mov	r3, r5
 801cc74:	f7e3 fb18 	bl	80002a8 <__aeabi_dsub>
 801cc78:	a343      	add	r3, pc, #268	; (adr r3, 801cd88 <__ieee754_rem_pio2+0x318>)
 801cc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc7e:	4604      	mov	r4, r0
 801cc80:	460d      	mov	r5, r1
 801cc82:	ec51 0b18 	vmov	r0, r1, d8
 801cc86:	f7e3 fcc7 	bl	8000618 <__aeabi_dmul>
 801cc8a:	4622      	mov	r2, r4
 801cc8c:	462b      	mov	r3, r5
 801cc8e:	f7e3 fb0b 	bl	80002a8 <__aeabi_dsub>
 801cc92:	4602      	mov	r2, r0
 801cc94:	460b      	mov	r3, r1
 801cc96:	4604      	mov	r4, r0
 801cc98:	460d      	mov	r5, r1
 801cc9a:	4640      	mov	r0, r8
 801cc9c:	4649      	mov	r1, r9
 801cc9e:	f7e3 fb03 	bl	80002a8 <__aeabi_dsub>
 801cca2:	9a03      	ldr	r2, [sp, #12]
 801cca4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801cca8:	1ad3      	subs	r3, r2, r3
 801ccaa:	2b31      	cmp	r3, #49	; 0x31
 801ccac:	dc24      	bgt.n	801ccf8 <__ieee754_rem_pio2+0x288>
 801ccae:	e9ca 0100 	strd	r0, r1, [sl]
 801ccb2:	4646      	mov	r6, r8
 801ccb4:	464f      	mov	r7, r9
 801ccb6:	e9da 8900 	ldrd	r8, r9, [sl]
 801ccba:	4630      	mov	r0, r6
 801ccbc:	4642      	mov	r2, r8
 801ccbe:	464b      	mov	r3, r9
 801ccc0:	4639      	mov	r1, r7
 801ccc2:	f7e3 faf1 	bl	80002a8 <__aeabi_dsub>
 801ccc6:	462b      	mov	r3, r5
 801ccc8:	4622      	mov	r2, r4
 801ccca:	f7e3 faed 	bl	80002a8 <__aeabi_dsub>
 801ccce:	9b02      	ldr	r3, [sp, #8]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ccd6:	f6bf af0b 	bge.w	801caf0 <__ieee754_rem_pio2+0x80>
 801ccda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ccde:	f8ca 3004 	str.w	r3, [sl, #4]
 801cce2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cce6:	f8ca 8000 	str.w	r8, [sl]
 801ccea:	f8ca 0008 	str.w	r0, [sl, #8]
 801ccee:	f8ca 300c 	str.w	r3, [sl, #12]
 801ccf2:	f1cb 0b00 	rsb	fp, fp, #0
 801ccf6:	e6fb      	b.n	801caf0 <__ieee754_rem_pio2+0x80>
 801ccf8:	a327      	add	r3, pc, #156	; (adr r3, 801cd98 <__ieee754_rem_pio2+0x328>)
 801ccfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccfe:	ec51 0b18 	vmov	r0, r1, d8
 801cd02:	f7e3 fc89 	bl	8000618 <__aeabi_dmul>
 801cd06:	4604      	mov	r4, r0
 801cd08:	460d      	mov	r5, r1
 801cd0a:	4602      	mov	r2, r0
 801cd0c:	460b      	mov	r3, r1
 801cd0e:	4640      	mov	r0, r8
 801cd10:	4649      	mov	r1, r9
 801cd12:	f7e3 fac9 	bl	80002a8 <__aeabi_dsub>
 801cd16:	4602      	mov	r2, r0
 801cd18:	460b      	mov	r3, r1
 801cd1a:	4606      	mov	r6, r0
 801cd1c:	460f      	mov	r7, r1
 801cd1e:	4640      	mov	r0, r8
 801cd20:	4649      	mov	r1, r9
 801cd22:	f7e3 fac1 	bl	80002a8 <__aeabi_dsub>
 801cd26:	4622      	mov	r2, r4
 801cd28:	462b      	mov	r3, r5
 801cd2a:	f7e3 fabd 	bl	80002a8 <__aeabi_dsub>
 801cd2e:	a31c      	add	r3, pc, #112	; (adr r3, 801cda0 <__ieee754_rem_pio2+0x330>)
 801cd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd34:	4604      	mov	r4, r0
 801cd36:	460d      	mov	r5, r1
 801cd38:	ec51 0b18 	vmov	r0, r1, d8
 801cd3c:	f7e3 fc6c 	bl	8000618 <__aeabi_dmul>
 801cd40:	4622      	mov	r2, r4
 801cd42:	462b      	mov	r3, r5
 801cd44:	f7e3 fab0 	bl	80002a8 <__aeabi_dsub>
 801cd48:	4604      	mov	r4, r0
 801cd4a:	460d      	mov	r5, r1
 801cd4c:	e760      	b.n	801cc10 <__ieee754_rem_pio2+0x1a0>
 801cd4e:	4b1c      	ldr	r3, [pc, #112]	; (801cdc0 <__ieee754_rem_pio2+0x350>)
 801cd50:	4598      	cmp	r8, r3
 801cd52:	dd37      	ble.n	801cdc4 <__ieee754_rem_pio2+0x354>
 801cd54:	ee10 2a10 	vmov	r2, s0
 801cd58:	462b      	mov	r3, r5
 801cd5a:	4620      	mov	r0, r4
 801cd5c:	4629      	mov	r1, r5
 801cd5e:	f7e3 faa3 	bl	80002a8 <__aeabi_dsub>
 801cd62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801cd66:	e9ca 0100 	strd	r0, r1, [sl]
 801cd6a:	e695      	b.n	801ca98 <__ieee754_rem_pio2+0x28>
 801cd6c:	f3af 8000 	nop.w
 801cd70:	54400000 	.word	0x54400000
 801cd74:	3ff921fb 	.word	0x3ff921fb
 801cd78:	1a626331 	.word	0x1a626331
 801cd7c:	3dd0b461 	.word	0x3dd0b461
 801cd80:	1a600000 	.word	0x1a600000
 801cd84:	3dd0b461 	.word	0x3dd0b461
 801cd88:	2e037073 	.word	0x2e037073
 801cd8c:	3ba3198a 	.word	0x3ba3198a
 801cd90:	6dc9c883 	.word	0x6dc9c883
 801cd94:	3fe45f30 	.word	0x3fe45f30
 801cd98:	2e000000 	.word	0x2e000000
 801cd9c:	3ba3198a 	.word	0x3ba3198a
 801cda0:	252049c1 	.word	0x252049c1
 801cda4:	397b839a 	.word	0x397b839a
 801cda8:	3fe921fb 	.word	0x3fe921fb
 801cdac:	4002d97b 	.word	0x4002d97b
 801cdb0:	3ff921fb 	.word	0x3ff921fb
 801cdb4:	413921fb 	.word	0x413921fb
 801cdb8:	3fe00000 	.word	0x3fe00000
 801cdbc:	0802ce60 	.word	0x0802ce60
 801cdc0:	7fefffff 	.word	0x7fefffff
 801cdc4:	ea4f 5628 	mov.w	r6, r8, asr #20
 801cdc8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801cdcc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801cdd0:	4620      	mov	r0, r4
 801cdd2:	460d      	mov	r5, r1
 801cdd4:	f7e3 fed0 	bl	8000b78 <__aeabi_d2iz>
 801cdd8:	f7e3 fbb4 	bl	8000544 <__aeabi_i2d>
 801cddc:	4602      	mov	r2, r0
 801cdde:	460b      	mov	r3, r1
 801cde0:	4620      	mov	r0, r4
 801cde2:	4629      	mov	r1, r5
 801cde4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cde8:	f7e3 fa5e 	bl	80002a8 <__aeabi_dsub>
 801cdec:	4b21      	ldr	r3, [pc, #132]	; (801ce74 <__ieee754_rem_pio2+0x404>)
 801cdee:	2200      	movs	r2, #0
 801cdf0:	f7e3 fc12 	bl	8000618 <__aeabi_dmul>
 801cdf4:	460d      	mov	r5, r1
 801cdf6:	4604      	mov	r4, r0
 801cdf8:	f7e3 febe 	bl	8000b78 <__aeabi_d2iz>
 801cdfc:	f7e3 fba2 	bl	8000544 <__aeabi_i2d>
 801ce00:	4602      	mov	r2, r0
 801ce02:	460b      	mov	r3, r1
 801ce04:	4620      	mov	r0, r4
 801ce06:	4629      	mov	r1, r5
 801ce08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ce0c:	f7e3 fa4c 	bl	80002a8 <__aeabi_dsub>
 801ce10:	4b18      	ldr	r3, [pc, #96]	; (801ce74 <__ieee754_rem_pio2+0x404>)
 801ce12:	2200      	movs	r2, #0
 801ce14:	f7e3 fc00 	bl	8000618 <__aeabi_dmul>
 801ce18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ce1c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801ce20:	2703      	movs	r7, #3
 801ce22:	2400      	movs	r4, #0
 801ce24:	2500      	movs	r5, #0
 801ce26:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801ce2a:	4622      	mov	r2, r4
 801ce2c:	462b      	mov	r3, r5
 801ce2e:	46b9      	mov	r9, r7
 801ce30:	3f01      	subs	r7, #1
 801ce32:	f7e3 fe59 	bl	8000ae8 <__aeabi_dcmpeq>
 801ce36:	2800      	cmp	r0, #0
 801ce38:	d1f5      	bne.n	801ce26 <__ieee754_rem_pio2+0x3b6>
 801ce3a:	4b0f      	ldr	r3, [pc, #60]	; (801ce78 <__ieee754_rem_pio2+0x408>)
 801ce3c:	9301      	str	r3, [sp, #4]
 801ce3e:	2302      	movs	r3, #2
 801ce40:	9300      	str	r3, [sp, #0]
 801ce42:	4632      	mov	r2, r6
 801ce44:	464b      	mov	r3, r9
 801ce46:	4651      	mov	r1, sl
 801ce48:	a804      	add	r0, sp, #16
 801ce4a:	f000 fae9 	bl	801d420 <__kernel_rem_pio2>
 801ce4e:	9b02      	ldr	r3, [sp, #8]
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	4683      	mov	fp, r0
 801ce54:	f6bf ae4c 	bge.w	801caf0 <__ieee754_rem_pio2+0x80>
 801ce58:	e9da 2100 	ldrd	r2, r1, [sl]
 801ce5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ce60:	e9ca 2300 	strd	r2, r3, [sl]
 801ce64:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801ce68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ce6c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801ce70:	e73f      	b.n	801ccf2 <__ieee754_rem_pio2+0x282>
 801ce72:	bf00      	nop
 801ce74:	41700000 	.word	0x41700000
 801ce78:	0802cee0 	.word	0x0802cee0

0801ce7c <fabs>:
 801ce7c:	ec51 0b10 	vmov	r0, r1, d0
 801ce80:	ee10 2a10 	vmov	r2, s0
 801ce84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ce88:	ec43 2b10 	vmov	d0, r2, r3
 801ce8c:	4770      	bx	lr
	...

0801ce90 <__ieee754_expf>:
 801ce90:	ee10 2a10 	vmov	r2, s0
 801ce94:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801ce98:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ce9c:	d902      	bls.n	801cea4 <__ieee754_expf+0x14>
 801ce9e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801cea2:	4770      	bx	lr
 801cea4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801cea8:	d106      	bne.n	801ceb8 <__ieee754_expf+0x28>
 801ceaa:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801cfe4 <__ieee754_expf+0x154>
 801ceae:	2900      	cmp	r1, #0
 801ceb0:	bf18      	it	ne
 801ceb2:	eeb0 0a67 	vmovne.f32	s0, s15
 801ceb6:	4770      	bx	lr
 801ceb8:	484b      	ldr	r0, [pc, #300]	; (801cfe8 <__ieee754_expf+0x158>)
 801ceba:	4282      	cmp	r2, r0
 801cebc:	dd02      	ble.n	801cec4 <__ieee754_expf+0x34>
 801cebe:	2000      	movs	r0, #0
 801cec0:	f7fe bb46 	b.w	801b550 <__math_oflowf>
 801cec4:	2a00      	cmp	r2, #0
 801cec6:	da05      	bge.n	801ced4 <__ieee754_expf+0x44>
 801cec8:	4a48      	ldr	r2, [pc, #288]	; (801cfec <__ieee754_expf+0x15c>)
 801ceca:	4293      	cmp	r3, r2
 801cecc:	d902      	bls.n	801ced4 <__ieee754_expf+0x44>
 801cece:	2000      	movs	r0, #0
 801ced0:	f7fe bb38 	b.w	801b544 <__math_uflowf>
 801ced4:	4a46      	ldr	r2, [pc, #280]	; (801cff0 <__ieee754_expf+0x160>)
 801ced6:	4293      	cmp	r3, r2
 801ced8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801cedc:	d952      	bls.n	801cf84 <__ieee754_expf+0xf4>
 801cede:	4a45      	ldr	r2, [pc, #276]	; (801cff4 <__ieee754_expf+0x164>)
 801cee0:	4293      	cmp	r3, r2
 801cee2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801cee6:	d834      	bhi.n	801cf52 <__ieee754_expf+0xc2>
 801cee8:	4b43      	ldr	r3, [pc, #268]	; (801cff8 <__ieee754_expf+0x168>)
 801ceea:	4413      	add	r3, r2
 801ceec:	ed93 7a00 	vldr	s14, [r3]
 801cef0:	4b42      	ldr	r3, [pc, #264]	; (801cffc <__ieee754_expf+0x16c>)
 801cef2:	4413      	add	r3, r2
 801cef4:	ee30 7a47 	vsub.f32	s14, s0, s14
 801cef8:	f1c1 0201 	rsb	r2, r1, #1
 801cefc:	edd3 7a00 	vldr	s15, [r3]
 801cf00:	1a52      	subs	r2, r2, r1
 801cf02:	ee37 0a67 	vsub.f32	s0, s14, s15
 801cf06:	ee20 6a00 	vmul.f32	s12, s0, s0
 801cf0a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801d000 <__ieee754_expf+0x170>
 801cf0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801d004 <__ieee754_expf+0x174>
 801cf12:	eee6 6a05 	vfma.f32	s13, s12, s10
 801cf16:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801d008 <__ieee754_expf+0x178>
 801cf1a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801cf1e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801d00c <__ieee754_expf+0x17c>
 801cf22:	eee5 6a06 	vfma.f32	s13, s10, s12
 801cf26:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801d010 <__ieee754_expf+0x180>
 801cf2a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801cf2e:	eef0 6a40 	vmov.f32	s13, s0
 801cf32:	eee5 6a46 	vfms.f32	s13, s10, s12
 801cf36:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801cf3a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801cf3e:	bb92      	cbnz	r2, 801cfa6 <__ieee754_expf+0x116>
 801cf40:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801cf44:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801cf48:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801cf4c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801cf50:	4770      	bx	lr
 801cf52:	4b30      	ldr	r3, [pc, #192]	; (801d014 <__ieee754_expf+0x184>)
 801cf54:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801d018 <__ieee754_expf+0x188>
 801cf58:	eddf 6a30 	vldr	s13, [pc, #192]	; 801d01c <__ieee754_expf+0x18c>
 801cf5c:	4413      	add	r3, r2
 801cf5e:	edd3 7a00 	vldr	s15, [r3]
 801cf62:	eee0 7a07 	vfma.f32	s15, s0, s14
 801cf66:	eeb0 7a40 	vmov.f32	s14, s0
 801cf6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cf6e:	ee17 2a90 	vmov	r2, s15
 801cf72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cf76:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801cf7a:	eddf 6a29 	vldr	s13, [pc, #164]	; 801d020 <__ieee754_expf+0x190>
 801cf7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cf82:	e7be      	b.n	801cf02 <__ieee754_expf+0x72>
 801cf84:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 801cf88:	d20b      	bcs.n	801cfa2 <__ieee754_expf+0x112>
 801cf8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 801d024 <__ieee754_expf+0x194>
 801cf8e:	ee70 6a26 	vadd.f32	s13, s0, s13
 801cf92:	eef4 6ae5 	vcmpe.f32	s13, s11
 801cf96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf9a:	dd02      	ble.n	801cfa2 <__ieee754_expf+0x112>
 801cf9c:	ee30 0a25 	vadd.f32	s0, s0, s11
 801cfa0:	4770      	bx	lr
 801cfa2:	2200      	movs	r2, #0
 801cfa4:	e7af      	b.n	801cf06 <__ieee754_expf+0x76>
 801cfa6:	ee36 6a66 	vsub.f32	s12, s12, s13
 801cfaa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801cfae:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801cfb2:	bfb8      	it	lt
 801cfb4:	3264      	addlt	r2, #100	; 0x64
 801cfb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801cfba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cfbe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801cfc2:	ee17 3a90 	vmov	r3, s15
 801cfc6:	bfab      	itete	ge
 801cfc8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801cfcc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801cfd0:	ee00 3a10 	vmovge	s0, r3
 801cfd4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801d028 <__ieee754_expf+0x198>
 801cfd8:	bfbc      	itt	lt
 801cfda:	ee00 3a10 	vmovlt	s0, r3
 801cfde:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801cfe2:	4770      	bx	lr
 801cfe4:	00000000 	.word	0x00000000
 801cfe8:	42b17217 	.word	0x42b17217
 801cfec:	42cff1b5 	.word	0x42cff1b5
 801cff0:	3eb17218 	.word	0x3eb17218
 801cff4:	3f851591 	.word	0x3f851591
 801cff8:	0802cff0 	.word	0x0802cff0
 801cffc:	0802cff8 	.word	0x0802cff8
 801d000:	3331bb4c 	.word	0x3331bb4c
 801d004:	b5ddea0e 	.word	0xb5ddea0e
 801d008:	388ab355 	.word	0x388ab355
 801d00c:	bb360b61 	.word	0xbb360b61
 801d010:	3e2aaaab 	.word	0x3e2aaaab
 801d014:	0802cfe8 	.word	0x0802cfe8
 801d018:	3fb8aa3b 	.word	0x3fb8aa3b
 801d01c:	3f317180 	.word	0x3f317180
 801d020:	3717f7d1 	.word	0x3717f7d1
 801d024:	7149f2ca 	.word	0x7149f2ca
 801d028:	0d800000 	.word	0x0d800000

0801d02c <__ieee754_logf>:
 801d02c:	ee10 3a10 	vmov	r3, s0
 801d030:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801d034:	d106      	bne.n	801d044 <__ieee754_logf+0x18>
 801d036:	ed9f 7a66 	vldr	s14, [pc, #408]	; 801d1d0 <__ieee754_logf+0x1a4>
 801d03a:	eddf 7a66 	vldr	s15, [pc, #408]	; 801d1d4 <__ieee754_logf+0x1a8>
 801d03e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801d042:	4770      	bx	lr
 801d044:	2b00      	cmp	r3, #0
 801d046:	da02      	bge.n	801d04e <__ieee754_logf+0x22>
 801d048:	ee30 7a40 	vsub.f32	s14, s0, s0
 801d04c:	e7f5      	b.n	801d03a <__ieee754_logf+0xe>
 801d04e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d052:	db02      	blt.n	801d05a <__ieee754_logf+0x2e>
 801d054:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d058:	4770      	bx	lr
 801d05a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d05e:	bfb8      	it	lt
 801d060:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 801d1d8 <__ieee754_logf+0x1ac>
 801d064:	485d      	ldr	r0, [pc, #372]	; (801d1dc <__ieee754_logf+0x1b0>)
 801d066:	bfbe      	ittt	lt
 801d068:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801d06c:	f06f 0118 	mvnlt.w	r1, #24
 801d070:	ee17 3a90 	vmovlt	r3, s15
 801d074:	ea4f 52e3 	mov.w	r2, r3, asr #23
 801d078:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801d07c:	4418      	add	r0, r3
 801d07e:	bfa8      	it	ge
 801d080:	2100      	movge	r1, #0
 801d082:	3a7f      	subs	r2, #127	; 0x7f
 801d084:	440a      	add	r2, r1
 801d086:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801d08a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801d08e:	4319      	orrs	r1, r3
 801d090:	ee00 1a10 	vmov	s0, r1
 801d094:	4952      	ldr	r1, [pc, #328]	; (801d1e0 <__ieee754_logf+0x1b4>)
 801d096:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801d09a:	f103 000f 	add.w	r0, r3, #15
 801d09e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d0a2:	4001      	ands	r1, r0
 801d0a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d0a8:	bb89      	cbnz	r1, 801d10e <__ieee754_logf+0xe2>
 801d0aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801d0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0b2:	d10f      	bne.n	801d0d4 <__ieee754_logf+0xa8>
 801d0b4:	2a00      	cmp	r2, #0
 801d0b6:	f000 8087 	beq.w	801d1c8 <__ieee754_logf+0x19c>
 801d0ba:	ee07 2a90 	vmov	s15, r2
 801d0be:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801d1e4 <__ieee754_logf+0x1b8>
 801d0c2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801d1e8 <__ieee754_logf+0x1bc>
 801d0c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d0ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d0ce:	eea7 0a87 	vfma.f32	s0, s15, s14
 801d0d2:	4770      	bx	lr
 801d0d4:	eddf 6a45 	vldr	s13, [pc, #276]	; 801d1ec <__ieee754_logf+0x1c0>
 801d0d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d0dc:	eee0 7a66 	vfms.f32	s15, s0, s13
 801d0e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d0e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d0e8:	b912      	cbnz	r2, 801d0f0 <__ieee754_logf+0xc4>
 801d0ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 801d0ee:	4770      	bx	lr
 801d0f0:	ee07 2a90 	vmov	s15, r2
 801d0f4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801d1e4 <__ieee754_logf+0x1b8>
 801d0f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d0fc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801d100:	ee37 0a40 	vsub.f32	s0, s14, s0
 801d104:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801d1e8 <__ieee754_logf+0x1bc>
 801d108:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801d10c:	4770      	bx	lr
 801d10e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801d112:	ee70 7a27 	vadd.f32	s15, s0, s15
 801d116:	eddf 5a36 	vldr	s11, [pc, #216]	; 801d1f0 <__ieee754_logf+0x1c4>
 801d11a:	eddf 4a36 	vldr	s9, [pc, #216]	; 801d1f4 <__ieee754_logf+0x1c8>
 801d11e:	4936      	ldr	r1, [pc, #216]	; (801d1f8 <__ieee754_logf+0x1cc>)
 801d120:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801d124:	4419      	add	r1, r3
 801d126:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801d12a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801d12e:	430b      	orrs	r3, r1
 801d130:	2b00      	cmp	r3, #0
 801d132:	ee07 2a90 	vmov	s15, r2
 801d136:	ee26 5a06 	vmul.f32	s10, s12, s12
 801d13a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801d13e:	ee25 7a05 	vmul.f32	s14, s10, s10
 801d142:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801d1fc <__ieee754_logf+0x1d0>
 801d146:	eee7 7a25 	vfma.f32	s15, s14, s11
 801d14a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 801d200 <__ieee754_logf+0x1d4>
 801d14e:	eee7 5a87 	vfma.f32	s11, s15, s14
 801d152:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801d204 <__ieee754_logf+0x1d8>
 801d156:	eee7 7a24 	vfma.f32	s15, s14, s9
 801d15a:	eddf 4a2b 	vldr	s9, [pc, #172]	; 801d208 <__ieee754_logf+0x1dc>
 801d15e:	eee7 4a87 	vfma.f32	s9, s15, s14
 801d162:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801d20c <__ieee754_logf+0x1e0>
 801d166:	eee4 7a87 	vfma.f32	s15, s9, s14
 801d16a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801d16e:	eee5 7a87 	vfma.f32	s15, s11, s14
 801d172:	dd1a      	ble.n	801d1aa <__ieee754_logf+0x17e>
 801d174:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d178:	ee20 7a07 	vmul.f32	s14, s0, s14
 801d17c:	ee27 7a00 	vmul.f32	s14, s14, s0
 801d180:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d184:	ee67 7a86 	vmul.f32	s15, s15, s12
 801d188:	b912      	cbnz	r2, 801d190 <__ieee754_logf+0x164>
 801d18a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d18e:	e7ac      	b.n	801d0ea <__ieee754_logf+0xbe>
 801d190:	ed9f 6a14 	vldr	s12, [pc, #80]	; 801d1e4 <__ieee754_logf+0x1b8>
 801d194:	eee6 7a86 	vfma.f32	s15, s13, s12
 801d198:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d19c:	ee37 0a40 	vsub.f32	s0, s14, s0
 801d1a0:	eddf 7a11 	vldr	s15, [pc, #68]	; 801d1e8 <__ieee754_logf+0x1bc>
 801d1a4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801d1a8:	4770      	bx	lr
 801d1aa:	ee70 7a67 	vsub.f32	s15, s0, s15
 801d1ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 801d1b2:	b912      	cbnz	r2, 801d1ba <__ieee754_logf+0x18e>
 801d1b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d1b8:	4770      	bx	lr
 801d1ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801d1e4 <__ieee754_logf+0x1b8>
 801d1be:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801d1c2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801d1c6:	e7eb      	b.n	801d1a0 <__ieee754_logf+0x174>
 801d1c8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801d1d4 <__ieee754_logf+0x1a8>
 801d1cc:	4770      	bx	lr
 801d1ce:	bf00      	nop
 801d1d0:	cc000000 	.word	0xcc000000
 801d1d4:	00000000 	.word	0x00000000
 801d1d8:	4c000000 	.word	0x4c000000
 801d1dc:	004afb20 	.word	0x004afb20
 801d1e0:	007ffff0 	.word	0x007ffff0
 801d1e4:	3717f7d1 	.word	0x3717f7d1
 801d1e8:	3f317180 	.word	0x3f317180
 801d1ec:	3eaaaaab 	.word	0x3eaaaaab
 801d1f0:	3e1cd04f 	.word	0x3e1cd04f
 801d1f4:	3e178897 	.word	0x3e178897
 801d1f8:	ffcf5c30 	.word	0xffcf5c30
 801d1fc:	3e638e29 	.word	0x3e638e29
 801d200:	3ecccccd 	.word	0x3ecccccd
 801d204:	3e3a3325 	.word	0x3e3a3325
 801d208:	3e924925 	.word	0x3e924925
 801d20c:	3f2aaaab 	.word	0x3f2aaaab

0801d210 <__ieee754_log10f>:
 801d210:	b508      	push	{r3, lr}
 801d212:	ee10 2a10 	vmov	r2, s0
 801d216:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801d21a:	ed2d 8b02 	vpush	{d8}
 801d21e:	d108      	bne.n	801d232 <__ieee754_log10f+0x22>
 801d220:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801d2a8 <__ieee754_log10f+0x98>
 801d224:	eddf 7a21 	vldr	s15, [pc, #132]	; 801d2ac <__ieee754_log10f+0x9c>
 801d228:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801d22c:	ecbd 8b02 	vpop	{d8}
 801d230:	bd08      	pop	{r3, pc}
 801d232:	2a00      	cmp	r2, #0
 801d234:	da02      	bge.n	801d23c <__ieee754_log10f+0x2c>
 801d236:	ee30 7a40 	vsub.f32	s14, s0, s0
 801d23a:	e7f3      	b.n	801d224 <__ieee754_log10f+0x14>
 801d23c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801d240:	db02      	blt.n	801d248 <__ieee754_log10f+0x38>
 801d242:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d246:	e7f1      	b.n	801d22c <__ieee754_log10f+0x1c>
 801d248:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801d24c:	bfbf      	itttt	lt
 801d24e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801d2b0 <__ieee754_log10f+0xa0>
 801d252:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801d256:	f06f 0118 	mvnlt.w	r1, #24
 801d25a:	ee17 2a90 	vmovlt	r2, s15
 801d25e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801d262:	bfa8      	it	ge
 801d264:	2100      	movge	r1, #0
 801d266:	3b7f      	subs	r3, #127	; 0x7f
 801d268:	440b      	add	r3, r1
 801d26a:	0fd9      	lsrs	r1, r3, #31
 801d26c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801d270:	ee07 3a90 	vmov	s15, r3
 801d274:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801d278:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 801d27c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801d280:	ee00 3a10 	vmov	s0, r3
 801d284:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801d288:	f7ff fed0 	bl	801d02c <__ieee754_logf>
 801d28c:	eddf 7a09 	vldr	s15, [pc, #36]	; 801d2b4 <__ieee754_log10f+0xa4>
 801d290:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d294:	eddf 7a08 	vldr	s15, [pc, #32]	; 801d2b8 <__ieee754_log10f+0xa8>
 801d298:	eea8 0a27 	vfma.f32	s0, s16, s15
 801d29c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801d2bc <__ieee754_log10f+0xac>
 801d2a0:	eea8 0a27 	vfma.f32	s0, s16, s15
 801d2a4:	e7c2      	b.n	801d22c <__ieee754_log10f+0x1c>
 801d2a6:	bf00      	nop
 801d2a8:	cc000000 	.word	0xcc000000
 801d2ac:	00000000 	.word	0x00000000
 801d2b0:	4c000000 	.word	0x4c000000
 801d2b4:	3ede5bd9 	.word	0x3ede5bd9
 801d2b8:	355427db 	.word	0x355427db
 801d2bc:	3e9a2080 	.word	0x3e9a2080

0801d2c0 <scalbn>:
 801d2c0:	b570      	push	{r4, r5, r6, lr}
 801d2c2:	ec55 4b10 	vmov	r4, r5, d0
 801d2c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801d2ca:	4606      	mov	r6, r0
 801d2cc:	462b      	mov	r3, r5
 801d2ce:	b999      	cbnz	r1, 801d2f8 <scalbn+0x38>
 801d2d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d2d4:	4323      	orrs	r3, r4
 801d2d6:	d03f      	beq.n	801d358 <scalbn+0x98>
 801d2d8:	4b35      	ldr	r3, [pc, #212]	; (801d3b0 <scalbn+0xf0>)
 801d2da:	4629      	mov	r1, r5
 801d2dc:	ee10 0a10 	vmov	r0, s0
 801d2e0:	2200      	movs	r2, #0
 801d2e2:	f7e3 f999 	bl	8000618 <__aeabi_dmul>
 801d2e6:	4b33      	ldr	r3, [pc, #204]	; (801d3b4 <scalbn+0xf4>)
 801d2e8:	429e      	cmp	r6, r3
 801d2ea:	4604      	mov	r4, r0
 801d2ec:	460d      	mov	r5, r1
 801d2ee:	da10      	bge.n	801d312 <scalbn+0x52>
 801d2f0:	a327      	add	r3, pc, #156	; (adr r3, 801d390 <scalbn+0xd0>)
 801d2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2f6:	e01f      	b.n	801d338 <scalbn+0x78>
 801d2f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801d2fc:	4291      	cmp	r1, r2
 801d2fe:	d10c      	bne.n	801d31a <scalbn+0x5a>
 801d300:	ee10 2a10 	vmov	r2, s0
 801d304:	4620      	mov	r0, r4
 801d306:	4629      	mov	r1, r5
 801d308:	f7e2 ffd0 	bl	80002ac <__adddf3>
 801d30c:	4604      	mov	r4, r0
 801d30e:	460d      	mov	r5, r1
 801d310:	e022      	b.n	801d358 <scalbn+0x98>
 801d312:	460b      	mov	r3, r1
 801d314:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801d318:	3936      	subs	r1, #54	; 0x36
 801d31a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801d31e:	4296      	cmp	r6, r2
 801d320:	dd0d      	ble.n	801d33e <scalbn+0x7e>
 801d322:	2d00      	cmp	r5, #0
 801d324:	a11c      	add	r1, pc, #112	; (adr r1, 801d398 <scalbn+0xd8>)
 801d326:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d32a:	da02      	bge.n	801d332 <scalbn+0x72>
 801d32c:	a11c      	add	r1, pc, #112	; (adr r1, 801d3a0 <scalbn+0xe0>)
 801d32e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d332:	a319      	add	r3, pc, #100	; (adr r3, 801d398 <scalbn+0xd8>)
 801d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d338:	f7e3 f96e 	bl	8000618 <__aeabi_dmul>
 801d33c:	e7e6      	b.n	801d30c <scalbn+0x4c>
 801d33e:	1872      	adds	r2, r6, r1
 801d340:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d344:	428a      	cmp	r2, r1
 801d346:	dcec      	bgt.n	801d322 <scalbn+0x62>
 801d348:	2a00      	cmp	r2, #0
 801d34a:	dd08      	ble.n	801d35e <scalbn+0x9e>
 801d34c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d350:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d354:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d358:	ec45 4b10 	vmov	d0, r4, r5
 801d35c:	bd70      	pop	{r4, r5, r6, pc}
 801d35e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801d362:	da08      	bge.n	801d376 <scalbn+0xb6>
 801d364:	2d00      	cmp	r5, #0
 801d366:	a10a      	add	r1, pc, #40	; (adr r1, 801d390 <scalbn+0xd0>)
 801d368:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d36c:	dac0      	bge.n	801d2f0 <scalbn+0x30>
 801d36e:	a10e      	add	r1, pc, #56	; (adr r1, 801d3a8 <scalbn+0xe8>)
 801d370:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d374:	e7bc      	b.n	801d2f0 <scalbn+0x30>
 801d376:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d37a:	3236      	adds	r2, #54	; 0x36
 801d37c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d380:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801d384:	4620      	mov	r0, r4
 801d386:	4b0c      	ldr	r3, [pc, #48]	; (801d3b8 <scalbn+0xf8>)
 801d388:	2200      	movs	r2, #0
 801d38a:	e7d5      	b.n	801d338 <scalbn+0x78>
 801d38c:	f3af 8000 	nop.w
 801d390:	c2f8f359 	.word	0xc2f8f359
 801d394:	01a56e1f 	.word	0x01a56e1f
 801d398:	8800759c 	.word	0x8800759c
 801d39c:	7e37e43c 	.word	0x7e37e43c
 801d3a0:	8800759c 	.word	0x8800759c
 801d3a4:	fe37e43c 	.word	0xfe37e43c
 801d3a8:	c2f8f359 	.word	0xc2f8f359
 801d3ac:	81a56e1f 	.word	0x81a56e1f
 801d3b0:	43500000 	.word	0x43500000
 801d3b4:	ffff3cb0 	.word	0xffff3cb0
 801d3b8:	3c900000 	.word	0x3c900000

0801d3bc <with_errno>:
 801d3bc:	b570      	push	{r4, r5, r6, lr}
 801d3be:	4604      	mov	r4, r0
 801d3c0:	460d      	mov	r5, r1
 801d3c2:	4616      	mov	r6, r2
 801d3c4:	f002 fb46 	bl	801fa54 <__errno>
 801d3c8:	4629      	mov	r1, r5
 801d3ca:	6006      	str	r6, [r0, #0]
 801d3cc:	4620      	mov	r0, r4
 801d3ce:	bd70      	pop	{r4, r5, r6, pc}

0801d3d0 <xflow>:
 801d3d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d3d2:	4614      	mov	r4, r2
 801d3d4:	461d      	mov	r5, r3
 801d3d6:	b108      	cbz	r0, 801d3dc <xflow+0xc>
 801d3d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d3dc:	e9cd 2300 	strd	r2, r3, [sp]
 801d3e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d3e4:	4620      	mov	r0, r4
 801d3e6:	4629      	mov	r1, r5
 801d3e8:	f7e3 f916 	bl	8000618 <__aeabi_dmul>
 801d3ec:	2222      	movs	r2, #34	; 0x22
 801d3ee:	b003      	add	sp, #12
 801d3f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d3f4:	f7ff bfe2 	b.w	801d3bc <with_errno>

0801d3f8 <__math_uflow>:
 801d3f8:	b508      	push	{r3, lr}
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d400:	f7ff ffe6 	bl	801d3d0 <xflow>
 801d404:	ec41 0b10 	vmov	d0, r0, r1
 801d408:	bd08      	pop	{r3, pc}

0801d40a <__math_oflow>:
 801d40a:	b508      	push	{r3, lr}
 801d40c:	2200      	movs	r2, #0
 801d40e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801d412:	f7ff ffdd 	bl	801d3d0 <xflow>
 801d416:	ec41 0b10 	vmov	d0, r0, r1
 801d41a:	bd08      	pop	{r3, pc}
 801d41c:	0000      	movs	r0, r0
	...

0801d420 <__kernel_rem_pio2>:
 801d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d424:	ed2d 8b02 	vpush	{d8}
 801d428:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801d42c:	f112 0f14 	cmn.w	r2, #20
 801d430:	9306      	str	r3, [sp, #24]
 801d432:	9104      	str	r1, [sp, #16]
 801d434:	4bc2      	ldr	r3, [pc, #776]	; (801d740 <__kernel_rem_pio2+0x320>)
 801d436:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801d438:	9009      	str	r0, [sp, #36]	; 0x24
 801d43a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d43e:	9300      	str	r3, [sp, #0]
 801d440:	9b06      	ldr	r3, [sp, #24]
 801d442:	f103 33ff 	add.w	r3, r3, #4294967295
 801d446:	bfa8      	it	ge
 801d448:	1ed4      	subge	r4, r2, #3
 801d44a:	9305      	str	r3, [sp, #20]
 801d44c:	bfb2      	itee	lt
 801d44e:	2400      	movlt	r4, #0
 801d450:	2318      	movge	r3, #24
 801d452:	fb94 f4f3 	sdivge	r4, r4, r3
 801d456:	f06f 0317 	mvn.w	r3, #23
 801d45a:	fb04 3303 	mla	r3, r4, r3, r3
 801d45e:	eb03 0a02 	add.w	sl, r3, r2
 801d462:	9b00      	ldr	r3, [sp, #0]
 801d464:	9a05      	ldr	r2, [sp, #20]
 801d466:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801d730 <__kernel_rem_pio2+0x310>
 801d46a:	eb03 0802 	add.w	r8, r3, r2
 801d46e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801d470:	1aa7      	subs	r7, r4, r2
 801d472:	ae20      	add	r6, sp, #128	; 0x80
 801d474:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801d478:	2500      	movs	r5, #0
 801d47a:	4545      	cmp	r5, r8
 801d47c:	dd13      	ble.n	801d4a6 <__kernel_rem_pio2+0x86>
 801d47e:	9b06      	ldr	r3, [sp, #24]
 801d480:	aa20      	add	r2, sp, #128	; 0x80
 801d482:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801d486:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801d48a:	f04f 0800 	mov.w	r8, #0
 801d48e:	9b00      	ldr	r3, [sp, #0]
 801d490:	4598      	cmp	r8, r3
 801d492:	dc31      	bgt.n	801d4f8 <__kernel_rem_pio2+0xd8>
 801d494:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801d730 <__kernel_rem_pio2+0x310>
 801d498:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d49c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d4a0:	462f      	mov	r7, r5
 801d4a2:	2600      	movs	r6, #0
 801d4a4:	e01b      	b.n	801d4de <__kernel_rem_pio2+0xbe>
 801d4a6:	42ef      	cmn	r7, r5
 801d4a8:	d407      	bmi.n	801d4ba <__kernel_rem_pio2+0x9a>
 801d4aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801d4ae:	f7e3 f849 	bl	8000544 <__aeabi_i2d>
 801d4b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801d4b6:	3501      	adds	r5, #1
 801d4b8:	e7df      	b.n	801d47a <__kernel_rem_pio2+0x5a>
 801d4ba:	ec51 0b18 	vmov	r0, r1, d8
 801d4be:	e7f8      	b.n	801d4b2 <__kernel_rem_pio2+0x92>
 801d4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d4c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801d4c8:	f7e3 f8a6 	bl	8000618 <__aeabi_dmul>
 801d4cc:	4602      	mov	r2, r0
 801d4ce:	460b      	mov	r3, r1
 801d4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d4d4:	f7e2 feea 	bl	80002ac <__adddf3>
 801d4d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d4dc:	3601      	adds	r6, #1
 801d4de:	9b05      	ldr	r3, [sp, #20]
 801d4e0:	429e      	cmp	r6, r3
 801d4e2:	f1a7 0708 	sub.w	r7, r7, #8
 801d4e6:	ddeb      	ble.n	801d4c0 <__kernel_rem_pio2+0xa0>
 801d4e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d4ec:	f108 0801 	add.w	r8, r8, #1
 801d4f0:	ecab 7b02 	vstmia	fp!, {d7}
 801d4f4:	3508      	adds	r5, #8
 801d4f6:	e7ca      	b.n	801d48e <__kernel_rem_pio2+0x6e>
 801d4f8:	9b00      	ldr	r3, [sp, #0]
 801d4fa:	aa0c      	add	r2, sp, #48	; 0x30
 801d4fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d500:	930b      	str	r3, [sp, #44]	; 0x2c
 801d502:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801d504:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801d508:	9c00      	ldr	r4, [sp, #0]
 801d50a:	930a      	str	r3, [sp, #40]	; 0x28
 801d50c:	00e3      	lsls	r3, r4, #3
 801d50e:	9308      	str	r3, [sp, #32]
 801d510:	ab98      	add	r3, sp, #608	; 0x260
 801d512:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d516:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801d51a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801d51e:	ab70      	add	r3, sp, #448	; 0x1c0
 801d520:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801d524:	46c3      	mov	fp, r8
 801d526:	46a1      	mov	r9, r4
 801d528:	f1b9 0f00 	cmp.w	r9, #0
 801d52c:	f1a5 0508 	sub.w	r5, r5, #8
 801d530:	dc77      	bgt.n	801d622 <__kernel_rem_pio2+0x202>
 801d532:	ec47 6b10 	vmov	d0, r6, r7
 801d536:	4650      	mov	r0, sl
 801d538:	f7ff fec2 	bl	801d2c0 <scalbn>
 801d53c:	ec57 6b10 	vmov	r6, r7, d0
 801d540:	2200      	movs	r2, #0
 801d542:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801d546:	ee10 0a10 	vmov	r0, s0
 801d54a:	4639      	mov	r1, r7
 801d54c:	f7e3 f864 	bl	8000618 <__aeabi_dmul>
 801d550:	ec41 0b10 	vmov	d0, r0, r1
 801d554:	f7fe f8e0 	bl	801b718 <floor>
 801d558:	4b7a      	ldr	r3, [pc, #488]	; (801d744 <__kernel_rem_pio2+0x324>)
 801d55a:	ec51 0b10 	vmov	r0, r1, d0
 801d55e:	2200      	movs	r2, #0
 801d560:	f7e3 f85a 	bl	8000618 <__aeabi_dmul>
 801d564:	4602      	mov	r2, r0
 801d566:	460b      	mov	r3, r1
 801d568:	4630      	mov	r0, r6
 801d56a:	4639      	mov	r1, r7
 801d56c:	f7e2 fe9c 	bl	80002a8 <__aeabi_dsub>
 801d570:	460f      	mov	r7, r1
 801d572:	4606      	mov	r6, r0
 801d574:	f7e3 fb00 	bl	8000b78 <__aeabi_d2iz>
 801d578:	9002      	str	r0, [sp, #8]
 801d57a:	f7e2 ffe3 	bl	8000544 <__aeabi_i2d>
 801d57e:	4602      	mov	r2, r0
 801d580:	460b      	mov	r3, r1
 801d582:	4630      	mov	r0, r6
 801d584:	4639      	mov	r1, r7
 801d586:	f7e2 fe8f 	bl	80002a8 <__aeabi_dsub>
 801d58a:	f1ba 0f00 	cmp.w	sl, #0
 801d58e:	4606      	mov	r6, r0
 801d590:	460f      	mov	r7, r1
 801d592:	dd6d      	ble.n	801d670 <__kernel_rem_pio2+0x250>
 801d594:	1e61      	subs	r1, r4, #1
 801d596:	ab0c      	add	r3, sp, #48	; 0x30
 801d598:	9d02      	ldr	r5, [sp, #8]
 801d59a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d59e:	f1ca 0018 	rsb	r0, sl, #24
 801d5a2:	fa43 f200 	asr.w	r2, r3, r0
 801d5a6:	4415      	add	r5, r2
 801d5a8:	4082      	lsls	r2, r0
 801d5aa:	1a9b      	subs	r3, r3, r2
 801d5ac:	aa0c      	add	r2, sp, #48	; 0x30
 801d5ae:	9502      	str	r5, [sp, #8]
 801d5b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801d5b4:	f1ca 0217 	rsb	r2, sl, #23
 801d5b8:	fa43 fb02 	asr.w	fp, r3, r2
 801d5bc:	f1bb 0f00 	cmp.w	fp, #0
 801d5c0:	dd65      	ble.n	801d68e <__kernel_rem_pio2+0x26e>
 801d5c2:	9b02      	ldr	r3, [sp, #8]
 801d5c4:	2200      	movs	r2, #0
 801d5c6:	3301      	adds	r3, #1
 801d5c8:	9302      	str	r3, [sp, #8]
 801d5ca:	4615      	mov	r5, r2
 801d5cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801d5d0:	4294      	cmp	r4, r2
 801d5d2:	f300 809f 	bgt.w	801d714 <__kernel_rem_pio2+0x2f4>
 801d5d6:	f1ba 0f00 	cmp.w	sl, #0
 801d5da:	dd07      	ble.n	801d5ec <__kernel_rem_pio2+0x1cc>
 801d5dc:	f1ba 0f01 	cmp.w	sl, #1
 801d5e0:	f000 80c1 	beq.w	801d766 <__kernel_rem_pio2+0x346>
 801d5e4:	f1ba 0f02 	cmp.w	sl, #2
 801d5e8:	f000 80c7 	beq.w	801d77a <__kernel_rem_pio2+0x35a>
 801d5ec:	f1bb 0f02 	cmp.w	fp, #2
 801d5f0:	d14d      	bne.n	801d68e <__kernel_rem_pio2+0x26e>
 801d5f2:	4632      	mov	r2, r6
 801d5f4:	463b      	mov	r3, r7
 801d5f6:	4954      	ldr	r1, [pc, #336]	; (801d748 <__kernel_rem_pio2+0x328>)
 801d5f8:	2000      	movs	r0, #0
 801d5fa:	f7e2 fe55 	bl	80002a8 <__aeabi_dsub>
 801d5fe:	4606      	mov	r6, r0
 801d600:	460f      	mov	r7, r1
 801d602:	2d00      	cmp	r5, #0
 801d604:	d043      	beq.n	801d68e <__kernel_rem_pio2+0x26e>
 801d606:	4650      	mov	r0, sl
 801d608:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801d738 <__kernel_rem_pio2+0x318>
 801d60c:	f7ff fe58 	bl	801d2c0 <scalbn>
 801d610:	4630      	mov	r0, r6
 801d612:	4639      	mov	r1, r7
 801d614:	ec53 2b10 	vmov	r2, r3, d0
 801d618:	f7e2 fe46 	bl	80002a8 <__aeabi_dsub>
 801d61c:	4606      	mov	r6, r0
 801d61e:	460f      	mov	r7, r1
 801d620:	e035      	b.n	801d68e <__kernel_rem_pio2+0x26e>
 801d622:	4b4a      	ldr	r3, [pc, #296]	; (801d74c <__kernel_rem_pio2+0x32c>)
 801d624:	2200      	movs	r2, #0
 801d626:	4630      	mov	r0, r6
 801d628:	4639      	mov	r1, r7
 801d62a:	f7e2 fff5 	bl	8000618 <__aeabi_dmul>
 801d62e:	f7e3 faa3 	bl	8000b78 <__aeabi_d2iz>
 801d632:	f7e2 ff87 	bl	8000544 <__aeabi_i2d>
 801d636:	4602      	mov	r2, r0
 801d638:	460b      	mov	r3, r1
 801d63a:	ec43 2b18 	vmov	d8, r2, r3
 801d63e:	4b44      	ldr	r3, [pc, #272]	; (801d750 <__kernel_rem_pio2+0x330>)
 801d640:	2200      	movs	r2, #0
 801d642:	f7e2 ffe9 	bl	8000618 <__aeabi_dmul>
 801d646:	4602      	mov	r2, r0
 801d648:	460b      	mov	r3, r1
 801d64a:	4630      	mov	r0, r6
 801d64c:	4639      	mov	r1, r7
 801d64e:	f7e2 fe2b 	bl	80002a8 <__aeabi_dsub>
 801d652:	f7e3 fa91 	bl	8000b78 <__aeabi_d2iz>
 801d656:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d65a:	f84b 0b04 	str.w	r0, [fp], #4
 801d65e:	ec51 0b18 	vmov	r0, r1, d8
 801d662:	f7e2 fe23 	bl	80002ac <__adddf3>
 801d666:	f109 39ff 	add.w	r9, r9, #4294967295
 801d66a:	4606      	mov	r6, r0
 801d66c:	460f      	mov	r7, r1
 801d66e:	e75b      	b.n	801d528 <__kernel_rem_pio2+0x108>
 801d670:	d106      	bne.n	801d680 <__kernel_rem_pio2+0x260>
 801d672:	1e63      	subs	r3, r4, #1
 801d674:	aa0c      	add	r2, sp, #48	; 0x30
 801d676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d67a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801d67e:	e79d      	b.n	801d5bc <__kernel_rem_pio2+0x19c>
 801d680:	4b34      	ldr	r3, [pc, #208]	; (801d754 <__kernel_rem_pio2+0x334>)
 801d682:	2200      	movs	r2, #0
 801d684:	f7e3 fa4e 	bl	8000b24 <__aeabi_dcmpge>
 801d688:	2800      	cmp	r0, #0
 801d68a:	d140      	bne.n	801d70e <__kernel_rem_pio2+0x2ee>
 801d68c:	4683      	mov	fp, r0
 801d68e:	2200      	movs	r2, #0
 801d690:	2300      	movs	r3, #0
 801d692:	4630      	mov	r0, r6
 801d694:	4639      	mov	r1, r7
 801d696:	f7e3 fa27 	bl	8000ae8 <__aeabi_dcmpeq>
 801d69a:	2800      	cmp	r0, #0
 801d69c:	f000 80c1 	beq.w	801d822 <__kernel_rem_pio2+0x402>
 801d6a0:	1e65      	subs	r5, r4, #1
 801d6a2:	462b      	mov	r3, r5
 801d6a4:	2200      	movs	r2, #0
 801d6a6:	9900      	ldr	r1, [sp, #0]
 801d6a8:	428b      	cmp	r3, r1
 801d6aa:	da6d      	bge.n	801d788 <__kernel_rem_pio2+0x368>
 801d6ac:	2a00      	cmp	r2, #0
 801d6ae:	f000 808a 	beq.w	801d7c6 <__kernel_rem_pio2+0x3a6>
 801d6b2:	ab0c      	add	r3, sp, #48	; 0x30
 801d6b4:	f1aa 0a18 	sub.w	sl, sl, #24
 801d6b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801d6bc:	2b00      	cmp	r3, #0
 801d6be:	f000 80ae 	beq.w	801d81e <__kernel_rem_pio2+0x3fe>
 801d6c2:	4650      	mov	r0, sl
 801d6c4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801d738 <__kernel_rem_pio2+0x318>
 801d6c8:	f7ff fdfa 	bl	801d2c0 <scalbn>
 801d6cc:	1c6b      	adds	r3, r5, #1
 801d6ce:	00da      	lsls	r2, r3, #3
 801d6d0:	9205      	str	r2, [sp, #20]
 801d6d2:	ec57 6b10 	vmov	r6, r7, d0
 801d6d6:	aa70      	add	r2, sp, #448	; 0x1c0
 801d6d8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801d74c <__kernel_rem_pio2+0x32c>
 801d6dc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801d6e0:	462c      	mov	r4, r5
 801d6e2:	f04f 0800 	mov.w	r8, #0
 801d6e6:	2c00      	cmp	r4, #0
 801d6e8:	f280 80d4 	bge.w	801d894 <__kernel_rem_pio2+0x474>
 801d6ec:	462c      	mov	r4, r5
 801d6ee:	2c00      	cmp	r4, #0
 801d6f0:	f2c0 8102 	blt.w	801d8f8 <__kernel_rem_pio2+0x4d8>
 801d6f4:	4b18      	ldr	r3, [pc, #96]	; (801d758 <__kernel_rem_pio2+0x338>)
 801d6f6:	461e      	mov	r6, r3
 801d6f8:	ab70      	add	r3, sp, #448	; 0x1c0
 801d6fa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801d6fe:	1b2b      	subs	r3, r5, r4
 801d700:	f04f 0900 	mov.w	r9, #0
 801d704:	f04f 0a00 	mov.w	sl, #0
 801d708:	2700      	movs	r7, #0
 801d70a:	9306      	str	r3, [sp, #24]
 801d70c:	e0e6      	b.n	801d8dc <__kernel_rem_pio2+0x4bc>
 801d70e:	f04f 0b02 	mov.w	fp, #2
 801d712:	e756      	b.n	801d5c2 <__kernel_rem_pio2+0x1a2>
 801d714:	f8d8 3000 	ldr.w	r3, [r8]
 801d718:	bb05      	cbnz	r5, 801d75c <__kernel_rem_pio2+0x33c>
 801d71a:	b123      	cbz	r3, 801d726 <__kernel_rem_pio2+0x306>
 801d71c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801d720:	f8c8 3000 	str.w	r3, [r8]
 801d724:	2301      	movs	r3, #1
 801d726:	3201      	adds	r2, #1
 801d728:	f108 0804 	add.w	r8, r8, #4
 801d72c:	461d      	mov	r5, r3
 801d72e:	e74f      	b.n	801d5d0 <__kernel_rem_pio2+0x1b0>
	...
 801d73c:	3ff00000 	.word	0x3ff00000
 801d740:	0802d040 	.word	0x0802d040
 801d744:	40200000 	.word	0x40200000
 801d748:	3ff00000 	.word	0x3ff00000
 801d74c:	3e700000 	.word	0x3e700000
 801d750:	41700000 	.word	0x41700000
 801d754:	3fe00000 	.word	0x3fe00000
 801d758:	0802d000 	.word	0x0802d000
 801d75c:	1acb      	subs	r3, r1, r3
 801d75e:	f8c8 3000 	str.w	r3, [r8]
 801d762:	462b      	mov	r3, r5
 801d764:	e7df      	b.n	801d726 <__kernel_rem_pio2+0x306>
 801d766:	1e62      	subs	r2, r4, #1
 801d768:	ab0c      	add	r3, sp, #48	; 0x30
 801d76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d76e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801d772:	a90c      	add	r1, sp, #48	; 0x30
 801d774:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801d778:	e738      	b.n	801d5ec <__kernel_rem_pio2+0x1cc>
 801d77a:	1e62      	subs	r2, r4, #1
 801d77c:	ab0c      	add	r3, sp, #48	; 0x30
 801d77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d782:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801d786:	e7f4      	b.n	801d772 <__kernel_rem_pio2+0x352>
 801d788:	a90c      	add	r1, sp, #48	; 0x30
 801d78a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801d78e:	3b01      	subs	r3, #1
 801d790:	430a      	orrs	r2, r1
 801d792:	e788      	b.n	801d6a6 <__kernel_rem_pio2+0x286>
 801d794:	3301      	adds	r3, #1
 801d796:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801d79a:	2900      	cmp	r1, #0
 801d79c:	d0fa      	beq.n	801d794 <__kernel_rem_pio2+0x374>
 801d79e:	9a08      	ldr	r2, [sp, #32]
 801d7a0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801d7a4:	446a      	add	r2, sp
 801d7a6:	3a98      	subs	r2, #152	; 0x98
 801d7a8:	9208      	str	r2, [sp, #32]
 801d7aa:	9a06      	ldr	r2, [sp, #24]
 801d7ac:	a920      	add	r1, sp, #128	; 0x80
 801d7ae:	18a2      	adds	r2, r4, r2
 801d7b0:	18e3      	adds	r3, r4, r3
 801d7b2:	f104 0801 	add.w	r8, r4, #1
 801d7b6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801d7ba:	9302      	str	r3, [sp, #8]
 801d7bc:	9b02      	ldr	r3, [sp, #8]
 801d7be:	4543      	cmp	r3, r8
 801d7c0:	da04      	bge.n	801d7cc <__kernel_rem_pio2+0x3ac>
 801d7c2:	461c      	mov	r4, r3
 801d7c4:	e6a2      	b.n	801d50c <__kernel_rem_pio2+0xec>
 801d7c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d7c8:	2301      	movs	r3, #1
 801d7ca:	e7e4      	b.n	801d796 <__kernel_rem_pio2+0x376>
 801d7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801d7d2:	f7e2 feb7 	bl	8000544 <__aeabi_i2d>
 801d7d6:	e8e5 0102 	strd	r0, r1, [r5], #8
 801d7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7dc:	46ab      	mov	fp, r5
 801d7de:	461c      	mov	r4, r3
 801d7e0:	f04f 0900 	mov.w	r9, #0
 801d7e4:	2600      	movs	r6, #0
 801d7e6:	2700      	movs	r7, #0
 801d7e8:	9b05      	ldr	r3, [sp, #20]
 801d7ea:	4599      	cmp	r9, r3
 801d7ec:	dd06      	ble.n	801d7fc <__kernel_rem_pio2+0x3dc>
 801d7ee:	9b08      	ldr	r3, [sp, #32]
 801d7f0:	e8e3 6702 	strd	r6, r7, [r3], #8
 801d7f4:	f108 0801 	add.w	r8, r8, #1
 801d7f8:	9308      	str	r3, [sp, #32]
 801d7fa:	e7df      	b.n	801d7bc <__kernel_rem_pio2+0x39c>
 801d7fc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801d800:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801d804:	f7e2 ff08 	bl	8000618 <__aeabi_dmul>
 801d808:	4602      	mov	r2, r0
 801d80a:	460b      	mov	r3, r1
 801d80c:	4630      	mov	r0, r6
 801d80e:	4639      	mov	r1, r7
 801d810:	f7e2 fd4c 	bl	80002ac <__adddf3>
 801d814:	f109 0901 	add.w	r9, r9, #1
 801d818:	4606      	mov	r6, r0
 801d81a:	460f      	mov	r7, r1
 801d81c:	e7e4      	b.n	801d7e8 <__kernel_rem_pio2+0x3c8>
 801d81e:	3d01      	subs	r5, #1
 801d820:	e747      	b.n	801d6b2 <__kernel_rem_pio2+0x292>
 801d822:	ec47 6b10 	vmov	d0, r6, r7
 801d826:	f1ca 0000 	rsb	r0, sl, #0
 801d82a:	f7ff fd49 	bl	801d2c0 <scalbn>
 801d82e:	ec57 6b10 	vmov	r6, r7, d0
 801d832:	4ba0      	ldr	r3, [pc, #640]	; (801dab4 <__kernel_rem_pio2+0x694>)
 801d834:	ee10 0a10 	vmov	r0, s0
 801d838:	2200      	movs	r2, #0
 801d83a:	4639      	mov	r1, r7
 801d83c:	f7e3 f972 	bl	8000b24 <__aeabi_dcmpge>
 801d840:	b1f8      	cbz	r0, 801d882 <__kernel_rem_pio2+0x462>
 801d842:	4b9d      	ldr	r3, [pc, #628]	; (801dab8 <__kernel_rem_pio2+0x698>)
 801d844:	2200      	movs	r2, #0
 801d846:	4630      	mov	r0, r6
 801d848:	4639      	mov	r1, r7
 801d84a:	f7e2 fee5 	bl	8000618 <__aeabi_dmul>
 801d84e:	f7e3 f993 	bl	8000b78 <__aeabi_d2iz>
 801d852:	4680      	mov	r8, r0
 801d854:	f7e2 fe76 	bl	8000544 <__aeabi_i2d>
 801d858:	4b96      	ldr	r3, [pc, #600]	; (801dab4 <__kernel_rem_pio2+0x694>)
 801d85a:	2200      	movs	r2, #0
 801d85c:	f7e2 fedc 	bl	8000618 <__aeabi_dmul>
 801d860:	460b      	mov	r3, r1
 801d862:	4602      	mov	r2, r0
 801d864:	4639      	mov	r1, r7
 801d866:	4630      	mov	r0, r6
 801d868:	f7e2 fd1e 	bl	80002a8 <__aeabi_dsub>
 801d86c:	f7e3 f984 	bl	8000b78 <__aeabi_d2iz>
 801d870:	1c65      	adds	r5, r4, #1
 801d872:	ab0c      	add	r3, sp, #48	; 0x30
 801d874:	f10a 0a18 	add.w	sl, sl, #24
 801d878:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801d87c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801d880:	e71f      	b.n	801d6c2 <__kernel_rem_pio2+0x2a2>
 801d882:	4630      	mov	r0, r6
 801d884:	4639      	mov	r1, r7
 801d886:	f7e3 f977 	bl	8000b78 <__aeabi_d2iz>
 801d88a:	ab0c      	add	r3, sp, #48	; 0x30
 801d88c:	4625      	mov	r5, r4
 801d88e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801d892:	e716      	b.n	801d6c2 <__kernel_rem_pio2+0x2a2>
 801d894:	ab0c      	add	r3, sp, #48	; 0x30
 801d896:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d89a:	f7e2 fe53 	bl	8000544 <__aeabi_i2d>
 801d89e:	4632      	mov	r2, r6
 801d8a0:	463b      	mov	r3, r7
 801d8a2:	f7e2 feb9 	bl	8000618 <__aeabi_dmul>
 801d8a6:	4642      	mov	r2, r8
 801d8a8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801d8ac:	464b      	mov	r3, r9
 801d8ae:	4630      	mov	r0, r6
 801d8b0:	4639      	mov	r1, r7
 801d8b2:	f7e2 feb1 	bl	8000618 <__aeabi_dmul>
 801d8b6:	3c01      	subs	r4, #1
 801d8b8:	4606      	mov	r6, r0
 801d8ba:	460f      	mov	r7, r1
 801d8bc:	e713      	b.n	801d6e6 <__kernel_rem_pio2+0x2c6>
 801d8be:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801d8c2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801d8c6:	f7e2 fea7 	bl	8000618 <__aeabi_dmul>
 801d8ca:	4602      	mov	r2, r0
 801d8cc:	460b      	mov	r3, r1
 801d8ce:	4648      	mov	r0, r9
 801d8d0:	4651      	mov	r1, sl
 801d8d2:	f7e2 fceb 	bl	80002ac <__adddf3>
 801d8d6:	3701      	adds	r7, #1
 801d8d8:	4681      	mov	r9, r0
 801d8da:	468a      	mov	sl, r1
 801d8dc:	9b00      	ldr	r3, [sp, #0]
 801d8de:	429f      	cmp	r7, r3
 801d8e0:	dc02      	bgt.n	801d8e8 <__kernel_rem_pio2+0x4c8>
 801d8e2:	9b06      	ldr	r3, [sp, #24]
 801d8e4:	429f      	cmp	r7, r3
 801d8e6:	ddea      	ble.n	801d8be <__kernel_rem_pio2+0x49e>
 801d8e8:	9a06      	ldr	r2, [sp, #24]
 801d8ea:	ab48      	add	r3, sp, #288	; 0x120
 801d8ec:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801d8f0:	e9c6 9a00 	strd	r9, sl, [r6]
 801d8f4:	3c01      	subs	r4, #1
 801d8f6:	e6fa      	b.n	801d6ee <__kernel_rem_pio2+0x2ce>
 801d8f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801d8fa:	2b02      	cmp	r3, #2
 801d8fc:	dc0b      	bgt.n	801d916 <__kernel_rem_pio2+0x4f6>
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	dc39      	bgt.n	801d976 <__kernel_rem_pio2+0x556>
 801d902:	d05d      	beq.n	801d9c0 <__kernel_rem_pio2+0x5a0>
 801d904:	9b02      	ldr	r3, [sp, #8]
 801d906:	f003 0007 	and.w	r0, r3, #7
 801d90a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801d90e:	ecbd 8b02 	vpop	{d8}
 801d912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d916:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801d918:	2b03      	cmp	r3, #3
 801d91a:	d1f3      	bne.n	801d904 <__kernel_rem_pio2+0x4e4>
 801d91c:	9b05      	ldr	r3, [sp, #20]
 801d91e:	9500      	str	r5, [sp, #0]
 801d920:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801d924:	eb0d 0403 	add.w	r4, sp, r3
 801d928:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801d92c:	46a2      	mov	sl, r4
 801d92e:	9b00      	ldr	r3, [sp, #0]
 801d930:	2b00      	cmp	r3, #0
 801d932:	f1aa 0a08 	sub.w	sl, sl, #8
 801d936:	dc69      	bgt.n	801da0c <__kernel_rem_pio2+0x5ec>
 801d938:	46aa      	mov	sl, r5
 801d93a:	f1ba 0f01 	cmp.w	sl, #1
 801d93e:	f1a4 0408 	sub.w	r4, r4, #8
 801d942:	f300 8083 	bgt.w	801da4c <__kernel_rem_pio2+0x62c>
 801d946:	9c05      	ldr	r4, [sp, #20]
 801d948:	ab48      	add	r3, sp, #288	; 0x120
 801d94a:	441c      	add	r4, r3
 801d94c:	2000      	movs	r0, #0
 801d94e:	2100      	movs	r1, #0
 801d950:	2d01      	cmp	r5, #1
 801d952:	f300 809a 	bgt.w	801da8a <__kernel_rem_pio2+0x66a>
 801d956:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801d95a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801d95e:	f1bb 0f00 	cmp.w	fp, #0
 801d962:	f040 8098 	bne.w	801da96 <__kernel_rem_pio2+0x676>
 801d966:	9b04      	ldr	r3, [sp, #16]
 801d968:	e9c3 7800 	strd	r7, r8, [r3]
 801d96c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801d970:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801d974:	e7c6      	b.n	801d904 <__kernel_rem_pio2+0x4e4>
 801d976:	9e05      	ldr	r6, [sp, #20]
 801d978:	ab48      	add	r3, sp, #288	; 0x120
 801d97a:	441e      	add	r6, r3
 801d97c:	462c      	mov	r4, r5
 801d97e:	2000      	movs	r0, #0
 801d980:	2100      	movs	r1, #0
 801d982:	2c00      	cmp	r4, #0
 801d984:	da33      	bge.n	801d9ee <__kernel_rem_pio2+0x5ce>
 801d986:	f1bb 0f00 	cmp.w	fp, #0
 801d98a:	d036      	beq.n	801d9fa <__kernel_rem_pio2+0x5da>
 801d98c:	4602      	mov	r2, r0
 801d98e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d992:	9c04      	ldr	r4, [sp, #16]
 801d994:	e9c4 2300 	strd	r2, r3, [r4]
 801d998:	4602      	mov	r2, r0
 801d99a:	460b      	mov	r3, r1
 801d99c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801d9a0:	f7e2 fc82 	bl	80002a8 <__aeabi_dsub>
 801d9a4:	ae4a      	add	r6, sp, #296	; 0x128
 801d9a6:	2401      	movs	r4, #1
 801d9a8:	42a5      	cmp	r5, r4
 801d9aa:	da29      	bge.n	801da00 <__kernel_rem_pio2+0x5e0>
 801d9ac:	f1bb 0f00 	cmp.w	fp, #0
 801d9b0:	d002      	beq.n	801d9b8 <__kernel_rem_pio2+0x598>
 801d9b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d9b6:	4619      	mov	r1, r3
 801d9b8:	9b04      	ldr	r3, [sp, #16]
 801d9ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801d9be:	e7a1      	b.n	801d904 <__kernel_rem_pio2+0x4e4>
 801d9c0:	9c05      	ldr	r4, [sp, #20]
 801d9c2:	ab48      	add	r3, sp, #288	; 0x120
 801d9c4:	441c      	add	r4, r3
 801d9c6:	2000      	movs	r0, #0
 801d9c8:	2100      	movs	r1, #0
 801d9ca:	2d00      	cmp	r5, #0
 801d9cc:	da09      	bge.n	801d9e2 <__kernel_rem_pio2+0x5c2>
 801d9ce:	f1bb 0f00 	cmp.w	fp, #0
 801d9d2:	d002      	beq.n	801d9da <__kernel_rem_pio2+0x5ba>
 801d9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d9d8:	4619      	mov	r1, r3
 801d9da:	9b04      	ldr	r3, [sp, #16]
 801d9dc:	e9c3 0100 	strd	r0, r1, [r3]
 801d9e0:	e790      	b.n	801d904 <__kernel_rem_pio2+0x4e4>
 801d9e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d9e6:	f7e2 fc61 	bl	80002ac <__adddf3>
 801d9ea:	3d01      	subs	r5, #1
 801d9ec:	e7ed      	b.n	801d9ca <__kernel_rem_pio2+0x5aa>
 801d9ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801d9f2:	f7e2 fc5b 	bl	80002ac <__adddf3>
 801d9f6:	3c01      	subs	r4, #1
 801d9f8:	e7c3      	b.n	801d982 <__kernel_rem_pio2+0x562>
 801d9fa:	4602      	mov	r2, r0
 801d9fc:	460b      	mov	r3, r1
 801d9fe:	e7c8      	b.n	801d992 <__kernel_rem_pio2+0x572>
 801da00:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801da04:	f7e2 fc52 	bl	80002ac <__adddf3>
 801da08:	3401      	adds	r4, #1
 801da0a:	e7cd      	b.n	801d9a8 <__kernel_rem_pio2+0x588>
 801da0c:	e9da 8900 	ldrd	r8, r9, [sl]
 801da10:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801da14:	9b00      	ldr	r3, [sp, #0]
 801da16:	3b01      	subs	r3, #1
 801da18:	9300      	str	r3, [sp, #0]
 801da1a:	4632      	mov	r2, r6
 801da1c:	463b      	mov	r3, r7
 801da1e:	4640      	mov	r0, r8
 801da20:	4649      	mov	r1, r9
 801da22:	f7e2 fc43 	bl	80002ac <__adddf3>
 801da26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801da2a:	4602      	mov	r2, r0
 801da2c:	460b      	mov	r3, r1
 801da2e:	4640      	mov	r0, r8
 801da30:	4649      	mov	r1, r9
 801da32:	f7e2 fc39 	bl	80002a8 <__aeabi_dsub>
 801da36:	4632      	mov	r2, r6
 801da38:	463b      	mov	r3, r7
 801da3a:	f7e2 fc37 	bl	80002ac <__adddf3>
 801da3e:	ed9d 7b06 	vldr	d7, [sp, #24]
 801da42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801da46:	ed8a 7b00 	vstr	d7, [sl]
 801da4a:	e770      	b.n	801d92e <__kernel_rem_pio2+0x50e>
 801da4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 801da50:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801da54:	4640      	mov	r0, r8
 801da56:	4632      	mov	r2, r6
 801da58:	463b      	mov	r3, r7
 801da5a:	4649      	mov	r1, r9
 801da5c:	f7e2 fc26 	bl	80002ac <__adddf3>
 801da60:	e9cd 0100 	strd	r0, r1, [sp]
 801da64:	4602      	mov	r2, r0
 801da66:	460b      	mov	r3, r1
 801da68:	4640      	mov	r0, r8
 801da6a:	4649      	mov	r1, r9
 801da6c:	f7e2 fc1c 	bl	80002a8 <__aeabi_dsub>
 801da70:	4632      	mov	r2, r6
 801da72:	463b      	mov	r3, r7
 801da74:	f7e2 fc1a 	bl	80002ac <__adddf3>
 801da78:	ed9d 7b00 	vldr	d7, [sp]
 801da7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801da80:	ed84 7b00 	vstr	d7, [r4]
 801da84:	f10a 3aff 	add.w	sl, sl, #4294967295
 801da88:	e757      	b.n	801d93a <__kernel_rem_pio2+0x51a>
 801da8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801da8e:	f7e2 fc0d 	bl	80002ac <__adddf3>
 801da92:	3d01      	subs	r5, #1
 801da94:	e75c      	b.n	801d950 <__kernel_rem_pio2+0x530>
 801da96:	9b04      	ldr	r3, [sp, #16]
 801da98:	9a04      	ldr	r2, [sp, #16]
 801da9a:	601f      	str	r7, [r3, #0]
 801da9c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801daa0:	605c      	str	r4, [r3, #4]
 801daa2:	609d      	str	r5, [r3, #8]
 801daa4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801daa8:	60d3      	str	r3, [r2, #12]
 801daaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801daae:	6110      	str	r0, [r2, #16]
 801dab0:	6153      	str	r3, [r2, #20]
 801dab2:	e727      	b.n	801d904 <__kernel_rem_pio2+0x4e4>
 801dab4:	41700000 	.word	0x41700000
 801dab8:	3e700000 	.word	0x3e700000

0801dabc <abort>:
 801dabc:	b508      	push	{r3, lr}
 801dabe:	2006      	movs	r0, #6
 801dac0:	f001 ff52 	bl	801f968 <raise>
 801dac4:	2001      	movs	r0, #1
 801dac6:	f7f2 fcd6 	bl	8010476 <_exit>
	...

0801dacc <__assert_func>:
 801dacc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dace:	4614      	mov	r4, r2
 801dad0:	461a      	mov	r2, r3
 801dad2:	4b09      	ldr	r3, [pc, #36]	; (801daf8 <__assert_func+0x2c>)
 801dad4:	681b      	ldr	r3, [r3, #0]
 801dad6:	4605      	mov	r5, r0
 801dad8:	68d8      	ldr	r0, [r3, #12]
 801dada:	b14c      	cbz	r4, 801daf0 <__assert_func+0x24>
 801dadc:	4b07      	ldr	r3, [pc, #28]	; (801dafc <__assert_func+0x30>)
 801dade:	9100      	str	r1, [sp, #0]
 801dae0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dae4:	4906      	ldr	r1, [pc, #24]	; (801db00 <__assert_func+0x34>)
 801dae6:	462b      	mov	r3, r5
 801dae8:	f001 fe44 	bl	801f774 <fiprintf>
 801daec:	f7ff ffe6 	bl	801dabc <abort>
 801daf0:	4b04      	ldr	r3, [pc, #16]	; (801db04 <__assert_func+0x38>)
 801daf2:	461c      	mov	r4, r3
 801daf4:	e7f3      	b.n	801dade <__assert_func+0x12>
 801daf6:	bf00      	nop
 801daf8:	200004b4 	.word	0x200004b4
 801dafc:	0802d050 	.word	0x0802d050
 801db00:	0802d05d 	.word	0x0802d05d
 801db04:	0802d08b 	.word	0x0802d08b

0801db08 <atof>:
 801db08:	2100      	movs	r1, #0
 801db0a:	f000 bf1f 	b.w	801e94c <strtod>
	...

0801db10 <calloc>:
 801db10:	4b02      	ldr	r3, [pc, #8]	; (801db1c <calloc+0xc>)
 801db12:	460a      	mov	r2, r1
 801db14:	4601      	mov	r1, r0
 801db16:	6818      	ldr	r0, [r3, #0]
 801db18:	f000 b802 	b.w	801db20 <_calloc_r>
 801db1c:	200004b4 	.word	0x200004b4

0801db20 <_calloc_r>:
 801db20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801db22:	fba1 2402 	umull	r2, r4, r1, r2
 801db26:	b94c      	cbnz	r4, 801db3c <_calloc_r+0x1c>
 801db28:	4611      	mov	r1, r2
 801db2a:	9201      	str	r2, [sp, #4]
 801db2c:	f000 f83e 	bl	801dbac <_malloc_r>
 801db30:	9a01      	ldr	r2, [sp, #4]
 801db32:	4605      	mov	r5, r0
 801db34:	b930      	cbnz	r0, 801db44 <_calloc_r+0x24>
 801db36:	4628      	mov	r0, r5
 801db38:	b003      	add	sp, #12
 801db3a:	bd30      	pop	{r4, r5, pc}
 801db3c:	220c      	movs	r2, #12
 801db3e:	6002      	str	r2, [r0, #0]
 801db40:	2500      	movs	r5, #0
 801db42:	e7f8      	b.n	801db36 <_calloc_r+0x16>
 801db44:	4621      	mov	r1, r4
 801db46:	f001 fecd 	bl	801f8e4 <memset>
 801db4a:	e7f4      	b.n	801db36 <_calloc_r+0x16>

0801db4c <malloc>:
 801db4c:	4b02      	ldr	r3, [pc, #8]	; (801db58 <malloc+0xc>)
 801db4e:	4601      	mov	r1, r0
 801db50:	6818      	ldr	r0, [r3, #0]
 801db52:	f000 b82b 	b.w	801dbac <_malloc_r>
 801db56:	bf00      	nop
 801db58:	200004b4 	.word	0x200004b4

0801db5c <free>:
 801db5c:	4b02      	ldr	r3, [pc, #8]	; (801db68 <free+0xc>)
 801db5e:	4601      	mov	r1, r0
 801db60:	6818      	ldr	r0, [r3, #0]
 801db62:	f002 be2b 	b.w	80207bc <_free_r>
 801db66:	bf00      	nop
 801db68:	200004b4 	.word	0x200004b4

0801db6c <sbrk_aligned>:
 801db6c:	b570      	push	{r4, r5, r6, lr}
 801db6e:	4e0e      	ldr	r6, [pc, #56]	; (801dba8 <sbrk_aligned+0x3c>)
 801db70:	460c      	mov	r4, r1
 801db72:	6831      	ldr	r1, [r6, #0]
 801db74:	4605      	mov	r5, r0
 801db76:	b911      	cbnz	r1, 801db7e <sbrk_aligned+0x12>
 801db78:	f001 ff4a 	bl	801fa10 <_sbrk_r>
 801db7c:	6030      	str	r0, [r6, #0]
 801db7e:	4621      	mov	r1, r4
 801db80:	4628      	mov	r0, r5
 801db82:	f001 ff45 	bl	801fa10 <_sbrk_r>
 801db86:	1c43      	adds	r3, r0, #1
 801db88:	d00a      	beq.n	801dba0 <sbrk_aligned+0x34>
 801db8a:	1cc4      	adds	r4, r0, #3
 801db8c:	f024 0403 	bic.w	r4, r4, #3
 801db90:	42a0      	cmp	r0, r4
 801db92:	d007      	beq.n	801dba4 <sbrk_aligned+0x38>
 801db94:	1a21      	subs	r1, r4, r0
 801db96:	4628      	mov	r0, r5
 801db98:	f001 ff3a 	bl	801fa10 <_sbrk_r>
 801db9c:	3001      	adds	r0, #1
 801db9e:	d101      	bne.n	801dba4 <sbrk_aligned+0x38>
 801dba0:	f04f 34ff 	mov.w	r4, #4294967295
 801dba4:	4620      	mov	r0, r4
 801dba6:	bd70      	pop	{r4, r5, r6, pc}
 801dba8:	20001164 	.word	0x20001164

0801dbac <_malloc_r>:
 801dbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dbb0:	1ccd      	adds	r5, r1, #3
 801dbb2:	f025 0503 	bic.w	r5, r5, #3
 801dbb6:	3508      	adds	r5, #8
 801dbb8:	2d0c      	cmp	r5, #12
 801dbba:	bf38      	it	cc
 801dbbc:	250c      	movcc	r5, #12
 801dbbe:	2d00      	cmp	r5, #0
 801dbc0:	4607      	mov	r7, r0
 801dbc2:	db01      	blt.n	801dbc8 <_malloc_r+0x1c>
 801dbc4:	42a9      	cmp	r1, r5
 801dbc6:	d905      	bls.n	801dbd4 <_malloc_r+0x28>
 801dbc8:	230c      	movs	r3, #12
 801dbca:	603b      	str	r3, [r7, #0]
 801dbcc:	2600      	movs	r6, #0
 801dbce:	4630      	mov	r0, r6
 801dbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801dca8 <_malloc_r+0xfc>
 801dbd8:	f000 f868 	bl	801dcac <__malloc_lock>
 801dbdc:	f8d8 3000 	ldr.w	r3, [r8]
 801dbe0:	461c      	mov	r4, r3
 801dbe2:	bb5c      	cbnz	r4, 801dc3c <_malloc_r+0x90>
 801dbe4:	4629      	mov	r1, r5
 801dbe6:	4638      	mov	r0, r7
 801dbe8:	f7ff ffc0 	bl	801db6c <sbrk_aligned>
 801dbec:	1c43      	adds	r3, r0, #1
 801dbee:	4604      	mov	r4, r0
 801dbf0:	d155      	bne.n	801dc9e <_malloc_r+0xf2>
 801dbf2:	f8d8 4000 	ldr.w	r4, [r8]
 801dbf6:	4626      	mov	r6, r4
 801dbf8:	2e00      	cmp	r6, #0
 801dbfa:	d145      	bne.n	801dc88 <_malloc_r+0xdc>
 801dbfc:	2c00      	cmp	r4, #0
 801dbfe:	d048      	beq.n	801dc92 <_malloc_r+0xe6>
 801dc00:	6823      	ldr	r3, [r4, #0]
 801dc02:	4631      	mov	r1, r6
 801dc04:	4638      	mov	r0, r7
 801dc06:	eb04 0903 	add.w	r9, r4, r3
 801dc0a:	f001 ff01 	bl	801fa10 <_sbrk_r>
 801dc0e:	4581      	cmp	r9, r0
 801dc10:	d13f      	bne.n	801dc92 <_malloc_r+0xe6>
 801dc12:	6821      	ldr	r1, [r4, #0]
 801dc14:	1a6d      	subs	r5, r5, r1
 801dc16:	4629      	mov	r1, r5
 801dc18:	4638      	mov	r0, r7
 801dc1a:	f7ff ffa7 	bl	801db6c <sbrk_aligned>
 801dc1e:	3001      	adds	r0, #1
 801dc20:	d037      	beq.n	801dc92 <_malloc_r+0xe6>
 801dc22:	6823      	ldr	r3, [r4, #0]
 801dc24:	442b      	add	r3, r5
 801dc26:	6023      	str	r3, [r4, #0]
 801dc28:	f8d8 3000 	ldr.w	r3, [r8]
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d038      	beq.n	801dca2 <_malloc_r+0xf6>
 801dc30:	685a      	ldr	r2, [r3, #4]
 801dc32:	42a2      	cmp	r2, r4
 801dc34:	d12b      	bne.n	801dc8e <_malloc_r+0xe2>
 801dc36:	2200      	movs	r2, #0
 801dc38:	605a      	str	r2, [r3, #4]
 801dc3a:	e00f      	b.n	801dc5c <_malloc_r+0xb0>
 801dc3c:	6822      	ldr	r2, [r4, #0]
 801dc3e:	1b52      	subs	r2, r2, r5
 801dc40:	d41f      	bmi.n	801dc82 <_malloc_r+0xd6>
 801dc42:	2a0b      	cmp	r2, #11
 801dc44:	d917      	bls.n	801dc76 <_malloc_r+0xca>
 801dc46:	1961      	adds	r1, r4, r5
 801dc48:	42a3      	cmp	r3, r4
 801dc4a:	6025      	str	r5, [r4, #0]
 801dc4c:	bf18      	it	ne
 801dc4e:	6059      	strne	r1, [r3, #4]
 801dc50:	6863      	ldr	r3, [r4, #4]
 801dc52:	bf08      	it	eq
 801dc54:	f8c8 1000 	streq.w	r1, [r8]
 801dc58:	5162      	str	r2, [r4, r5]
 801dc5a:	604b      	str	r3, [r1, #4]
 801dc5c:	4638      	mov	r0, r7
 801dc5e:	f104 060b 	add.w	r6, r4, #11
 801dc62:	f000 f829 	bl	801dcb8 <__malloc_unlock>
 801dc66:	f026 0607 	bic.w	r6, r6, #7
 801dc6a:	1d23      	adds	r3, r4, #4
 801dc6c:	1af2      	subs	r2, r6, r3
 801dc6e:	d0ae      	beq.n	801dbce <_malloc_r+0x22>
 801dc70:	1b9b      	subs	r3, r3, r6
 801dc72:	50a3      	str	r3, [r4, r2]
 801dc74:	e7ab      	b.n	801dbce <_malloc_r+0x22>
 801dc76:	42a3      	cmp	r3, r4
 801dc78:	6862      	ldr	r2, [r4, #4]
 801dc7a:	d1dd      	bne.n	801dc38 <_malloc_r+0x8c>
 801dc7c:	f8c8 2000 	str.w	r2, [r8]
 801dc80:	e7ec      	b.n	801dc5c <_malloc_r+0xb0>
 801dc82:	4623      	mov	r3, r4
 801dc84:	6864      	ldr	r4, [r4, #4]
 801dc86:	e7ac      	b.n	801dbe2 <_malloc_r+0x36>
 801dc88:	4634      	mov	r4, r6
 801dc8a:	6876      	ldr	r6, [r6, #4]
 801dc8c:	e7b4      	b.n	801dbf8 <_malloc_r+0x4c>
 801dc8e:	4613      	mov	r3, r2
 801dc90:	e7cc      	b.n	801dc2c <_malloc_r+0x80>
 801dc92:	230c      	movs	r3, #12
 801dc94:	603b      	str	r3, [r7, #0]
 801dc96:	4638      	mov	r0, r7
 801dc98:	f000 f80e 	bl	801dcb8 <__malloc_unlock>
 801dc9c:	e797      	b.n	801dbce <_malloc_r+0x22>
 801dc9e:	6025      	str	r5, [r4, #0]
 801dca0:	e7dc      	b.n	801dc5c <_malloc_r+0xb0>
 801dca2:	605b      	str	r3, [r3, #4]
 801dca4:	deff      	udf	#255	; 0xff
 801dca6:	bf00      	nop
 801dca8:	20001160 	.word	0x20001160

0801dcac <__malloc_lock>:
 801dcac:	4801      	ldr	r0, [pc, #4]	; (801dcb4 <__malloc_lock+0x8>)
 801dcae:	f001 befb 	b.w	801faa8 <__retarget_lock_acquire_recursive>
 801dcb2:	bf00      	nop
 801dcb4:	200012a8 	.word	0x200012a8

0801dcb8 <__malloc_unlock>:
 801dcb8:	4801      	ldr	r0, [pc, #4]	; (801dcc0 <__malloc_unlock+0x8>)
 801dcba:	f001 bef6 	b.w	801faaa <__retarget_lock_release_recursive>
 801dcbe:	bf00      	nop
 801dcc0:	200012a8 	.word	0x200012a8

0801dcc4 <_realloc_r>:
 801dcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dcc8:	4680      	mov	r8, r0
 801dcca:	4614      	mov	r4, r2
 801dccc:	460e      	mov	r6, r1
 801dcce:	b921      	cbnz	r1, 801dcda <_realloc_r+0x16>
 801dcd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dcd4:	4611      	mov	r1, r2
 801dcd6:	f7ff bf69 	b.w	801dbac <_malloc_r>
 801dcda:	b92a      	cbnz	r2, 801dce8 <_realloc_r+0x24>
 801dcdc:	f002 fd6e 	bl	80207bc <_free_r>
 801dce0:	4625      	mov	r5, r4
 801dce2:	4628      	mov	r0, r5
 801dce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dce8:	f003 fdcb 	bl	8021882 <_malloc_usable_size_r>
 801dcec:	4284      	cmp	r4, r0
 801dcee:	4607      	mov	r7, r0
 801dcf0:	d802      	bhi.n	801dcf8 <_realloc_r+0x34>
 801dcf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801dcf6:	d812      	bhi.n	801dd1e <_realloc_r+0x5a>
 801dcf8:	4621      	mov	r1, r4
 801dcfa:	4640      	mov	r0, r8
 801dcfc:	f7ff ff56 	bl	801dbac <_malloc_r>
 801dd00:	4605      	mov	r5, r0
 801dd02:	2800      	cmp	r0, #0
 801dd04:	d0ed      	beq.n	801dce2 <_realloc_r+0x1e>
 801dd06:	42bc      	cmp	r4, r7
 801dd08:	4622      	mov	r2, r4
 801dd0a:	4631      	mov	r1, r6
 801dd0c:	bf28      	it	cs
 801dd0e:	463a      	movcs	r2, r7
 801dd10:	f001 fecc 	bl	801faac <memcpy>
 801dd14:	4631      	mov	r1, r6
 801dd16:	4640      	mov	r0, r8
 801dd18:	f002 fd50 	bl	80207bc <_free_r>
 801dd1c:	e7e1      	b.n	801dce2 <_realloc_r+0x1e>
 801dd1e:	4635      	mov	r5, r6
 801dd20:	e7df      	b.n	801dce2 <_realloc_r+0x1e>

0801dd22 <sulp>:
 801dd22:	b570      	push	{r4, r5, r6, lr}
 801dd24:	4604      	mov	r4, r0
 801dd26:	460d      	mov	r5, r1
 801dd28:	ec45 4b10 	vmov	d0, r4, r5
 801dd2c:	4616      	mov	r6, r2
 801dd2e:	f003 fc67 	bl	8021600 <__ulp>
 801dd32:	ec51 0b10 	vmov	r0, r1, d0
 801dd36:	b17e      	cbz	r6, 801dd58 <sulp+0x36>
 801dd38:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801dd3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	dd09      	ble.n	801dd58 <sulp+0x36>
 801dd44:	051b      	lsls	r3, r3, #20
 801dd46:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801dd4a:	2400      	movs	r4, #0
 801dd4c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801dd50:	4622      	mov	r2, r4
 801dd52:	462b      	mov	r3, r5
 801dd54:	f7e2 fc60 	bl	8000618 <__aeabi_dmul>
 801dd58:	bd70      	pop	{r4, r5, r6, pc}
 801dd5a:	0000      	movs	r0, r0
 801dd5c:	0000      	movs	r0, r0
	...

0801dd60 <_strtod_l>:
 801dd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd64:	ed2d 8b02 	vpush	{d8}
 801dd68:	b09b      	sub	sp, #108	; 0x6c
 801dd6a:	4604      	mov	r4, r0
 801dd6c:	9213      	str	r2, [sp, #76]	; 0x4c
 801dd6e:	2200      	movs	r2, #0
 801dd70:	9216      	str	r2, [sp, #88]	; 0x58
 801dd72:	460d      	mov	r5, r1
 801dd74:	f04f 0800 	mov.w	r8, #0
 801dd78:	f04f 0900 	mov.w	r9, #0
 801dd7c:	460a      	mov	r2, r1
 801dd7e:	9215      	str	r2, [sp, #84]	; 0x54
 801dd80:	7811      	ldrb	r1, [r2, #0]
 801dd82:	292b      	cmp	r1, #43	; 0x2b
 801dd84:	d04c      	beq.n	801de20 <_strtod_l+0xc0>
 801dd86:	d83a      	bhi.n	801ddfe <_strtod_l+0x9e>
 801dd88:	290d      	cmp	r1, #13
 801dd8a:	d834      	bhi.n	801ddf6 <_strtod_l+0x96>
 801dd8c:	2908      	cmp	r1, #8
 801dd8e:	d834      	bhi.n	801ddfa <_strtod_l+0x9a>
 801dd90:	2900      	cmp	r1, #0
 801dd92:	d03d      	beq.n	801de10 <_strtod_l+0xb0>
 801dd94:	2200      	movs	r2, #0
 801dd96:	920a      	str	r2, [sp, #40]	; 0x28
 801dd98:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801dd9a:	7832      	ldrb	r2, [r6, #0]
 801dd9c:	2a30      	cmp	r2, #48	; 0x30
 801dd9e:	f040 80b4 	bne.w	801df0a <_strtod_l+0x1aa>
 801dda2:	7872      	ldrb	r2, [r6, #1]
 801dda4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801dda8:	2a58      	cmp	r2, #88	; 0x58
 801ddaa:	d170      	bne.n	801de8e <_strtod_l+0x12e>
 801ddac:	9302      	str	r3, [sp, #8]
 801ddae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddb0:	9301      	str	r3, [sp, #4]
 801ddb2:	ab16      	add	r3, sp, #88	; 0x58
 801ddb4:	9300      	str	r3, [sp, #0]
 801ddb6:	4a8e      	ldr	r2, [pc, #568]	; (801dff0 <_strtod_l+0x290>)
 801ddb8:	ab17      	add	r3, sp, #92	; 0x5c
 801ddba:	a915      	add	r1, sp, #84	; 0x54
 801ddbc:	4620      	mov	r0, r4
 801ddbe:	f002 fdb1 	bl	8020924 <__gethex>
 801ddc2:	f010 070f 	ands.w	r7, r0, #15
 801ddc6:	4605      	mov	r5, r0
 801ddc8:	d005      	beq.n	801ddd6 <_strtod_l+0x76>
 801ddca:	2f06      	cmp	r7, #6
 801ddcc:	d12a      	bne.n	801de24 <_strtod_l+0xc4>
 801ddce:	3601      	adds	r6, #1
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	9615      	str	r6, [sp, #84]	; 0x54
 801ddd4:	930a      	str	r3, [sp, #40]	; 0x28
 801ddd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	f040 857f 	bne.w	801e8dc <_strtod_l+0xb7c>
 801ddde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dde0:	b1db      	cbz	r3, 801de1a <_strtod_l+0xba>
 801dde2:	4642      	mov	r2, r8
 801dde4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801dde8:	ec43 2b10 	vmov	d0, r2, r3
 801ddec:	b01b      	add	sp, #108	; 0x6c
 801ddee:	ecbd 8b02 	vpop	{d8}
 801ddf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddf6:	2920      	cmp	r1, #32
 801ddf8:	d1cc      	bne.n	801dd94 <_strtod_l+0x34>
 801ddfa:	3201      	adds	r2, #1
 801ddfc:	e7bf      	b.n	801dd7e <_strtod_l+0x1e>
 801ddfe:	292d      	cmp	r1, #45	; 0x2d
 801de00:	d1c8      	bne.n	801dd94 <_strtod_l+0x34>
 801de02:	2101      	movs	r1, #1
 801de04:	910a      	str	r1, [sp, #40]	; 0x28
 801de06:	1c51      	adds	r1, r2, #1
 801de08:	9115      	str	r1, [sp, #84]	; 0x54
 801de0a:	7852      	ldrb	r2, [r2, #1]
 801de0c:	2a00      	cmp	r2, #0
 801de0e:	d1c3      	bne.n	801dd98 <_strtod_l+0x38>
 801de10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801de12:	9515      	str	r5, [sp, #84]	; 0x54
 801de14:	2b00      	cmp	r3, #0
 801de16:	f040 855f 	bne.w	801e8d8 <_strtod_l+0xb78>
 801de1a:	4642      	mov	r2, r8
 801de1c:	464b      	mov	r3, r9
 801de1e:	e7e3      	b.n	801dde8 <_strtod_l+0x88>
 801de20:	2100      	movs	r1, #0
 801de22:	e7ef      	b.n	801de04 <_strtod_l+0xa4>
 801de24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801de26:	b13a      	cbz	r2, 801de38 <_strtod_l+0xd8>
 801de28:	2135      	movs	r1, #53	; 0x35
 801de2a:	a818      	add	r0, sp, #96	; 0x60
 801de2c:	f003 fce5 	bl	80217fa <__copybits>
 801de30:	9916      	ldr	r1, [sp, #88]	; 0x58
 801de32:	4620      	mov	r0, r4
 801de34:	f003 f8b8 	bl	8020fa8 <_Bfree>
 801de38:	3f01      	subs	r7, #1
 801de3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801de3c:	2f04      	cmp	r7, #4
 801de3e:	d806      	bhi.n	801de4e <_strtod_l+0xee>
 801de40:	e8df f007 	tbb	[pc, r7]
 801de44:	201d0314 	.word	0x201d0314
 801de48:	14          	.byte	0x14
 801de49:	00          	.byte	0x00
 801de4a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801de4e:	05e9      	lsls	r1, r5, #23
 801de50:	bf48      	it	mi
 801de52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801de56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801de5a:	0d1b      	lsrs	r3, r3, #20
 801de5c:	051b      	lsls	r3, r3, #20
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d1b9      	bne.n	801ddd6 <_strtod_l+0x76>
 801de62:	f001 fdf7 	bl	801fa54 <__errno>
 801de66:	2322      	movs	r3, #34	; 0x22
 801de68:	6003      	str	r3, [r0, #0]
 801de6a:	e7b4      	b.n	801ddd6 <_strtod_l+0x76>
 801de6c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801de70:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801de74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801de78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801de7c:	e7e7      	b.n	801de4e <_strtod_l+0xee>
 801de7e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801dff8 <_strtod_l+0x298>
 801de82:	e7e4      	b.n	801de4e <_strtod_l+0xee>
 801de84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801de88:	f04f 38ff 	mov.w	r8, #4294967295
 801de8c:	e7df      	b.n	801de4e <_strtod_l+0xee>
 801de8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801de90:	1c5a      	adds	r2, r3, #1
 801de92:	9215      	str	r2, [sp, #84]	; 0x54
 801de94:	785b      	ldrb	r3, [r3, #1]
 801de96:	2b30      	cmp	r3, #48	; 0x30
 801de98:	d0f9      	beq.n	801de8e <_strtod_l+0x12e>
 801de9a:	2b00      	cmp	r3, #0
 801de9c:	d09b      	beq.n	801ddd6 <_strtod_l+0x76>
 801de9e:	2301      	movs	r3, #1
 801dea0:	f04f 0a00 	mov.w	sl, #0
 801dea4:	9304      	str	r3, [sp, #16]
 801dea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dea8:	930b      	str	r3, [sp, #44]	; 0x2c
 801deaa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801deae:	46d3      	mov	fp, sl
 801deb0:	220a      	movs	r2, #10
 801deb2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801deb4:	7806      	ldrb	r6, [r0, #0]
 801deb6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801deba:	b2d9      	uxtb	r1, r3
 801debc:	2909      	cmp	r1, #9
 801debe:	d926      	bls.n	801df0e <_strtod_l+0x1ae>
 801dec0:	494c      	ldr	r1, [pc, #304]	; (801dff4 <_strtod_l+0x294>)
 801dec2:	2201      	movs	r2, #1
 801dec4:	f001 fd16 	bl	801f8f4 <strncmp>
 801dec8:	2800      	cmp	r0, #0
 801deca:	d030      	beq.n	801df2e <_strtod_l+0x1ce>
 801decc:	2000      	movs	r0, #0
 801dece:	4632      	mov	r2, r6
 801ded0:	9005      	str	r0, [sp, #20]
 801ded2:	465e      	mov	r6, fp
 801ded4:	4603      	mov	r3, r0
 801ded6:	2a65      	cmp	r2, #101	; 0x65
 801ded8:	d001      	beq.n	801dede <_strtod_l+0x17e>
 801deda:	2a45      	cmp	r2, #69	; 0x45
 801dedc:	d113      	bne.n	801df06 <_strtod_l+0x1a6>
 801dede:	b91e      	cbnz	r6, 801dee8 <_strtod_l+0x188>
 801dee0:	9a04      	ldr	r2, [sp, #16]
 801dee2:	4302      	orrs	r2, r0
 801dee4:	d094      	beq.n	801de10 <_strtod_l+0xb0>
 801dee6:	2600      	movs	r6, #0
 801dee8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801deea:	1c6a      	adds	r2, r5, #1
 801deec:	9215      	str	r2, [sp, #84]	; 0x54
 801deee:	786a      	ldrb	r2, [r5, #1]
 801def0:	2a2b      	cmp	r2, #43	; 0x2b
 801def2:	d074      	beq.n	801dfde <_strtod_l+0x27e>
 801def4:	2a2d      	cmp	r2, #45	; 0x2d
 801def6:	d078      	beq.n	801dfea <_strtod_l+0x28a>
 801def8:	f04f 0c00 	mov.w	ip, #0
 801defc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801df00:	2909      	cmp	r1, #9
 801df02:	d97f      	bls.n	801e004 <_strtod_l+0x2a4>
 801df04:	9515      	str	r5, [sp, #84]	; 0x54
 801df06:	2700      	movs	r7, #0
 801df08:	e09e      	b.n	801e048 <_strtod_l+0x2e8>
 801df0a:	2300      	movs	r3, #0
 801df0c:	e7c8      	b.n	801dea0 <_strtod_l+0x140>
 801df0e:	f1bb 0f08 	cmp.w	fp, #8
 801df12:	bfd8      	it	le
 801df14:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801df16:	f100 0001 	add.w	r0, r0, #1
 801df1a:	bfda      	itte	le
 801df1c:	fb02 3301 	mlale	r3, r2, r1, r3
 801df20:	9309      	strle	r3, [sp, #36]	; 0x24
 801df22:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801df26:	f10b 0b01 	add.w	fp, fp, #1
 801df2a:	9015      	str	r0, [sp, #84]	; 0x54
 801df2c:	e7c1      	b.n	801deb2 <_strtod_l+0x152>
 801df2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801df30:	1c5a      	adds	r2, r3, #1
 801df32:	9215      	str	r2, [sp, #84]	; 0x54
 801df34:	785a      	ldrb	r2, [r3, #1]
 801df36:	f1bb 0f00 	cmp.w	fp, #0
 801df3a:	d037      	beq.n	801dfac <_strtod_l+0x24c>
 801df3c:	9005      	str	r0, [sp, #20]
 801df3e:	465e      	mov	r6, fp
 801df40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801df44:	2b09      	cmp	r3, #9
 801df46:	d912      	bls.n	801df6e <_strtod_l+0x20e>
 801df48:	2301      	movs	r3, #1
 801df4a:	e7c4      	b.n	801ded6 <_strtod_l+0x176>
 801df4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801df4e:	1c5a      	adds	r2, r3, #1
 801df50:	9215      	str	r2, [sp, #84]	; 0x54
 801df52:	785a      	ldrb	r2, [r3, #1]
 801df54:	3001      	adds	r0, #1
 801df56:	2a30      	cmp	r2, #48	; 0x30
 801df58:	d0f8      	beq.n	801df4c <_strtod_l+0x1ec>
 801df5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801df5e:	2b08      	cmp	r3, #8
 801df60:	f200 84c1 	bhi.w	801e8e6 <_strtod_l+0xb86>
 801df64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801df66:	9005      	str	r0, [sp, #20]
 801df68:	2000      	movs	r0, #0
 801df6a:	930b      	str	r3, [sp, #44]	; 0x2c
 801df6c:	4606      	mov	r6, r0
 801df6e:	3a30      	subs	r2, #48	; 0x30
 801df70:	f100 0301 	add.w	r3, r0, #1
 801df74:	d014      	beq.n	801dfa0 <_strtod_l+0x240>
 801df76:	9905      	ldr	r1, [sp, #20]
 801df78:	4419      	add	r1, r3
 801df7a:	9105      	str	r1, [sp, #20]
 801df7c:	4633      	mov	r3, r6
 801df7e:	eb00 0c06 	add.w	ip, r0, r6
 801df82:	210a      	movs	r1, #10
 801df84:	4563      	cmp	r3, ip
 801df86:	d113      	bne.n	801dfb0 <_strtod_l+0x250>
 801df88:	1833      	adds	r3, r6, r0
 801df8a:	2b08      	cmp	r3, #8
 801df8c:	f106 0601 	add.w	r6, r6, #1
 801df90:	4406      	add	r6, r0
 801df92:	dc1a      	bgt.n	801dfca <_strtod_l+0x26a>
 801df94:	9909      	ldr	r1, [sp, #36]	; 0x24
 801df96:	230a      	movs	r3, #10
 801df98:	fb03 2301 	mla	r3, r3, r1, r2
 801df9c:	9309      	str	r3, [sp, #36]	; 0x24
 801df9e:	2300      	movs	r3, #0
 801dfa0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dfa2:	1c51      	adds	r1, r2, #1
 801dfa4:	9115      	str	r1, [sp, #84]	; 0x54
 801dfa6:	7852      	ldrb	r2, [r2, #1]
 801dfa8:	4618      	mov	r0, r3
 801dfaa:	e7c9      	b.n	801df40 <_strtod_l+0x1e0>
 801dfac:	4658      	mov	r0, fp
 801dfae:	e7d2      	b.n	801df56 <_strtod_l+0x1f6>
 801dfb0:	2b08      	cmp	r3, #8
 801dfb2:	f103 0301 	add.w	r3, r3, #1
 801dfb6:	dc03      	bgt.n	801dfc0 <_strtod_l+0x260>
 801dfb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801dfba:	434f      	muls	r7, r1
 801dfbc:	9709      	str	r7, [sp, #36]	; 0x24
 801dfbe:	e7e1      	b.n	801df84 <_strtod_l+0x224>
 801dfc0:	2b10      	cmp	r3, #16
 801dfc2:	bfd8      	it	le
 801dfc4:	fb01 fa0a 	mulle.w	sl, r1, sl
 801dfc8:	e7dc      	b.n	801df84 <_strtod_l+0x224>
 801dfca:	2e10      	cmp	r6, #16
 801dfcc:	bfdc      	itt	le
 801dfce:	230a      	movle	r3, #10
 801dfd0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801dfd4:	e7e3      	b.n	801df9e <_strtod_l+0x23e>
 801dfd6:	2300      	movs	r3, #0
 801dfd8:	9305      	str	r3, [sp, #20]
 801dfda:	2301      	movs	r3, #1
 801dfdc:	e780      	b.n	801dee0 <_strtod_l+0x180>
 801dfde:	f04f 0c00 	mov.w	ip, #0
 801dfe2:	1caa      	adds	r2, r5, #2
 801dfe4:	9215      	str	r2, [sp, #84]	; 0x54
 801dfe6:	78aa      	ldrb	r2, [r5, #2]
 801dfe8:	e788      	b.n	801defc <_strtod_l+0x19c>
 801dfea:	f04f 0c01 	mov.w	ip, #1
 801dfee:	e7f8      	b.n	801dfe2 <_strtod_l+0x282>
 801dff0:	0802d090 	.word	0x0802d090
 801dff4:	0802d08c 	.word	0x0802d08c
 801dff8:	7ff00000 	.word	0x7ff00000
 801dffc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dffe:	1c51      	adds	r1, r2, #1
 801e000:	9115      	str	r1, [sp, #84]	; 0x54
 801e002:	7852      	ldrb	r2, [r2, #1]
 801e004:	2a30      	cmp	r2, #48	; 0x30
 801e006:	d0f9      	beq.n	801dffc <_strtod_l+0x29c>
 801e008:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801e00c:	2908      	cmp	r1, #8
 801e00e:	f63f af7a 	bhi.w	801df06 <_strtod_l+0x1a6>
 801e012:	3a30      	subs	r2, #48	; 0x30
 801e014:	9208      	str	r2, [sp, #32]
 801e016:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e018:	920c      	str	r2, [sp, #48]	; 0x30
 801e01a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e01c:	1c57      	adds	r7, r2, #1
 801e01e:	9715      	str	r7, [sp, #84]	; 0x54
 801e020:	7852      	ldrb	r2, [r2, #1]
 801e022:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801e026:	f1be 0f09 	cmp.w	lr, #9
 801e02a:	d938      	bls.n	801e09e <_strtod_l+0x33e>
 801e02c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e02e:	1a7f      	subs	r7, r7, r1
 801e030:	2f08      	cmp	r7, #8
 801e032:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801e036:	dc03      	bgt.n	801e040 <_strtod_l+0x2e0>
 801e038:	9908      	ldr	r1, [sp, #32]
 801e03a:	428f      	cmp	r7, r1
 801e03c:	bfa8      	it	ge
 801e03e:	460f      	movge	r7, r1
 801e040:	f1bc 0f00 	cmp.w	ip, #0
 801e044:	d000      	beq.n	801e048 <_strtod_l+0x2e8>
 801e046:	427f      	negs	r7, r7
 801e048:	2e00      	cmp	r6, #0
 801e04a:	d14f      	bne.n	801e0ec <_strtod_l+0x38c>
 801e04c:	9904      	ldr	r1, [sp, #16]
 801e04e:	4301      	orrs	r1, r0
 801e050:	f47f aec1 	bne.w	801ddd6 <_strtod_l+0x76>
 801e054:	2b00      	cmp	r3, #0
 801e056:	f47f aedb 	bne.w	801de10 <_strtod_l+0xb0>
 801e05a:	2a69      	cmp	r2, #105	; 0x69
 801e05c:	d029      	beq.n	801e0b2 <_strtod_l+0x352>
 801e05e:	dc26      	bgt.n	801e0ae <_strtod_l+0x34e>
 801e060:	2a49      	cmp	r2, #73	; 0x49
 801e062:	d026      	beq.n	801e0b2 <_strtod_l+0x352>
 801e064:	2a4e      	cmp	r2, #78	; 0x4e
 801e066:	f47f aed3 	bne.w	801de10 <_strtod_l+0xb0>
 801e06a:	499b      	ldr	r1, [pc, #620]	; (801e2d8 <_strtod_l+0x578>)
 801e06c:	a815      	add	r0, sp, #84	; 0x54
 801e06e:	f002 fe99 	bl	8020da4 <__match>
 801e072:	2800      	cmp	r0, #0
 801e074:	f43f aecc 	beq.w	801de10 <_strtod_l+0xb0>
 801e078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e07a:	781b      	ldrb	r3, [r3, #0]
 801e07c:	2b28      	cmp	r3, #40	; 0x28
 801e07e:	d12f      	bne.n	801e0e0 <_strtod_l+0x380>
 801e080:	4996      	ldr	r1, [pc, #600]	; (801e2dc <_strtod_l+0x57c>)
 801e082:	aa18      	add	r2, sp, #96	; 0x60
 801e084:	a815      	add	r0, sp, #84	; 0x54
 801e086:	f002 fea1 	bl	8020dcc <__hexnan>
 801e08a:	2805      	cmp	r0, #5
 801e08c:	d128      	bne.n	801e0e0 <_strtod_l+0x380>
 801e08e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e090:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e094:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801e098:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801e09c:	e69b      	b.n	801ddd6 <_strtod_l+0x76>
 801e09e:	9f08      	ldr	r7, [sp, #32]
 801e0a0:	210a      	movs	r1, #10
 801e0a2:	fb01 2107 	mla	r1, r1, r7, r2
 801e0a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801e0aa:	9208      	str	r2, [sp, #32]
 801e0ac:	e7b5      	b.n	801e01a <_strtod_l+0x2ba>
 801e0ae:	2a6e      	cmp	r2, #110	; 0x6e
 801e0b0:	e7d9      	b.n	801e066 <_strtod_l+0x306>
 801e0b2:	498b      	ldr	r1, [pc, #556]	; (801e2e0 <_strtod_l+0x580>)
 801e0b4:	a815      	add	r0, sp, #84	; 0x54
 801e0b6:	f002 fe75 	bl	8020da4 <__match>
 801e0ba:	2800      	cmp	r0, #0
 801e0bc:	f43f aea8 	beq.w	801de10 <_strtod_l+0xb0>
 801e0c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e0c2:	4988      	ldr	r1, [pc, #544]	; (801e2e4 <_strtod_l+0x584>)
 801e0c4:	3b01      	subs	r3, #1
 801e0c6:	a815      	add	r0, sp, #84	; 0x54
 801e0c8:	9315      	str	r3, [sp, #84]	; 0x54
 801e0ca:	f002 fe6b 	bl	8020da4 <__match>
 801e0ce:	b910      	cbnz	r0, 801e0d6 <_strtod_l+0x376>
 801e0d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e0d2:	3301      	adds	r3, #1
 801e0d4:	9315      	str	r3, [sp, #84]	; 0x54
 801e0d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801e2f4 <_strtod_l+0x594>
 801e0da:	f04f 0800 	mov.w	r8, #0
 801e0de:	e67a      	b.n	801ddd6 <_strtod_l+0x76>
 801e0e0:	4881      	ldr	r0, [pc, #516]	; (801e2e8 <_strtod_l+0x588>)
 801e0e2:	f7fd f9fd 	bl	801b4e0 <nan>
 801e0e6:	ec59 8b10 	vmov	r8, r9, d0
 801e0ea:	e674      	b.n	801ddd6 <_strtod_l+0x76>
 801e0ec:	9b05      	ldr	r3, [sp, #20]
 801e0ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e0f0:	1afb      	subs	r3, r7, r3
 801e0f2:	f1bb 0f00 	cmp.w	fp, #0
 801e0f6:	bf08      	it	eq
 801e0f8:	46b3      	moveq	fp, r6
 801e0fa:	2e10      	cmp	r6, #16
 801e0fc:	9308      	str	r3, [sp, #32]
 801e0fe:	4635      	mov	r5, r6
 801e100:	bfa8      	it	ge
 801e102:	2510      	movge	r5, #16
 801e104:	f7e2 fa0e 	bl	8000524 <__aeabi_ui2d>
 801e108:	2e09      	cmp	r6, #9
 801e10a:	4680      	mov	r8, r0
 801e10c:	4689      	mov	r9, r1
 801e10e:	dd13      	ble.n	801e138 <_strtod_l+0x3d8>
 801e110:	4b76      	ldr	r3, [pc, #472]	; (801e2ec <_strtod_l+0x58c>)
 801e112:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e116:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801e11a:	f7e2 fa7d 	bl	8000618 <__aeabi_dmul>
 801e11e:	4680      	mov	r8, r0
 801e120:	4650      	mov	r0, sl
 801e122:	4689      	mov	r9, r1
 801e124:	f7e2 f9fe 	bl	8000524 <__aeabi_ui2d>
 801e128:	4602      	mov	r2, r0
 801e12a:	460b      	mov	r3, r1
 801e12c:	4640      	mov	r0, r8
 801e12e:	4649      	mov	r1, r9
 801e130:	f7e2 f8bc 	bl	80002ac <__adddf3>
 801e134:	4680      	mov	r8, r0
 801e136:	4689      	mov	r9, r1
 801e138:	2e0f      	cmp	r6, #15
 801e13a:	dc38      	bgt.n	801e1ae <_strtod_l+0x44e>
 801e13c:	9b08      	ldr	r3, [sp, #32]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	f43f ae49 	beq.w	801ddd6 <_strtod_l+0x76>
 801e144:	dd24      	ble.n	801e190 <_strtod_l+0x430>
 801e146:	2b16      	cmp	r3, #22
 801e148:	dc0b      	bgt.n	801e162 <_strtod_l+0x402>
 801e14a:	4968      	ldr	r1, [pc, #416]	; (801e2ec <_strtod_l+0x58c>)
 801e14c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e150:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e154:	4642      	mov	r2, r8
 801e156:	464b      	mov	r3, r9
 801e158:	f7e2 fa5e 	bl	8000618 <__aeabi_dmul>
 801e15c:	4680      	mov	r8, r0
 801e15e:	4689      	mov	r9, r1
 801e160:	e639      	b.n	801ddd6 <_strtod_l+0x76>
 801e162:	9a08      	ldr	r2, [sp, #32]
 801e164:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801e168:	4293      	cmp	r3, r2
 801e16a:	db20      	blt.n	801e1ae <_strtod_l+0x44e>
 801e16c:	4c5f      	ldr	r4, [pc, #380]	; (801e2ec <_strtod_l+0x58c>)
 801e16e:	f1c6 060f 	rsb	r6, r6, #15
 801e172:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801e176:	4642      	mov	r2, r8
 801e178:	464b      	mov	r3, r9
 801e17a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e17e:	f7e2 fa4b 	bl	8000618 <__aeabi_dmul>
 801e182:	9b08      	ldr	r3, [sp, #32]
 801e184:	1b9e      	subs	r6, r3, r6
 801e186:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801e18a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e18e:	e7e3      	b.n	801e158 <_strtod_l+0x3f8>
 801e190:	9b08      	ldr	r3, [sp, #32]
 801e192:	3316      	adds	r3, #22
 801e194:	db0b      	blt.n	801e1ae <_strtod_l+0x44e>
 801e196:	9b05      	ldr	r3, [sp, #20]
 801e198:	1bdf      	subs	r7, r3, r7
 801e19a:	4b54      	ldr	r3, [pc, #336]	; (801e2ec <_strtod_l+0x58c>)
 801e19c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801e1a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e1a4:	4640      	mov	r0, r8
 801e1a6:	4649      	mov	r1, r9
 801e1a8:	f7e2 fb60 	bl	800086c <__aeabi_ddiv>
 801e1ac:	e7d6      	b.n	801e15c <_strtod_l+0x3fc>
 801e1ae:	9b08      	ldr	r3, [sp, #32]
 801e1b0:	1b75      	subs	r5, r6, r5
 801e1b2:	441d      	add	r5, r3
 801e1b4:	2d00      	cmp	r5, #0
 801e1b6:	dd70      	ble.n	801e29a <_strtod_l+0x53a>
 801e1b8:	f015 030f 	ands.w	r3, r5, #15
 801e1bc:	d00a      	beq.n	801e1d4 <_strtod_l+0x474>
 801e1be:	494b      	ldr	r1, [pc, #300]	; (801e2ec <_strtod_l+0x58c>)
 801e1c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e1c4:	4642      	mov	r2, r8
 801e1c6:	464b      	mov	r3, r9
 801e1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e1cc:	f7e2 fa24 	bl	8000618 <__aeabi_dmul>
 801e1d0:	4680      	mov	r8, r0
 801e1d2:	4689      	mov	r9, r1
 801e1d4:	f035 050f 	bics.w	r5, r5, #15
 801e1d8:	d04d      	beq.n	801e276 <_strtod_l+0x516>
 801e1da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801e1de:	dd22      	ble.n	801e226 <_strtod_l+0x4c6>
 801e1e0:	2500      	movs	r5, #0
 801e1e2:	46ab      	mov	fp, r5
 801e1e4:	9509      	str	r5, [sp, #36]	; 0x24
 801e1e6:	9505      	str	r5, [sp, #20]
 801e1e8:	2322      	movs	r3, #34	; 0x22
 801e1ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801e2f4 <_strtod_l+0x594>
 801e1ee:	6023      	str	r3, [r4, #0]
 801e1f0:	f04f 0800 	mov.w	r8, #0
 801e1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	f43f aded 	beq.w	801ddd6 <_strtod_l+0x76>
 801e1fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e1fe:	4620      	mov	r0, r4
 801e200:	f002 fed2 	bl	8020fa8 <_Bfree>
 801e204:	9905      	ldr	r1, [sp, #20]
 801e206:	4620      	mov	r0, r4
 801e208:	f002 fece 	bl	8020fa8 <_Bfree>
 801e20c:	4659      	mov	r1, fp
 801e20e:	4620      	mov	r0, r4
 801e210:	f002 feca 	bl	8020fa8 <_Bfree>
 801e214:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e216:	4620      	mov	r0, r4
 801e218:	f002 fec6 	bl	8020fa8 <_Bfree>
 801e21c:	4629      	mov	r1, r5
 801e21e:	4620      	mov	r0, r4
 801e220:	f002 fec2 	bl	8020fa8 <_Bfree>
 801e224:	e5d7      	b.n	801ddd6 <_strtod_l+0x76>
 801e226:	4b32      	ldr	r3, [pc, #200]	; (801e2f0 <_strtod_l+0x590>)
 801e228:	9304      	str	r3, [sp, #16]
 801e22a:	2300      	movs	r3, #0
 801e22c:	112d      	asrs	r5, r5, #4
 801e22e:	4640      	mov	r0, r8
 801e230:	4649      	mov	r1, r9
 801e232:	469a      	mov	sl, r3
 801e234:	2d01      	cmp	r5, #1
 801e236:	dc21      	bgt.n	801e27c <_strtod_l+0x51c>
 801e238:	b10b      	cbz	r3, 801e23e <_strtod_l+0x4de>
 801e23a:	4680      	mov	r8, r0
 801e23c:	4689      	mov	r9, r1
 801e23e:	492c      	ldr	r1, [pc, #176]	; (801e2f0 <_strtod_l+0x590>)
 801e240:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801e244:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801e248:	4642      	mov	r2, r8
 801e24a:	464b      	mov	r3, r9
 801e24c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e250:	f7e2 f9e2 	bl	8000618 <__aeabi_dmul>
 801e254:	4b27      	ldr	r3, [pc, #156]	; (801e2f4 <_strtod_l+0x594>)
 801e256:	460a      	mov	r2, r1
 801e258:	400b      	ands	r3, r1
 801e25a:	4927      	ldr	r1, [pc, #156]	; (801e2f8 <_strtod_l+0x598>)
 801e25c:	428b      	cmp	r3, r1
 801e25e:	4680      	mov	r8, r0
 801e260:	d8be      	bhi.n	801e1e0 <_strtod_l+0x480>
 801e262:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801e266:	428b      	cmp	r3, r1
 801e268:	bf86      	itte	hi
 801e26a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801e2fc <_strtod_l+0x59c>
 801e26e:	f04f 38ff 	movhi.w	r8, #4294967295
 801e272:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801e276:	2300      	movs	r3, #0
 801e278:	9304      	str	r3, [sp, #16]
 801e27a:	e07b      	b.n	801e374 <_strtod_l+0x614>
 801e27c:	07ea      	lsls	r2, r5, #31
 801e27e:	d505      	bpl.n	801e28c <_strtod_l+0x52c>
 801e280:	9b04      	ldr	r3, [sp, #16]
 801e282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e286:	f7e2 f9c7 	bl	8000618 <__aeabi_dmul>
 801e28a:	2301      	movs	r3, #1
 801e28c:	9a04      	ldr	r2, [sp, #16]
 801e28e:	3208      	adds	r2, #8
 801e290:	f10a 0a01 	add.w	sl, sl, #1
 801e294:	106d      	asrs	r5, r5, #1
 801e296:	9204      	str	r2, [sp, #16]
 801e298:	e7cc      	b.n	801e234 <_strtod_l+0x4d4>
 801e29a:	d0ec      	beq.n	801e276 <_strtod_l+0x516>
 801e29c:	426d      	negs	r5, r5
 801e29e:	f015 020f 	ands.w	r2, r5, #15
 801e2a2:	d00a      	beq.n	801e2ba <_strtod_l+0x55a>
 801e2a4:	4b11      	ldr	r3, [pc, #68]	; (801e2ec <_strtod_l+0x58c>)
 801e2a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e2aa:	4640      	mov	r0, r8
 801e2ac:	4649      	mov	r1, r9
 801e2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2b2:	f7e2 fadb 	bl	800086c <__aeabi_ddiv>
 801e2b6:	4680      	mov	r8, r0
 801e2b8:	4689      	mov	r9, r1
 801e2ba:	112d      	asrs	r5, r5, #4
 801e2bc:	d0db      	beq.n	801e276 <_strtod_l+0x516>
 801e2be:	2d1f      	cmp	r5, #31
 801e2c0:	dd1e      	ble.n	801e300 <_strtod_l+0x5a0>
 801e2c2:	2500      	movs	r5, #0
 801e2c4:	46ab      	mov	fp, r5
 801e2c6:	9509      	str	r5, [sp, #36]	; 0x24
 801e2c8:	9505      	str	r5, [sp, #20]
 801e2ca:	2322      	movs	r3, #34	; 0x22
 801e2cc:	f04f 0800 	mov.w	r8, #0
 801e2d0:	f04f 0900 	mov.w	r9, #0
 801e2d4:	6023      	str	r3, [r4, #0]
 801e2d6:	e78d      	b.n	801e1f4 <_strtod_l+0x494>
 801e2d8:	0802d1ee 	.word	0x0802d1ee
 801e2dc:	0802d0a4 	.word	0x0802d0a4
 801e2e0:	0802d1e6 	.word	0x0802d1e6
 801e2e4:	0802d225 	.word	0x0802d225
 801e2e8:	0802d08b 	.word	0x0802d08b
 801e2ec:	0802d390 	.word	0x0802d390
 801e2f0:	0802d368 	.word	0x0802d368
 801e2f4:	7ff00000 	.word	0x7ff00000
 801e2f8:	7ca00000 	.word	0x7ca00000
 801e2fc:	7fefffff 	.word	0x7fefffff
 801e300:	f015 0310 	ands.w	r3, r5, #16
 801e304:	bf18      	it	ne
 801e306:	236a      	movne	r3, #106	; 0x6a
 801e308:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801e6ac <_strtod_l+0x94c>
 801e30c:	9304      	str	r3, [sp, #16]
 801e30e:	4640      	mov	r0, r8
 801e310:	4649      	mov	r1, r9
 801e312:	2300      	movs	r3, #0
 801e314:	07ea      	lsls	r2, r5, #31
 801e316:	d504      	bpl.n	801e322 <_strtod_l+0x5c2>
 801e318:	e9da 2300 	ldrd	r2, r3, [sl]
 801e31c:	f7e2 f97c 	bl	8000618 <__aeabi_dmul>
 801e320:	2301      	movs	r3, #1
 801e322:	106d      	asrs	r5, r5, #1
 801e324:	f10a 0a08 	add.w	sl, sl, #8
 801e328:	d1f4      	bne.n	801e314 <_strtod_l+0x5b4>
 801e32a:	b10b      	cbz	r3, 801e330 <_strtod_l+0x5d0>
 801e32c:	4680      	mov	r8, r0
 801e32e:	4689      	mov	r9, r1
 801e330:	9b04      	ldr	r3, [sp, #16]
 801e332:	b1bb      	cbz	r3, 801e364 <_strtod_l+0x604>
 801e334:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801e338:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	4649      	mov	r1, r9
 801e340:	dd10      	ble.n	801e364 <_strtod_l+0x604>
 801e342:	2b1f      	cmp	r3, #31
 801e344:	f340 811e 	ble.w	801e584 <_strtod_l+0x824>
 801e348:	2b34      	cmp	r3, #52	; 0x34
 801e34a:	bfde      	ittt	le
 801e34c:	f04f 33ff 	movle.w	r3, #4294967295
 801e350:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801e354:	4093      	lslle	r3, r2
 801e356:	f04f 0800 	mov.w	r8, #0
 801e35a:	bfcc      	ite	gt
 801e35c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801e360:	ea03 0901 	andle.w	r9, r3, r1
 801e364:	2200      	movs	r2, #0
 801e366:	2300      	movs	r3, #0
 801e368:	4640      	mov	r0, r8
 801e36a:	4649      	mov	r1, r9
 801e36c:	f7e2 fbbc 	bl	8000ae8 <__aeabi_dcmpeq>
 801e370:	2800      	cmp	r0, #0
 801e372:	d1a6      	bne.n	801e2c2 <_strtod_l+0x562>
 801e374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e376:	9300      	str	r3, [sp, #0]
 801e378:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e37a:	4633      	mov	r3, r6
 801e37c:	465a      	mov	r2, fp
 801e37e:	4620      	mov	r0, r4
 801e380:	f002 fe7a 	bl	8021078 <__s2b>
 801e384:	9009      	str	r0, [sp, #36]	; 0x24
 801e386:	2800      	cmp	r0, #0
 801e388:	f43f af2a 	beq.w	801e1e0 <_strtod_l+0x480>
 801e38c:	9a08      	ldr	r2, [sp, #32]
 801e38e:	9b05      	ldr	r3, [sp, #20]
 801e390:	2a00      	cmp	r2, #0
 801e392:	eba3 0307 	sub.w	r3, r3, r7
 801e396:	bfa8      	it	ge
 801e398:	2300      	movge	r3, #0
 801e39a:	930c      	str	r3, [sp, #48]	; 0x30
 801e39c:	2500      	movs	r5, #0
 801e39e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801e3a2:	9312      	str	r3, [sp, #72]	; 0x48
 801e3a4:	46ab      	mov	fp, r5
 801e3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3a8:	4620      	mov	r0, r4
 801e3aa:	6859      	ldr	r1, [r3, #4]
 801e3ac:	f002 fdbc 	bl	8020f28 <_Balloc>
 801e3b0:	9005      	str	r0, [sp, #20]
 801e3b2:	2800      	cmp	r0, #0
 801e3b4:	f43f af18 	beq.w	801e1e8 <_strtod_l+0x488>
 801e3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3ba:	691a      	ldr	r2, [r3, #16]
 801e3bc:	3202      	adds	r2, #2
 801e3be:	f103 010c 	add.w	r1, r3, #12
 801e3c2:	0092      	lsls	r2, r2, #2
 801e3c4:	300c      	adds	r0, #12
 801e3c6:	f001 fb71 	bl	801faac <memcpy>
 801e3ca:	ec49 8b10 	vmov	d0, r8, r9
 801e3ce:	aa18      	add	r2, sp, #96	; 0x60
 801e3d0:	a917      	add	r1, sp, #92	; 0x5c
 801e3d2:	4620      	mov	r0, r4
 801e3d4:	f003 f984 	bl	80216e0 <__d2b>
 801e3d8:	ec49 8b18 	vmov	d8, r8, r9
 801e3dc:	9016      	str	r0, [sp, #88]	; 0x58
 801e3de:	2800      	cmp	r0, #0
 801e3e0:	f43f af02 	beq.w	801e1e8 <_strtod_l+0x488>
 801e3e4:	2101      	movs	r1, #1
 801e3e6:	4620      	mov	r0, r4
 801e3e8:	f002 fede 	bl	80211a8 <__i2b>
 801e3ec:	4683      	mov	fp, r0
 801e3ee:	2800      	cmp	r0, #0
 801e3f0:	f43f aefa 	beq.w	801e1e8 <_strtod_l+0x488>
 801e3f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801e3f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e3f8:	2e00      	cmp	r6, #0
 801e3fa:	bfab      	itete	ge
 801e3fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801e3fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801e400:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801e402:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801e406:	bfac      	ite	ge
 801e408:	eb06 0a03 	addge.w	sl, r6, r3
 801e40c:	1b9f      	sublt	r7, r3, r6
 801e40e:	9b04      	ldr	r3, [sp, #16]
 801e410:	1af6      	subs	r6, r6, r3
 801e412:	4416      	add	r6, r2
 801e414:	4ba0      	ldr	r3, [pc, #640]	; (801e698 <_strtod_l+0x938>)
 801e416:	3e01      	subs	r6, #1
 801e418:	429e      	cmp	r6, r3
 801e41a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e41e:	f280 80c4 	bge.w	801e5aa <_strtod_l+0x84a>
 801e422:	1b9b      	subs	r3, r3, r6
 801e424:	2b1f      	cmp	r3, #31
 801e426:	eba2 0203 	sub.w	r2, r2, r3
 801e42a:	f04f 0101 	mov.w	r1, #1
 801e42e:	f300 80b0 	bgt.w	801e592 <_strtod_l+0x832>
 801e432:	fa01 f303 	lsl.w	r3, r1, r3
 801e436:	930e      	str	r3, [sp, #56]	; 0x38
 801e438:	2300      	movs	r3, #0
 801e43a:	930d      	str	r3, [sp, #52]	; 0x34
 801e43c:	eb0a 0602 	add.w	r6, sl, r2
 801e440:	9b04      	ldr	r3, [sp, #16]
 801e442:	45b2      	cmp	sl, r6
 801e444:	4417      	add	r7, r2
 801e446:	441f      	add	r7, r3
 801e448:	4653      	mov	r3, sl
 801e44a:	bfa8      	it	ge
 801e44c:	4633      	movge	r3, r6
 801e44e:	42bb      	cmp	r3, r7
 801e450:	bfa8      	it	ge
 801e452:	463b      	movge	r3, r7
 801e454:	2b00      	cmp	r3, #0
 801e456:	bfc2      	ittt	gt
 801e458:	1af6      	subgt	r6, r6, r3
 801e45a:	1aff      	subgt	r7, r7, r3
 801e45c:	ebaa 0a03 	subgt.w	sl, sl, r3
 801e460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e462:	2b00      	cmp	r3, #0
 801e464:	dd17      	ble.n	801e496 <_strtod_l+0x736>
 801e466:	4659      	mov	r1, fp
 801e468:	461a      	mov	r2, r3
 801e46a:	4620      	mov	r0, r4
 801e46c:	f002 ff5c 	bl	8021328 <__pow5mult>
 801e470:	4683      	mov	fp, r0
 801e472:	2800      	cmp	r0, #0
 801e474:	f43f aeb8 	beq.w	801e1e8 <_strtod_l+0x488>
 801e478:	4601      	mov	r1, r0
 801e47a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e47c:	4620      	mov	r0, r4
 801e47e:	f002 fea9 	bl	80211d4 <__multiply>
 801e482:	900b      	str	r0, [sp, #44]	; 0x2c
 801e484:	2800      	cmp	r0, #0
 801e486:	f43f aeaf 	beq.w	801e1e8 <_strtod_l+0x488>
 801e48a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e48c:	4620      	mov	r0, r4
 801e48e:	f002 fd8b 	bl	8020fa8 <_Bfree>
 801e492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e494:	9316      	str	r3, [sp, #88]	; 0x58
 801e496:	2e00      	cmp	r6, #0
 801e498:	f300 808c 	bgt.w	801e5b4 <_strtod_l+0x854>
 801e49c:	9b08      	ldr	r3, [sp, #32]
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	dd08      	ble.n	801e4b4 <_strtod_l+0x754>
 801e4a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e4a4:	9905      	ldr	r1, [sp, #20]
 801e4a6:	4620      	mov	r0, r4
 801e4a8:	f002 ff3e 	bl	8021328 <__pow5mult>
 801e4ac:	9005      	str	r0, [sp, #20]
 801e4ae:	2800      	cmp	r0, #0
 801e4b0:	f43f ae9a 	beq.w	801e1e8 <_strtod_l+0x488>
 801e4b4:	2f00      	cmp	r7, #0
 801e4b6:	dd08      	ble.n	801e4ca <_strtod_l+0x76a>
 801e4b8:	9905      	ldr	r1, [sp, #20]
 801e4ba:	463a      	mov	r2, r7
 801e4bc:	4620      	mov	r0, r4
 801e4be:	f002 ff8d 	bl	80213dc <__lshift>
 801e4c2:	9005      	str	r0, [sp, #20]
 801e4c4:	2800      	cmp	r0, #0
 801e4c6:	f43f ae8f 	beq.w	801e1e8 <_strtod_l+0x488>
 801e4ca:	f1ba 0f00 	cmp.w	sl, #0
 801e4ce:	dd08      	ble.n	801e4e2 <_strtod_l+0x782>
 801e4d0:	4659      	mov	r1, fp
 801e4d2:	4652      	mov	r2, sl
 801e4d4:	4620      	mov	r0, r4
 801e4d6:	f002 ff81 	bl	80213dc <__lshift>
 801e4da:	4683      	mov	fp, r0
 801e4dc:	2800      	cmp	r0, #0
 801e4de:	f43f ae83 	beq.w	801e1e8 <_strtod_l+0x488>
 801e4e2:	9a05      	ldr	r2, [sp, #20]
 801e4e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e4e6:	4620      	mov	r0, r4
 801e4e8:	f003 f800 	bl	80214ec <__mdiff>
 801e4ec:	4605      	mov	r5, r0
 801e4ee:	2800      	cmp	r0, #0
 801e4f0:	f43f ae7a 	beq.w	801e1e8 <_strtod_l+0x488>
 801e4f4:	68c3      	ldr	r3, [r0, #12]
 801e4f6:	930b      	str	r3, [sp, #44]	; 0x2c
 801e4f8:	2300      	movs	r3, #0
 801e4fa:	60c3      	str	r3, [r0, #12]
 801e4fc:	4659      	mov	r1, fp
 801e4fe:	f002 ffd9 	bl	80214b4 <__mcmp>
 801e502:	2800      	cmp	r0, #0
 801e504:	da60      	bge.n	801e5c8 <_strtod_l+0x868>
 801e506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e508:	ea53 0308 	orrs.w	r3, r3, r8
 801e50c:	f040 8084 	bne.w	801e618 <_strtod_l+0x8b8>
 801e510:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e514:	2b00      	cmp	r3, #0
 801e516:	d17f      	bne.n	801e618 <_strtod_l+0x8b8>
 801e518:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e51c:	0d1b      	lsrs	r3, r3, #20
 801e51e:	051b      	lsls	r3, r3, #20
 801e520:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e524:	d978      	bls.n	801e618 <_strtod_l+0x8b8>
 801e526:	696b      	ldr	r3, [r5, #20]
 801e528:	b913      	cbnz	r3, 801e530 <_strtod_l+0x7d0>
 801e52a:	692b      	ldr	r3, [r5, #16]
 801e52c:	2b01      	cmp	r3, #1
 801e52e:	dd73      	ble.n	801e618 <_strtod_l+0x8b8>
 801e530:	4629      	mov	r1, r5
 801e532:	2201      	movs	r2, #1
 801e534:	4620      	mov	r0, r4
 801e536:	f002 ff51 	bl	80213dc <__lshift>
 801e53a:	4659      	mov	r1, fp
 801e53c:	4605      	mov	r5, r0
 801e53e:	f002 ffb9 	bl	80214b4 <__mcmp>
 801e542:	2800      	cmp	r0, #0
 801e544:	dd68      	ble.n	801e618 <_strtod_l+0x8b8>
 801e546:	9904      	ldr	r1, [sp, #16]
 801e548:	4a54      	ldr	r2, [pc, #336]	; (801e69c <_strtod_l+0x93c>)
 801e54a:	464b      	mov	r3, r9
 801e54c:	2900      	cmp	r1, #0
 801e54e:	f000 8084 	beq.w	801e65a <_strtod_l+0x8fa>
 801e552:	ea02 0109 	and.w	r1, r2, r9
 801e556:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e55a:	dc7e      	bgt.n	801e65a <_strtod_l+0x8fa>
 801e55c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e560:	f77f aeb3 	ble.w	801e2ca <_strtod_l+0x56a>
 801e564:	4b4e      	ldr	r3, [pc, #312]	; (801e6a0 <_strtod_l+0x940>)
 801e566:	4640      	mov	r0, r8
 801e568:	4649      	mov	r1, r9
 801e56a:	2200      	movs	r2, #0
 801e56c:	f7e2 f854 	bl	8000618 <__aeabi_dmul>
 801e570:	4b4a      	ldr	r3, [pc, #296]	; (801e69c <_strtod_l+0x93c>)
 801e572:	400b      	ands	r3, r1
 801e574:	4680      	mov	r8, r0
 801e576:	4689      	mov	r9, r1
 801e578:	2b00      	cmp	r3, #0
 801e57a:	f47f ae3f 	bne.w	801e1fc <_strtod_l+0x49c>
 801e57e:	2322      	movs	r3, #34	; 0x22
 801e580:	6023      	str	r3, [r4, #0]
 801e582:	e63b      	b.n	801e1fc <_strtod_l+0x49c>
 801e584:	f04f 32ff 	mov.w	r2, #4294967295
 801e588:	fa02 f303 	lsl.w	r3, r2, r3
 801e58c:	ea03 0808 	and.w	r8, r3, r8
 801e590:	e6e8      	b.n	801e364 <_strtod_l+0x604>
 801e592:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801e596:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801e59a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801e59e:	36e2      	adds	r6, #226	; 0xe2
 801e5a0:	fa01 f306 	lsl.w	r3, r1, r6
 801e5a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801e5a8:	e748      	b.n	801e43c <_strtod_l+0x6dc>
 801e5aa:	2100      	movs	r1, #0
 801e5ac:	2301      	movs	r3, #1
 801e5ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801e5b2:	e743      	b.n	801e43c <_strtod_l+0x6dc>
 801e5b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e5b6:	4632      	mov	r2, r6
 801e5b8:	4620      	mov	r0, r4
 801e5ba:	f002 ff0f 	bl	80213dc <__lshift>
 801e5be:	9016      	str	r0, [sp, #88]	; 0x58
 801e5c0:	2800      	cmp	r0, #0
 801e5c2:	f47f af6b 	bne.w	801e49c <_strtod_l+0x73c>
 801e5c6:	e60f      	b.n	801e1e8 <_strtod_l+0x488>
 801e5c8:	46ca      	mov	sl, r9
 801e5ca:	d171      	bne.n	801e6b0 <_strtod_l+0x950>
 801e5cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e5ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e5d2:	b352      	cbz	r2, 801e62a <_strtod_l+0x8ca>
 801e5d4:	4a33      	ldr	r2, [pc, #204]	; (801e6a4 <_strtod_l+0x944>)
 801e5d6:	4293      	cmp	r3, r2
 801e5d8:	d12a      	bne.n	801e630 <_strtod_l+0x8d0>
 801e5da:	9b04      	ldr	r3, [sp, #16]
 801e5dc:	4641      	mov	r1, r8
 801e5de:	b1fb      	cbz	r3, 801e620 <_strtod_l+0x8c0>
 801e5e0:	4b2e      	ldr	r3, [pc, #184]	; (801e69c <_strtod_l+0x93c>)
 801e5e2:	ea09 0303 	and.w	r3, r9, r3
 801e5e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e5ea:	f04f 32ff 	mov.w	r2, #4294967295
 801e5ee:	d81a      	bhi.n	801e626 <_strtod_l+0x8c6>
 801e5f0:	0d1b      	lsrs	r3, r3, #20
 801e5f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e5f6:	fa02 f303 	lsl.w	r3, r2, r3
 801e5fa:	4299      	cmp	r1, r3
 801e5fc:	d118      	bne.n	801e630 <_strtod_l+0x8d0>
 801e5fe:	4b2a      	ldr	r3, [pc, #168]	; (801e6a8 <_strtod_l+0x948>)
 801e600:	459a      	cmp	sl, r3
 801e602:	d102      	bne.n	801e60a <_strtod_l+0x8aa>
 801e604:	3101      	adds	r1, #1
 801e606:	f43f adef 	beq.w	801e1e8 <_strtod_l+0x488>
 801e60a:	4b24      	ldr	r3, [pc, #144]	; (801e69c <_strtod_l+0x93c>)
 801e60c:	ea0a 0303 	and.w	r3, sl, r3
 801e610:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801e614:	f04f 0800 	mov.w	r8, #0
 801e618:	9b04      	ldr	r3, [sp, #16]
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d1a2      	bne.n	801e564 <_strtod_l+0x804>
 801e61e:	e5ed      	b.n	801e1fc <_strtod_l+0x49c>
 801e620:	f04f 33ff 	mov.w	r3, #4294967295
 801e624:	e7e9      	b.n	801e5fa <_strtod_l+0x89a>
 801e626:	4613      	mov	r3, r2
 801e628:	e7e7      	b.n	801e5fa <_strtod_l+0x89a>
 801e62a:	ea53 0308 	orrs.w	r3, r3, r8
 801e62e:	d08a      	beq.n	801e546 <_strtod_l+0x7e6>
 801e630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e632:	b1e3      	cbz	r3, 801e66e <_strtod_l+0x90e>
 801e634:	ea13 0f0a 	tst.w	r3, sl
 801e638:	d0ee      	beq.n	801e618 <_strtod_l+0x8b8>
 801e63a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e63c:	9a04      	ldr	r2, [sp, #16]
 801e63e:	4640      	mov	r0, r8
 801e640:	4649      	mov	r1, r9
 801e642:	b1c3      	cbz	r3, 801e676 <_strtod_l+0x916>
 801e644:	f7ff fb6d 	bl	801dd22 <sulp>
 801e648:	4602      	mov	r2, r0
 801e64a:	460b      	mov	r3, r1
 801e64c:	ec51 0b18 	vmov	r0, r1, d8
 801e650:	f7e1 fe2c 	bl	80002ac <__adddf3>
 801e654:	4680      	mov	r8, r0
 801e656:	4689      	mov	r9, r1
 801e658:	e7de      	b.n	801e618 <_strtod_l+0x8b8>
 801e65a:	4013      	ands	r3, r2
 801e65c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e660:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e664:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e668:	f04f 38ff 	mov.w	r8, #4294967295
 801e66c:	e7d4      	b.n	801e618 <_strtod_l+0x8b8>
 801e66e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e670:	ea13 0f08 	tst.w	r3, r8
 801e674:	e7e0      	b.n	801e638 <_strtod_l+0x8d8>
 801e676:	f7ff fb54 	bl	801dd22 <sulp>
 801e67a:	4602      	mov	r2, r0
 801e67c:	460b      	mov	r3, r1
 801e67e:	ec51 0b18 	vmov	r0, r1, d8
 801e682:	f7e1 fe11 	bl	80002a8 <__aeabi_dsub>
 801e686:	2200      	movs	r2, #0
 801e688:	2300      	movs	r3, #0
 801e68a:	4680      	mov	r8, r0
 801e68c:	4689      	mov	r9, r1
 801e68e:	f7e2 fa2b 	bl	8000ae8 <__aeabi_dcmpeq>
 801e692:	2800      	cmp	r0, #0
 801e694:	d0c0      	beq.n	801e618 <_strtod_l+0x8b8>
 801e696:	e618      	b.n	801e2ca <_strtod_l+0x56a>
 801e698:	fffffc02 	.word	0xfffffc02
 801e69c:	7ff00000 	.word	0x7ff00000
 801e6a0:	39500000 	.word	0x39500000
 801e6a4:	000fffff 	.word	0x000fffff
 801e6a8:	7fefffff 	.word	0x7fefffff
 801e6ac:	0802d0b8 	.word	0x0802d0b8
 801e6b0:	4659      	mov	r1, fp
 801e6b2:	4628      	mov	r0, r5
 801e6b4:	f003 f86e 	bl	8021794 <__ratio>
 801e6b8:	ec57 6b10 	vmov	r6, r7, d0
 801e6bc:	ee10 0a10 	vmov	r0, s0
 801e6c0:	2200      	movs	r2, #0
 801e6c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e6c6:	4639      	mov	r1, r7
 801e6c8:	f7e2 fa22 	bl	8000b10 <__aeabi_dcmple>
 801e6cc:	2800      	cmp	r0, #0
 801e6ce:	d071      	beq.n	801e7b4 <_strtod_l+0xa54>
 801e6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d17c      	bne.n	801e7d0 <_strtod_l+0xa70>
 801e6d6:	f1b8 0f00 	cmp.w	r8, #0
 801e6da:	d15a      	bne.n	801e792 <_strtod_l+0xa32>
 801e6dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	d15d      	bne.n	801e7a0 <_strtod_l+0xa40>
 801e6e4:	4b90      	ldr	r3, [pc, #576]	; (801e928 <_strtod_l+0xbc8>)
 801e6e6:	2200      	movs	r2, #0
 801e6e8:	4630      	mov	r0, r6
 801e6ea:	4639      	mov	r1, r7
 801e6ec:	f7e2 fa06 	bl	8000afc <__aeabi_dcmplt>
 801e6f0:	2800      	cmp	r0, #0
 801e6f2:	d15c      	bne.n	801e7ae <_strtod_l+0xa4e>
 801e6f4:	4630      	mov	r0, r6
 801e6f6:	4639      	mov	r1, r7
 801e6f8:	4b8c      	ldr	r3, [pc, #560]	; (801e92c <_strtod_l+0xbcc>)
 801e6fa:	2200      	movs	r2, #0
 801e6fc:	f7e1 ff8c 	bl	8000618 <__aeabi_dmul>
 801e700:	4606      	mov	r6, r0
 801e702:	460f      	mov	r7, r1
 801e704:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801e708:	9606      	str	r6, [sp, #24]
 801e70a:	9307      	str	r3, [sp, #28]
 801e70c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e710:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e714:	4b86      	ldr	r3, [pc, #536]	; (801e930 <_strtod_l+0xbd0>)
 801e716:	ea0a 0303 	and.w	r3, sl, r3
 801e71a:	930d      	str	r3, [sp, #52]	; 0x34
 801e71c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e71e:	4b85      	ldr	r3, [pc, #532]	; (801e934 <_strtod_l+0xbd4>)
 801e720:	429a      	cmp	r2, r3
 801e722:	f040 8090 	bne.w	801e846 <_strtod_l+0xae6>
 801e726:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801e72a:	ec49 8b10 	vmov	d0, r8, r9
 801e72e:	f002 ff67 	bl	8021600 <__ulp>
 801e732:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e736:	ec51 0b10 	vmov	r0, r1, d0
 801e73a:	f7e1 ff6d 	bl	8000618 <__aeabi_dmul>
 801e73e:	4642      	mov	r2, r8
 801e740:	464b      	mov	r3, r9
 801e742:	f7e1 fdb3 	bl	80002ac <__adddf3>
 801e746:	460b      	mov	r3, r1
 801e748:	4979      	ldr	r1, [pc, #484]	; (801e930 <_strtod_l+0xbd0>)
 801e74a:	4a7b      	ldr	r2, [pc, #492]	; (801e938 <_strtod_l+0xbd8>)
 801e74c:	4019      	ands	r1, r3
 801e74e:	4291      	cmp	r1, r2
 801e750:	4680      	mov	r8, r0
 801e752:	d944      	bls.n	801e7de <_strtod_l+0xa7e>
 801e754:	ee18 2a90 	vmov	r2, s17
 801e758:	4b78      	ldr	r3, [pc, #480]	; (801e93c <_strtod_l+0xbdc>)
 801e75a:	429a      	cmp	r2, r3
 801e75c:	d104      	bne.n	801e768 <_strtod_l+0xa08>
 801e75e:	ee18 3a10 	vmov	r3, s16
 801e762:	3301      	adds	r3, #1
 801e764:	f43f ad40 	beq.w	801e1e8 <_strtod_l+0x488>
 801e768:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801e93c <_strtod_l+0xbdc>
 801e76c:	f04f 38ff 	mov.w	r8, #4294967295
 801e770:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e772:	4620      	mov	r0, r4
 801e774:	f002 fc18 	bl	8020fa8 <_Bfree>
 801e778:	9905      	ldr	r1, [sp, #20]
 801e77a:	4620      	mov	r0, r4
 801e77c:	f002 fc14 	bl	8020fa8 <_Bfree>
 801e780:	4659      	mov	r1, fp
 801e782:	4620      	mov	r0, r4
 801e784:	f002 fc10 	bl	8020fa8 <_Bfree>
 801e788:	4629      	mov	r1, r5
 801e78a:	4620      	mov	r0, r4
 801e78c:	f002 fc0c 	bl	8020fa8 <_Bfree>
 801e790:	e609      	b.n	801e3a6 <_strtod_l+0x646>
 801e792:	f1b8 0f01 	cmp.w	r8, #1
 801e796:	d103      	bne.n	801e7a0 <_strtod_l+0xa40>
 801e798:	f1b9 0f00 	cmp.w	r9, #0
 801e79c:	f43f ad95 	beq.w	801e2ca <_strtod_l+0x56a>
 801e7a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801e8f8 <_strtod_l+0xb98>
 801e7a4:	4f60      	ldr	r7, [pc, #384]	; (801e928 <_strtod_l+0xbc8>)
 801e7a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e7aa:	2600      	movs	r6, #0
 801e7ac:	e7ae      	b.n	801e70c <_strtod_l+0x9ac>
 801e7ae:	4f5f      	ldr	r7, [pc, #380]	; (801e92c <_strtod_l+0xbcc>)
 801e7b0:	2600      	movs	r6, #0
 801e7b2:	e7a7      	b.n	801e704 <_strtod_l+0x9a4>
 801e7b4:	4b5d      	ldr	r3, [pc, #372]	; (801e92c <_strtod_l+0xbcc>)
 801e7b6:	4630      	mov	r0, r6
 801e7b8:	4639      	mov	r1, r7
 801e7ba:	2200      	movs	r2, #0
 801e7bc:	f7e1 ff2c 	bl	8000618 <__aeabi_dmul>
 801e7c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7c2:	4606      	mov	r6, r0
 801e7c4:	460f      	mov	r7, r1
 801e7c6:	2b00      	cmp	r3, #0
 801e7c8:	d09c      	beq.n	801e704 <_strtod_l+0x9a4>
 801e7ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801e7ce:	e79d      	b.n	801e70c <_strtod_l+0x9ac>
 801e7d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801e900 <_strtod_l+0xba0>
 801e7d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e7d8:	ec57 6b17 	vmov	r6, r7, d7
 801e7dc:	e796      	b.n	801e70c <_strtod_l+0x9ac>
 801e7de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e7e2:	9b04      	ldr	r3, [sp, #16]
 801e7e4:	46ca      	mov	sl, r9
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d1c2      	bne.n	801e770 <_strtod_l+0xa10>
 801e7ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e7ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e7f0:	0d1b      	lsrs	r3, r3, #20
 801e7f2:	051b      	lsls	r3, r3, #20
 801e7f4:	429a      	cmp	r2, r3
 801e7f6:	d1bb      	bne.n	801e770 <_strtod_l+0xa10>
 801e7f8:	4630      	mov	r0, r6
 801e7fa:	4639      	mov	r1, r7
 801e7fc:	f7e2 fabc 	bl	8000d78 <__aeabi_d2lz>
 801e800:	f7e1 fedc 	bl	80005bc <__aeabi_l2d>
 801e804:	4602      	mov	r2, r0
 801e806:	460b      	mov	r3, r1
 801e808:	4630      	mov	r0, r6
 801e80a:	4639      	mov	r1, r7
 801e80c:	f7e1 fd4c 	bl	80002a8 <__aeabi_dsub>
 801e810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e812:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e816:	ea43 0308 	orr.w	r3, r3, r8
 801e81a:	4313      	orrs	r3, r2
 801e81c:	4606      	mov	r6, r0
 801e81e:	460f      	mov	r7, r1
 801e820:	d054      	beq.n	801e8cc <_strtod_l+0xb6c>
 801e822:	a339      	add	r3, pc, #228	; (adr r3, 801e908 <_strtod_l+0xba8>)
 801e824:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e828:	f7e2 f968 	bl	8000afc <__aeabi_dcmplt>
 801e82c:	2800      	cmp	r0, #0
 801e82e:	f47f ace5 	bne.w	801e1fc <_strtod_l+0x49c>
 801e832:	a337      	add	r3, pc, #220	; (adr r3, 801e910 <_strtod_l+0xbb0>)
 801e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e838:	4630      	mov	r0, r6
 801e83a:	4639      	mov	r1, r7
 801e83c:	f7e2 f97c 	bl	8000b38 <__aeabi_dcmpgt>
 801e840:	2800      	cmp	r0, #0
 801e842:	d095      	beq.n	801e770 <_strtod_l+0xa10>
 801e844:	e4da      	b.n	801e1fc <_strtod_l+0x49c>
 801e846:	9b04      	ldr	r3, [sp, #16]
 801e848:	b333      	cbz	r3, 801e898 <_strtod_l+0xb38>
 801e84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e84c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e850:	d822      	bhi.n	801e898 <_strtod_l+0xb38>
 801e852:	a331      	add	r3, pc, #196	; (adr r3, 801e918 <_strtod_l+0xbb8>)
 801e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e858:	4630      	mov	r0, r6
 801e85a:	4639      	mov	r1, r7
 801e85c:	f7e2 f958 	bl	8000b10 <__aeabi_dcmple>
 801e860:	b1a0      	cbz	r0, 801e88c <_strtod_l+0xb2c>
 801e862:	4639      	mov	r1, r7
 801e864:	4630      	mov	r0, r6
 801e866:	f7e2 f9af 	bl	8000bc8 <__aeabi_d2uiz>
 801e86a:	2801      	cmp	r0, #1
 801e86c:	bf38      	it	cc
 801e86e:	2001      	movcc	r0, #1
 801e870:	f7e1 fe58 	bl	8000524 <__aeabi_ui2d>
 801e874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e876:	4606      	mov	r6, r0
 801e878:	460f      	mov	r7, r1
 801e87a:	bb23      	cbnz	r3, 801e8c6 <_strtod_l+0xb66>
 801e87c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e880:	9010      	str	r0, [sp, #64]	; 0x40
 801e882:	9311      	str	r3, [sp, #68]	; 0x44
 801e884:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e888:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e88c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e88e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e890:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801e894:	1a9b      	subs	r3, r3, r2
 801e896:	930f      	str	r3, [sp, #60]	; 0x3c
 801e898:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e89c:	eeb0 0a48 	vmov.f32	s0, s16
 801e8a0:	eef0 0a68 	vmov.f32	s1, s17
 801e8a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801e8a8:	f002 feaa 	bl	8021600 <__ulp>
 801e8ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e8b0:	ec53 2b10 	vmov	r2, r3, d0
 801e8b4:	f7e1 feb0 	bl	8000618 <__aeabi_dmul>
 801e8b8:	ec53 2b18 	vmov	r2, r3, d8
 801e8bc:	f7e1 fcf6 	bl	80002ac <__adddf3>
 801e8c0:	4680      	mov	r8, r0
 801e8c2:	4689      	mov	r9, r1
 801e8c4:	e78d      	b.n	801e7e2 <_strtod_l+0xa82>
 801e8c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801e8ca:	e7db      	b.n	801e884 <_strtod_l+0xb24>
 801e8cc:	a314      	add	r3, pc, #80	; (adr r3, 801e920 <_strtod_l+0xbc0>)
 801e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8d2:	f7e2 f913 	bl	8000afc <__aeabi_dcmplt>
 801e8d6:	e7b3      	b.n	801e840 <_strtod_l+0xae0>
 801e8d8:	2300      	movs	r3, #0
 801e8da:	930a      	str	r3, [sp, #40]	; 0x28
 801e8dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e8de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e8e0:	6013      	str	r3, [r2, #0]
 801e8e2:	f7ff ba7c 	b.w	801ddde <_strtod_l+0x7e>
 801e8e6:	2a65      	cmp	r2, #101	; 0x65
 801e8e8:	f43f ab75 	beq.w	801dfd6 <_strtod_l+0x276>
 801e8ec:	2a45      	cmp	r2, #69	; 0x45
 801e8ee:	f43f ab72 	beq.w	801dfd6 <_strtod_l+0x276>
 801e8f2:	2301      	movs	r3, #1
 801e8f4:	f7ff bbaa 	b.w	801e04c <_strtod_l+0x2ec>
 801e8f8:	00000000 	.word	0x00000000
 801e8fc:	bff00000 	.word	0xbff00000
 801e900:	00000000 	.word	0x00000000
 801e904:	3ff00000 	.word	0x3ff00000
 801e908:	94a03595 	.word	0x94a03595
 801e90c:	3fdfffff 	.word	0x3fdfffff
 801e910:	35afe535 	.word	0x35afe535
 801e914:	3fe00000 	.word	0x3fe00000
 801e918:	ffc00000 	.word	0xffc00000
 801e91c:	41dfffff 	.word	0x41dfffff
 801e920:	94a03595 	.word	0x94a03595
 801e924:	3fcfffff 	.word	0x3fcfffff
 801e928:	3ff00000 	.word	0x3ff00000
 801e92c:	3fe00000 	.word	0x3fe00000
 801e930:	7ff00000 	.word	0x7ff00000
 801e934:	7fe00000 	.word	0x7fe00000
 801e938:	7c9fffff 	.word	0x7c9fffff
 801e93c:	7fefffff 	.word	0x7fefffff

0801e940 <_strtod_r>:
 801e940:	4b01      	ldr	r3, [pc, #4]	; (801e948 <_strtod_r+0x8>)
 801e942:	f7ff ba0d 	b.w	801dd60 <_strtod_l>
 801e946:	bf00      	nop
 801e948:	200002fc 	.word	0x200002fc

0801e94c <strtod>:
 801e94c:	460a      	mov	r2, r1
 801e94e:	4601      	mov	r1, r0
 801e950:	4802      	ldr	r0, [pc, #8]	; (801e95c <strtod+0x10>)
 801e952:	4b03      	ldr	r3, [pc, #12]	; (801e960 <strtod+0x14>)
 801e954:	6800      	ldr	r0, [r0, #0]
 801e956:	f7ff ba03 	b.w	801dd60 <_strtod_l>
 801e95a:	bf00      	nop
 801e95c:	200004b4 	.word	0x200004b4
 801e960:	200002fc 	.word	0x200002fc

0801e964 <__cvt>:
 801e964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e968:	ec55 4b10 	vmov	r4, r5, d0
 801e96c:	2d00      	cmp	r5, #0
 801e96e:	460e      	mov	r6, r1
 801e970:	4619      	mov	r1, r3
 801e972:	462b      	mov	r3, r5
 801e974:	bfbb      	ittet	lt
 801e976:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801e97a:	461d      	movlt	r5, r3
 801e97c:	2300      	movge	r3, #0
 801e97e:	232d      	movlt	r3, #45	; 0x2d
 801e980:	700b      	strb	r3, [r1, #0]
 801e982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e984:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801e988:	4691      	mov	r9, r2
 801e98a:	f023 0820 	bic.w	r8, r3, #32
 801e98e:	bfbc      	itt	lt
 801e990:	4622      	movlt	r2, r4
 801e992:	4614      	movlt	r4, r2
 801e994:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e998:	d005      	beq.n	801e9a6 <__cvt+0x42>
 801e99a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801e99e:	d100      	bne.n	801e9a2 <__cvt+0x3e>
 801e9a0:	3601      	adds	r6, #1
 801e9a2:	2102      	movs	r1, #2
 801e9a4:	e000      	b.n	801e9a8 <__cvt+0x44>
 801e9a6:	2103      	movs	r1, #3
 801e9a8:	ab03      	add	r3, sp, #12
 801e9aa:	9301      	str	r3, [sp, #4]
 801e9ac:	ab02      	add	r3, sp, #8
 801e9ae:	9300      	str	r3, [sp, #0]
 801e9b0:	ec45 4b10 	vmov	d0, r4, r5
 801e9b4:	4653      	mov	r3, sl
 801e9b6:	4632      	mov	r2, r6
 801e9b8:	f001 f90e 	bl	801fbd8 <_dtoa_r>
 801e9bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e9c0:	4607      	mov	r7, r0
 801e9c2:	d102      	bne.n	801e9ca <__cvt+0x66>
 801e9c4:	f019 0f01 	tst.w	r9, #1
 801e9c8:	d022      	beq.n	801ea10 <__cvt+0xac>
 801e9ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e9ce:	eb07 0906 	add.w	r9, r7, r6
 801e9d2:	d110      	bne.n	801e9f6 <__cvt+0x92>
 801e9d4:	783b      	ldrb	r3, [r7, #0]
 801e9d6:	2b30      	cmp	r3, #48	; 0x30
 801e9d8:	d10a      	bne.n	801e9f0 <__cvt+0x8c>
 801e9da:	2200      	movs	r2, #0
 801e9dc:	2300      	movs	r3, #0
 801e9de:	4620      	mov	r0, r4
 801e9e0:	4629      	mov	r1, r5
 801e9e2:	f7e2 f881 	bl	8000ae8 <__aeabi_dcmpeq>
 801e9e6:	b918      	cbnz	r0, 801e9f0 <__cvt+0x8c>
 801e9e8:	f1c6 0601 	rsb	r6, r6, #1
 801e9ec:	f8ca 6000 	str.w	r6, [sl]
 801e9f0:	f8da 3000 	ldr.w	r3, [sl]
 801e9f4:	4499      	add	r9, r3
 801e9f6:	2200      	movs	r2, #0
 801e9f8:	2300      	movs	r3, #0
 801e9fa:	4620      	mov	r0, r4
 801e9fc:	4629      	mov	r1, r5
 801e9fe:	f7e2 f873 	bl	8000ae8 <__aeabi_dcmpeq>
 801ea02:	b108      	cbz	r0, 801ea08 <__cvt+0xa4>
 801ea04:	f8cd 900c 	str.w	r9, [sp, #12]
 801ea08:	2230      	movs	r2, #48	; 0x30
 801ea0a:	9b03      	ldr	r3, [sp, #12]
 801ea0c:	454b      	cmp	r3, r9
 801ea0e:	d307      	bcc.n	801ea20 <__cvt+0xbc>
 801ea10:	9b03      	ldr	r3, [sp, #12]
 801ea12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ea14:	1bdb      	subs	r3, r3, r7
 801ea16:	4638      	mov	r0, r7
 801ea18:	6013      	str	r3, [r2, #0]
 801ea1a:	b004      	add	sp, #16
 801ea1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea20:	1c59      	adds	r1, r3, #1
 801ea22:	9103      	str	r1, [sp, #12]
 801ea24:	701a      	strb	r2, [r3, #0]
 801ea26:	e7f0      	b.n	801ea0a <__cvt+0xa6>

0801ea28 <__exponent>:
 801ea28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ea2a:	4603      	mov	r3, r0
 801ea2c:	2900      	cmp	r1, #0
 801ea2e:	bfb8      	it	lt
 801ea30:	4249      	neglt	r1, r1
 801ea32:	f803 2b02 	strb.w	r2, [r3], #2
 801ea36:	bfb4      	ite	lt
 801ea38:	222d      	movlt	r2, #45	; 0x2d
 801ea3a:	222b      	movge	r2, #43	; 0x2b
 801ea3c:	2909      	cmp	r1, #9
 801ea3e:	7042      	strb	r2, [r0, #1]
 801ea40:	dd2a      	ble.n	801ea98 <__exponent+0x70>
 801ea42:	f10d 0207 	add.w	r2, sp, #7
 801ea46:	4617      	mov	r7, r2
 801ea48:	260a      	movs	r6, #10
 801ea4a:	4694      	mov	ip, r2
 801ea4c:	fb91 f5f6 	sdiv	r5, r1, r6
 801ea50:	fb06 1415 	mls	r4, r6, r5, r1
 801ea54:	3430      	adds	r4, #48	; 0x30
 801ea56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801ea5a:	460c      	mov	r4, r1
 801ea5c:	2c63      	cmp	r4, #99	; 0x63
 801ea5e:	f102 32ff 	add.w	r2, r2, #4294967295
 801ea62:	4629      	mov	r1, r5
 801ea64:	dcf1      	bgt.n	801ea4a <__exponent+0x22>
 801ea66:	3130      	adds	r1, #48	; 0x30
 801ea68:	f1ac 0402 	sub.w	r4, ip, #2
 801ea6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 801ea70:	1c41      	adds	r1, r0, #1
 801ea72:	4622      	mov	r2, r4
 801ea74:	42ba      	cmp	r2, r7
 801ea76:	d30a      	bcc.n	801ea8e <__exponent+0x66>
 801ea78:	f10d 0209 	add.w	r2, sp, #9
 801ea7c:	eba2 020c 	sub.w	r2, r2, ip
 801ea80:	42bc      	cmp	r4, r7
 801ea82:	bf88      	it	hi
 801ea84:	2200      	movhi	r2, #0
 801ea86:	4413      	add	r3, r2
 801ea88:	1a18      	subs	r0, r3, r0
 801ea8a:	b003      	add	sp, #12
 801ea8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 801ea92:	f801 5f01 	strb.w	r5, [r1, #1]!
 801ea96:	e7ed      	b.n	801ea74 <__exponent+0x4c>
 801ea98:	2330      	movs	r3, #48	; 0x30
 801ea9a:	3130      	adds	r1, #48	; 0x30
 801ea9c:	7083      	strb	r3, [r0, #2]
 801ea9e:	70c1      	strb	r1, [r0, #3]
 801eaa0:	1d03      	adds	r3, r0, #4
 801eaa2:	e7f1      	b.n	801ea88 <__exponent+0x60>

0801eaa4 <_printf_float>:
 801eaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaa8:	ed2d 8b02 	vpush	{d8}
 801eaac:	b08d      	sub	sp, #52	; 0x34
 801eaae:	460c      	mov	r4, r1
 801eab0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801eab4:	4616      	mov	r6, r2
 801eab6:	461f      	mov	r7, r3
 801eab8:	4605      	mov	r5, r0
 801eaba:	f000 ff5d 	bl	801f978 <_localeconv_r>
 801eabe:	f8d0 a000 	ldr.w	sl, [r0]
 801eac2:	4650      	mov	r0, sl
 801eac4:	f7e1 fbe4 	bl	8000290 <strlen>
 801eac8:	2300      	movs	r3, #0
 801eaca:	930a      	str	r3, [sp, #40]	; 0x28
 801eacc:	6823      	ldr	r3, [r4, #0]
 801eace:	9305      	str	r3, [sp, #20]
 801ead0:	f8d8 3000 	ldr.w	r3, [r8]
 801ead4:	f894 b018 	ldrb.w	fp, [r4, #24]
 801ead8:	3307      	adds	r3, #7
 801eada:	f023 0307 	bic.w	r3, r3, #7
 801eade:	f103 0208 	add.w	r2, r3, #8
 801eae2:	f8c8 2000 	str.w	r2, [r8]
 801eae6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801eaea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801eaee:	9307      	str	r3, [sp, #28]
 801eaf0:	f8cd 8018 	str.w	r8, [sp, #24]
 801eaf4:	ee08 0a10 	vmov	s16, r0
 801eaf8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801eafc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801eb00:	4b9e      	ldr	r3, [pc, #632]	; (801ed7c <_printf_float+0x2d8>)
 801eb02:	f04f 32ff 	mov.w	r2, #4294967295
 801eb06:	f7e2 f821 	bl	8000b4c <__aeabi_dcmpun>
 801eb0a:	bb88      	cbnz	r0, 801eb70 <_printf_float+0xcc>
 801eb0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801eb10:	4b9a      	ldr	r3, [pc, #616]	; (801ed7c <_printf_float+0x2d8>)
 801eb12:	f04f 32ff 	mov.w	r2, #4294967295
 801eb16:	f7e1 fffb 	bl	8000b10 <__aeabi_dcmple>
 801eb1a:	bb48      	cbnz	r0, 801eb70 <_printf_float+0xcc>
 801eb1c:	2200      	movs	r2, #0
 801eb1e:	2300      	movs	r3, #0
 801eb20:	4640      	mov	r0, r8
 801eb22:	4649      	mov	r1, r9
 801eb24:	f7e1 ffea 	bl	8000afc <__aeabi_dcmplt>
 801eb28:	b110      	cbz	r0, 801eb30 <_printf_float+0x8c>
 801eb2a:	232d      	movs	r3, #45	; 0x2d
 801eb2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eb30:	4a93      	ldr	r2, [pc, #588]	; (801ed80 <_printf_float+0x2dc>)
 801eb32:	4b94      	ldr	r3, [pc, #592]	; (801ed84 <_printf_float+0x2e0>)
 801eb34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801eb38:	bf94      	ite	ls
 801eb3a:	4690      	movls	r8, r2
 801eb3c:	4698      	movhi	r8, r3
 801eb3e:	2303      	movs	r3, #3
 801eb40:	6123      	str	r3, [r4, #16]
 801eb42:	9b05      	ldr	r3, [sp, #20]
 801eb44:	f023 0304 	bic.w	r3, r3, #4
 801eb48:	6023      	str	r3, [r4, #0]
 801eb4a:	f04f 0900 	mov.w	r9, #0
 801eb4e:	9700      	str	r7, [sp, #0]
 801eb50:	4633      	mov	r3, r6
 801eb52:	aa0b      	add	r2, sp, #44	; 0x2c
 801eb54:	4621      	mov	r1, r4
 801eb56:	4628      	mov	r0, r5
 801eb58:	f000 f9da 	bl	801ef10 <_printf_common>
 801eb5c:	3001      	adds	r0, #1
 801eb5e:	f040 8090 	bne.w	801ec82 <_printf_float+0x1de>
 801eb62:	f04f 30ff 	mov.w	r0, #4294967295
 801eb66:	b00d      	add	sp, #52	; 0x34
 801eb68:	ecbd 8b02 	vpop	{d8}
 801eb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb70:	4642      	mov	r2, r8
 801eb72:	464b      	mov	r3, r9
 801eb74:	4640      	mov	r0, r8
 801eb76:	4649      	mov	r1, r9
 801eb78:	f7e1 ffe8 	bl	8000b4c <__aeabi_dcmpun>
 801eb7c:	b140      	cbz	r0, 801eb90 <_printf_float+0xec>
 801eb7e:	464b      	mov	r3, r9
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	bfbc      	itt	lt
 801eb84:	232d      	movlt	r3, #45	; 0x2d
 801eb86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801eb8a:	4a7f      	ldr	r2, [pc, #508]	; (801ed88 <_printf_float+0x2e4>)
 801eb8c:	4b7f      	ldr	r3, [pc, #508]	; (801ed8c <_printf_float+0x2e8>)
 801eb8e:	e7d1      	b.n	801eb34 <_printf_float+0x90>
 801eb90:	6863      	ldr	r3, [r4, #4]
 801eb92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801eb96:	9206      	str	r2, [sp, #24]
 801eb98:	1c5a      	adds	r2, r3, #1
 801eb9a:	d13f      	bne.n	801ec1c <_printf_float+0x178>
 801eb9c:	2306      	movs	r3, #6
 801eb9e:	6063      	str	r3, [r4, #4]
 801eba0:	9b05      	ldr	r3, [sp, #20]
 801eba2:	6861      	ldr	r1, [r4, #4]
 801eba4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801eba8:	2300      	movs	r3, #0
 801ebaa:	9303      	str	r3, [sp, #12]
 801ebac:	ab0a      	add	r3, sp, #40	; 0x28
 801ebae:	e9cd b301 	strd	fp, r3, [sp, #4]
 801ebb2:	ab09      	add	r3, sp, #36	; 0x24
 801ebb4:	ec49 8b10 	vmov	d0, r8, r9
 801ebb8:	9300      	str	r3, [sp, #0]
 801ebba:	6022      	str	r2, [r4, #0]
 801ebbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ebc0:	4628      	mov	r0, r5
 801ebc2:	f7ff fecf 	bl	801e964 <__cvt>
 801ebc6:	9b06      	ldr	r3, [sp, #24]
 801ebc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ebca:	2b47      	cmp	r3, #71	; 0x47
 801ebcc:	4680      	mov	r8, r0
 801ebce:	d108      	bne.n	801ebe2 <_printf_float+0x13e>
 801ebd0:	1cc8      	adds	r0, r1, #3
 801ebd2:	db02      	blt.n	801ebda <_printf_float+0x136>
 801ebd4:	6863      	ldr	r3, [r4, #4]
 801ebd6:	4299      	cmp	r1, r3
 801ebd8:	dd41      	ble.n	801ec5e <_printf_float+0x1ba>
 801ebda:	f1ab 0302 	sub.w	r3, fp, #2
 801ebde:	fa5f fb83 	uxtb.w	fp, r3
 801ebe2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ebe6:	d820      	bhi.n	801ec2a <_printf_float+0x186>
 801ebe8:	3901      	subs	r1, #1
 801ebea:	465a      	mov	r2, fp
 801ebec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ebf0:	9109      	str	r1, [sp, #36]	; 0x24
 801ebf2:	f7ff ff19 	bl	801ea28 <__exponent>
 801ebf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ebf8:	1813      	adds	r3, r2, r0
 801ebfa:	2a01      	cmp	r2, #1
 801ebfc:	4681      	mov	r9, r0
 801ebfe:	6123      	str	r3, [r4, #16]
 801ec00:	dc02      	bgt.n	801ec08 <_printf_float+0x164>
 801ec02:	6822      	ldr	r2, [r4, #0]
 801ec04:	07d2      	lsls	r2, r2, #31
 801ec06:	d501      	bpl.n	801ec0c <_printf_float+0x168>
 801ec08:	3301      	adds	r3, #1
 801ec0a:	6123      	str	r3, [r4, #16]
 801ec0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	d09c      	beq.n	801eb4e <_printf_float+0xaa>
 801ec14:	232d      	movs	r3, #45	; 0x2d
 801ec16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ec1a:	e798      	b.n	801eb4e <_printf_float+0xaa>
 801ec1c:	9a06      	ldr	r2, [sp, #24]
 801ec1e:	2a47      	cmp	r2, #71	; 0x47
 801ec20:	d1be      	bne.n	801eba0 <_printf_float+0xfc>
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	d1bc      	bne.n	801eba0 <_printf_float+0xfc>
 801ec26:	2301      	movs	r3, #1
 801ec28:	e7b9      	b.n	801eb9e <_printf_float+0xfa>
 801ec2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801ec2e:	d118      	bne.n	801ec62 <_printf_float+0x1be>
 801ec30:	2900      	cmp	r1, #0
 801ec32:	6863      	ldr	r3, [r4, #4]
 801ec34:	dd0b      	ble.n	801ec4e <_printf_float+0x1aa>
 801ec36:	6121      	str	r1, [r4, #16]
 801ec38:	b913      	cbnz	r3, 801ec40 <_printf_float+0x19c>
 801ec3a:	6822      	ldr	r2, [r4, #0]
 801ec3c:	07d0      	lsls	r0, r2, #31
 801ec3e:	d502      	bpl.n	801ec46 <_printf_float+0x1a2>
 801ec40:	3301      	adds	r3, #1
 801ec42:	440b      	add	r3, r1
 801ec44:	6123      	str	r3, [r4, #16]
 801ec46:	65a1      	str	r1, [r4, #88]	; 0x58
 801ec48:	f04f 0900 	mov.w	r9, #0
 801ec4c:	e7de      	b.n	801ec0c <_printf_float+0x168>
 801ec4e:	b913      	cbnz	r3, 801ec56 <_printf_float+0x1b2>
 801ec50:	6822      	ldr	r2, [r4, #0]
 801ec52:	07d2      	lsls	r2, r2, #31
 801ec54:	d501      	bpl.n	801ec5a <_printf_float+0x1b6>
 801ec56:	3302      	adds	r3, #2
 801ec58:	e7f4      	b.n	801ec44 <_printf_float+0x1a0>
 801ec5a:	2301      	movs	r3, #1
 801ec5c:	e7f2      	b.n	801ec44 <_printf_float+0x1a0>
 801ec5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801ec62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec64:	4299      	cmp	r1, r3
 801ec66:	db05      	blt.n	801ec74 <_printf_float+0x1d0>
 801ec68:	6823      	ldr	r3, [r4, #0]
 801ec6a:	6121      	str	r1, [r4, #16]
 801ec6c:	07d8      	lsls	r0, r3, #31
 801ec6e:	d5ea      	bpl.n	801ec46 <_printf_float+0x1a2>
 801ec70:	1c4b      	adds	r3, r1, #1
 801ec72:	e7e7      	b.n	801ec44 <_printf_float+0x1a0>
 801ec74:	2900      	cmp	r1, #0
 801ec76:	bfd4      	ite	le
 801ec78:	f1c1 0202 	rsble	r2, r1, #2
 801ec7c:	2201      	movgt	r2, #1
 801ec7e:	4413      	add	r3, r2
 801ec80:	e7e0      	b.n	801ec44 <_printf_float+0x1a0>
 801ec82:	6823      	ldr	r3, [r4, #0]
 801ec84:	055a      	lsls	r2, r3, #21
 801ec86:	d407      	bmi.n	801ec98 <_printf_float+0x1f4>
 801ec88:	6923      	ldr	r3, [r4, #16]
 801ec8a:	4642      	mov	r2, r8
 801ec8c:	4631      	mov	r1, r6
 801ec8e:	4628      	mov	r0, r5
 801ec90:	47b8      	blx	r7
 801ec92:	3001      	adds	r0, #1
 801ec94:	d12c      	bne.n	801ecf0 <_printf_float+0x24c>
 801ec96:	e764      	b.n	801eb62 <_printf_float+0xbe>
 801ec98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ec9c:	f240 80e0 	bls.w	801ee60 <_printf_float+0x3bc>
 801eca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801eca4:	2200      	movs	r2, #0
 801eca6:	2300      	movs	r3, #0
 801eca8:	f7e1 ff1e 	bl	8000ae8 <__aeabi_dcmpeq>
 801ecac:	2800      	cmp	r0, #0
 801ecae:	d034      	beq.n	801ed1a <_printf_float+0x276>
 801ecb0:	4a37      	ldr	r2, [pc, #220]	; (801ed90 <_printf_float+0x2ec>)
 801ecb2:	2301      	movs	r3, #1
 801ecb4:	4631      	mov	r1, r6
 801ecb6:	4628      	mov	r0, r5
 801ecb8:	47b8      	blx	r7
 801ecba:	3001      	adds	r0, #1
 801ecbc:	f43f af51 	beq.w	801eb62 <_printf_float+0xbe>
 801ecc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ecc4:	429a      	cmp	r2, r3
 801ecc6:	db02      	blt.n	801ecce <_printf_float+0x22a>
 801ecc8:	6823      	ldr	r3, [r4, #0]
 801ecca:	07d8      	lsls	r0, r3, #31
 801eccc:	d510      	bpl.n	801ecf0 <_printf_float+0x24c>
 801ecce:	ee18 3a10 	vmov	r3, s16
 801ecd2:	4652      	mov	r2, sl
 801ecd4:	4631      	mov	r1, r6
 801ecd6:	4628      	mov	r0, r5
 801ecd8:	47b8      	blx	r7
 801ecda:	3001      	adds	r0, #1
 801ecdc:	f43f af41 	beq.w	801eb62 <_printf_float+0xbe>
 801ece0:	f04f 0800 	mov.w	r8, #0
 801ece4:	f104 091a 	add.w	r9, r4, #26
 801ece8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ecea:	3b01      	subs	r3, #1
 801ecec:	4543      	cmp	r3, r8
 801ecee:	dc09      	bgt.n	801ed04 <_printf_float+0x260>
 801ecf0:	6823      	ldr	r3, [r4, #0]
 801ecf2:	079b      	lsls	r3, r3, #30
 801ecf4:	f100 8107 	bmi.w	801ef06 <_printf_float+0x462>
 801ecf8:	68e0      	ldr	r0, [r4, #12]
 801ecfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ecfc:	4298      	cmp	r0, r3
 801ecfe:	bfb8      	it	lt
 801ed00:	4618      	movlt	r0, r3
 801ed02:	e730      	b.n	801eb66 <_printf_float+0xc2>
 801ed04:	2301      	movs	r3, #1
 801ed06:	464a      	mov	r2, r9
 801ed08:	4631      	mov	r1, r6
 801ed0a:	4628      	mov	r0, r5
 801ed0c:	47b8      	blx	r7
 801ed0e:	3001      	adds	r0, #1
 801ed10:	f43f af27 	beq.w	801eb62 <_printf_float+0xbe>
 801ed14:	f108 0801 	add.w	r8, r8, #1
 801ed18:	e7e6      	b.n	801ece8 <_printf_float+0x244>
 801ed1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	dc39      	bgt.n	801ed94 <_printf_float+0x2f0>
 801ed20:	4a1b      	ldr	r2, [pc, #108]	; (801ed90 <_printf_float+0x2ec>)
 801ed22:	2301      	movs	r3, #1
 801ed24:	4631      	mov	r1, r6
 801ed26:	4628      	mov	r0, r5
 801ed28:	47b8      	blx	r7
 801ed2a:	3001      	adds	r0, #1
 801ed2c:	f43f af19 	beq.w	801eb62 <_printf_float+0xbe>
 801ed30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801ed34:	4313      	orrs	r3, r2
 801ed36:	d102      	bne.n	801ed3e <_printf_float+0x29a>
 801ed38:	6823      	ldr	r3, [r4, #0]
 801ed3a:	07d9      	lsls	r1, r3, #31
 801ed3c:	d5d8      	bpl.n	801ecf0 <_printf_float+0x24c>
 801ed3e:	ee18 3a10 	vmov	r3, s16
 801ed42:	4652      	mov	r2, sl
 801ed44:	4631      	mov	r1, r6
 801ed46:	4628      	mov	r0, r5
 801ed48:	47b8      	blx	r7
 801ed4a:	3001      	adds	r0, #1
 801ed4c:	f43f af09 	beq.w	801eb62 <_printf_float+0xbe>
 801ed50:	f04f 0900 	mov.w	r9, #0
 801ed54:	f104 0a1a 	add.w	sl, r4, #26
 801ed58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed5a:	425b      	negs	r3, r3
 801ed5c:	454b      	cmp	r3, r9
 801ed5e:	dc01      	bgt.n	801ed64 <_printf_float+0x2c0>
 801ed60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed62:	e792      	b.n	801ec8a <_printf_float+0x1e6>
 801ed64:	2301      	movs	r3, #1
 801ed66:	4652      	mov	r2, sl
 801ed68:	4631      	mov	r1, r6
 801ed6a:	4628      	mov	r0, r5
 801ed6c:	47b8      	blx	r7
 801ed6e:	3001      	adds	r0, #1
 801ed70:	f43f aef7 	beq.w	801eb62 <_printf_float+0xbe>
 801ed74:	f109 0901 	add.w	r9, r9, #1
 801ed78:	e7ee      	b.n	801ed58 <_printf_float+0x2b4>
 801ed7a:	bf00      	nop
 801ed7c:	7fefffff 	.word	0x7fefffff
 801ed80:	0802d1e1 	.word	0x0802d1e1
 801ed84:	0802d1e5 	.word	0x0802d1e5
 801ed88:	0802d1e9 	.word	0x0802d1e9
 801ed8c:	0802d1ed 	.word	0x0802d1ed
 801ed90:	0802d1f1 	.word	0x0802d1f1
 801ed94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ed96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ed98:	429a      	cmp	r2, r3
 801ed9a:	bfa8      	it	ge
 801ed9c:	461a      	movge	r2, r3
 801ed9e:	2a00      	cmp	r2, #0
 801eda0:	4691      	mov	r9, r2
 801eda2:	dc37      	bgt.n	801ee14 <_printf_float+0x370>
 801eda4:	f04f 0b00 	mov.w	fp, #0
 801eda8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801edac:	f104 021a 	add.w	r2, r4, #26
 801edb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801edb2:	9305      	str	r3, [sp, #20]
 801edb4:	eba3 0309 	sub.w	r3, r3, r9
 801edb8:	455b      	cmp	r3, fp
 801edba:	dc33      	bgt.n	801ee24 <_printf_float+0x380>
 801edbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801edc0:	429a      	cmp	r2, r3
 801edc2:	db3b      	blt.n	801ee3c <_printf_float+0x398>
 801edc4:	6823      	ldr	r3, [r4, #0]
 801edc6:	07da      	lsls	r2, r3, #31
 801edc8:	d438      	bmi.n	801ee3c <_printf_float+0x398>
 801edca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801edce:	eba2 0903 	sub.w	r9, r2, r3
 801edd2:	9b05      	ldr	r3, [sp, #20]
 801edd4:	1ad2      	subs	r2, r2, r3
 801edd6:	4591      	cmp	r9, r2
 801edd8:	bfa8      	it	ge
 801edda:	4691      	movge	r9, r2
 801eddc:	f1b9 0f00 	cmp.w	r9, #0
 801ede0:	dc35      	bgt.n	801ee4e <_printf_float+0x3aa>
 801ede2:	f04f 0800 	mov.w	r8, #0
 801ede6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801edea:	f104 0a1a 	add.w	sl, r4, #26
 801edee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801edf2:	1a9b      	subs	r3, r3, r2
 801edf4:	eba3 0309 	sub.w	r3, r3, r9
 801edf8:	4543      	cmp	r3, r8
 801edfa:	f77f af79 	ble.w	801ecf0 <_printf_float+0x24c>
 801edfe:	2301      	movs	r3, #1
 801ee00:	4652      	mov	r2, sl
 801ee02:	4631      	mov	r1, r6
 801ee04:	4628      	mov	r0, r5
 801ee06:	47b8      	blx	r7
 801ee08:	3001      	adds	r0, #1
 801ee0a:	f43f aeaa 	beq.w	801eb62 <_printf_float+0xbe>
 801ee0e:	f108 0801 	add.w	r8, r8, #1
 801ee12:	e7ec      	b.n	801edee <_printf_float+0x34a>
 801ee14:	4613      	mov	r3, r2
 801ee16:	4631      	mov	r1, r6
 801ee18:	4642      	mov	r2, r8
 801ee1a:	4628      	mov	r0, r5
 801ee1c:	47b8      	blx	r7
 801ee1e:	3001      	adds	r0, #1
 801ee20:	d1c0      	bne.n	801eda4 <_printf_float+0x300>
 801ee22:	e69e      	b.n	801eb62 <_printf_float+0xbe>
 801ee24:	2301      	movs	r3, #1
 801ee26:	4631      	mov	r1, r6
 801ee28:	4628      	mov	r0, r5
 801ee2a:	9205      	str	r2, [sp, #20]
 801ee2c:	47b8      	blx	r7
 801ee2e:	3001      	adds	r0, #1
 801ee30:	f43f ae97 	beq.w	801eb62 <_printf_float+0xbe>
 801ee34:	9a05      	ldr	r2, [sp, #20]
 801ee36:	f10b 0b01 	add.w	fp, fp, #1
 801ee3a:	e7b9      	b.n	801edb0 <_printf_float+0x30c>
 801ee3c:	ee18 3a10 	vmov	r3, s16
 801ee40:	4652      	mov	r2, sl
 801ee42:	4631      	mov	r1, r6
 801ee44:	4628      	mov	r0, r5
 801ee46:	47b8      	blx	r7
 801ee48:	3001      	adds	r0, #1
 801ee4a:	d1be      	bne.n	801edca <_printf_float+0x326>
 801ee4c:	e689      	b.n	801eb62 <_printf_float+0xbe>
 801ee4e:	9a05      	ldr	r2, [sp, #20]
 801ee50:	464b      	mov	r3, r9
 801ee52:	4442      	add	r2, r8
 801ee54:	4631      	mov	r1, r6
 801ee56:	4628      	mov	r0, r5
 801ee58:	47b8      	blx	r7
 801ee5a:	3001      	adds	r0, #1
 801ee5c:	d1c1      	bne.n	801ede2 <_printf_float+0x33e>
 801ee5e:	e680      	b.n	801eb62 <_printf_float+0xbe>
 801ee60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ee62:	2a01      	cmp	r2, #1
 801ee64:	dc01      	bgt.n	801ee6a <_printf_float+0x3c6>
 801ee66:	07db      	lsls	r3, r3, #31
 801ee68:	d53a      	bpl.n	801eee0 <_printf_float+0x43c>
 801ee6a:	2301      	movs	r3, #1
 801ee6c:	4642      	mov	r2, r8
 801ee6e:	4631      	mov	r1, r6
 801ee70:	4628      	mov	r0, r5
 801ee72:	47b8      	blx	r7
 801ee74:	3001      	adds	r0, #1
 801ee76:	f43f ae74 	beq.w	801eb62 <_printf_float+0xbe>
 801ee7a:	ee18 3a10 	vmov	r3, s16
 801ee7e:	4652      	mov	r2, sl
 801ee80:	4631      	mov	r1, r6
 801ee82:	4628      	mov	r0, r5
 801ee84:	47b8      	blx	r7
 801ee86:	3001      	adds	r0, #1
 801ee88:	f43f ae6b 	beq.w	801eb62 <_printf_float+0xbe>
 801ee8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ee90:	2200      	movs	r2, #0
 801ee92:	2300      	movs	r3, #0
 801ee94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801ee98:	f7e1 fe26 	bl	8000ae8 <__aeabi_dcmpeq>
 801ee9c:	b9d8      	cbnz	r0, 801eed6 <_printf_float+0x432>
 801ee9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801eea2:	f108 0201 	add.w	r2, r8, #1
 801eea6:	4631      	mov	r1, r6
 801eea8:	4628      	mov	r0, r5
 801eeaa:	47b8      	blx	r7
 801eeac:	3001      	adds	r0, #1
 801eeae:	d10e      	bne.n	801eece <_printf_float+0x42a>
 801eeb0:	e657      	b.n	801eb62 <_printf_float+0xbe>
 801eeb2:	2301      	movs	r3, #1
 801eeb4:	4652      	mov	r2, sl
 801eeb6:	4631      	mov	r1, r6
 801eeb8:	4628      	mov	r0, r5
 801eeba:	47b8      	blx	r7
 801eebc:	3001      	adds	r0, #1
 801eebe:	f43f ae50 	beq.w	801eb62 <_printf_float+0xbe>
 801eec2:	f108 0801 	add.w	r8, r8, #1
 801eec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eec8:	3b01      	subs	r3, #1
 801eeca:	4543      	cmp	r3, r8
 801eecc:	dcf1      	bgt.n	801eeb2 <_printf_float+0x40e>
 801eece:	464b      	mov	r3, r9
 801eed0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801eed4:	e6da      	b.n	801ec8c <_printf_float+0x1e8>
 801eed6:	f04f 0800 	mov.w	r8, #0
 801eeda:	f104 0a1a 	add.w	sl, r4, #26
 801eede:	e7f2      	b.n	801eec6 <_printf_float+0x422>
 801eee0:	2301      	movs	r3, #1
 801eee2:	4642      	mov	r2, r8
 801eee4:	e7df      	b.n	801eea6 <_printf_float+0x402>
 801eee6:	2301      	movs	r3, #1
 801eee8:	464a      	mov	r2, r9
 801eeea:	4631      	mov	r1, r6
 801eeec:	4628      	mov	r0, r5
 801eeee:	47b8      	blx	r7
 801eef0:	3001      	adds	r0, #1
 801eef2:	f43f ae36 	beq.w	801eb62 <_printf_float+0xbe>
 801eef6:	f108 0801 	add.w	r8, r8, #1
 801eefa:	68e3      	ldr	r3, [r4, #12]
 801eefc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801eefe:	1a5b      	subs	r3, r3, r1
 801ef00:	4543      	cmp	r3, r8
 801ef02:	dcf0      	bgt.n	801eee6 <_printf_float+0x442>
 801ef04:	e6f8      	b.n	801ecf8 <_printf_float+0x254>
 801ef06:	f04f 0800 	mov.w	r8, #0
 801ef0a:	f104 0919 	add.w	r9, r4, #25
 801ef0e:	e7f4      	b.n	801eefa <_printf_float+0x456>

0801ef10 <_printf_common>:
 801ef10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef14:	4616      	mov	r6, r2
 801ef16:	4699      	mov	r9, r3
 801ef18:	688a      	ldr	r2, [r1, #8]
 801ef1a:	690b      	ldr	r3, [r1, #16]
 801ef1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ef20:	4293      	cmp	r3, r2
 801ef22:	bfb8      	it	lt
 801ef24:	4613      	movlt	r3, r2
 801ef26:	6033      	str	r3, [r6, #0]
 801ef28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ef2c:	4607      	mov	r7, r0
 801ef2e:	460c      	mov	r4, r1
 801ef30:	b10a      	cbz	r2, 801ef36 <_printf_common+0x26>
 801ef32:	3301      	adds	r3, #1
 801ef34:	6033      	str	r3, [r6, #0]
 801ef36:	6823      	ldr	r3, [r4, #0]
 801ef38:	0699      	lsls	r1, r3, #26
 801ef3a:	bf42      	ittt	mi
 801ef3c:	6833      	ldrmi	r3, [r6, #0]
 801ef3e:	3302      	addmi	r3, #2
 801ef40:	6033      	strmi	r3, [r6, #0]
 801ef42:	6825      	ldr	r5, [r4, #0]
 801ef44:	f015 0506 	ands.w	r5, r5, #6
 801ef48:	d106      	bne.n	801ef58 <_printf_common+0x48>
 801ef4a:	f104 0a19 	add.w	sl, r4, #25
 801ef4e:	68e3      	ldr	r3, [r4, #12]
 801ef50:	6832      	ldr	r2, [r6, #0]
 801ef52:	1a9b      	subs	r3, r3, r2
 801ef54:	42ab      	cmp	r3, r5
 801ef56:	dc26      	bgt.n	801efa6 <_printf_common+0x96>
 801ef58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ef5c:	1e13      	subs	r3, r2, #0
 801ef5e:	6822      	ldr	r2, [r4, #0]
 801ef60:	bf18      	it	ne
 801ef62:	2301      	movne	r3, #1
 801ef64:	0692      	lsls	r2, r2, #26
 801ef66:	d42b      	bmi.n	801efc0 <_printf_common+0xb0>
 801ef68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ef6c:	4649      	mov	r1, r9
 801ef6e:	4638      	mov	r0, r7
 801ef70:	47c0      	blx	r8
 801ef72:	3001      	adds	r0, #1
 801ef74:	d01e      	beq.n	801efb4 <_printf_common+0xa4>
 801ef76:	6823      	ldr	r3, [r4, #0]
 801ef78:	6922      	ldr	r2, [r4, #16]
 801ef7a:	f003 0306 	and.w	r3, r3, #6
 801ef7e:	2b04      	cmp	r3, #4
 801ef80:	bf02      	ittt	eq
 801ef82:	68e5      	ldreq	r5, [r4, #12]
 801ef84:	6833      	ldreq	r3, [r6, #0]
 801ef86:	1aed      	subeq	r5, r5, r3
 801ef88:	68a3      	ldr	r3, [r4, #8]
 801ef8a:	bf0c      	ite	eq
 801ef8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ef90:	2500      	movne	r5, #0
 801ef92:	4293      	cmp	r3, r2
 801ef94:	bfc4      	itt	gt
 801ef96:	1a9b      	subgt	r3, r3, r2
 801ef98:	18ed      	addgt	r5, r5, r3
 801ef9a:	2600      	movs	r6, #0
 801ef9c:	341a      	adds	r4, #26
 801ef9e:	42b5      	cmp	r5, r6
 801efa0:	d11a      	bne.n	801efd8 <_printf_common+0xc8>
 801efa2:	2000      	movs	r0, #0
 801efa4:	e008      	b.n	801efb8 <_printf_common+0xa8>
 801efa6:	2301      	movs	r3, #1
 801efa8:	4652      	mov	r2, sl
 801efaa:	4649      	mov	r1, r9
 801efac:	4638      	mov	r0, r7
 801efae:	47c0      	blx	r8
 801efb0:	3001      	adds	r0, #1
 801efb2:	d103      	bne.n	801efbc <_printf_common+0xac>
 801efb4:	f04f 30ff 	mov.w	r0, #4294967295
 801efb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801efbc:	3501      	adds	r5, #1
 801efbe:	e7c6      	b.n	801ef4e <_printf_common+0x3e>
 801efc0:	18e1      	adds	r1, r4, r3
 801efc2:	1c5a      	adds	r2, r3, #1
 801efc4:	2030      	movs	r0, #48	; 0x30
 801efc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801efca:	4422      	add	r2, r4
 801efcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801efd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801efd4:	3302      	adds	r3, #2
 801efd6:	e7c7      	b.n	801ef68 <_printf_common+0x58>
 801efd8:	2301      	movs	r3, #1
 801efda:	4622      	mov	r2, r4
 801efdc:	4649      	mov	r1, r9
 801efde:	4638      	mov	r0, r7
 801efe0:	47c0      	blx	r8
 801efe2:	3001      	adds	r0, #1
 801efe4:	d0e6      	beq.n	801efb4 <_printf_common+0xa4>
 801efe6:	3601      	adds	r6, #1
 801efe8:	e7d9      	b.n	801ef9e <_printf_common+0x8e>
	...

0801efec <_printf_i>:
 801efec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801eff0:	7e0f      	ldrb	r7, [r1, #24]
 801eff2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801eff4:	2f78      	cmp	r7, #120	; 0x78
 801eff6:	4691      	mov	r9, r2
 801eff8:	4680      	mov	r8, r0
 801effa:	460c      	mov	r4, r1
 801effc:	469a      	mov	sl, r3
 801effe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f002:	d807      	bhi.n	801f014 <_printf_i+0x28>
 801f004:	2f62      	cmp	r7, #98	; 0x62
 801f006:	d80a      	bhi.n	801f01e <_printf_i+0x32>
 801f008:	2f00      	cmp	r7, #0
 801f00a:	f000 80d4 	beq.w	801f1b6 <_printf_i+0x1ca>
 801f00e:	2f58      	cmp	r7, #88	; 0x58
 801f010:	f000 80c0 	beq.w	801f194 <_printf_i+0x1a8>
 801f014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f01c:	e03a      	b.n	801f094 <_printf_i+0xa8>
 801f01e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f022:	2b15      	cmp	r3, #21
 801f024:	d8f6      	bhi.n	801f014 <_printf_i+0x28>
 801f026:	a101      	add	r1, pc, #4	; (adr r1, 801f02c <_printf_i+0x40>)
 801f028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f02c:	0801f085 	.word	0x0801f085
 801f030:	0801f099 	.word	0x0801f099
 801f034:	0801f015 	.word	0x0801f015
 801f038:	0801f015 	.word	0x0801f015
 801f03c:	0801f015 	.word	0x0801f015
 801f040:	0801f015 	.word	0x0801f015
 801f044:	0801f099 	.word	0x0801f099
 801f048:	0801f015 	.word	0x0801f015
 801f04c:	0801f015 	.word	0x0801f015
 801f050:	0801f015 	.word	0x0801f015
 801f054:	0801f015 	.word	0x0801f015
 801f058:	0801f19d 	.word	0x0801f19d
 801f05c:	0801f0c5 	.word	0x0801f0c5
 801f060:	0801f157 	.word	0x0801f157
 801f064:	0801f015 	.word	0x0801f015
 801f068:	0801f015 	.word	0x0801f015
 801f06c:	0801f1bf 	.word	0x0801f1bf
 801f070:	0801f015 	.word	0x0801f015
 801f074:	0801f0c5 	.word	0x0801f0c5
 801f078:	0801f015 	.word	0x0801f015
 801f07c:	0801f015 	.word	0x0801f015
 801f080:	0801f15f 	.word	0x0801f15f
 801f084:	682b      	ldr	r3, [r5, #0]
 801f086:	1d1a      	adds	r2, r3, #4
 801f088:	681b      	ldr	r3, [r3, #0]
 801f08a:	602a      	str	r2, [r5, #0]
 801f08c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f094:	2301      	movs	r3, #1
 801f096:	e09f      	b.n	801f1d8 <_printf_i+0x1ec>
 801f098:	6820      	ldr	r0, [r4, #0]
 801f09a:	682b      	ldr	r3, [r5, #0]
 801f09c:	0607      	lsls	r7, r0, #24
 801f09e:	f103 0104 	add.w	r1, r3, #4
 801f0a2:	6029      	str	r1, [r5, #0]
 801f0a4:	d501      	bpl.n	801f0aa <_printf_i+0xbe>
 801f0a6:	681e      	ldr	r6, [r3, #0]
 801f0a8:	e003      	b.n	801f0b2 <_printf_i+0xc6>
 801f0aa:	0646      	lsls	r6, r0, #25
 801f0ac:	d5fb      	bpl.n	801f0a6 <_printf_i+0xba>
 801f0ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f0b2:	2e00      	cmp	r6, #0
 801f0b4:	da03      	bge.n	801f0be <_printf_i+0xd2>
 801f0b6:	232d      	movs	r3, #45	; 0x2d
 801f0b8:	4276      	negs	r6, r6
 801f0ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f0be:	485a      	ldr	r0, [pc, #360]	; (801f228 <_printf_i+0x23c>)
 801f0c0:	230a      	movs	r3, #10
 801f0c2:	e012      	b.n	801f0ea <_printf_i+0xfe>
 801f0c4:	682b      	ldr	r3, [r5, #0]
 801f0c6:	6820      	ldr	r0, [r4, #0]
 801f0c8:	1d19      	adds	r1, r3, #4
 801f0ca:	6029      	str	r1, [r5, #0]
 801f0cc:	0605      	lsls	r5, r0, #24
 801f0ce:	d501      	bpl.n	801f0d4 <_printf_i+0xe8>
 801f0d0:	681e      	ldr	r6, [r3, #0]
 801f0d2:	e002      	b.n	801f0da <_printf_i+0xee>
 801f0d4:	0641      	lsls	r1, r0, #25
 801f0d6:	d5fb      	bpl.n	801f0d0 <_printf_i+0xe4>
 801f0d8:	881e      	ldrh	r6, [r3, #0]
 801f0da:	4853      	ldr	r0, [pc, #332]	; (801f228 <_printf_i+0x23c>)
 801f0dc:	2f6f      	cmp	r7, #111	; 0x6f
 801f0de:	bf0c      	ite	eq
 801f0e0:	2308      	moveq	r3, #8
 801f0e2:	230a      	movne	r3, #10
 801f0e4:	2100      	movs	r1, #0
 801f0e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f0ea:	6865      	ldr	r5, [r4, #4]
 801f0ec:	60a5      	str	r5, [r4, #8]
 801f0ee:	2d00      	cmp	r5, #0
 801f0f0:	bfa2      	ittt	ge
 801f0f2:	6821      	ldrge	r1, [r4, #0]
 801f0f4:	f021 0104 	bicge.w	r1, r1, #4
 801f0f8:	6021      	strge	r1, [r4, #0]
 801f0fa:	b90e      	cbnz	r6, 801f100 <_printf_i+0x114>
 801f0fc:	2d00      	cmp	r5, #0
 801f0fe:	d04b      	beq.n	801f198 <_printf_i+0x1ac>
 801f100:	4615      	mov	r5, r2
 801f102:	fbb6 f1f3 	udiv	r1, r6, r3
 801f106:	fb03 6711 	mls	r7, r3, r1, r6
 801f10a:	5dc7      	ldrb	r7, [r0, r7]
 801f10c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f110:	4637      	mov	r7, r6
 801f112:	42bb      	cmp	r3, r7
 801f114:	460e      	mov	r6, r1
 801f116:	d9f4      	bls.n	801f102 <_printf_i+0x116>
 801f118:	2b08      	cmp	r3, #8
 801f11a:	d10b      	bne.n	801f134 <_printf_i+0x148>
 801f11c:	6823      	ldr	r3, [r4, #0]
 801f11e:	07de      	lsls	r6, r3, #31
 801f120:	d508      	bpl.n	801f134 <_printf_i+0x148>
 801f122:	6923      	ldr	r3, [r4, #16]
 801f124:	6861      	ldr	r1, [r4, #4]
 801f126:	4299      	cmp	r1, r3
 801f128:	bfde      	ittt	le
 801f12a:	2330      	movle	r3, #48	; 0x30
 801f12c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f130:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f134:	1b52      	subs	r2, r2, r5
 801f136:	6122      	str	r2, [r4, #16]
 801f138:	f8cd a000 	str.w	sl, [sp]
 801f13c:	464b      	mov	r3, r9
 801f13e:	aa03      	add	r2, sp, #12
 801f140:	4621      	mov	r1, r4
 801f142:	4640      	mov	r0, r8
 801f144:	f7ff fee4 	bl	801ef10 <_printf_common>
 801f148:	3001      	adds	r0, #1
 801f14a:	d14a      	bne.n	801f1e2 <_printf_i+0x1f6>
 801f14c:	f04f 30ff 	mov.w	r0, #4294967295
 801f150:	b004      	add	sp, #16
 801f152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f156:	6823      	ldr	r3, [r4, #0]
 801f158:	f043 0320 	orr.w	r3, r3, #32
 801f15c:	6023      	str	r3, [r4, #0]
 801f15e:	4833      	ldr	r0, [pc, #204]	; (801f22c <_printf_i+0x240>)
 801f160:	2778      	movs	r7, #120	; 0x78
 801f162:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f166:	6823      	ldr	r3, [r4, #0]
 801f168:	6829      	ldr	r1, [r5, #0]
 801f16a:	061f      	lsls	r7, r3, #24
 801f16c:	f851 6b04 	ldr.w	r6, [r1], #4
 801f170:	d402      	bmi.n	801f178 <_printf_i+0x18c>
 801f172:	065f      	lsls	r7, r3, #25
 801f174:	bf48      	it	mi
 801f176:	b2b6      	uxthmi	r6, r6
 801f178:	07df      	lsls	r7, r3, #31
 801f17a:	bf48      	it	mi
 801f17c:	f043 0320 	orrmi.w	r3, r3, #32
 801f180:	6029      	str	r1, [r5, #0]
 801f182:	bf48      	it	mi
 801f184:	6023      	strmi	r3, [r4, #0]
 801f186:	b91e      	cbnz	r6, 801f190 <_printf_i+0x1a4>
 801f188:	6823      	ldr	r3, [r4, #0]
 801f18a:	f023 0320 	bic.w	r3, r3, #32
 801f18e:	6023      	str	r3, [r4, #0]
 801f190:	2310      	movs	r3, #16
 801f192:	e7a7      	b.n	801f0e4 <_printf_i+0xf8>
 801f194:	4824      	ldr	r0, [pc, #144]	; (801f228 <_printf_i+0x23c>)
 801f196:	e7e4      	b.n	801f162 <_printf_i+0x176>
 801f198:	4615      	mov	r5, r2
 801f19a:	e7bd      	b.n	801f118 <_printf_i+0x12c>
 801f19c:	682b      	ldr	r3, [r5, #0]
 801f19e:	6826      	ldr	r6, [r4, #0]
 801f1a0:	6961      	ldr	r1, [r4, #20]
 801f1a2:	1d18      	adds	r0, r3, #4
 801f1a4:	6028      	str	r0, [r5, #0]
 801f1a6:	0635      	lsls	r5, r6, #24
 801f1a8:	681b      	ldr	r3, [r3, #0]
 801f1aa:	d501      	bpl.n	801f1b0 <_printf_i+0x1c4>
 801f1ac:	6019      	str	r1, [r3, #0]
 801f1ae:	e002      	b.n	801f1b6 <_printf_i+0x1ca>
 801f1b0:	0670      	lsls	r0, r6, #25
 801f1b2:	d5fb      	bpl.n	801f1ac <_printf_i+0x1c0>
 801f1b4:	8019      	strh	r1, [r3, #0]
 801f1b6:	2300      	movs	r3, #0
 801f1b8:	6123      	str	r3, [r4, #16]
 801f1ba:	4615      	mov	r5, r2
 801f1bc:	e7bc      	b.n	801f138 <_printf_i+0x14c>
 801f1be:	682b      	ldr	r3, [r5, #0]
 801f1c0:	1d1a      	adds	r2, r3, #4
 801f1c2:	602a      	str	r2, [r5, #0]
 801f1c4:	681d      	ldr	r5, [r3, #0]
 801f1c6:	6862      	ldr	r2, [r4, #4]
 801f1c8:	2100      	movs	r1, #0
 801f1ca:	4628      	mov	r0, r5
 801f1cc:	f7e1 f810 	bl	80001f0 <memchr>
 801f1d0:	b108      	cbz	r0, 801f1d6 <_printf_i+0x1ea>
 801f1d2:	1b40      	subs	r0, r0, r5
 801f1d4:	6060      	str	r0, [r4, #4]
 801f1d6:	6863      	ldr	r3, [r4, #4]
 801f1d8:	6123      	str	r3, [r4, #16]
 801f1da:	2300      	movs	r3, #0
 801f1dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f1e0:	e7aa      	b.n	801f138 <_printf_i+0x14c>
 801f1e2:	6923      	ldr	r3, [r4, #16]
 801f1e4:	462a      	mov	r2, r5
 801f1e6:	4649      	mov	r1, r9
 801f1e8:	4640      	mov	r0, r8
 801f1ea:	47d0      	blx	sl
 801f1ec:	3001      	adds	r0, #1
 801f1ee:	d0ad      	beq.n	801f14c <_printf_i+0x160>
 801f1f0:	6823      	ldr	r3, [r4, #0]
 801f1f2:	079b      	lsls	r3, r3, #30
 801f1f4:	d413      	bmi.n	801f21e <_printf_i+0x232>
 801f1f6:	68e0      	ldr	r0, [r4, #12]
 801f1f8:	9b03      	ldr	r3, [sp, #12]
 801f1fa:	4298      	cmp	r0, r3
 801f1fc:	bfb8      	it	lt
 801f1fe:	4618      	movlt	r0, r3
 801f200:	e7a6      	b.n	801f150 <_printf_i+0x164>
 801f202:	2301      	movs	r3, #1
 801f204:	4632      	mov	r2, r6
 801f206:	4649      	mov	r1, r9
 801f208:	4640      	mov	r0, r8
 801f20a:	47d0      	blx	sl
 801f20c:	3001      	adds	r0, #1
 801f20e:	d09d      	beq.n	801f14c <_printf_i+0x160>
 801f210:	3501      	adds	r5, #1
 801f212:	68e3      	ldr	r3, [r4, #12]
 801f214:	9903      	ldr	r1, [sp, #12]
 801f216:	1a5b      	subs	r3, r3, r1
 801f218:	42ab      	cmp	r3, r5
 801f21a:	dcf2      	bgt.n	801f202 <_printf_i+0x216>
 801f21c:	e7eb      	b.n	801f1f6 <_printf_i+0x20a>
 801f21e:	2500      	movs	r5, #0
 801f220:	f104 0619 	add.w	r6, r4, #25
 801f224:	e7f5      	b.n	801f212 <_printf_i+0x226>
 801f226:	bf00      	nop
 801f228:	0802d1f3 	.word	0x0802d1f3
 801f22c:	0802d204 	.word	0x0802d204

0801f230 <_scanf_float>:
 801f230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f234:	b087      	sub	sp, #28
 801f236:	4617      	mov	r7, r2
 801f238:	9303      	str	r3, [sp, #12]
 801f23a:	688b      	ldr	r3, [r1, #8]
 801f23c:	1e5a      	subs	r2, r3, #1
 801f23e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f242:	bf83      	ittte	hi
 801f244:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f248:	195b      	addhi	r3, r3, r5
 801f24a:	9302      	strhi	r3, [sp, #8]
 801f24c:	2300      	movls	r3, #0
 801f24e:	bf86      	itte	hi
 801f250:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f254:	608b      	strhi	r3, [r1, #8]
 801f256:	9302      	strls	r3, [sp, #8]
 801f258:	680b      	ldr	r3, [r1, #0]
 801f25a:	468b      	mov	fp, r1
 801f25c:	2500      	movs	r5, #0
 801f25e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801f262:	f84b 3b1c 	str.w	r3, [fp], #28
 801f266:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801f26a:	4680      	mov	r8, r0
 801f26c:	460c      	mov	r4, r1
 801f26e:	465e      	mov	r6, fp
 801f270:	46aa      	mov	sl, r5
 801f272:	46a9      	mov	r9, r5
 801f274:	9501      	str	r5, [sp, #4]
 801f276:	68a2      	ldr	r2, [r4, #8]
 801f278:	b152      	cbz	r2, 801f290 <_scanf_float+0x60>
 801f27a:	683b      	ldr	r3, [r7, #0]
 801f27c:	781b      	ldrb	r3, [r3, #0]
 801f27e:	2b4e      	cmp	r3, #78	; 0x4e
 801f280:	d864      	bhi.n	801f34c <_scanf_float+0x11c>
 801f282:	2b40      	cmp	r3, #64	; 0x40
 801f284:	d83c      	bhi.n	801f300 <_scanf_float+0xd0>
 801f286:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801f28a:	b2c8      	uxtb	r0, r1
 801f28c:	280e      	cmp	r0, #14
 801f28e:	d93a      	bls.n	801f306 <_scanf_float+0xd6>
 801f290:	f1b9 0f00 	cmp.w	r9, #0
 801f294:	d003      	beq.n	801f29e <_scanf_float+0x6e>
 801f296:	6823      	ldr	r3, [r4, #0]
 801f298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f29c:	6023      	str	r3, [r4, #0]
 801f29e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f2a2:	f1ba 0f01 	cmp.w	sl, #1
 801f2a6:	f200 8113 	bhi.w	801f4d0 <_scanf_float+0x2a0>
 801f2aa:	455e      	cmp	r6, fp
 801f2ac:	f200 8105 	bhi.w	801f4ba <_scanf_float+0x28a>
 801f2b0:	2501      	movs	r5, #1
 801f2b2:	4628      	mov	r0, r5
 801f2b4:	b007      	add	sp, #28
 801f2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801f2be:	2a0d      	cmp	r2, #13
 801f2c0:	d8e6      	bhi.n	801f290 <_scanf_float+0x60>
 801f2c2:	a101      	add	r1, pc, #4	; (adr r1, 801f2c8 <_scanf_float+0x98>)
 801f2c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801f2c8:	0801f407 	.word	0x0801f407
 801f2cc:	0801f291 	.word	0x0801f291
 801f2d0:	0801f291 	.word	0x0801f291
 801f2d4:	0801f291 	.word	0x0801f291
 801f2d8:	0801f467 	.word	0x0801f467
 801f2dc:	0801f43f 	.word	0x0801f43f
 801f2e0:	0801f291 	.word	0x0801f291
 801f2e4:	0801f291 	.word	0x0801f291
 801f2e8:	0801f415 	.word	0x0801f415
 801f2ec:	0801f291 	.word	0x0801f291
 801f2f0:	0801f291 	.word	0x0801f291
 801f2f4:	0801f291 	.word	0x0801f291
 801f2f8:	0801f291 	.word	0x0801f291
 801f2fc:	0801f3cd 	.word	0x0801f3cd
 801f300:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801f304:	e7db      	b.n	801f2be <_scanf_float+0x8e>
 801f306:	290e      	cmp	r1, #14
 801f308:	d8c2      	bhi.n	801f290 <_scanf_float+0x60>
 801f30a:	a001      	add	r0, pc, #4	; (adr r0, 801f310 <_scanf_float+0xe0>)
 801f30c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801f310:	0801f3bf 	.word	0x0801f3bf
 801f314:	0801f291 	.word	0x0801f291
 801f318:	0801f3bf 	.word	0x0801f3bf
 801f31c:	0801f453 	.word	0x0801f453
 801f320:	0801f291 	.word	0x0801f291
 801f324:	0801f36d 	.word	0x0801f36d
 801f328:	0801f3a9 	.word	0x0801f3a9
 801f32c:	0801f3a9 	.word	0x0801f3a9
 801f330:	0801f3a9 	.word	0x0801f3a9
 801f334:	0801f3a9 	.word	0x0801f3a9
 801f338:	0801f3a9 	.word	0x0801f3a9
 801f33c:	0801f3a9 	.word	0x0801f3a9
 801f340:	0801f3a9 	.word	0x0801f3a9
 801f344:	0801f3a9 	.word	0x0801f3a9
 801f348:	0801f3a9 	.word	0x0801f3a9
 801f34c:	2b6e      	cmp	r3, #110	; 0x6e
 801f34e:	d809      	bhi.n	801f364 <_scanf_float+0x134>
 801f350:	2b60      	cmp	r3, #96	; 0x60
 801f352:	d8b2      	bhi.n	801f2ba <_scanf_float+0x8a>
 801f354:	2b54      	cmp	r3, #84	; 0x54
 801f356:	d077      	beq.n	801f448 <_scanf_float+0x218>
 801f358:	2b59      	cmp	r3, #89	; 0x59
 801f35a:	d199      	bne.n	801f290 <_scanf_float+0x60>
 801f35c:	2d07      	cmp	r5, #7
 801f35e:	d197      	bne.n	801f290 <_scanf_float+0x60>
 801f360:	2508      	movs	r5, #8
 801f362:	e029      	b.n	801f3b8 <_scanf_float+0x188>
 801f364:	2b74      	cmp	r3, #116	; 0x74
 801f366:	d06f      	beq.n	801f448 <_scanf_float+0x218>
 801f368:	2b79      	cmp	r3, #121	; 0x79
 801f36a:	e7f6      	b.n	801f35a <_scanf_float+0x12a>
 801f36c:	6821      	ldr	r1, [r4, #0]
 801f36e:	05c8      	lsls	r0, r1, #23
 801f370:	d51a      	bpl.n	801f3a8 <_scanf_float+0x178>
 801f372:	9b02      	ldr	r3, [sp, #8]
 801f374:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801f378:	6021      	str	r1, [r4, #0]
 801f37a:	f109 0901 	add.w	r9, r9, #1
 801f37e:	b11b      	cbz	r3, 801f388 <_scanf_float+0x158>
 801f380:	3b01      	subs	r3, #1
 801f382:	3201      	adds	r2, #1
 801f384:	9302      	str	r3, [sp, #8]
 801f386:	60a2      	str	r2, [r4, #8]
 801f388:	68a3      	ldr	r3, [r4, #8]
 801f38a:	3b01      	subs	r3, #1
 801f38c:	60a3      	str	r3, [r4, #8]
 801f38e:	6923      	ldr	r3, [r4, #16]
 801f390:	3301      	adds	r3, #1
 801f392:	6123      	str	r3, [r4, #16]
 801f394:	687b      	ldr	r3, [r7, #4]
 801f396:	3b01      	subs	r3, #1
 801f398:	2b00      	cmp	r3, #0
 801f39a:	607b      	str	r3, [r7, #4]
 801f39c:	f340 8084 	ble.w	801f4a8 <_scanf_float+0x278>
 801f3a0:	683b      	ldr	r3, [r7, #0]
 801f3a2:	3301      	adds	r3, #1
 801f3a4:	603b      	str	r3, [r7, #0]
 801f3a6:	e766      	b.n	801f276 <_scanf_float+0x46>
 801f3a8:	eb1a 0f05 	cmn.w	sl, r5
 801f3ac:	f47f af70 	bne.w	801f290 <_scanf_float+0x60>
 801f3b0:	6822      	ldr	r2, [r4, #0]
 801f3b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801f3b6:	6022      	str	r2, [r4, #0]
 801f3b8:	f806 3b01 	strb.w	r3, [r6], #1
 801f3bc:	e7e4      	b.n	801f388 <_scanf_float+0x158>
 801f3be:	6822      	ldr	r2, [r4, #0]
 801f3c0:	0610      	lsls	r0, r2, #24
 801f3c2:	f57f af65 	bpl.w	801f290 <_scanf_float+0x60>
 801f3c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801f3ca:	e7f4      	b.n	801f3b6 <_scanf_float+0x186>
 801f3cc:	f1ba 0f00 	cmp.w	sl, #0
 801f3d0:	d10e      	bne.n	801f3f0 <_scanf_float+0x1c0>
 801f3d2:	f1b9 0f00 	cmp.w	r9, #0
 801f3d6:	d10e      	bne.n	801f3f6 <_scanf_float+0x1c6>
 801f3d8:	6822      	ldr	r2, [r4, #0]
 801f3da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f3de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f3e2:	d108      	bne.n	801f3f6 <_scanf_float+0x1c6>
 801f3e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f3e8:	6022      	str	r2, [r4, #0]
 801f3ea:	f04f 0a01 	mov.w	sl, #1
 801f3ee:	e7e3      	b.n	801f3b8 <_scanf_float+0x188>
 801f3f0:	f1ba 0f02 	cmp.w	sl, #2
 801f3f4:	d055      	beq.n	801f4a2 <_scanf_float+0x272>
 801f3f6:	2d01      	cmp	r5, #1
 801f3f8:	d002      	beq.n	801f400 <_scanf_float+0x1d0>
 801f3fa:	2d04      	cmp	r5, #4
 801f3fc:	f47f af48 	bne.w	801f290 <_scanf_float+0x60>
 801f400:	3501      	adds	r5, #1
 801f402:	b2ed      	uxtb	r5, r5
 801f404:	e7d8      	b.n	801f3b8 <_scanf_float+0x188>
 801f406:	f1ba 0f01 	cmp.w	sl, #1
 801f40a:	f47f af41 	bne.w	801f290 <_scanf_float+0x60>
 801f40e:	f04f 0a02 	mov.w	sl, #2
 801f412:	e7d1      	b.n	801f3b8 <_scanf_float+0x188>
 801f414:	b97d      	cbnz	r5, 801f436 <_scanf_float+0x206>
 801f416:	f1b9 0f00 	cmp.w	r9, #0
 801f41a:	f47f af3c 	bne.w	801f296 <_scanf_float+0x66>
 801f41e:	6822      	ldr	r2, [r4, #0]
 801f420:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f424:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f428:	f47f af39 	bne.w	801f29e <_scanf_float+0x6e>
 801f42c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f430:	6022      	str	r2, [r4, #0]
 801f432:	2501      	movs	r5, #1
 801f434:	e7c0      	b.n	801f3b8 <_scanf_float+0x188>
 801f436:	2d03      	cmp	r5, #3
 801f438:	d0e2      	beq.n	801f400 <_scanf_float+0x1d0>
 801f43a:	2d05      	cmp	r5, #5
 801f43c:	e7de      	b.n	801f3fc <_scanf_float+0x1cc>
 801f43e:	2d02      	cmp	r5, #2
 801f440:	f47f af26 	bne.w	801f290 <_scanf_float+0x60>
 801f444:	2503      	movs	r5, #3
 801f446:	e7b7      	b.n	801f3b8 <_scanf_float+0x188>
 801f448:	2d06      	cmp	r5, #6
 801f44a:	f47f af21 	bne.w	801f290 <_scanf_float+0x60>
 801f44e:	2507      	movs	r5, #7
 801f450:	e7b2      	b.n	801f3b8 <_scanf_float+0x188>
 801f452:	6822      	ldr	r2, [r4, #0]
 801f454:	0591      	lsls	r1, r2, #22
 801f456:	f57f af1b 	bpl.w	801f290 <_scanf_float+0x60>
 801f45a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801f45e:	6022      	str	r2, [r4, #0]
 801f460:	f8cd 9004 	str.w	r9, [sp, #4]
 801f464:	e7a8      	b.n	801f3b8 <_scanf_float+0x188>
 801f466:	6822      	ldr	r2, [r4, #0]
 801f468:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801f46c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801f470:	d006      	beq.n	801f480 <_scanf_float+0x250>
 801f472:	0550      	lsls	r0, r2, #21
 801f474:	f57f af0c 	bpl.w	801f290 <_scanf_float+0x60>
 801f478:	f1b9 0f00 	cmp.w	r9, #0
 801f47c:	f43f af0f 	beq.w	801f29e <_scanf_float+0x6e>
 801f480:	0591      	lsls	r1, r2, #22
 801f482:	bf58      	it	pl
 801f484:	9901      	ldrpl	r1, [sp, #4]
 801f486:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f48a:	bf58      	it	pl
 801f48c:	eba9 0101 	subpl.w	r1, r9, r1
 801f490:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801f494:	bf58      	it	pl
 801f496:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801f49a:	6022      	str	r2, [r4, #0]
 801f49c:	f04f 0900 	mov.w	r9, #0
 801f4a0:	e78a      	b.n	801f3b8 <_scanf_float+0x188>
 801f4a2:	f04f 0a03 	mov.w	sl, #3
 801f4a6:	e787      	b.n	801f3b8 <_scanf_float+0x188>
 801f4a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f4ac:	4639      	mov	r1, r7
 801f4ae:	4640      	mov	r0, r8
 801f4b0:	4798      	blx	r3
 801f4b2:	2800      	cmp	r0, #0
 801f4b4:	f43f aedf 	beq.w	801f276 <_scanf_float+0x46>
 801f4b8:	e6ea      	b.n	801f290 <_scanf_float+0x60>
 801f4ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f4be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f4c2:	463a      	mov	r2, r7
 801f4c4:	4640      	mov	r0, r8
 801f4c6:	4798      	blx	r3
 801f4c8:	6923      	ldr	r3, [r4, #16]
 801f4ca:	3b01      	subs	r3, #1
 801f4cc:	6123      	str	r3, [r4, #16]
 801f4ce:	e6ec      	b.n	801f2aa <_scanf_float+0x7a>
 801f4d0:	1e6b      	subs	r3, r5, #1
 801f4d2:	2b06      	cmp	r3, #6
 801f4d4:	d825      	bhi.n	801f522 <_scanf_float+0x2f2>
 801f4d6:	2d02      	cmp	r5, #2
 801f4d8:	d836      	bhi.n	801f548 <_scanf_float+0x318>
 801f4da:	455e      	cmp	r6, fp
 801f4dc:	f67f aee8 	bls.w	801f2b0 <_scanf_float+0x80>
 801f4e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f4e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f4e8:	463a      	mov	r2, r7
 801f4ea:	4640      	mov	r0, r8
 801f4ec:	4798      	blx	r3
 801f4ee:	6923      	ldr	r3, [r4, #16]
 801f4f0:	3b01      	subs	r3, #1
 801f4f2:	6123      	str	r3, [r4, #16]
 801f4f4:	e7f1      	b.n	801f4da <_scanf_float+0x2aa>
 801f4f6:	9802      	ldr	r0, [sp, #8]
 801f4f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f4fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801f500:	9002      	str	r0, [sp, #8]
 801f502:	463a      	mov	r2, r7
 801f504:	4640      	mov	r0, r8
 801f506:	4798      	blx	r3
 801f508:	6923      	ldr	r3, [r4, #16]
 801f50a:	3b01      	subs	r3, #1
 801f50c:	6123      	str	r3, [r4, #16]
 801f50e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f512:	fa5f fa8a 	uxtb.w	sl, sl
 801f516:	f1ba 0f02 	cmp.w	sl, #2
 801f51a:	d1ec      	bne.n	801f4f6 <_scanf_float+0x2c6>
 801f51c:	3d03      	subs	r5, #3
 801f51e:	b2ed      	uxtb	r5, r5
 801f520:	1b76      	subs	r6, r6, r5
 801f522:	6823      	ldr	r3, [r4, #0]
 801f524:	05da      	lsls	r2, r3, #23
 801f526:	d52f      	bpl.n	801f588 <_scanf_float+0x358>
 801f528:	055b      	lsls	r3, r3, #21
 801f52a:	d510      	bpl.n	801f54e <_scanf_float+0x31e>
 801f52c:	455e      	cmp	r6, fp
 801f52e:	f67f aebf 	bls.w	801f2b0 <_scanf_float+0x80>
 801f532:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f536:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f53a:	463a      	mov	r2, r7
 801f53c:	4640      	mov	r0, r8
 801f53e:	4798      	blx	r3
 801f540:	6923      	ldr	r3, [r4, #16]
 801f542:	3b01      	subs	r3, #1
 801f544:	6123      	str	r3, [r4, #16]
 801f546:	e7f1      	b.n	801f52c <_scanf_float+0x2fc>
 801f548:	46aa      	mov	sl, r5
 801f54a:	9602      	str	r6, [sp, #8]
 801f54c:	e7df      	b.n	801f50e <_scanf_float+0x2de>
 801f54e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801f552:	6923      	ldr	r3, [r4, #16]
 801f554:	2965      	cmp	r1, #101	; 0x65
 801f556:	f103 33ff 	add.w	r3, r3, #4294967295
 801f55a:	f106 35ff 	add.w	r5, r6, #4294967295
 801f55e:	6123      	str	r3, [r4, #16]
 801f560:	d00c      	beq.n	801f57c <_scanf_float+0x34c>
 801f562:	2945      	cmp	r1, #69	; 0x45
 801f564:	d00a      	beq.n	801f57c <_scanf_float+0x34c>
 801f566:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f56a:	463a      	mov	r2, r7
 801f56c:	4640      	mov	r0, r8
 801f56e:	4798      	blx	r3
 801f570:	6923      	ldr	r3, [r4, #16]
 801f572:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801f576:	3b01      	subs	r3, #1
 801f578:	1eb5      	subs	r5, r6, #2
 801f57a:	6123      	str	r3, [r4, #16]
 801f57c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f580:	463a      	mov	r2, r7
 801f582:	4640      	mov	r0, r8
 801f584:	4798      	blx	r3
 801f586:	462e      	mov	r6, r5
 801f588:	6825      	ldr	r5, [r4, #0]
 801f58a:	f015 0510 	ands.w	r5, r5, #16
 801f58e:	d158      	bne.n	801f642 <_scanf_float+0x412>
 801f590:	7035      	strb	r5, [r6, #0]
 801f592:	6823      	ldr	r3, [r4, #0]
 801f594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801f598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f59c:	d11c      	bne.n	801f5d8 <_scanf_float+0x3a8>
 801f59e:	9b01      	ldr	r3, [sp, #4]
 801f5a0:	454b      	cmp	r3, r9
 801f5a2:	eba3 0209 	sub.w	r2, r3, r9
 801f5a6:	d124      	bne.n	801f5f2 <_scanf_float+0x3c2>
 801f5a8:	2200      	movs	r2, #0
 801f5aa:	4659      	mov	r1, fp
 801f5ac:	4640      	mov	r0, r8
 801f5ae:	f7ff f9c7 	bl	801e940 <_strtod_r>
 801f5b2:	9b03      	ldr	r3, [sp, #12]
 801f5b4:	6821      	ldr	r1, [r4, #0]
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	f011 0f02 	tst.w	r1, #2
 801f5bc:	ec57 6b10 	vmov	r6, r7, d0
 801f5c0:	f103 0204 	add.w	r2, r3, #4
 801f5c4:	d020      	beq.n	801f608 <_scanf_float+0x3d8>
 801f5c6:	9903      	ldr	r1, [sp, #12]
 801f5c8:	600a      	str	r2, [r1, #0]
 801f5ca:	681b      	ldr	r3, [r3, #0]
 801f5cc:	e9c3 6700 	strd	r6, r7, [r3]
 801f5d0:	68e3      	ldr	r3, [r4, #12]
 801f5d2:	3301      	adds	r3, #1
 801f5d4:	60e3      	str	r3, [r4, #12]
 801f5d6:	e66c      	b.n	801f2b2 <_scanf_float+0x82>
 801f5d8:	9b04      	ldr	r3, [sp, #16]
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	d0e4      	beq.n	801f5a8 <_scanf_float+0x378>
 801f5de:	9905      	ldr	r1, [sp, #20]
 801f5e0:	230a      	movs	r3, #10
 801f5e2:	462a      	mov	r2, r5
 801f5e4:	3101      	adds	r1, #1
 801f5e6:	4640      	mov	r0, r8
 801f5e8:	f002 f9d6 	bl	8021998 <_strtol_r>
 801f5ec:	9b04      	ldr	r3, [sp, #16]
 801f5ee:	9e05      	ldr	r6, [sp, #20]
 801f5f0:	1ac2      	subs	r2, r0, r3
 801f5f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801f5f6:	429e      	cmp	r6, r3
 801f5f8:	bf28      	it	cs
 801f5fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801f5fe:	4912      	ldr	r1, [pc, #72]	; (801f648 <_scanf_float+0x418>)
 801f600:	4630      	mov	r0, r6
 801f602:	f000 f8e7 	bl	801f7d4 <siprintf>
 801f606:	e7cf      	b.n	801f5a8 <_scanf_float+0x378>
 801f608:	f011 0f04 	tst.w	r1, #4
 801f60c:	9903      	ldr	r1, [sp, #12]
 801f60e:	600a      	str	r2, [r1, #0]
 801f610:	d1db      	bne.n	801f5ca <_scanf_float+0x39a>
 801f612:	f8d3 8000 	ldr.w	r8, [r3]
 801f616:	ee10 2a10 	vmov	r2, s0
 801f61a:	ee10 0a10 	vmov	r0, s0
 801f61e:	463b      	mov	r3, r7
 801f620:	4639      	mov	r1, r7
 801f622:	f7e1 fa93 	bl	8000b4c <__aeabi_dcmpun>
 801f626:	b128      	cbz	r0, 801f634 <_scanf_float+0x404>
 801f628:	4808      	ldr	r0, [pc, #32]	; (801f64c <_scanf_float+0x41c>)
 801f62a:	f7fb ff6f 	bl	801b50c <nanf>
 801f62e:	ed88 0a00 	vstr	s0, [r8]
 801f632:	e7cd      	b.n	801f5d0 <_scanf_float+0x3a0>
 801f634:	4630      	mov	r0, r6
 801f636:	4639      	mov	r1, r7
 801f638:	f7e1 fae6 	bl	8000c08 <__aeabi_d2f>
 801f63c:	f8c8 0000 	str.w	r0, [r8]
 801f640:	e7c6      	b.n	801f5d0 <_scanf_float+0x3a0>
 801f642:	2500      	movs	r5, #0
 801f644:	e635      	b.n	801f2b2 <_scanf_float+0x82>
 801f646:	bf00      	nop
 801f648:	0802d215 	.word	0x0802d215
 801f64c:	0802d08b 	.word	0x0802d08b

0801f650 <std>:
 801f650:	2300      	movs	r3, #0
 801f652:	b510      	push	{r4, lr}
 801f654:	4604      	mov	r4, r0
 801f656:	e9c0 3300 	strd	r3, r3, [r0]
 801f65a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f65e:	6083      	str	r3, [r0, #8]
 801f660:	8181      	strh	r1, [r0, #12]
 801f662:	6643      	str	r3, [r0, #100]	; 0x64
 801f664:	81c2      	strh	r2, [r0, #14]
 801f666:	6183      	str	r3, [r0, #24]
 801f668:	4619      	mov	r1, r3
 801f66a:	2208      	movs	r2, #8
 801f66c:	305c      	adds	r0, #92	; 0x5c
 801f66e:	f000 f939 	bl	801f8e4 <memset>
 801f672:	4b05      	ldr	r3, [pc, #20]	; (801f688 <std+0x38>)
 801f674:	6263      	str	r3, [r4, #36]	; 0x24
 801f676:	4b05      	ldr	r3, [pc, #20]	; (801f68c <std+0x3c>)
 801f678:	62a3      	str	r3, [r4, #40]	; 0x28
 801f67a:	4b05      	ldr	r3, [pc, #20]	; (801f690 <std+0x40>)
 801f67c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f67e:	4b05      	ldr	r3, [pc, #20]	; (801f694 <std+0x44>)
 801f680:	6224      	str	r4, [r4, #32]
 801f682:	6323      	str	r3, [r4, #48]	; 0x30
 801f684:	bd10      	pop	{r4, pc}
 801f686:	bf00      	nop
 801f688:	0801f815 	.word	0x0801f815
 801f68c:	0801f837 	.word	0x0801f837
 801f690:	0801f86f 	.word	0x0801f86f
 801f694:	0801f893 	.word	0x0801f893

0801f698 <stdio_exit_handler>:
 801f698:	4a02      	ldr	r2, [pc, #8]	; (801f6a4 <stdio_exit_handler+0xc>)
 801f69a:	4903      	ldr	r1, [pc, #12]	; (801f6a8 <stdio_exit_handler+0x10>)
 801f69c:	4803      	ldr	r0, [pc, #12]	; (801f6ac <stdio_exit_handler+0x14>)
 801f69e:	f000 b87b 	b.w	801f798 <_fwalk_sglue>
 801f6a2:	bf00      	nop
 801f6a4:	200002f0 	.word	0x200002f0
 801f6a8:	08021ffd 	.word	0x08021ffd
 801f6ac:	20000468 	.word	0x20000468

0801f6b0 <cleanup_stdio>:
 801f6b0:	6841      	ldr	r1, [r0, #4]
 801f6b2:	4b0c      	ldr	r3, [pc, #48]	; (801f6e4 <cleanup_stdio+0x34>)
 801f6b4:	4299      	cmp	r1, r3
 801f6b6:	b510      	push	{r4, lr}
 801f6b8:	4604      	mov	r4, r0
 801f6ba:	d001      	beq.n	801f6c0 <cleanup_stdio+0x10>
 801f6bc:	f002 fc9e 	bl	8021ffc <_fflush_r>
 801f6c0:	68a1      	ldr	r1, [r4, #8]
 801f6c2:	4b09      	ldr	r3, [pc, #36]	; (801f6e8 <cleanup_stdio+0x38>)
 801f6c4:	4299      	cmp	r1, r3
 801f6c6:	d002      	beq.n	801f6ce <cleanup_stdio+0x1e>
 801f6c8:	4620      	mov	r0, r4
 801f6ca:	f002 fc97 	bl	8021ffc <_fflush_r>
 801f6ce:	68e1      	ldr	r1, [r4, #12]
 801f6d0:	4b06      	ldr	r3, [pc, #24]	; (801f6ec <cleanup_stdio+0x3c>)
 801f6d2:	4299      	cmp	r1, r3
 801f6d4:	d004      	beq.n	801f6e0 <cleanup_stdio+0x30>
 801f6d6:	4620      	mov	r0, r4
 801f6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f6dc:	f002 bc8e 	b.w	8021ffc <_fflush_r>
 801f6e0:	bd10      	pop	{r4, pc}
 801f6e2:	bf00      	nop
 801f6e4:	20001168 	.word	0x20001168
 801f6e8:	200011d0 	.word	0x200011d0
 801f6ec:	20001238 	.word	0x20001238

0801f6f0 <global_stdio_init.part.0>:
 801f6f0:	b510      	push	{r4, lr}
 801f6f2:	4b0b      	ldr	r3, [pc, #44]	; (801f720 <global_stdio_init.part.0+0x30>)
 801f6f4:	4c0b      	ldr	r4, [pc, #44]	; (801f724 <global_stdio_init.part.0+0x34>)
 801f6f6:	4a0c      	ldr	r2, [pc, #48]	; (801f728 <global_stdio_init.part.0+0x38>)
 801f6f8:	601a      	str	r2, [r3, #0]
 801f6fa:	4620      	mov	r0, r4
 801f6fc:	2200      	movs	r2, #0
 801f6fe:	2104      	movs	r1, #4
 801f700:	f7ff ffa6 	bl	801f650 <std>
 801f704:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801f708:	2201      	movs	r2, #1
 801f70a:	2109      	movs	r1, #9
 801f70c:	f7ff ffa0 	bl	801f650 <std>
 801f710:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801f714:	2202      	movs	r2, #2
 801f716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f71a:	2112      	movs	r1, #18
 801f71c:	f7ff bf98 	b.w	801f650 <std>
 801f720:	200012a0 	.word	0x200012a0
 801f724:	20001168 	.word	0x20001168
 801f728:	0801f699 	.word	0x0801f699

0801f72c <__sfp_lock_acquire>:
 801f72c:	4801      	ldr	r0, [pc, #4]	; (801f734 <__sfp_lock_acquire+0x8>)
 801f72e:	f000 b9bb 	b.w	801faa8 <__retarget_lock_acquire_recursive>
 801f732:	bf00      	nop
 801f734:	200012a9 	.word	0x200012a9

0801f738 <__sfp_lock_release>:
 801f738:	4801      	ldr	r0, [pc, #4]	; (801f740 <__sfp_lock_release+0x8>)
 801f73a:	f000 b9b6 	b.w	801faaa <__retarget_lock_release_recursive>
 801f73e:	bf00      	nop
 801f740:	200012a9 	.word	0x200012a9

0801f744 <__sinit>:
 801f744:	b510      	push	{r4, lr}
 801f746:	4604      	mov	r4, r0
 801f748:	f7ff fff0 	bl	801f72c <__sfp_lock_acquire>
 801f74c:	6a23      	ldr	r3, [r4, #32]
 801f74e:	b11b      	cbz	r3, 801f758 <__sinit+0x14>
 801f750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f754:	f7ff bff0 	b.w	801f738 <__sfp_lock_release>
 801f758:	4b04      	ldr	r3, [pc, #16]	; (801f76c <__sinit+0x28>)
 801f75a:	6223      	str	r3, [r4, #32]
 801f75c:	4b04      	ldr	r3, [pc, #16]	; (801f770 <__sinit+0x2c>)
 801f75e:	681b      	ldr	r3, [r3, #0]
 801f760:	2b00      	cmp	r3, #0
 801f762:	d1f5      	bne.n	801f750 <__sinit+0xc>
 801f764:	f7ff ffc4 	bl	801f6f0 <global_stdio_init.part.0>
 801f768:	e7f2      	b.n	801f750 <__sinit+0xc>
 801f76a:	bf00      	nop
 801f76c:	0801f6b1 	.word	0x0801f6b1
 801f770:	200012a0 	.word	0x200012a0

0801f774 <fiprintf>:
 801f774:	b40e      	push	{r1, r2, r3}
 801f776:	b503      	push	{r0, r1, lr}
 801f778:	4601      	mov	r1, r0
 801f77a:	ab03      	add	r3, sp, #12
 801f77c:	4805      	ldr	r0, [pc, #20]	; (801f794 <fiprintf+0x20>)
 801f77e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f782:	6800      	ldr	r0, [r0, #0]
 801f784:	9301      	str	r3, [sp, #4]
 801f786:	f002 fa99 	bl	8021cbc <_vfiprintf_r>
 801f78a:	b002      	add	sp, #8
 801f78c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f790:	b003      	add	sp, #12
 801f792:	4770      	bx	lr
 801f794:	200004b4 	.word	0x200004b4

0801f798 <_fwalk_sglue>:
 801f798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f79c:	4607      	mov	r7, r0
 801f79e:	4688      	mov	r8, r1
 801f7a0:	4614      	mov	r4, r2
 801f7a2:	2600      	movs	r6, #0
 801f7a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f7a8:	f1b9 0901 	subs.w	r9, r9, #1
 801f7ac:	d505      	bpl.n	801f7ba <_fwalk_sglue+0x22>
 801f7ae:	6824      	ldr	r4, [r4, #0]
 801f7b0:	2c00      	cmp	r4, #0
 801f7b2:	d1f7      	bne.n	801f7a4 <_fwalk_sglue+0xc>
 801f7b4:	4630      	mov	r0, r6
 801f7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f7ba:	89ab      	ldrh	r3, [r5, #12]
 801f7bc:	2b01      	cmp	r3, #1
 801f7be:	d907      	bls.n	801f7d0 <_fwalk_sglue+0x38>
 801f7c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f7c4:	3301      	adds	r3, #1
 801f7c6:	d003      	beq.n	801f7d0 <_fwalk_sglue+0x38>
 801f7c8:	4629      	mov	r1, r5
 801f7ca:	4638      	mov	r0, r7
 801f7cc:	47c0      	blx	r8
 801f7ce:	4306      	orrs	r6, r0
 801f7d0:	3568      	adds	r5, #104	; 0x68
 801f7d2:	e7e9      	b.n	801f7a8 <_fwalk_sglue+0x10>

0801f7d4 <siprintf>:
 801f7d4:	b40e      	push	{r1, r2, r3}
 801f7d6:	b500      	push	{lr}
 801f7d8:	b09c      	sub	sp, #112	; 0x70
 801f7da:	ab1d      	add	r3, sp, #116	; 0x74
 801f7dc:	9002      	str	r0, [sp, #8]
 801f7de:	9006      	str	r0, [sp, #24]
 801f7e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f7e4:	4809      	ldr	r0, [pc, #36]	; (801f80c <siprintf+0x38>)
 801f7e6:	9107      	str	r1, [sp, #28]
 801f7e8:	9104      	str	r1, [sp, #16]
 801f7ea:	4909      	ldr	r1, [pc, #36]	; (801f810 <siprintf+0x3c>)
 801f7ec:	f853 2b04 	ldr.w	r2, [r3], #4
 801f7f0:	9105      	str	r1, [sp, #20]
 801f7f2:	6800      	ldr	r0, [r0, #0]
 801f7f4:	9301      	str	r3, [sp, #4]
 801f7f6:	a902      	add	r1, sp, #8
 801f7f8:	f002 f938 	bl	8021a6c <_svfiprintf_r>
 801f7fc:	9b02      	ldr	r3, [sp, #8]
 801f7fe:	2200      	movs	r2, #0
 801f800:	701a      	strb	r2, [r3, #0]
 801f802:	b01c      	add	sp, #112	; 0x70
 801f804:	f85d eb04 	ldr.w	lr, [sp], #4
 801f808:	b003      	add	sp, #12
 801f80a:	4770      	bx	lr
 801f80c:	200004b4 	.word	0x200004b4
 801f810:	ffff0208 	.word	0xffff0208

0801f814 <__sread>:
 801f814:	b510      	push	{r4, lr}
 801f816:	460c      	mov	r4, r1
 801f818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f81c:	f000 f8d2 	bl	801f9c4 <_read_r>
 801f820:	2800      	cmp	r0, #0
 801f822:	bfab      	itete	ge
 801f824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f826:	89a3      	ldrhlt	r3, [r4, #12]
 801f828:	181b      	addge	r3, r3, r0
 801f82a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f82e:	bfac      	ite	ge
 801f830:	6563      	strge	r3, [r4, #84]	; 0x54
 801f832:	81a3      	strhlt	r3, [r4, #12]
 801f834:	bd10      	pop	{r4, pc}

0801f836 <__swrite>:
 801f836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f83a:	461f      	mov	r7, r3
 801f83c:	898b      	ldrh	r3, [r1, #12]
 801f83e:	05db      	lsls	r3, r3, #23
 801f840:	4605      	mov	r5, r0
 801f842:	460c      	mov	r4, r1
 801f844:	4616      	mov	r6, r2
 801f846:	d505      	bpl.n	801f854 <__swrite+0x1e>
 801f848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f84c:	2302      	movs	r3, #2
 801f84e:	2200      	movs	r2, #0
 801f850:	f000 f8a6 	bl	801f9a0 <_lseek_r>
 801f854:	89a3      	ldrh	r3, [r4, #12]
 801f856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f85a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f85e:	81a3      	strh	r3, [r4, #12]
 801f860:	4632      	mov	r2, r6
 801f862:	463b      	mov	r3, r7
 801f864:	4628      	mov	r0, r5
 801f866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f86a:	f000 b8e1 	b.w	801fa30 <_write_r>

0801f86e <__sseek>:
 801f86e:	b510      	push	{r4, lr}
 801f870:	460c      	mov	r4, r1
 801f872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f876:	f000 f893 	bl	801f9a0 <_lseek_r>
 801f87a:	1c43      	adds	r3, r0, #1
 801f87c:	89a3      	ldrh	r3, [r4, #12]
 801f87e:	bf15      	itete	ne
 801f880:	6560      	strne	r0, [r4, #84]	; 0x54
 801f882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f88a:	81a3      	strheq	r3, [r4, #12]
 801f88c:	bf18      	it	ne
 801f88e:	81a3      	strhne	r3, [r4, #12]
 801f890:	bd10      	pop	{r4, pc}

0801f892 <__sclose>:
 801f892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f896:	f000 b873 	b.w	801f980 <_close_r>
	...

0801f89c <viprintf>:
 801f89c:	460b      	mov	r3, r1
 801f89e:	4903      	ldr	r1, [pc, #12]	; (801f8ac <viprintf+0x10>)
 801f8a0:	4602      	mov	r2, r0
 801f8a2:	6808      	ldr	r0, [r1, #0]
 801f8a4:	6881      	ldr	r1, [r0, #8]
 801f8a6:	f002 ba09 	b.w	8021cbc <_vfiprintf_r>
 801f8aa:	bf00      	nop
 801f8ac:	200004b4 	.word	0x200004b4

0801f8b0 <memmove>:
 801f8b0:	4288      	cmp	r0, r1
 801f8b2:	b510      	push	{r4, lr}
 801f8b4:	eb01 0402 	add.w	r4, r1, r2
 801f8b8:	d902      	bls.n	801f8c0 <memmove+0x10>
 801f8ba:	4284      	cmp	r4, r0
 801f8bc:	4623      	mov	r3, r4
 801f8be:	d807      	bhi.n	801f8d0 <memmove+0x20>
 801f8c0:	1e43      	subs	r3, r0, #1
 801f8c2:	42a1      	cmp	r1, r4
 801f8c4:	d008      	beq.n	801f8d8 <memmove+0x28>
 801f8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f8ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f8ce:	e7f8      	b.n	801f8c2 <memmove+0x12>
 801f8d0:	4402      	add	r2, r0
 801f8d2:	4601      	mov	r1, r0
 801f8d4:	428a      	cmp	r2, r1
 801f8d6:	d100      	bne.n	801f8da <memmove+0x2a>
 801f8d8:	bd10      	pop	{r4, pc}
 801f8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f8de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f8e2:	e7f7      	b.n	801f8d4 <memmove+0x24>

0801f8e4 <memset>:
 801f8e4:	4402      	add	r2, r0
 801f8e6:	4603      	mov	r3, r0
 801f8e8:	4293      	cmp	r3, r2
 801f8ea:	d100      	bne.n	801f8ee <memset+0xa>
 801f8ec:	4770      	bx	lr
 801f8ee:	f803 1b01 	strb.w	r1, [r3], #1
 801f8f2:	e7f9      	b.n	801f8e8 <memset+0x4>

0801f8f4 <strncmp>:
 801f8f4:	b510      	push	{r4, lr}
 801f8f6:	b16a      	cbz	r2, 801f914 <strncmp+0x20>
 801f8f8:	3901      	subs	r1, #1
 801f8fa:	1884      	adds	r4, r0, r2
 801f8fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f900:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801f904:	429a      	cmp	r2, r3
 801f906:	d103      	bne.n	801f910 <strncmp+0x1c>
 801f908:	42a0      	cmp	r0, r4
 801f90a:	d001      	beq.n	801f910 <strncmp+0x1c>
 801f90c:	2a00      	cmp	r2, #0
 801f90e:	d1f5      	bne.n	801f8fc <strncmp+0x8>
 801f910:	1ad0      	subs	r0, r2, r3
 801f912:	bd10      	pop	{r4, pc}
 801f914:	4610      	mov	r0, r2
 801f916:	e7fc      	b.n	801f912 <strncmp+0x1e>

0801f918 <_raise_r>:
 801f918:	291f      	cmp	r1, #31
 801f91a:	b538      	push	{r3, r4, r5, lr}
 801f91c:	4604      	mov	r4, r0
 801f91e:	460d      	mov	r5, r1
 801f920:	d904      	bls.n	801f92c <_raise_r+0x14>
 801f922:	2316      	movs	r3, #22
 801f924:	6003      	str	r3, [r0, #0]
 801f926:	f04f 30ff 	mov.w	r0, #4294967295
 801f92a:	bd38      	pop	{r3, r4, r5, pc}
 801f92c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801f92e:	b112      	cbz	r2, 801f936 <_raise_r+0x1e>
 801f930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f934:	b94b      	cbnz	r3, 801f94a <_raise_r+0x32>
 801f936:	4620      	mov	r0, r4
 801f938:	f000 f868 	bl	801fa0c <_getpid_r>
 801f93c:	462a      	mov	r2, r5
 801f93e:	4601      	mov	r1, r0
 801f940:	4620      	mov	r0, r4
 801f942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f946:	f000 b84f 	b.w	801f9e8 <_kill_r>
 801f94a:	2b01      	cmp	r3, #1
 801f94c:	d00a      	beq.n	801f964 <_raise_r+0x4c>
 801f94e:	1c59      	adds	r1, r3, #1
 801f950:	d103      	bne.n	801f95a <_raise_r+0x42>
 801f952:	2316      	movs	r3, #22
 801f954:	6003      	str	r3, [r0, #0]
 801f956:	2001      	movs	r0, #1
 801f958:	e7e7      	b.n	801f92a <_raise_r+0x12>
 801f95a:	2400      	movs	r4, #0
 801f95c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f960:	4628      	mov	r0, r5
 801f962:	4798      	blx	r3
 801f964:	2000      	movs	r0, #0
 801f966:	e7e0      	b.n	801f92a <_raise_r+0x12>

0801f968 <raise>:
 801f968:	4b02      	ldr	r3, [pc, #8]	; (801f974 <raise+0xc>)
 801f96a:	4601      	mov	r1, r0
 801f96c:	6818      	ldr	r0, [r3, #0]
 801f96e:	f7ff bfd3 	b.w	801f918 <_raise_r>
 801f972:	bf00      	nop
 801f974:	200004b4 	.word	0x200004b4

0801f978 <_localeconv_r>:
 801f978:	4800      	ldr	r0, [pc, #0]	; (801f97c <_localeconv_r+0x4>)
 801f97a:	4770      	bx	lr
 801f97c:	200003ec 	.word	0x200003ec

0801f980 <_close_r>:
 801f980:	b538      	push	{r3, r4, r5, lr}
 801f982:	4d06      	ldr	r5, [pc, #24]	; (801f99c <_close_r+0x1c>)
 801f984:	2300      	movs	r3, #0
 801f986:	4604      	mov	r4, r0
 801f988:	4608      	mov	r0, r1
 801f98a:	602b      	str	r3, [r5, #0]
 801f98c:	f7f0 fdb6 	bl	80104fc <_close>
 801f990:	1c43      	adds	r3, r0, #1
 801f992:	d102      	bne.n	801f99a <_close_r+0x1a>
 801f994:	682b      	ldr	r3, [r5, #0]
 801f996:	b103      	cbz	r3, 801f99a <_close_r+0x1a>
 801f998:	6023      	str	r3, [r4, #0]
 801f99a:	bd38      	pop	{r3, r4, r5, pc}
 801f99c:	200012a4 	.word	0x200012a4

0801f9a0 <_lseek_r>:
 801f9a0:	b538      	push	{r3, r4, r5, lr}
 801f9a2:	4d07      	ldr	r5, [pc, #28]	; (801f9c0 <_lseek_r+0x20>)
 801f9a4:	4604      	mov	r4, r0
 801f9a6:	4608      	mov	r0, r1
 801f9a8:	4611      	mov	r1, r2
 801f9aa:	2200      	movs	r2, #0
 801f9ac:	602a      	str	r2, [r5, #0]
 801f9ae:	461a      	mov	r2, r3
 801f9b0:	f7f0 fdcb 	bl	801054a <_lseek>
 801f9b4:	1c43      	adds	r3, r0, #1
 801f9b6:	d102      	bne.n	801f9be <_lseek_r+0x1e>
 801f9b8:	682b      	ldr	r3, [r5, #0]
 801f9ba:	b103      	cbz	r3, 801f9be <_lseek_r+0x1e>
 801f9bc:	6023      	str	r3, [r4, #0]
 801f9be:	bd38      	pop	{r3, r4, r5, pc}
 801f9c0:	200012a4 	.word	0x200012a4

0801f9c4 <_read_r>:
 801f9c4:	b538      	push	{r3, r4, r5, lr}
 801f9c6:	4d07      	ldr	r5, [pc, #28]	; (801f9e4 <_read_r+0x20>)
 801f9c8:	4604      	mov	r4, r0
 801f9ca:	4608      	mov	r0, r1
 801f9cc:	4611      	mov	r1, r2
 801f9ce:	2200      	movs	r2, #0
 801f9d0:	602a      	str	r2, [r5, #0]
 801f9d2:	461a      	mov	r2, r3
 801f9d4:	f7f0 fd59 	bl	801048a <_read>
 801f9d8:	1c43      	adds	r3, r0, #1
 801f9da:	d102      	bne.n	801f9e2 <_read_r+0x1e>
 801f9dc:	682b      	ldr	r3, [r5, #0]
 801f9de:	b103      	cbz	r3, 801f9e2 <_read_r+0x1e>
 801f9e0:	6023      	str	r3, [r4, #0]
 801f9e2:	bd38      	pop	{r3, r4, r5, pc}
 801f9e4:	200012a4 	.word	0x200012a4

0801f9e8 <_kill_r>:
 801f9e8:	b538      	push	{r3, r4, r5, lr}
 801f9ea:	4d07      	ldr	r5, [pc, #28]	; (801fa08 <_kill_r+0x20>)
 801f9ec:	2300      	movs	r3, #0
 801f9ee:	4604      	mov	r4, r0
 801f9f0:	4608      	mov	r0, r1
 801f9f2:	4611      	mov	r1, r2
 801f9f4:	602b      	str	r3, [r5, #0]
 801f9f6:	f7f0 fd2e 	bl	8010456 <_kill>
 801f9fa:	1c43      	adds	r3, r0, #1
 801f9fc:	d102      	bne.n	801fa04 <_kill_r+0x1c>
 801f9fe:	682b      	ldr	r3, [r5, #0]
 801fa00:	b103      	cbz	r3, 801fa04 <_kill_r+0x1c>
 801fa02:	6023      	str	r3, [r4, #0]
 801fa04:	bd38      	pop	{r3, r4, r5, pc}
 801fa06:	bf00      	nop
 801fa08:	200012a4 	.word	0x200012a4

0801fa0c <_getpid_r>:
 801fa0c:	f7f0 bd1b 	b.w	8010446 <_getpid>

0801fa10 <_sbrk_r>:
 801fa10:	b538      	push	{r3, r4, r5, lr}
 801fa12:	4d06      	ldr	r5, [pc, #24]	; (801fa2c <_sbrk_r+0x1c>)
 801fa14:	2300      	movs	r3, #0
 801fa16:	4604      	mov	r4, r0
 801fa18:	4608      	mov	r0, r1
 801fa1a:	602b      	str	r3, [r5, #0]
 801fa1c:	f7f0 fda2 	bl	8010564 <_sbrk>
 801fa20:	1c43      	adds	r3, r0, #1
 801fa22:	d102      	bne.n	801fa2a <_sbrk_r+0x1a>
 801fa24:	682b      	ldr	r3, [r5, #0]
 801fa26:	b103      	cbz	r3, 801fa2a <_sbrk_r+0x1a>
 801fa28:	6023      	str	r3, [r4, #0]
 801fa2a:	bd38      	pop	{r3, r4, r5, pc}
 801fa2c:	200012a4 	.word	0x200012a4

0801fa30 <_write_r>:
 801fa30:	b538      	push	{r3, r4, r5, lr}
 801fa32:	4d07      	ldr	r5, [pc, #28]	; (801fa50 <_write_r+0x20>)
 801fa34:	4604      	mov	r4, r0
 801fa36:	4608      	mov	r0, r1
 801fa38:	4611      	mov	r1, r2
 801fa3a:	2200      	movs	r2, #0
 801fa3c:	602a      	str	r2, [r5, #0]
 801fa3e:	461a      	mov	r2, r3
 801fa40:	f7f0 fd40 	bl	80104c4 <_write>
 801fa44:	1c43      	adds	r3, r0, #1
 801fa46:	d102      	bne.n	801fa4e <_write_r+0x1e>
 801fa48:	682b      	ldr	r3, [r5, #0]
 801fa4a:	b103      	cbz	r3, 801fa4e <_write_r+0x1e>
 801fa4c:	6023      	str	r3, [r4, #0]
 801fa4e:	bd38      	pop	{r3, r4, r5, pc}
 801fa50:	200012a4 	.word	0x200012a4

0801fa54 <__errno>:
 801fa54:	4b01      	ldr	r3, [pc, #4]	; (801fa5c <__errno+0x8>)
 801fa56:	6818      	ldr	r0, [r3, #0]
 801fa58:	4770      	bx	lr
 801fa5a:	bf00      	nop
 801fa5c:	200004b4 	.word	0x200004b4

0801fa60 <__libc_init_array>:
 801fa60:	b570      	push	{r4, r5, r6, lr}
 801fa62:	4d0d      	ldr	r5, [pc, #52]	; (801fa98 <__libc_init_array+0x38>)
 801fa64:	4c0d      	ldr	r4, [pc, #52]	; (801fa9c <__libc_init_array+0x3c>)
 801fa66:	1b64      	subs	r4, r4, r5
 801fa68:	10a4      	asrs	r4, r4, #2
 801fa6a:	2600      	movs	r6, #0
 801fa6c:	42a6      	cmp	r6, r4
 801fa6e:	d109      	bne.n	801fa84 <__libc_init_array+0x24>
 801fa70:	4d0b      	ldr	r5, [pc, #44]	; (801faa0 <__libc_init_array+0x40>)
 801fa72:	4c0c      	ldr	r4, [pc, #48]	; (801faa4 <__libc_init_array+0x44>)
 801fa74:	f002 fc04 	bl	8022280 <_init>
 801fa78:	1b64      	subs	r4, r4, r5
 801fa7a:	10a4      	asrs	r4, r4, #2
 801fa7c:	2600      	movs	r6, #0
 801fa7e:	42a6      	cmp	r6, r4
 801fa80:	d105      	bne.n	801fa8e <__libc_init_array+0x2e>
 801fa82:	bd70      	pop	{r4, r5, r6, pc}
 801fa84:	f855 3b04 	ldr.w	r3, [r5], #4
 801fa88:	4798      	blx	r3
 801fa8a:	3601      	adds	r6, #1
 801fa8c:	e7ee      	b.n	801fa6c <__libc_init_array+0xc>
 801fa8e:	f855 3b04 	ldr.w	r3, [r5], #4
 801fa92:	4798      	blx	r3
 801fa94:	3601      	adds	r6, #1
 801fa96:	e7f2      	b.n	801fa7e <__libc_init_array+0x1e>
 801fa98:	0802d480 	.word	0x0802d480
 801fa9c:	0802d480 	.word	0x0802d480
 801faa0:	0802d480 	.word	0x0802d480
 801faa4:	0802d48c 	.word	0x0802d48c

0801faa8 <__retarget_lock_acquire_recursive>:
 801faa8:	4770      	bx	lr

0801faaa <__retarget_lock_release_recursive>:
 801faaa:	4770      	bx	lr

0801faac <memcpy>:
 801faac:	440a      	add	r2, r1
 801faae:	4291      	cmp	r1, r2
 801fab0:	f100 33ff 	add.w	r3, r0, #4294967295
 801fab4:	d100      	bne.n	801fab8 <memcpy+0xc>
 801fab6:	4770      	bx	lr
 801fab8:	b510      	push	{r4, lr}
 801faba:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fabe:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fac2:	4291      	cmp	r1, r2
 801fac4:	d1f9      	bne.n	801faba <memcpy+0xe>
 801fac6:	bd10      	pop	{r4, pc}

0801fac8 <quorem>:
 801fac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801facc:	6903      	ldr	r3, [r0, #16]
 801face:	690c      	ldr	r4, [r1, #16]
 801fad0:	42a3      	cmp	r3, r4
 801fad2:	4607      	mov	r7, r0
 801fad4:	db7e      	blt.n	801fbd4 <quorem+0x10c>
 801fad6:	3c01      	subs	r4, #1
 801fad8:	f101 0814 	add.w	r8, r1, #20
 801fadc:	f100 0514 	add.w	r5, r0, #20
 801fae0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fae4:	9301      	str	r3, [sp, #4]
 801fae6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801faea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801faee:	3301      	adds	r3, #1
 801faf0:	429a      	cmp	r2, r3
 801faf2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801faf6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fafa:	fbb2 f6f3 	udiv	r6, r2, r3
 801fafe:	d331      	bcc.n	801fb64 <quorem+0x9c>
 801fb00:	f04f 0e00 	mov.w	lr, #0
 801fb04:	4640      	mov	r0, r8
 801fb06:	46ac      	mov	ip, r5
 801fb08:	46f2      	mov	sl, lr
 801fb0a:	f850 2b04 	ldr.w	r2, [r0], #4
 801fb0e:	b293      	uxth	r3, r2
 801fb10:	fb06 e303 	mla	r3, r6, r3, lr
 801fb14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fb18:	0c1a      	lsrs	r2, r3, #16
 801fb1a:	b29b      	uxth	r3, r3
 801fb1c:	ebaa 0303 	sub.w	r3, sl, r3
 801fb20:	f8dc a000 	ldr.w	sl, [ip]
 801fb24:	fa13 f38a 	uxtah	r3, r3, sl
 801fb28:	fb06 220e 	mla	r2, r6, lr, r2
 801fb2c:	9300      	str	r3, [sp, #0]
 801fb2e:	9b00      	ldr	r3, [sp, #0]
 801fb30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fb34:	b292      	uxth	r2, r2
 801fb36:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801fb3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fb3e:	f8bd 3000 	ldrh.w	r3, [sp]
 801fb42:	4581      	cmp	r9, r0
 801fb44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fb48:	f84c 3b04 	str.w	r3, [ip], #4
 801fb4c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801fb50:	d2db      	bcs.n	801fb0a <quorem+0x42>
 801fb52:	f855 300b 	ldr.w	r3, [r5, fp]
 801fb56:	b92b      	cbnz	r3, 801fb64 <quorem+0x9c>
 801fb58:	9b01      	ldr	r3, [sp, #4]
 801fb5a:	3b04      	subs	r3, #4
 801fb5c:	429d      	cmp	r5, r3
 801fb5e:	461a      	mov	r2, r3
 801fb60:	d32c      	bcc.n	801fbbc <quorem+0xf4>
 801fb62:	613c      	str	r4, [r7, #16]
 801fb64:	4638      	mov	r0, r7
 801fb66:	f001 fca5 	bl	80214b4 <__mcmp>
 801fb6a:	2800      	cmp	r0, #0
 801fb6c:	db22      	blt.n	801fbb4 <quorem+0xec>
 801fb6e:	3601      	adds	r6, #1
 801fb70:	4629      	mov	r1, r5
 801fb72:	2000      	movs	r0, #0
 801fb74:	f858 2b04 	ldr.w	r2, [r8], #4
 801fb78:	f8d1 c000 	ldr.w	ip, [r1]
 801fb7c:	b293      	uxth	r3, r2
 801fb7e:	1ac3      	subs	r3, r0, r3
 801fb80:	0c12      	lsrs	r2, r2, #16
 801fb82:	fa13 f38c 	uxtah	r3, r3, ip
 801fb86:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801fb8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fb8e:	b29b      	uxth	r3, r3
 801fb90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fb94:	45c1      	cmp	r9, r8
 801fb96:	f841 3b04 	str.w	r3, [r1], #4
 801fb9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801fb9e:	d2e9      	bcs.n	801fb74 <quorem+0xac>
 801fba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fba8:	b922      	cbnz	r2, 801fbb4 <quorem+0xec>
 801fbaa:	3b04      	subs	r3, #4
 801fbac:	429d      	cmp	r5, r3
 801fbae:	461a      	mov	r2, r3
 801fbb0:	d30a      	bcc.n	801fbc8 <quorem+0x100>
 801fbb2:	613c      	str	r4, [r7, #16]
 801fbb4:	4630      	mov	r0, r6
 801fbb6:	b003      	add	sp, #12
 801fbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbbc:	6812      	ldr	r2, [r2, #0]
 801fbbe:	3b04      	subs	r3, #4
 801fbc0:	2a00      	cmp	r2, #0
 801fbc2:	d1ce      	bne.n	801fb62 <quorem+0x9a>
 801fbc4:	3c01      	subs	r4, #1
 801fbc6:	e7c9      	b.n	801fb5c <quorem+0x94>
 801fbc8:	6812      	ldr	r2, [r2, #0]
 801fbca:	3b04      	subs	r3, #4
 801fbcc:	2a00      	cmp	r2, #0
 801fbce:	d1f0      	bne.n	801fbb2 <quorem+0xea>
 801fbd0:	3c01      	subs	r4, #1
 801fbd2:	e7eb      	b.n	801fbac <quorem+0xe4>
 801fbd4:	2000      	movs	r0, #0
 801fbd6:	e7ee      	b.n	801fbb6 <quorem+0xee>

0801fbd8 <_dtoa_r>:
 801fbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbdc:	ed2d 8b04 	vpush	{d8-d9}
 801fbe0:	69c5      	ldr	r5, [r0, #28]
 801fbe2:	b093      	sub	sp, #76	; 0x4c
 801fbe4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801fbe8:	ec57 6b10 	vmov	r6, r7, d0
 801fbec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801fbf0:	9107      	str	r1, [sp, #28]
 801fbf2:	4604      	mov	r4, r0
 801fbf4:	920a      	str	r2, [sp, #40]	; 0x28
 801fbf6:	930d      	str	r3, [sp, #52]	; 0x34
 801fbf8:	b975      	cbnz	r5, 801fc18 <_dtoa_r+0x40>
 801fbfa:	2010      	movs	r0, #16
 801fbfc:	f7fd ffa6 	bl	801db4c <malloc>
 801fc00:	4602      	mov	r2, r0
 801fc02:	61e0      	str	r0, [r4, #28]
 801fc04:	b920      	cbnz	r0, 801fc10 <_dtoa_r+0x38>
 801fc06:	4bae      	ldr	r3, [pc, #696]	; (801fec0 <_dtoa_r+0x2e8>)
 801fc08:	21ef      	movs	r1, #239	; 0xef
 801fc0a:	48ae      	ldr	r0, [pc, #696]	; (801fec4 <_dtoa_r+0x2ec>)
 801fc0c:	f7fd ff5e 	bl	801dacc <__assert_func>
 801fc10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801fc14:	6005      	str	r5, [r0, #0]
 801fc16:	60c5      	str	r5, [r0, #12]
 801fc18:	69e3      	ldr	r3, [r4, #28]
 801fc1a:	6819      	ldr	r1, [r3, #0]
 801fc1c:	b151      	cbz	r1, 801fc34 <_dtoa_r+0x5c>
 801fc1e:	685a      	ldr	r2, [r3, #4]
 801fc20:	604a      	str	r2, [r1, #4]
 801fc22:	2301      	movs	r3, #1
 801fc24:	4093      	lsls	r3, r2
 801fc26:	608b      	str	r3, [r1, #8]
 801fc28:	4620      	mov	r0, r4
 801fc2a:	f001 f9bd 	bl	8020fa8 <_Bfree>
 801fc2e:	69e3      	ldr	r3, [r4, #28]
 801fc30:	2200      	movs	r2, #0
 801fc32:	601a      	str	r2, [r3, #0]
 801fc34:	1e3b      	subs	r3, r7, #0
 801fc36:	bfbb      	ittet	lt
 801fc38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801fc3c:	9303      	strlt	r3, [sp, #12]
 801fc3e:	2300      	movge	r3, #0
 801fc40:	2201      	movlt	r2, #1
 801fc42:	bfac      	ite	ge
 801fc44:	f8c8 3000 	strge.w	r3, [r8]
 801fc48:	f8c8 2000 	strlt.w	r2, [r8]
 801fc4c:	4b9e      	ldr	r3, [pc, #632]	; (801fec8 <_dtoa_r+0x2f0>)
 801fc4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801fc52:	ea33 0308 	bics.w	r3, r3, r8
 801fc56:	d11b      	bne.n	801fc90 <_dtoa_r+0xb8>
 801fc58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fc5a:	f242 730f 	movw	r3, #9999	; 0x270f
 801fc5e:	6013      	str	r3, [r2, #0]
 801fc60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801fc64:	4333      	orrs	r3, r6
 801fc66:	f000 8593 	beq.w	8020790 <_dtoa_r+0xbb8>
 801fc6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fc6c:	b963      	cbnz	r3, 801fc88 <_dtoa_r+0xb0>
 801fc6e:	4b97      	ldr	r3, [pc, #604]	; (801fecc <_dtoa_r+0x2f4>)
 801fc70:	e027      	b.n	801fcc2 <_dtoa_r+0xea>
 801fc72:	4b97      	ldr	r3, [pc, #604]	; (801fed0 <_dtoa_r+0x2f8>)
 801fc74:	9300      	str	r3, [sp, #0]
 801fc76:	3308      	adds	r3, #8
 801fc78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fc7a:	6013      	str	r3, [r2, #0]
 801fc7c:	9800      	ldr	r0, [sp, #0]
 801fc7e:	b013      	add	sp, #76	; 0x4c
 801fc80:	ecbd 8b04 	vpop	{d8-d9}
 801fc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc88:	4b90      	ldr	r3, [pc, #576]	; (801fecc <_dtoa_r+0x2f4>)
 801fc8a:	9300      	str	r3, [sp, #0]
 801fc8c:	3303      	adds	r3, #3
 801fc8e:	e7f3      	b.n	801fc78 <_dtoa_r+0xa0>
 801fc90:	ed9d 7b02 	vldr	d7, [sp, #8]
 801fc94:	2200      	movs	r2, #0
 801fc96:	ec51 0b17 	vmov	r0, r1, d7
 801fc9a:	eeb0 8a47 	vmov.f32	s16, s14
 801fc9e:	eef0 8a67 	vmov.f32	s17, s15
 801fca2:	2300      	movs	r3, #0
 801fca4:	f7e0 ff20 	bl	8000ae8 <__aeabi_dcmpeq>
 801fca8:	4681      	mov	r9, r0
 801fcaa:	b160      	cbz	r0, 801fcc6 <_dtoa_r+0xee>
 801fcac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fcae:	2301      	movs	r3, #1
 801fcb0:	6013      	str	r3, [r2, #0]
 801fcb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	f000 8568 	beq.w	802078a <_dtoa_r+0xbb2>
 801fcba:	4b86      	ldr	r3, [pc, #536]	; (801fed4 <_dtoa_r+0x2fc>)
 801fcbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fcbe:	6013      	str	r3, [r2, #0]
 801fcc0:	3b01      	subs	r3, #1
 801fcc2:	9300      	str	r3, [sp, #0]
 801fcc4:	e7da      	b.n	801fc7c <_dtoa_r+0xa4>
 801fcc6:	aa10      	add	r2, sp, #64	; 0x40
 801fcc8:	a911      	add	r1, sp, #68	; 0x44
 801fcca:	4620      	mov	r0, r4
 801fccc:	eeb0 0a48 	vmov.f32	s0, s16
 801fcd0:	eef0 0a68 	vmov.f32	s1, s17
 801fcd4:	f001 fd04 	bl	80216e0 <__d2b>
 801fcd8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801fcdc:	4682      	mov	sl, r0
 801fcde:	2d00      	cmp	r5, #0
 801fce0:	d07f      	beq.n	801fde2 <_dtoa_r+0x20a>
 801fce2:	ee18 3a90 	vmov	r3, s17
 801fce6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fcea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801fcee:	ec51 0b18 	vmov	r0, r1, d8
 801fcf2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801fcf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801fcfa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801fcfe:	4619      	mov	r1, r3
 801fd00:	2200      	movs	r2, #0
 801fd02:	4b75      	ldr	r3, [pc, #468]	; (801fed8 <_dtoa_r+0x300>)
 801fd04:	f7e0 fad0 	bl	80002a8 <__aeabi_dsub>
 801fd08:	a367      	add	r3, pc, #412	; (adr r3, 801fea8 <_dtoa_r+0x2d0>)
 801fd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd0e:	f7e0 fc83 	bl	8000618 <__aeabi_dmul>
 801fd12:	a367      	add	r3, pc, #412	; (adr r3, 801feb0 <_dtoa_r+0x2d8>)
 801fd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd18:	f7e0 fac8 	bl	80002ac <__adddf3>
 801fd1c:	4606      	mov	r6, r0
 801fd1e:	4628      	mov	r0, r5
 801fd20:	460f      	mov	r7, r1
 801fd22:	f7e0 fc0f 	bl	8000544 <__aeabi_i2d>
 801fd26:	a364      	add	r3, pc, #400	; (adr r3, 801feb8 <_dtoa_r+0x2e0>)
 801fd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd2c:	f7e0 fc74 	bl	8000618 <__aeabi_dmul>
 801fd30:	4602      	mov	r2, r0
 801fd32:	460b      	mov	r3, r1
 801fd34:	4630      	mov	r0, r6
 801fd36:	4639      	mov	r1, r7
 801fd38:	f7e0 fab8 	bl	80002ac <__adddf3>
 801fd3c:	4606      	mov	r6, r0
 801fd3e:	460f      	mov	r7, r1
 801fd40:	f7e0 ff1a 	bl	8000b78 <__aeabi_d2iz>
 801fd44:	2200      	movs	r2, #0
 801fd46:	4683      	mov	fp, r0
 801fd48:	2300      	movs	r3, #0
 801fd4a:	4630      	mov	r0, r6
 801fd4c:	4639      	mov	r1, r7
 801fd4e:	f7e0 fed5 	bl	8000afc <__aeabi_dcmplt>
 801fd52:	b148      	cbz	r0, 801fd68 <_dtoa_r+0x190>
 801fd54:	4658      	mov	r0, fp
 801fd56:	f7e0 fbf5 	bl	8000544 <__aeabi_i2d>
 801fd5a:	4632      	mov	r2, r6
 801fd5c:	463b      	mov	r3, r7
 801fd5e:	f7e0 fec3 	bl	8000ae8 <__aeabi_dcmpeq>
 801fd62:	b908      	cbnz	r0, 801fd68 <_dtoa_r+0x190>
 801fd64:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fd68:	f1bb 0f16 	cmp.w	fp, #22
 801fd6c:	d857      	bhi.n	801fe1e <_dtoa_r+0x246>
 801fd6e:	4b5b      	ldr	r3, [pc, #364]	; (801fedc <_dtoa_r+0x304>)
 801fd70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801fd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd78:	ec51 0b18 	vmov	r0, r1, d8
 801fd7c:	f7e0 febe 	bl	8000afc <__aeabi_dcmplt>
 801fd80:	2800      	cmp	r0, #0
 801fd82:	d04e      	beq.n	801fe22 <_dtoa_r+0x24a>
 801fd84:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fd88:	2300      	movs	r3, #0
 801fd8a:	930c      	str	r3, [sp, #48]	; 0x30
 801fd8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fd8e:	1b5b      	subs	r3, r3, r5
 801fd90:	1e5a      	subs	r2, r3, #1
 801fd92:	bf45      	ittet	mi
 801fd94:	f1c3 0301 	rsbmi	r3, r3, #1
 801fd98:	9305      	strmi	r3, [sp, #20]
 801fd9a:	2300      	movpl	r3, #0
 801fd9c:	2300      	movmi	r3, #0
 801fd9e:	9206      	str	r2, [sp, #24]
 801fda0:	bf54      	ite	pl
 801fda2:	9305      	strpl	r3, [sp, #20]
 801fda4:	9306      	strmi	r3, [sp, #24]
 801fda6:	f1bb 0f00 	cmp.w	fp, #0
 801fdaa:	db3c      	blt.n	801fe26 <_dtoa_r+0x24e>
 801fdac:	9b06      	ldr	r3, [sp, #24]
 801fdae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801fdb2:	445b      	add	r3, fp
 801fdb4:	9306      	str	r3, [sp, #24]
 801fdb6:	2300      	movs	r3, #0
 801fdb8:	9308      	str	r3, [sp, #32]
 801fdba:	9b07      	ldr	r3, [sp, #28]
 801fdbc:	2b09      	cmp	r3, #9
 801fdbe:	d868      	bhi.n	801fe92 <_dtoa_r+0x2ba>
 801fdc0:	2b05      	cmp	r3, #5
 801fdc2:	bfc4      	itt	gt
 801fdc4:	3b04      	subgt	r3, #4
 801fdc6:	9307      	strgt	r3, [sp, #28]
 801fdc8:	9b07      	ldr	r3, [sp, #28]
 801fdca:	f1a3 0302 	sub.w	r3, r3, #2
 801fdce:	bfcc      	ite	gt
 801fdd0:	2500      	movgt	r5, #0
 801fdd2:	2501      	movle	r5, #1
 801fdd4:	2b03      	cmp	r3, #3
 801fdd6:	f200 8085 	bhi.w	801fee4 <_dtoa_r+0x30c>
 801fdda:	e8df f003 	tbb	[pc, r3]
 801fdde:	3b2e      	.short	0x3b2e
 801fde0:	5839      	.short	0x5839
 801fde2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801fde6:	441d      	add	r5, r3
 801fde8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801fdec:	2b20      	cmp	r3, #32
 801fdee:	bfc1      	itttt	gt
 801fdf0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801fdf4:	fa08 f803 	lslgt.w	r8, r8, r3
 801fdf8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801fdfc:	fa26 f303 	lsrgt.w	r3, r6, r3
 801fe00:	bfd6      	itet	le
 801fe02:	f1c3 0320 	rsble	r3, r3, #32
 801fe06:	ea48 0003 	orrgt.w	r0, r8, r3
 801fe0a:	fa06 f003 	lslle.w	r0, r6, r3
 801fe0e:	f7e0 fb89 	bl	8000524 <__aeabi_ui2d>
 801fe12:	2201      	movs	r2, #1
 801fe14:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801fe18:	3d01      	subs	r5, #1
 801fe1a:	920e      	str	r2, [sp, #56]	; 0x38
 801fe1c:	e76f      	b.n	801fcfe <_dtoa_r+0x126>
 801fe1e:	2301      	movs	r3, #1
 801fe20:	e7b3      	b.n	801fd8a <_dtoa_r+0x1b2>
 801fe22:	900c      	str	r0, [sp, #48]	; 0x30
 801fe24:	e7b2      	b.n	801fd8c <_dtoa_r+0x1b4>
 801fe26:	9b05      	ldr	r3, [sp, #20]
 801fe28:	eba3 030b 	sub.w	r3, r3, fp
 801fe2c:	9305      	str	r3, [sp, #20]
 801fe2e:	f1cb 0300 	rsb	r3, fp, #0
 801fe32:	9308      	str	r3, [sp, #32]
 801fe34:	2300      	movs	r3, #0
 801fe36:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe38:	e7bf      	b.n	801fdba <_dtoa_r+0x1e2>
 801fe3a:	2300      	movs	r3, #0
 801fe3c:	9309      	str	r3, [sp, #36]	; 0x24
 801fe3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	dc52      	bgt.n	801feea <_dtoa_r+0x312>
 801fe44:	2301      	movs	r3, #1
 801fe46:	9301      	str	r3, [sp, #4]
 801fe48:	9304      	str	r3, [sp, #16]
 801fe4a:	461a      	mov	r2, r3
 801fe4c:	920a      	str	r2, [sp, #40]	; 0x28
 801fe4e:	e00b      	b.n	801fe68 <_dtoa_r+0x290>
 801fe50:	2301      	movs	r3, #1
 801fe52:	e7f3      	b.n	801fe3c <_dtoa_r+0x264>
 801fe54:	2300      	movs	r3, #0
 801fe56:	9309      	str	r3, [sp, #36]	; 0x24
 801fe58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe5a:	445b      	add	r3, fp
 801fe5c:	9301      	str	r3, [sp, #4]
 801fe5e:	3301      	adds	r3, #1
 801fe60:	2b01      	cmp	r3, #1
 801fe62:	9304      	str	r3, [sp, #16]
 801fe64:	bfb8      	it	lt
 801fe66:	2301      	movlt	r3, #1
 801fe68:	69e0      	ldr	r0, [r4, #28]
 801fe6a:	2100      	movs	r1, #0
 801fe6c:	2204      	movs	r2, #4
 801fe6e:	f102 0614 	add.w	r6, r2, #20
 801fe72:	429e      	cmp	r6, r3
 801fe74:	d93d      	bls.n	801fef2 <_dtoa_r+0x31a>
 801fe76:	6041      	str	r1, [r0, #4]
 801fe78:	4620      	mov	r0, r4
 801fe7a:	f001 f855 	bl	8020f28 <_Balloc>
 801fe7e:	9000      	str	r0, [sp, #0]
 801fe80:	2800      	cmp	r0, #0
 801fe82:	d139      	bne.n	801fef8 <_dtoa_r+0x320>
 801fe84:	4b16      	ldr	r3, [pc, #88]	; (801fee0 <_dtoa_r+0x308>)
 801fe86:	4602      	mov	r2, r0
 801fe88:	f240 11af 	movw	r1, #431	; 0x1af
 801fe8c:	e6bd      	b.n	801fc0a <_dtoa_r+0x32>
 801fe8e:	2301      	movs	r3, #1
 801fe90:	e7e1      	b.n	801fe56 <_dtoa_r+0x27e>
 801fe92:	2501      	movs	r5, #1
 801fe94:	2300      	movs	r3, #0
 801fe96:	9307      	str	r3, [sp, #28]
 801fe98:	9509      	str	r5, [sp, #36]	; 0x24
 801fe9a:	f04f 33ff 	mov.w	r3, #4294967295
 801fe9e:	9301      	str	r3, [sp, #4]
 801fea0:	9304      	str	r3, [sp, #16]
 801fea2:	2200      	movs	r2, #0
 801fea4:	2312      	movs	r3, #18
 801fea6:	e7d1      	b.n	801fe4c <_dtoa_r+0x274>
 801fea8:	636f4361 	.word	0x636f4361
 801feac:	3fd287a7 	.word	0x3fd287a7
 801feb0:	8b60c8b3 	.word	0x8b60c8b3
 801feb4:	3fc68a28 	.word	0x3fc68a28
 801feb8:	509f79fb 	.word	0x509f79fb
 801febc:	3fd34413 	.word	0x3fd34413
 801fec0:	0802d22f 	.word	0x0802d22f
 801fec4:	0802d246 	.word	0x0802d246
 801fec8:	7ff00000 	.word	0x7ff00000
 801fecc:	0802d22b 	.word	0x0802d22b
 801fed0:	0802d222 	.word	0x0802d222
 801fed4:	0802d1f2 	.word	0x0802d1f2
 801fed8:	3ff80000 	.word	0x3ff80000
 801fedc:	0802d390 	.word	0x0802d390
 801fee0:	0802d29e 	.word	0x0802d29e
 801fee4:	2301      	movs	r3, #1
 801fee6:	9309      	str	r3, [sp, #36]	; 0x24
 801fee8:	e7d7      	b.n	801fe9a <_dtoa_r+0x2c2>
 801feea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801feec:	9301      	str	r3, [sp, #4]
 801feee:	9304      	str	r3, [sp, #16]
 801fef0:	e7ba      	b.n	801fe68 <_dtoa_r+0x290>
 801fef2:	3101      	adds	r1, #1
 801fef4:	0052      	lsls	r2, r2, #1
 801fef6:	e7ba      	b.n	801fe6e <_dtoa_r+0x296>
 801fef8:	69e3      	ldr	r3, [r4, #28]
 801fefa:	9a00      	ldr	r2, [sp, #0]
 801fefc:	601a      	str	r2, [r3, #0]
 801fefe:	9b04      	ldr	r3, [sp, #16]
 801ff00:	2b0e      	cmp	r3, #14
 801ff02:	f200 80a8 	bhi.w	8020056 <_dtoa_r+0x47e>
 801ff06:	2d00      	cmp	r5, #0
 801ff08:	f000 80a5 	beq.w	8020056 <_dtoa_r+0x47e>
 801ff0c:	f1bb 0f00 	cmp.w	fp, #0
 801ff10:	dd38      	ble.n	801ff84 <_dtoa_r+0x3ac>
 801ff12:	4bc0      	ldr	r3, [pc, #768]	; (8020214 <_dtoa_r+0x63c>)
 801ff14:	f00b 020f 	and.w	r2, fp, #15
 801ff18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ff1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801ff20:	e9d3 6700 	ldrd	r6, r7, [r3]
 801ff24:	ea4f 182b 	mov.w	r8, fp, asr #4
 801ff28:	d019      	beq.n	801ff5e <_dtoa_r+0x386>
 801ff2a:	4bbb      	ldr	r3, [pc, #748]	; (8020218 <_dtoa_r+0x640>)
 801ff2c:	ec51 0b18 	vmov	r0, r1, d8
 801ff30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ff34:	f7e0 fc9a 	bl	800086c <__aeabi_ddiv>
 801ff38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ff3c:	f008 080f 	and.w	r8, r8, #15
 801ff40:	2503      	movs	r5, #3
 801ff42:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8020218 <_dtoa_r+0x640>
 801ff46:	f1b8 0f00 	cmp.w	r8, #0
 801ff4a:	d10a      	bne.n	801ff62 <_dtoa_r+0x38a>
 801ff4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ff50:	4632      	mov	r2, r6
 801ff52:	463b      	mov	r3, r7
 801ff54:	f7e0 fc8a 	bl	800086c <__aeabi_ddiv>
 801ff58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ff5c:	e02b      	b.n	801ffb6 <_dtoa_r+0x3de>
 801ff5e:	2502      	movs	r5, #2
 801ff60:	e7ef      	b.n	801ff42 <_dtoa_r+0x36a>
 801ff62:	f018 0f01 	tst.w	r8, #1
 801ff66:	d008      	beq.n	801ff7a <_dtoa_r+0x3a2>
 801ff68:	4630      	mov	r0, r6
 801ff6a:	4639      	mov	r1, r7
 801ff6c:	e9d9 2300 	ldrd	r2, r3, [r9]
 801ff70:	f7e0 fb52 	bl	8000618 <__aeabi_dmul>
 801ff74:	3501      	adds	r5, #1
 801ff76:	4606      	mov	r6, r0
 801ff78:	460f      	mov	r7, r1
 801ff7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ff7e:	f109 0908 	add.w	r9, r9, #8
 801ff82:	e7e0      	b.n	801ff46 <_dtoa_r+0x36e>
 801ff84:	f000 809f 	beq.w	80200c6 <_dtoa_r+0x4ee>
 801ff88:	f1cb 0600 	rsb	r6, fp, #0
 801ff8c:	4ba1      	ldr	r3, [pc, #644]	; (8020214 <_dtoa_r+0x63c>)
 801ff8e:	4fa2      	ldr	r7, [pc, #648]	; (8020218 <_dtoa_r+0x640>)
 801ff90:	f006 020f 	and.w	r2, r6, #15
 801ff94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ff98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff9c:	ec51 0b18 	vmov	r0, r1, d8
 801ffa0:	f7e0 fb3a 	bl	8000618 <__aeabi_dmul>
 801ffa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ffa8:	1136      	asrs	r6, r6, #4
 801ffaa:	2300      	movs	r3, #0
 801ffac:	2502      	movs	r5, #2
 801ffae:	2e00      	cmp	r6, #0
 801ffb0:	d17e      	bne.n	80200b0 <_dtoa_r+0x4d8>
 801ffb2:	2b00      	cmp	r3, #0
 801ffb4:	d1d0      	bne.n	801ff58 <_dtoa_r+0x380>
 801ffb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ffb8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	f000 8084 	beq.w	80200ca <_dtoa_r+0x4f2>
 801ffc2:	4b96      	ldr	r3, [pc, #600]	; (802021c <_dtoa_r+0x644>)
 801ffc4:	2200      	movs	r2, #0
 801ffc6:	4640      	mov	r0, r8
 801ffc8:	4649      	mov	r1, r9
 801ffca:	f7e0 fd97 	bl	8000afc <__aeabi_dcmplt>
 801ffce:	2800      	cmp	r0, #0
 801ffd0:	d07b      	beq.n	80200ca <_dtoa_r+0x4f2>
 801ffd2:	9b04      	ldr	r3, [sp, #16]
 801ffd4:	2b00      	cmp	r3, #0
 801ffd6:	d078      	beq.n	80200ca <_dtoa_r+0x4f2>
 801ffd8:	9b01      	ldr	r3, [sp, #4]
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	dd39      	ble.n	8020052 <_dtoa_r+0x47a>
 801ffde:	4b90      	ldr	r3, [pc, #576]	; (8020220 <_dtoa_r+0x648>)
 801ffe0:	2200      	movs	r2, #0
 801ffe2:	4640      	mov	r0, r8
 801ffe4:	4649      	mov	r1, r9
 801ffe6:	f7e0 fb17 	bl	8000618 <__aeabi_dmul>
 801ffea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ffee:	9e01      	ldr	r6, [sp, #4]
 801fff0:	f10b 37ff 	add.w	r7, fp, #4294967295
 801fff4:	3501      	adds	r5, #1
 801fff6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801fffa:	4628      	mov	r0, r5
 801fffc:	f7e0 faa2 	bl	8000544 <__aeabi_i2d>
 8020000:	4642      	mov	r2, r8
 8020002:	464b      	mov	r3, r9
 8020004:	f7e0 fb08 	bl	8000618 <__aeabi_dmul>
 8020008:	4b86      	ldr	r3, [pc, #536]	; (8020224 <_dtoa_r+0x64c>)
 802000a:	2200      	movs	r2, #0
 802000c:	f7e0 f94e 	bl	80002ac <__adddf3>
 8020010:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8020014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020018:	9303      	str	r3, [sp, #12]
 802001a:	2e00      	cmp	r6, #0
 802001c:	d158      	bne.n	80200d0 <_dtoa_r+0x4f8>
 802001e:	4b82      	ldr	r3, [pc, #520]	; (8020228 <_dtoa_r+0x650>)
 8020020:	2200      	movs	r2, #0
 8020022:	4640      	mov	r0, r8
 8020024:	4649      	mov	r1, r9
 8020026:	f7e0 f93f 	bl	80002a8 <__aeabi_dsub>
 802002a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802002e:	4680      	mov	r8, r0
 8020030:	4689      	mov	r9, r1
 8020032:	f7e0 fd81 	bl	8000b38 <__aeabi_dcmpgt>
 8020036:	2800      	cmp	r0, #0
 8020038:	f040 8296 	bne.w	8020568 <_dtoa_r+0x990>
 802003c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8020040:	4640      	mov	r0, r8
 8020042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020046:	4649      	mov	r1, r9
 8020048:	f7e0 fd58 	bl	8000afc <__aeabi_dcmplt>
 802004c:	2800      	cmp	r0, #0
 802004e:	f040 8289 	bne.w	8020564 <_dtoa_r+0x98c>
 8020052:	ed8d 8b02 	vstr	d8, [sp, #8]
 8020056:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020058:	2b00      	cmp	r3, #0
 802005a:	f2c0 814e 	blt.w	80202fa <_dtoa_r+0x722>
 802005e:	f1bb 0f0e 	cmp.w	fp, #14
 8020062:	f300 814a 	bgt.w	80202fa <_dtoa_r+0x722>
 8020066:	4b6b      	ldr	r3, [pc, #428]	; (8020214 <_dtoa_r+0x63c>)
 8020068:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802006c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020072:	2b00      	cmp	r3, #0
 8020074:	f280 80dc 	bge.w	8020230 <_dtoa_r+0x658>
 8020078:	9b04      	ldr	r3, [sp, #16]
 802007a:	2b00      	cmp	r3, #0
 802007c:	f300 80d8 	bgt.w	8020230 <_dtoa_r+0x658>
 8020080:	f040 826f 	bne.w	8020562 <_dtoa_r+0x98a>
 8020084:	4b68      	ldr	r3, [pc, #416]	; (8020228 <_dtoa_r+0x650>)
 8020086:	2200      	movs	r2, #0
 8020088:	4640      	mov	r0, r8
 802008a:	4649      	mov	r1, r9
 802008c:	f7e0 fac4 	bl	8000618 <__aeabi_dmul>
 8020090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020094:	f7e0 fd46 	bl	8000b24 <__aeabi_dcmpge>
 8020098:	9e04      	ldr	r6, [sp, #16]
 802009a:	4637      	mov	r7, r6
 802009c:	2800      	cmp	r0, #0
 802009e:	f040 8245 	bne.w	802052c <_dtoa_r+0x954>
 80200a2:	9d00      	ldr	r5, [sp, #0]
 80200a4:	2331      	movs	r3, #49	; 0x31
 80200a6:	f805 3b01 	strb.w	r3, [r5], #1
 80200aa:	f10b 0b01 	add.w	fp, fp, #1
 80200ae:	e241      	b.n	8020534 <_dtoa_r+0x95c>
 80200b0:	07f2      	lsls	r2, r6, #31
 80200b2:	d505      	bpl.n	80200c0 <_dtoa_r+0x4e8>
 80200b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80200b8:	f7e0 faae 	bl	8000618 <__aeabi_dmul>
 80200bc:	3501      	adds	r5, #1
 80200be:	2301      	movs	r3, #1
 80200c0:	1076      	asrs	r6, r6, #1
 80200c2:	3708      	adds	r7, #8
 80200c4:	e773      	b.n	801ffae <_dtoa_r+0x3d6>
 80200c6:	2502      	movs	r5, #2
 80200c8:	e775      	b.n	801ffb6 <_dtoa_r+0x3de>
 80200ca:	9e04      	ldr	r6, [sp, #16]
 80200cc:	465f      	mov	r7, fp
 80200ce:	e792      	b.n	801fff6 <_dtoa_r+0x41e>
 80200d0:	9900      	ldr	r1, [sp, #0]
 80200d2:	4b50      	ldr	r3, [pc, #320]	; (8020214 <_dtoa_r+0x63c>)
 80200d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80200d8:	4431      	add	r1, r6
 80200da:	9102      	str	r1, [sp, #8]
 80200dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80200de:	eeb0 9a47 	vmov.f32	s18, s14
 80200e2:	eef0 9a67 	vmov.f32	s19, s15
 80200e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80200ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80200ee:	2900      	cmp	r1, #0
 80200f0:	d044      	beq.n	802017c <_dtoa_r+0x5a4>
 80200f2:	494e      	ldr	r1, [pc, #312]	; (802022c <_dtoa_r+0x654>)
 80200f4:	2000      	movs	r0, #0
 80200f6:	f7e0 fbb9 	bl	800086c <__aeabi_ddiv>
 80200fa:	ec53 2b19 	vmov	r2, r3, d9
 80200fe:	f7e0 f8d3 	bl	80002a8 <__aeabi_dsub>
 8020102:	9d00      	ldr	r5, [sp, #0]
 8020104:	ec41 0b19 	vmov	d9, r0, r1
 8020108:	4649      	mov	r1, r9
 802010a:	4640      	mov	r0, r8
 802010c:	f7e0 fd34 	bl	8000b78 <__aeabi_d2iz>
 8020110:	4606      	mov	r6, r0
 8020112:	f7e0 fa17 	bl	8000544 <__aeabi_i2d>
 8020116:	4602      	mov	r2, r0
 8020118:	460b      	mov	r3, r1
 802011a:	4640      	mov	r0, r8
 802011c:	4649      	mov	r1, r9
 802011e:	f7e0 f8c3 	bl	80002a8 <__aeabi_dsub>
 8020122:	3630      	adds	r6, #48	; 0x30
 8020124:	f805 6b01 	strb.w	r6, [r5], #1
 8020128:	ec53 2b19 	vmov	r2, r3, d9
 802012c:	4680      	mov	r8, r0
 802012e:	4689      	mov	r9, r1
 8020130:	f7e0 fce4 	bl	8000afc <__aeabi_dcmplt>
 8020134:	2800      	cmp	r0, #0
 8020136:	d164      	bne.n	8020202 <_dtoa_r+0x62a>
 8020138:	4642      	mov	r2, r8
 802013a:	464b      	mov	r3, r9
 802013c:	4937      	ldr	r1, [pc, #220]	; (802021c <_dtoa_r+0x644>)
 802013e:	2000      	movs	r0, #0
 8020140:	f7e0 f8b2 	bl	80002a8 <__aeabi_dsub>
 8020144:	ec53 2b19 	vmov	r2, r3, d9
 8020148:	f7e0 fcd8 	bl	8000afc <__aeabi_dcmplt>
 802014c:	2800      	cmp	r0, #0
 802014e:	f040 80b6 	bne.w	80202be <_dtoa_r+0x6e6>
 8020152:	9b02      	ldr	r3, [sp, #8]
 8020154:	429d      	cmp	r5, r3
 8020156:	f43f af7c 	beq.w	8020052 <_dtoa_r+0x47a>
 802015a:	4b31      	ldr	r3, [pc, #196]	; (8020220 <_dtoa_r+0x648>)
 802015c:	ec51 0b19 	vmov	r0, r1, d9
 8020160:	2200      	movs	r2, #0
 8020162:	f7e0 fa59 	bl	8000618 <__aeabi_dmul>
 8020166:	4b2e      	ldr	r3, [pc, #184]	; (8020220 <_dtoa_r+0x648>)
 8020168:	ec41 0b19 	vmov	d9, r0, r1
 802016c:	2200      	movs	r2, #0
 802016e:	4640      	mov	r0, r8
 8020170:	4649      	mov	r1, r9
 8020172:	f7e0 fa51 	bl	8000618 <__aeabi_dmul>
 8020176:	4680      	mov	r8, r0
 8020178:	4689      	mov	r9, r1
 802017a:	e7c5      	b.n	8020108 <_dtoa_r+0x530>
 802017c:	ec51 0b17 	vmov	r0, r1, d7
 8020180:	f7e0 fa4a 	bl	8000618 <__aeabi_dmul>
 8020184:	9b02      	ldr	r3, [sp, #8]
 8020186:	9d00      	ldr	r5, [sp, #0]
 8020188:	930f      	str	r3, [sp, #60]	; 0x3c
 802018a:	ec41 0b19 	vmov	d9, r0, r1
 802018e:	4649      	mov	r1, r9
 8020190:	4640      	mov	r0, r8
 8020192:	f7e0 fcf1 	bl	8000b78 <__aeabi_d2iz>
 8020196:	4606      	mov	r6, r0
 8020198:	f7e0 f9d4 	bl	8000544 <__aeabi_i2d>
 802019c:	3630      	adds	r6, #48	; 0x30
 802019e:	4602      	mov	r2, r0
 80201a0:	460b      	mov	r3, r1
 80201a2:	4640      	mov	r0, r8
 80201a4:	4649      	mov	r1, r9
 80201a6:	f7e0 f87f 	bl	80002a8 <__aeabi_dsub>
 80201aa:	f805 6b01 	strb.w	r6, [r5], #1
 80201ae:	9b02      	ldr	r3, [sp, #8]
 80201b0:	429d      	cmp	r5, r3
 80201b2:	4680      	mov	r8, r0
 80201b4:	4689      	mov	r9, r1
 80201b6:	f04f 0200 	mov.w	r2, #0
 80201ba:	d124      	bne.n	8020206 <_dtoa_r+0x62e>
 80201bc:	4b1b      	ldr	r3, [pc, #108]	; (802022c <_dtoa_r+0x654>)
 80201be:	ec51 0b19 	vmov	r0, r1, d9
 80201c2:	f7e0 f873 	bl	80002ac <__adddf3>
 80201c6:	4602      	mov	r2, r0
 80201c8:	460b      	mov	r3, r1
 80201ca:	4640      	mov	r0, r8
 80201cc:	4649      	mov	r1, r9
 80201ce:	f7e0 fcb3 	bl	8000b38 <__aeabi_dcmpgt>
 80201d2:	2800      	cmp	r0, #0
 80201d4:	d173      	bne.n	80202be <_dtoa_r+0x6e6>
 80201d6:	ec53 2b19 	vmov	r2, r3, d9
 80201da:	4914      	ldr	r1, [pc, #80]	; (802022c <_dtoa_r+0x654>)
 80201dc:	2000      	movs	r0, #0
 80201de:	f7e0 f863 	bl	80002a8 <__aeabi_dsub>
 80201e2:	4602      	mov	r2, r0
 80201e4:	460b      	mov	r3, r1
 80201e6:	4640      	mov	r0, r8
 80201e8:	4649      	mov	r1, r9
 80201ea:	f7e0 fc87 	bl	8000afc <__aeabi_dcmplt>
 80201ee:	2800      	cmp	r0, #0
 80201f0:	f43f af2f 	beq.w	8020052 <_dtoa_r+0x47a>
 80201f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80201f6:	1e6b      	subs	r3, r5, #1
 80201f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80201fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80201fe:	2b30      	cmp	r3, #48	; 0x30
 8020200:	d0f8      	beq.n	80201f4 <_dtoa_r+0x61c>
 8020202:	46bb      	mov	fp, r7
 8020204:	e04a      	b.n	802029c <_dtoa_r+0x6c4>
 8020206:	4b06      	ldr	r3, [pc, #24]	; (8020220 <_dtoa_r+0x648>)
 8020208:	f7e0 fa06 	bl	8000618 <__aeabi_dmul>
 802020c:	4680      	mov	r8, r0
 802020e:	4689      	mov	r9, r1
 8020210:	e7bd      	b.n	802018e <_dtoa_r+0x5b6>
 8020212:	bf00      	nop
 8020214:	0802d390 	.word	0x0802d390
 8020218:	0802d368 	.word	0x0802d368
 802021c:	3ff00000 	.word	0x3ff00000
 8020220:	40240000 	.word	0x40240000
 8020224:	401c0000 	.word	0x401c0000
 8020228:	40140000 	.word	0x40140000
 802022c:	3fe00000 	.word	0x3fe00000
 8020230:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020234:	9d00      	ldr	r5, [sp, #0]
 8020236:	4642      	mov	r2, r8
 8020238:	464b      	mov	r3, r9
 802023a:	4630      	mov	r0, r6
 802023c:	4639      	mov	r1, r7
 802023e:	f7e0 fb15 	bl	800086c <__aeabi_ddiv>
 8020242:	f7e0 fc99 	bl	8000b78 <__aeabi_d2iz>
 8020246:	9001      	str	r0, [sp, #4]
 8020248:	f7e0 f97c 	bl	8000544 <__aeabi_i2d>
 802024c:	4642      	mov	r2, r8
 802024e:	464b      	mov	r3, r9
 8020250:	f7e0 f9e2 	bl	8000618 <__aeabi_dmul>
 8020254:	4602      	mov	r2, r0
 8020256:	460b      	mov	r3, r1
 8020258:	4630      	mov	r0, r6
 802025a:	4639      	mov	r1, r7
 802025c:	f7e0 f824 	bl	80002a8 <__aeabi_dsub>
 8020260:	9e01      	ldr	r6, [sp, #4]
 8020262:	9f04      	ldr	r7, [sp, #16]
 8020264:	3630      	adds	r6, #48	; 0x30
 8020266:	f805 6b01 	strb.w	r6, [r5], #1
 802026a:	9e00      	ldr	r6, [sp, #0]
 802026c:	1bae      	subs	r6, r5, r6
 802026e:	42b7      	cmp	r7, r6
 8020270:	4602      	mov	r2, r0
 8020272:	460b      	mov	r3, r1
 8020274:	d134      	bne.n	80202e0 <_dtoa_r+0x708>
 8020276:	f7e0 f819 	bl	80002ac <__adddf3>
 802027a:	4642      	mov	r2, r8
 802027c:	464b      	mov	r3, r9
 802027e:	4606      	mov	r6, r0
 8020280:	460f      	mov	r7, r1
 8020282:	f7e0 fc59 	bl	8000b38 <__aeabi_dcmpgt>
 8020286:	b9c8      	cbnz	r0, 80202bc <_dtoa_r+0x6e4>
 8020288:	4642      	mov	r2, r8
 802028a:	464b      	mov	r3, r9
 802028c:	4630      	mov	r0, r6
 802028e:	4639      	mov	r1, r7
 8020290:	f7e0 fc2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8020294:	b110      	cbz	r0, 802029c <_dtoa_r+0x6c4>
 8020296:	9b01      	ldr	r3, [sp, #4]
 8020298:	07db      	lsls	r3, r3, #31
 802029a:	d40f      	bmi.n	80202bc <_dtoa_r+0x6e4>
 802029c:	4651      	mov	r1, sl
 802029e:	4620      	mov	r0, r4
 80202a0:	f000 fe82 	bl	8020fa8 <_Bfree>
 80202a4:	2300      	movs	r3, #0
 80202a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80202a8:	702b      	strb	r3, [r5, #0]
 80202aa:	f10b 0301 	add.w	r3, fp, #1
 80202ae:	6013      	str	r3, [r2, #0]
 80202b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	f43f ace2 	beq.w	801fc7c <_dtoa_r+0xa4>
 80202b8:	601d      	str	r5, [r3, #0]
 80202ba:	e4df      	b.n	801fc7c <_dtoa_r+0xa4>
 80202bc:	465f      	mov	r7, fp
 80202be:	462b      	mov	r3, r5
 80202c0:	461d      	mov	r5, r3
 80202c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80202c6:	2a39      	cmp	r2, #57	; 0x39
 80202c8:	d106      	bne.n	80202d8 <_dtoa_r+0x700>
 80202ca:	9a00      	ldr	r2, [sp, #0]
 80202cc:	429a      	cmp	r2, r3
 80202ce:	d1f7      	bne.n	80202c0 <_dtoa_r+0x6e8>
 80202d0:	9900      	ldr	r1, [sp, #0]
 80202d2:	2230      	movs	r2, #48	; 0x30
 80202d4:	3701      	adds	r7, #1
 80202d6:	700a      	strb	r2, [r1, #0]
 80202d8:	781a      	ldrb	r2, [r3, #0]
 80202da:	3201      	adds	r2, #1
 80202dc:	701a      	strb	r2, [r3, #0]
 80202de:	e790      	b.n	8020202 <_dtoa_r+0x62a>
 80202e0:	4ba3      	ldr	r3, [pc, #652]	; (8020570 <_dtoa_r+0x998>)
 80202e2:	2200      	movs	r2, #0
 80202e4:	f7e0 f998 	bl	8000618 <__aeabi_dmul>
 80202e8:	2200      	movs	r2, #0
 80202ea:	2300      	movs	r3, #0
 80202ec:	4606      	mov	r6, r0
 80202ee:	460f      	mov	r7, r1
 80202f0:	f7e0 fbfa 	bl	8000ae8 <__aeabi_dcmpeq>
 80202f4:	2800      	cmp	r0, #0
 80202f6:	d09e      	beq.n	8020236 <_dtoa_r+0x65e>
 80202f8:	e7d0      	b.n	802029c <_dtoa_r+0x6c4>
 80202fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80202fc:	2a00      	cmp	r2, #0
 80202fe:	f000 80ca 	beq.w	8020496 <_dtoa_r+0x8be>
 8020302:	9a07      	ldr	r2, [sp, #28]
 8020304:	2a01      	cmp	r2, #1
 8020306:	f300 80ad 	bgt.w	8020464 <_dtoa_r+0x88c>
 802030a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802030c:	2a00      	cmp	r2, #0
 802030e:	f000 80a5 	beq.w	802045c <_dtoa_r+0x884>
 8020312:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020316:	9e08      	ldr	r6, [sp, #32]
 8020318:	9d05      	ldr	r5, [sp, #20]
 802031a:	9a05      	ldr	r2, [sp, #20]
 802031c:	441a      	add	r2, r3
 802031e:	9205      	str	r2, [sp, #20]
 8020320:	9a06      	ldr	r2, [sp, #24]
 8020322:	2101      	movs	r1, #1
 8020324:	441a      	add	r2, r3
 8020326:	4620      	mov	r0, r4
 8020328:	9206      	str	r2, [sp, #24]
 802032a:	f000 ff3d 	bl	80211a8 <__i2b>
 802032e:	4607      	mov	r7, r0
 8020330:	b165      	cbz	r5, 802034c <_dtoa_r+0x774>
 8020332:	9b06      	ldr	r3, [sp, #24]
 8020334:	2b00      	cmp	r3, #0
 8020336:	dd09      	ble.n	802034c <_dtoa_r+0x774>
 8020338:	42ab      	cmp	r3, r5
 802033a:	9a05      	ldr	r2, [sp, #20]
 802033c:	bfa8      	it	ge
 802033e:	462b      	movge	r3, r5
 8020340:	1ad2      	subs	r2, r2, r3
 8020342:	9205      	str	r2, [sp, #20]
 8020344:	9a06      	ldr	r2, [sp, #24]
 8020346:	1aed      	subs	r5, r5, r3
 8020348:	1ad3      	subs	r3, r2, r3
 802034a:	9306      	str	r3, [sp, #24]
 802034c:	9b08      	ldr	r3, [sp, #32]
 802034e:	b1f3      	cbz	r3, 802038e <_dtoa_r+0x7b6>
 8020350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020352:	2b00      	cmp	r3, #0
 8020354:	f000 80a3 	beq.w	802049e <_dtoa_r+0x8c6>
 8020358:	2e00      	cmp	r6, #0
 802035a:	dd10      	ble.n	802037e <_dtoa_r+0x7a6>
 802035c:	4639      	mov	r1, r7
 802035e:	4632      	mov	r2, r6
 8020360:	4620      	mov	r0, r4
 8020362:	f000 ffe1 	bl	8021328 <__pow5mult>
 8020366:	4652      	mov	r2, sl
 8020368:	4601      	mov	r1, r0
 802036a:	4607      	mov	r7, r0
 802036c:	4620      	mov	r0, r4
 802036e:	f000 ff31 	bl	80211d4 <__multiply>
 8020372:	4651      	mov	r1, sl
 8020374:	4680      	mov	r8, r0
 8020376:	4620      	mov	r0, r4
 8020378:	f000 fe16 	bl	8020fa8 <_Bfree>
 802037c:	46c2      	mov	sl, r8
 802037e:	9b08      	ldr	r3, [sp, #32]
 8020380:	1b9a      	subs	r2, r3, r6
 8020382:	d004      	beq.n	802038e <_dtoa_r+0x7b6>
 8020384:	4651      	mov	r1, sl
 8020386:	4620      	mov	r0, r4
 8020388:	f000 ffce 	bl	8021328 <__pow5mult>
 802038c:	4682      	mov	sl, r0
 802038e:	2101      	movs	r1, #1
 8020390:	4620      	mov	r0, r4
 8020392:	f000 ff09 	bl	80211a8 <__i2b>
 8020396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020398:	2b00      	cmp	r3, #0
 802039a:	4606      	mov	r6, r0
 802039c:	f340 8081 	ble.w	80204a2 <_dtoa_r+0x8ca>
 80203a0:	461a      	mov	r2, r3
 80203a2:	4601      	mov	r1, r0
 80203a4:	4620      	mov	r0, r4
 80203a6:	f000 ffbf 	bl	8021328 <__pow5mult>
 80203aa:	9b07      	ldr	r3, [sp, #28]
 80203ac:	2b01      	cmp	r3, #1
 80203ae:	4606      	mov	r6, r0
 80203b0:	dd7a      	ble.n	80204a8 <_dtoa_r+0x8d0>
 80203b2:	f04f 0800 	mov.w	r8, #0
 80203b6:	6933      	ldr	r3, [r6, #16]
 80203b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80203bc:	6918      	ldr	r0, [r3, #16]
 80203be:	f000 fea5 	bl	802110c <__hi0bits>
 80203c2:	f1c0 0020 	rsb	r0, r0, #32
 80203c6:	9b06      	ldr	r3, [sp, #24]
 80203c8:	4418      	add	r0, r3
 80203ca:	f010 001f 	ands.w	r0, r0, #31
 80203ce:	f000 8094 	beq.w	80204fa <_dtoa_r+0x922>
 80203d2:	f1c0 0320 	rsb	r3, r0, #32
 80203d6:	2b04      	cmp	r3, #4
 80203d8:	f340 8085 	ble.w	80204e6 <_dtoa_r+0x90e>
 80203dc:	9b05      	ldr	r3, [sp, #20]
 80203de:	f1c0 001c 	rsb	r0, r0, #28
 80203e2:	4403      	add	r3, r0
 80203e4:	9305      	str	r3, [sp, #20]
 80203e6:	9b06      	ldr	r3, [sp, #24]
 80203e8:	4403      	add	r3, r0
 80203ea:	4405      	add	r5, r0
 80203ec:	9306      	str	r3, [sp, #24]
 80203ee:	9b05      	ldr	r3, [sp, #20]
 80203f0:	2b00      	cmp	r3, #0
 80203f2:	dd05      	ble.n	8020400 <_dtoa_r+0x828>
 80203f4:	4651      	mov	r1, sl
 80203f6:	461a      	mov	r2, r3
 80203f8:	4620      	mov	r0, r4
 80203fa:	f000 ffef 	bl	80213dc <__lshift>
 80203fe:	4682      	mov	sl, r0
 8020400:	9b06      	ldr	r3, [sp, #24]
 8020402:	2b00      	cmp	r3, #0
 8020404:	dd05      	ble.n	8020412 <_dtoa_r+0x83a>
 8020406:	4631      	mov	r1, r6
 8020408:	461a      	mov	r2, r3
 802040a:	4620      	mov	r0, r4
 802040c:	f000 ffe6 	bl	80213dc <__lshift>
 8020410:	4606      	mov	r6, r0
 8020412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020414:	2b00      	cmp	r3, #0
 8020416:	d072      	beq.n	80204fe <_dtoa_r+0x926>
 8020418:	4631      	mov	r1, r6
 802041a:	4650      	mov	r0, sl
 802041c:	f001 f84a 	bl	80214b4 <__mcmp>
 8020420:	2800      	cmp	r0, #0
 8020422:	da6c      	bge.n	80204fe <_dtoa_r+0x926>
 8020424:	2300      	movs	r3, #0
 8020426:	4651      	mov	r1, sl
 8020428:	220a      	movs	r2, #10
 802042a:	4620      	mov	r0, r4
 802042c:	f000 fdde 	bl	8020fec <__multadd>
 8020430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020432:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020436:	4682      	mov	sl, r0
 8020438:	2b00      	cmp	r3, #0
 802043a:	f000 81b0 	beq.w	802079e <_dtoa_r+0xbc6>
 802043e:	2300      	movs	r3, #0
 8020440:	4639      	mov	r1, r7
 8020442:	220a      	movs	r2, #10
 8020444:	4620      	mov	r0, r4
 8020446:	f000 fdd1 	bl	8020fec <__multadd>
 802044a:	9b01      	ldr	r3, [sp, #4]
 802044c:	2b00      	cmp	r3, #0
 802044e:	4607      	mov	r7, r0
 8020450:	f300 8096 	bgt.w	8020580 <_dtoa_r+0x9a8>
 8020454:	9b07      	ldr	r3, [sp, #28]
 8020456:	2b02      	cmp	r3, #2
 8020458:	dc59      	bgt.n	802050e <_dtoa_r+0x936>
 802045a:	e091      	b.n	8020580 <_dtoa_r+0x9a8>
 802045c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802045e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8020462:	e758      	b.n	8020316 <_dtoa_r+0x73e>
 8020464:	9b04      	ldr	r3, [sp, #16]
 8020466:	1e5e      	subs	r6, r3, #1
 8020468:	9b08      	ldr	r3, [sp, #32]
 802046a:	42b3      	cmp	r3, r6
 802046c:	bfbf      	itttt	lt
 802046e:	9b08      	ldrlt	r3, [sp, #32]
 8020470:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8020472:	9608      	strlt	r6, [sp, #32]
 8020474:	1af3      	sublt	r3, r6, r3
 8020476:	bfb4      	ite	lt
 8020478:	18d2      	addlt	r2, r2, r3
 802047a:	1b9e      	subge	r6, r3, r6
 802047c:	9b04      	ldr	r3, [sp, #16]
 802047e:	bfbc      	itt	lt
 8020480:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8020482:	2600      	movlt	r6, #0
 8020484:	2b00      	cmp	r3, #0
 8020486:	bfb7      	itett	lt
 8020488:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802048c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8020490:	1a9d      	sublt	r5, r3, r2
 8020492:	2300      	movlt	r3, #0
 8020494:	e741      	b.n	802031a <_dtoa_r+0x742>
 8020496:	9e08      	ldr	r6, [sp, #32]
 8020498:	9d05      	ldr	r5, [sp, #20]
 802049a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802049c:	e748      	b.n	8020330 <_dtoa_r+0x758>
 802049e:	9a08      	ldr	r2, [sp, #32]
 80204a0:	e770      	b.n	8020384 <_dtoa_r+0x7ac>
 80204a2:	9b07      	ldr	r3, [sp, #28]
 80204a4:	2b01      	cmp	r3, #1
 80204a6:	dc19      	bgt.n	80204dc <_dtoa_r+0x904>
 80204a8:	9b02      	ldr	r3, [sp, #8]
 80204aa:	b9bb      	cbnz	r3, 80204dc <_dtoa_r+0x904>
 80204ac:	9b03      	ldr	r3, [sp, #12]
 80204ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80204b2:	b99b      	cbnz	r3, 80204dc <_dtoa_r+0x904>
 80204b4:	9b03      	ldr	r3, [sp, #12]
 80204b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80204ba:	0d1b      	lsrs	r3, r3, #20
 80204bc:	051b      	lsls	r3, r3, #20
 80204be:	b183      	cbz	r3, 80204e2 <_dtoa_r+0x90a>
 80204c0:	9b05      	ldr	r3, [sp, #20]
 80204c2:	3301      	adds	r3, #1
 80204c4:	9305      	str	r3, [sp, #20]
 80204c6:	9b06      	ldr	r3, [sp, #24]
 80204c8:	3301      	adds	r3, #1
 80204ca:	9306      	str	r3, [sp, #24]
 80204cc:	f04f 0801 	mov.w	r8, #1
 80204d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	f47f af6f 	bne.w	80203b6 <_dtoa_r+0x7de>
 80204d8:	2001      	movs	r0, #1
 80204da:	e774      	b.n	80203c6 <_dtoa_r+0x7ee>
 80204dc:	f04f 0800 	mov.w	r8, #0
 80204e0:	e7f6      	b.n	80204d0 <_dtoa_r+0x8f8>
 80204e2:	4698      	mov	r8, r3
 80204e4:	e7f4      	b.n	80204d0 <_dtoa_r+0x8f8>
 80204e6:	d082      	beq.n	80203ee <_dtoa_r+0x816>
 80204e8:	9a05      	ldr	r2, [sp, #20]
 80204ea:	331c      	adds	r3, #28
 80204ec:	441a      	add	r2, r3
 80204ee:	9205      	str	r2, [sp, #20]
 80204f0:	9a06      	ldr	r2, [sp, #24]
 80204f2:	441a      	add	r2, r3
 80204f4:	441d      	add	r5, r3
 80204f6:	9206      	str	r2, [sp, #24]
 80204f8:	e779      	b.n	80203ee <_dtoa_r+0x816>
 80204fa:	4603      	mov	r3, r0
 80204fc:	e7f4      	b.n	80204e8 <_dtoa_r+0x910>
 80204fe:	9b04      	ldr	r3, [sp, #16]
 8020500:	2b00      	cmp	r3, #0
 8020502:	dc37      	bgt.n	8020574 <_dtoa_r+0x99c>
 8020504:	9b07      	ldr	r3, [sp, #28]
 8020506:	2b02      	cmp	r3, #2
 8020508:	dd34      	ble.n	8020574 <_dtoa_r+0x99c>
 802050a:	9b04      	ldr	r3, [sp, #16]
 802050c:	9301      	str	r3, [sp, #4]
 802050e:	9b01      	ldr	r3, [sp, #4]
 8020510:	b963      	cbnz	r3, 802052c <_dtoa_r+0x954>
 8020512:	4631      	mov	r1, r6
 8020514:	2205      	movs	r2, #5
 8020516:	4620      	mov	r0, r4
 8020518:	f000 fd68 	bl	8020fec <__multadd>
 802051c:	4601      	mov	r1, r0
 802051e:	4606      	mov	r6, r0
 8020520:	4650      	mov	r0, sl
 8020522:	f000 ffc7 	bl	80214b4 <__mcmp>
 8020526:	2800      	cmp	r0, #0
 8020528:	f73f adbb 	bgt.w	80200a2 <_dtoa_r+0x4ca>
 802052c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802052e:	9d00      	ldr	r5, [sp, #0]
 8020530:	ea6f 0b03 	mvn.w	fp, r3
 8020534:	f04f 0800 	mov.w	r8, #0
 8020538:	4631      	mov	r1, r6
 802053a:	4620      	mov	r0, r4
 802053c:	f000 fd34 	bl	8020fa8 <_Bfree>
 8020540:	2f00      	cmp	r7, #0
 8020542:	f43f aeab 	beq.w	802029c <_dtoa_r+0x6c4>
 8020546:	f1b8 0f00 	cmp.w	r8, #0
 802054a:	d005      	beq.n	8020558 <_dtoa_r+0x980>
 802054c:	45b8      	cmp	r8, r7
 802054e:	d003      	beq.n	8020558 <_dtoa_r+0x980>
 8020550:	4641      	mov	r1, r8
 8020552:	4620      	mov	r0, r4
 8020554:	f000 fd28 	bl	8020fa8 <_Bfree>
 8020558:	4639      	mov	r1, r7
 802055a:	4620      	mov	r0, r4
 802055c:	f000 fd24 	bl	8020fa8 <_Bfree>
 8020560:	e69c      	b.n	802029c <_dtoa_r+0x6c4>
 8020562:	2600      	movs	r6, #0
 8020564:	4637      	mov	r7, r6
 8020566:	e7e1      	b.n	802052c <_dtoa_r+0x954>
 8020568:	46bb      	mov	fp, r7
 802056a:	4637      	mov	r7, r6
 802056c:	e599      	b.n	80200a2 <_dtoa_r+0x4ca>
 802056e:	bf00      	nop
 8020570:	40240000 	.word	0x40240000
 8020574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020576:	2b00      	cmp	r3, #0
 8020578:	f000 80c8 	beq.w	802070c <_dtoa_r+0xb34>
 802057c:	9b04      	ldr	r3, [sp, #16]
 802057e:	9301      	str	r3, [sp, #4]
 8020580:	2d00      	cmp	r5, #0
 8020582:	dd05      	ble.n	8020590 <_dtoa_r+0x9b8>
 8020584:	4639      	mov	r1, r7
 8020586:	462a      	mov	r2, r5
 8020588:	4620      	mov	r0, r4
 802058a:	f000 ff27 	bl	80213dc <__lshift>
 802058e:	4607      	mov	r7, r0
 8020590:	f1b8 0f00 	cmp.w	r8, #0
 8020594:	d05b      	beq.n	802064e <_dtoa_r+0xa76>
 8020596:	6879      	ldr	r1, [r7, #4]
 8020598:	4620      	mov	r0, r4
 802059a:	f000 fcc5 	bl	8020f28 <_Balloc>
 802059e:	4605      	mov	r5, r0
 80205a0:	b928      	cbnz	r0, 80205ae <_dtoa_r+0x9d6>
 80205a2:	4b83      	ldr	r3, [pc, #524]	; (80207b0 <_dtoa_r+0xbd8>)
 80205a4:	4602      	mov	r2, r0
 80205a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80205aa:	f7ff bb2e 	b.w	801fc0a <_dtoa_r+0x32>
 80205ae:	693a      	ldr	r2, [r7, #16]
 80205b0:	3202      	adds	r2, #2
 80205b2:	0092      	lsls	r2, r2, #2
 80205b4:	f107 010c 	add.w	r1, r7, #12
 80205b8:	300c      	adds	r0, #12
 80205ba:	f7ff fa77 	bl	801faac <memcpy>
 80205be:	2201      	movs	r2, #1
 80205c0:	4629      	mov	r1, r5
 80205c2:	4620      	mov	r0, r4
 80205c4:	f000 ff0a 	bl	80213dc <__lshift>
 80205c8:	9b00      	ldr	r3, [sp, #0]
 80205ca:	3301      	adds	r3, #1
 80205cc:	9304      	str	r3, [sp, #16]
 80205ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80205d2:	4413      	add	r3, r2
 80205d4:	9308      	str	r3, [sp, #32]
 80205d6:	9b02      	ldr	r3, [sp, #8]
 80205d8:	f003 0301 	and.w	r3, r3, #1
 80205dc:	46b8      	mov	r8, r7
 80205de:	9306      	str	r3, [sp, #24]
 80205e0:	4607      	mov	r7, r0
 80205e2:	9b04      	ldr	r3, [sp, #16]
 80205e4:	4631      	mov	r1, r6
 80205e6:	3b01      	subs	r3, #1
 80205e8:	4650      	mov	r0, sl
 80205ea:	9301      	str	r3, [sp, #4]
 80205ec:	f7ff fa6c 	bl	801fac8 <quorem>
 80205f0:	4641      	mov	r1, r8
 80205f2:	9002      	str	r0, [sp, #8]
 80205f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80205f8:	4650      	mov	r0, sl
 80205fa:	f000 ff5b 	bl	80214b4 <__mcmp>
 80205fe:	463a      	mov	r2, r7
 8020600:	9005      	str	r0, [sp, #20]
 8020602:	4631      	mov	r1, r6
 8020604:	4620      	mov	r0, r4
 8020606:	f000 ff71 	bl	80214ec <__mdiff>
 802060a:	68c2      	ldr	r2, [r0, #12]
 802060c:	4605      	mov	r5, r0
 802060e:	bb02      	cbnz	r2, 8020652 <_dtoa_r+0xa7a>
 8020610:	4601      	mov	r1, r0
 8020612:	4650      	mov	r0, sl
 8020614:	f000 ff4e 	bl	80214b4 <__mcmp>
 8020618:	4602      	mov	r2, r0
 802061a:	4629      	mov	r1, r5
 802061c:	4620      	mov	r0, r4
 802061e:	9209      	str	r2, [sp, #36]	; 0x24
 8020620:	f000 fcc2 	bl	8020fa8 <_Bfree>
 8020624:	9b07      	ldr	r3, [sp, #28]
 8020626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020628:	9d04      	ldr	r5, [sp, #16]
 802062a:	ea43 0102 	orr.w	r1, r3, r2
 802062e:	9b06      	ldr	r3, [sp, #24]
 8020630:	4319      	orrs	r1, r3
 8020632:	d110      	bne.n	8020656 <_dtoa_r+0xa7e>
 8020634:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8020638:	d029      	beq.n	802068e <_dtoa_r+0xab6>
 802063a:	9b05      	ldr	r3, [sp, #20]
 802063c:	2b00      	cmp	r3, #0
 802063e:	dd02      	ble.n	8020646 <_dtoa_r+0xa6e>
 8020640:	9b02      	ldr	r3, [sp, #8]
 8020642:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8020646:	9b01      	ldr	r3, [sp, #4]
 8020648:	f883 9000 	strb.w	r9, [r3]
 802064c:	e774      	b.n	8020538 <_dtoa_r+0x960>
 802064e:	4638      	mov	r0, r7
 8020650:	e7ba      	b.n	80205c8 <_dtoa_r+0x9f0>
 8020652:	2201      	movs	r2, #1
 8020654:	e7e1      	b.n	802061a <_dtoa_r+0xa42>
 8020656:	9b05      	ldr	r3, [sp, #20]
 8020658:	2b00      	cmp	r3, #0
 802065a:	db04      	blt.n	8020666 <_dtoa_r+0xa8e>
 802065c:	9907      	ldr	r1, [sp, #28]
 802065e:	430b      	orrs	r3, r1
 8020660:	9906      	ldr	r1, [sp, #24]
 8020662:	430b      	orrs	r3, r1
 8020664:	d120      	bne.n	80206a8 <_dtoa_r+0xad0>
 8020666:	2a00      	cmp	r2, #0
 8020668:	dded      	ble.n	8020646 <_dtoa_r+0xa6e>
 802066a:	4651      	mov	r1, sl
 802066c:	2201      	movs	r2, #1
 802066e:	4620      	mov	r0, r4
 8020670:	f000 feb4 	bl	80213dc <__lshift>
 8020674:	4631      	mov	r1, r6
 8020676:	4682      	mov	sl, r0
 8020678:	f000 ff1c 	bl	80214b4 <__mcmp>
 802067c:	2800      	cmp	r0, #0
 802067e:	dc03      	bgt.n	8020688 <_dtoa_r+0xab0>
 8020680:	d1e1      	bne.n	8020646 <_dtoa_r+0xa6e>
 8020682:	f019 0f01 	tst.w	r9, #1
 8020686:	d0de      	beq.n	8020646 <_dtoa_r+0xa6e>
 8020688:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802068c:	d1d8      	bne.n	8020640 <_dtoa_r+0xa68>
 802068e:	9a01      	ldr	r2, [sp, #4]
 8020690:	2339      	movs	r3, #57	; 0x39
 8020692:	7013      	strb	r3, [r2, #0]
 8020694:	462b      	mov	r3, r5
 8020696:	461d      	mov	r5, r3
 8020698:	3b01      	subs	r3, #1
 802069a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802069e:	2a39      	cmp	r2, #57	; 0x39
 80206a0:	d06c      	beq.n	802077c <_dtoa_r+0xba4>
 80206a2:	3201      	adds	r2, #1
 80206a4:	701a      	strb	r2, [r3, #0]
 80206a6:	e747      	b.n	8020538 <_dtoa_r+0x960>
 80206a8:	2a00      	cmp	r2, #0
 80206aa:	dd07      	ble.n	80206bc <_dtoa_r+0xae4>
 80206ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80206b0:	d0ed      	beq.n	802068e <_dtoa_r+0xab6>
 80206b2:	9a01      	ldr	r2, [sp, #4]
 80206b4:	f109 0301 	add.w	r3, r9, #1
 80206b8:	7013      	strb	r3, [r2, #0]
 80206ba:	e73d      	b.n	8020538 <_dtoa_r+0x960>
 80206bc:	9b04      	ldr	r3, [sp, #16]
 80206be:	9a08      	ldr	r2, [sp, #32]
 80206c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80206c4:	4293      	cmp	r3, r2
 80206c6:	d043      	beq.n	8020750 <_dtoa_r+0xb78>
 80206c8:	4651      	mov	r1, sl
 80206ca:	2300      	movs	r3, #0
 80206cc:	220a      	movs	r2, #10
 80206ce:	4620      	mov	r0, r4
 80206d0:	f000 fc8c 	bl	8020fec <__multadd>
 80206d4:	45b8      	cmp	r8, r7
 80206d6:	4682      	mov	sl, r0
 80206d8:	f04f 0300 	mov.w	r3, #0
 80206dc:	f04f 020a 	mov.w	r2, #10
 80206e0:	4641      	mov	r1, r8
 80206e2:	4620      	mov	r0, r4
 80206e4:	d107      	bne.n	80206f6 <_dtoa_r+0xb1e>
 80206e6:	f000 fc81 	bl	8020fec <__multadd>
 80206ea:	4680      	mov	r8, r0
 80206ec:	4607      	mov	r7, r0
 80206ee:	9b04      	ldr	r3, [sp, #16]
 80206f0:	3301      	adds	r3, #1
 80206f2:	9304      	str	r3, [sp, #16]
 80206f4:	e775      	b.n	80205e2 <_dtoa_r+0xa0a>
 80206f6:	f000 fc79 	bl	8020fec <__multadd>
 80206fa:	4639      	mov	r1, r7
 80206fc:	4680      	mov	r8, r0
 80206fe:	2300      	movs	r3, #0
 8020700:	220a      	movs	r2, #10
 8020702:	4620      	mov	r0, r4
 8020704:	f000 fc72 	bl	8020fec <__multadd>
 8020708:	4607      	mov	r7, r0
 802070a:	e7f0      	b.n	80206ee <_dtoa_r+0xb16>
 802070c:	9b04      	ldr	r3, [sp, #16]
 802070e:	9301      	str	r3, [sp, #4]
 8020710:	9d00      	ldr	r5, [sp, #0]
 8020712:	4631      	mov	r1, r6
 8020714:	4650      	mov	r0, sl
 8020716:	f7ff f9d7 	bl	801fac8 <quorem>
 802071a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802071e:	9b00      	ldr	r3, [sp, #0]
 8020720:	f805 9b01 	strb.w	r9, [r5], #1
 8020724:	1aea      	subs	r2, r5, r3
 8020726:	9b01      	ldr	r3, [sp, #4]
 8020728:	4293      	cmp	r3, r2
 802072a:	dd07      	ble.n	802073c <_dtoa_r+0xb64>
 802072c:	4651      	mov	r1, sl
 802072e:	2300      	movs	r3, #0
 8020730:	220a      	movs	r2, #10
 8020732:	4620      	mov	r0, r4
 8020734:	f000 fc5a 	bl	8020fec <__multadd>
 8020738:	4682      	mov	sl, r0
 802073a:	e7ea      	b.n	8020712 <_dtoa_r+0xb3a>
 802073c:	9b01      	ldr	r3, [sp, #4]
 802073e:	2b00      	cmp	r3, #0
 8020740:	bfc8      	it	gt
 8020742:	461d      	movgt	r5, r3
 8020744:	9b00      	ldr	r3, [sp, #0]
 8020746:	bfd8      	it	le
 8020748:	2501      	movle	r5, #1
 802074a:	441d      	add	r5, r3
 802074c:	f04f 0800 	mov.w	r8, #0
 8020750:	4651      	mov	r1, sl
 8020752:	2201      	movs	r2, #1
 8020754:	4620      	mov	r0, r4
 8020756:	f000 fe41 	bl	80213dc <__lshift>
 802075a:	4631      	mov	r1, r6
 802075c:	4682      	mov	sl, r0
 802075e:	f000 fea9 	bl	80214b4 <__mcmp>
 8020762:	2800      	cmp	r0, #0
 8020764:	dc96      	bgt.n	8020694 <_dtoa_r+0xabc>
 8020766:	d102      	bne.n	802076e <_dtoa_r+0xb96>
 8020768:	f019 0f01 	tst.w	r9, #1
 802076c:	d192      	bne.n	8020694 <_dtoa_r+0xabc>
 802076e:	462b      	mov	r3, r5
 8020770:	461d      	mov	r5, r3
 8020772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020776:	2a30      	cmp	r2, #48	; 0x30
 8020778:	d0fa      	beq.n	8020770 <_dtoa_r+0xb98>
 802077a:	e6dd      	b.n	8020538 <_dtoa_r+0x960>
 802077c:	9a00      	ldr	r2, [sp, #0]
 802077e:	429a      	cmp	r2, r3
 8020780:	d189      	bne.n	8020696 <_dtoa_r+0xabe>
 8020782:	f10b 0b01 	add.w	fp, fp, #1
 8020786:	2331      	movs	r3, #49	; 0x31
 8020788:	e796      	b.n	80206b8 <_dtoa_r+0xae0>
 802078a:	4b0a      	ldr	r3, [pc, #40]	; (80207b4 <_dtoa_r+0xbdc>)
 802078c:	f7ff ba99 	b.w	801fcc2 <_dtoa_r+0xea>
 8020790:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020792:	2b00      	cmp	r3, #0
 8020794:	f47f aa6d 	bne.w	801fc72 <_dtoa_r+0x9a>
 8020798:	4b07      	ldr	r3, [pc, #28]	; (80207b8 <_dtoa_r+0xbe0>)
 802079a:	f7ff ba92 	b.w	801fcc2 <_dtoa_r+0xea>
 802079e:	9b01      	ldr	r3, [sp, #4]
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	dcb5      	bgt.n	8020710 <_dtoa_r+0xb38>
 80207a4:	9b07      	ldr	r3, [sp, #28]
 80207a6:	2b02      	cmp	r3, #2
 80207a8:	f73f aeb1 	bgt.w	802050e <_dtoa_r+0x936>
 80207ac:	e7b0      	b.n	8020710 <_dtoa_r+0xb38>
 80207ae:	bf00      	nop
 80207b0:	0802d29e 	.word	0x0802d29e
 80207b4:	0802d1f1 	.word	0x0802d1f1
 80207b8:	0802d222 	.word	0x0802d222

080207bc <_free_r>:
 80207bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80207be:	2900      	cmp	r1, #0
 80207c0:	d044      	beq.n	802084c <_free_r+0x90>
 80207c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80207c6:	9001      	str	r0, [sp, #4]
 80207c8:	2b00      	cmp	r3, #0
 80207ca:	f1a1 0404 	sub.w	r4, r1, #4
 80207ce:	bfb8      	it	lt
 80207d0:	18e4      	addlt	r4, r4, r3
 80207d2:	f7fd fa6b 	bl	801dcac <__malloc_lock>
 80207d6:	4a1e      	ldr	r2, [pc, #120]	; (8020850 <_free_r+0x94>)
 80207d8:	9801      	ldr	r0, [sp, #4]
 80207da:	6813      	ldr	r3, [r2, #0]
 80207dc:	b933      	cbnz	r3, 80207ec <_free_r+0x30>
 80207de:	6063      	str	r3, [r4, #4]
 80207e0:	6014      	str	r4, [r2, #0]
 80207e2:	b003      	add	sp, #12
 80207e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80207e8:	f7fd ba66 	b.w	801dcb8 <__malloc_unlock>
 80207ec:	42a3      	cmp	r3, r4
 80207ee:	d908      	bls.n	8020802 <_free_r+0x46>
 80207f0:	6825      	ldr	r5, [r4, #0]
 80207f2:	1961      	adds	r1, r4, r5
 80207f4:	428b      	cmp	r3, r1
 80207f6:	bf01      	itttt	eq
 80207f8:	6819      	ldreq	r1, [r3, #0]
 80207fa:	685b      	ldreq	r3, [r3, #4]
 80207fc:	1949      	addeq	r1, r1, r5
 80207fe:	6021      	streq	r1, [r4, #0]
 8020800:	e7ed      	b.n	80207de <_free_r+0x22>
 8020802:	461a      	mov	r2, r3
 8020804:	685b      	ldr	r3, [r3, #4]
 8020806:	b10b      	cbz	r3, 802080c <_free_r+0x50>
 8020808:	42a3      	cmp	r3, r4
 802080a:	d9fa      	bls.n	8020802 <_free_r+0x46>
 802080c:	6811      	ldr	r1, [r2, #0]
 802080e:	1855      	adds	r5, r2, r1
 8020810:	42a5      	cmp	r5, r4
 8020812:	d10b      	bne.n	802082c <_free_r+0x70>
 8020814:	6824      	ldr	r4, [r4, #0]
 8020816:	4421      	add	r1, r4
 8020818:	1854      	adds	r4, r2, r1
 802081a:	42a3      	cmp	r3, r4
 802081c:	6011      	str	r1, [r2, #0]
 802081e:	d1e0      	bne.n	80207e2 <_free_r+0x26>
 8020820:	681c      	ldr	r4, [r3, #0]
 8020822:	685b      	ldr	r3, [r3, #4]
 8020824:	6053      	str	r3, [r2, #4]
 8020826:	440c      	add	r4, r1
 8020828:	6014      	str	r4, [r2, #0]
 802082a:	e7da      	b.n	80207e2 <_free_r+0x26>
 802082c:	d902      	bls.n	8020834 <_free_r+0x78>
 802082e:	230c      	movs	r3, #12
 8020830:	6003      	str	r3, [r0, #0]
 8020832:	e7d6      	b.n	80207e2 <_free_r+0x26>
 8020834:	6825      	ldr	r5, [r4, #0]
 8020836:	1961      	adds	r1, r4, r5
 8020838:	428b      	cmp	r3, r1
 802083a:	bf04      	itt	eq
 802083c:	6819      	ldreq	r1, [r3, #0]
 802083e:	685b      	ldreq	r3, [r3, #4]
 8020840:	6063      	str	r3, [r4, #4]
 8020842:	bf04      	itt	eq
 8020844:	1949      	addeq	r1, r1, r5
 8020846:	6021      	streq	r1, [r4, #0]
 8020848:	6054      	str	r4, [r2, #4]
 802084a:	e7ca      	b.n	80207e2 <_free_r+0x26>
 802084c:	b003      	add	sp, #12
 802084e:	bd30      	pop	{r4, r5, pc}
 8020850:	20001160 	.word	0x20001160

08020854 <rshift>:
 8020854:	6903      	ldr	r3, [r0, #16]
 8020856:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802085a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802085e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8020862:	f100 0414 	add.w	r4, r0, #20
 8020866:	dd45      	ble.n	80208f4 <rshift+0xa0>
 8020868:	f011 011f 	ands.w	r1, r1, #31
 802086c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020870:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020874:	d10c      	bne.n	8020890 <rshift+0x3c>
 8020876:	f100 0710 	add.w	r7, r0, #16
 802087a:	4629      	mov	r1, r5
 802087c:	42b1      	cmp	r1, r6
 802087e:	d334      	bcc.n	80208ea <rshift+0x96>
 8020880:	1a9b      	subs	r3, r3, r2
 8020882:	009b      	lsls	r3, r3, #2
 8020884:	1eea      	subs	r2, r5, #3
 8020886:	4296      	cmp	r6, r2
 8020888:	bf38      	it	cc
 802088a:	2300      	movcc	r3, #0
 802088c:	4423      	add	r3, r4
 802088e:	e015      	b.n	80208bc <rshift+0x68>
 8020890:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8020894:	f1c1 0820 	rsb	r8, r1, #32
 8020898:	40cf      	lsrs	r7, r1
 802089a:	f105 0e04 	add.w	lr, r5, #4
 802089e:	46a1      	mov	r9, r4
 80208a0:	4576      	cmp	r6, lr
 80208a2:	46f4      	mov	ip, lr
 80208a4:	d815      	bhi.n	80208d2 <rshift+0x7e>
 80208a6:	1a9a      	subs	r2, r3, r2
 80208a8:	0092      	lsls	r2, r2, #2
 80208aa:	3a04      	subs	r2, #4
 80208ac:	3501      	adds	r5, #1
 80208ae:	42ae      	cmp	r6, r5
 80208b0:	bf38      	it	cc
 80208b2:	2200      	movcc	r2, #0
 80208b4:	18a3      	adds	r3, r4, r2
 80208b6:	50a7      	str	r7, [r4, r2]
 80208b8:	b107      	cbz	r7, 80208bc <rshift+0x68>
 80208ba:	3304      	adds	r3, #4
 80208bc:	1b1a      	subs	r2, r3, r4
 80208be:	42a3      	cmp	r3, r4
 80208c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80208c4:	bf08      	it	eq
 80208c6:	2300      	moveq	r3, #0
 80208c8:	6102      	str	r2, [r0, #16]
 80208ca:	bf08      	it	eq
 80208cc:	6143      	streq	r3, [r0, #20]
 80208ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80208d2:	f8dc c000 	ldr.w	ip, [ip]
 80208d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80208da:	ea4c 0707 	orr.w	r7, ip, r7
 80208de:	f849 7b04 	str.w	r7, [r9], #4
 80208e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80208e6:	40cf      	lsrs	r7, r1
 80208e8:	e7da      	b.n	80208a0 <rshift+0x4c>
 80208ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80208ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80208f2:	e7c3      	b.n	802087c <rshift+0x28>
 80208f4:	4623      	mov	r3, r4
 80208f6:	e7e1      	b.n	80208bc <rshift+0x68>

080208f8 <__hexdig_fun>:
 80208f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80208fc:	2b09      	cmp	r3, #9
 80208fe:	d802      	bhi.n	8020906 <__hexdig_fun+0xe>
 8020900:	3820      	subs	r0, #32
 8020902:	b2c0      	uxtb	r0, r0
 8020904:	4770      	bx	lr
 8020906:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 802090a:	2b05      	cmp	r3, #5
 802090c:	d801      	bhi.n	8020912 <__hexdig_fun+0x1a>
 802090e:	3847      	subs	r0, #71	; 0x47
 8020910:	e7f7      	b.n	8020902 <__hexdig_fun+0xa>
 8020912:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8020916:	2b05      	cmp	r3, #5
 8020918:	d801      	bhi.n	802091e <__hexdig_fun+0x26>
 802091a:	3827      	subs	r0, #39	; 0x27
 802091c:	e7f1      	b.n	8020902 <__hexdig_fun+0xa>
 802091e:	2000      	movs	r0, #0
 8020920:	4770      	bx	lr
	...

08020924 <__gethex>:
 8020924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020928:	4617      	mov	r7, r2
 802092a:	680a      	ldr	r2, [r1, #0]
 802092c:	b085      	sub	sp, #20
 802092e:	f102 0b02 	add.w	fp, r2, #2
 8020932:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8020936:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802093a:	4681      	mov	r9, r0
 802093c:	468a      	mov	sl, r1
 802093e:	9302      	str	r3, [sp, #8]
 8020940:	32fe      	adds	r2, #254	; 0xfe
 8020942:	eb02 030b 	add.w	r3, r2, fp
 8020946:	46d8      	mov	r8, fp
 8020948:	f81b 0b01 	ldrb.w	r0, [fp], #1
 802094c:	9301      	str	r3, [sp, #4]
 802094e:	2830      	cmp	r0, #48	; 0x30
 8020950:	d0f7      	beq.n	8020942 <__gethex+0x1e>
 8020952:	f7ff ffd1 	bl	80208f8 <__hexdig_fun>
 8020956:	4604      	mov	r4, r0
 8020958:	2800      	cmp	r0, #0
 802095a:	d138      	bne.n	80209ce <__gethex+0xaa>
 802095c:	49a7      	ldr	r1, [pc, #668]	; (8020bfc <__gethex+0x2d8>)
 802095e:	2201      	movs	r2, #1
 8020960:	4640      	mov	r0, r8
 8020962:	f7fe ffc7 	bl	801f8f4 <strncmp>
 8020966:	4606      	mov	r6, r0
 8020968:	2800      	cmp	r0, #0
 802096a:	d169      	bne.n	8020a40 <__gethex+0x11c>
 802096c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8020970:	465d      	mov	r5, fp
 8020972:	f7ff ffc1 	bl	80208f8 <__hexdig_fun>
 8020976:	2800      	cmp	r0, #0
 8020978:	d064      	beq.n	8020a44 <__gethex+0x120>
 802097a:	465a      	mov	r2, fp
 802097c:	7810      	ldrb	r0, [r2, #0]
 802097e:	2830      	cmp	r0, #48	; 0x30
 8020980:	4690      	mov	r8, r2
 8020982:	f102 0201 	add.w	r2, r2, #1
 8020986:	d0f9      	beq.n	802097c <__gethex+0x58>
 8020988:	f7ff ffb6 	bl	80208f8 <__hexdig_fun>
 802098c:	2301      	movs	r3, #1
 802098e:	fab0 f480 	clz	r4, r0
 8020992:	0964      	lsrs	r4, r4, #5
 8020994:	465e      	mov	r6, fp
 8020996:	9301      	str	r3, [sp, #4]
 8020998:	4642      	mov	r2, r8
 802099a:	4615      	mov	r5, r2
 802099c:	3201      	adds	r2, #1
 802099e:	7828      	ldrb	r0, [r5, #0]
 80209a0:	f7ff ffaa 	bl	80208f8 <__hexdig_fun>
 80209a4:	2800      	cmp	r0, #0
 80209a6:	d1f8      	bne.n	802099a <__gethex+0x76>
 80209a8:	4994      	ldr	r1, [pc, #592]	; (8020bfc <__gethex+0x2d8>)
 80209aa:	2201      	movs	r2, #1
 80209ac:	4628      	mov	r0, r5
 80209ae:	f7fe ffa1 	bl	801f8f4 <strncmp>
 80209b2:	b978      	cbnz	r0, 80209d4 <__gethex+0xb0>
 80209b4:	b946      	cbnz	r6, 80209c8 <__gethex+0xa4>
 80209b6:	1c6e      	adds	r6, r5, #1
 80209b8:	4632      	mov	r2, r6
 80209ba:	4615      	mov	r5, r2
 80209bc:	3201      	adds	r2, #1
 80209be:	7828      	ldrb	r0, [r5, #0]
 80209c0:	f7ff ff9a 	bl	80208f8 <__hexdig_fun>
 80209c4:	2800      	cmp	r0, #0
 80209c6:	d1f8      	bne.n	80209ba <__gethex+0x96>
 80209c8:	1b73      	subs	r3, r6, r5
 80209ca:	009e      	lsls	r6, r3, #2
 80209cc:	e004      	b.n	80209d8 <__gethex+0xb4>
 80209ce:	2400      	movs	r4, #0
 80209d0:	4626      	mov	r6, r4
 80209d2:	e7e1      	b.n	8020998 <__gethex+0x74>
 80209d4:	2e00      	cmp	r6, #0
 80209d6:	d1f7      	bne.n	80209c8 <__gethex+0xa4>
 80209d8:	782b      	ldrb	r3, [r5, #0]
 80209da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80209de:	2b50      	cmp	r3, #80	; 0x50
 80209e0:	d13d      	bne.n	8020a5e <__gethex+0x13a>
 80209e2:	786b      	ldrb	r3, [r5, #1]
 80209e4:	2b2b      	cmp	r3, #43	; 0x2b
 80209e6:	d02f      	beq.n	8020a48 <__gethex+0x124>
 80209e8:	2b2d      	cmp	r3, #45	; 0x2d
 80209ea:	d031      	beq.n	8020a50 <__gethex+0x12c>
 80209ec:	1c69      	adds	r1, r5, #1
 80209ee:	f04f 0b00 	mov.w	fp, #0
 80209f2:	7808      	ldrb	r0, [r1, #0]
 80209f4:	f7ff ff80 	bl	80208f8 <__hexdig_fun>
 80209f8:	1e42      	subs	r2, r0, #1
 80209fa:	b2d2      	uxtb	r2, r2
 80209fc:	2a18      	cmp	r2, #24
 80209fe:	d82e      	bhi.n	8020a5e <__gethex+0x13a>
 8020a00:	f1a0 0210 	sub.w	r2, r0, #16
 8020a04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020a08:	f7ff ff76 	bl	80208f8 <__hexdig_fun>
 8020a0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8020a10:	fa5f fc8c 	uxtb.w	ip, ip
 8020a14:	f1bc 0f18 	cmp.w	ip, #24
 8020a18:	d91d      	bls.n	8020a56 <__gethex+0x132>
 8020a1a:	f1bb 0f00 	cmp.w	fp, #0
 8020a1e:	d000      	beq.n	8020a22 <__gethex+0xfe>
 8020a20:	4252      	negs	r2, r2
 8020a22:	4416      	add	r6, r2
 8020a24:	f8ca 1000 	str.w	r1, [sl]
 8020a28:	b1dc      	cbz	r4, 8020a62 <__gethex+0x13e>
 8020a2a:	9b01      	ldr	r3, [sp, #4]
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	bf14      	ite	ne
 8020a30:	f04f 0800 	movne.w	r8, #0
 8020a34:	f04f 0806 	moveq.w	r8, #6
 8020a38:	4640      	mov	r0, r8
 8020a3a:	b005      	add	sp, #20
 8020a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a40:	4645      	mov	r5, r8
 8020a42:	4626      	mov	r6, r4
 8020a44:	2401      	movs	r4, #1
 8020a46:	e7c7      	b.n	80209d8 <__gethex+0xb4>
 8020a48:	f04f 0b00 	mov.w	fp, #0
 8020a4c:	1ca9      	adds	r1, r5, #2
 8020a4e:	e7d0      	b.n	80209f2 <__gethex+0xce>
 8020a50:	f04f 0b01 	mov.w	fp, #1
 8020a54:	e7fa      	b.n	8020a4c <__gethex+0x128>
 8020a56:	230a      	movs	r3, #10
 8020a58:	fb03 0002 	mla	r0, r3, r2, r0
 8020a5c:	e7d0      	b.n	8020a00 <__gethex+0xdc>
 8020a5e:	4629      	mov	r1, r5
 8020a60:	e7e0      	b.n	8020a24 <__gethex+0x100>
 8020a62:	eba5 0308 	sub.w	r3, r5, r8
 8020a66:	3b01      	subs	r3, #1
 8020a68:	4621      	mov	r1, r4
 8020a6a:	2b07      	cmp	r3, #7
 8020a6c:	dc0a      	bgt.n	8020a84 <__gethex+0x160>
 8020a6e:	4648      	mov	r0, r9
 8020a70:	f000 fa5a 	bl	8020f28 <_Balloc>
 8020a74:	4604      	mov	r4, r0
 8020a76:	b940      	cbnz	r0, 8020a8a <__gethex+0x166>
 8020a78:	4b61      	ldr	r3, [pc, #388]	; (8020c00 <__gethex+0x2dc>)
 8020a7a:	4602      	mov	r2, r0
 8020a7c:	21e4      	movs	r1, #228	; 0xe4
 8020a7e:	4861      	ldr	r0, [pc, #388]	; (8020c04 <__gethex+0x2e0>)
 8020a80:	f7fd f824 	bl	801dacc <__assert_func>
 8020a84:	3101      	adds	r1, #1
 8020a86:	105b      	asrs	r3, r3, #1
 8020a88:	e7ef      	b.n	8020a6a <__gethex+0x146>
 8020a8a:	f100 0a14 	add.w	sl, r0, #20
 8020a8e:	2300      	movs	r3, #0
 8020a90:	495a      	ldr	r1, [pc, #360]	; (8020bfc <__gethex+0x2d8>)
 8020a92:	f8cd a004 	str.w	sl, [sp, #4]
 8020a96:	469b      	mov	fp, r3
 8020a98:	45a8      	cmp	r8, r5
 8020a9a:	d342      	bcc.n	8020b22 <__gethex+0x1fe>
 8020a9c:	9801      	ldr	r0, [sp, #4]
 8020a9e:	f840 bb04 	str.w	fp, [r0], #4
 8020aa2:	eba0 000a 	sub.w	r0, r0, sl
 8020aa6:	1080      	asrs	r0, r0, #2
 8020aa8:	6120      	str	r0, [r4, #16]
 8020aaa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8020aae:	4658      	mov	r0, fp
 8020ab0:	f000 fb2c 	bl	802110c <__hi0bits>
 8020ab4:	683d      	ldr	r5, [r7, #0]
 8020ab6:	eba8 0000 	sub.w	r0, r8, r0
 8020aba:	42a8      	cmp	r0, r5
 8020abc:	dd59      	ble.n	8020b72 <__gethex+0x24e>
 8020abe:	eba0 0805 	sub.w	r8, r0, r5
 8020ac2:	4641      	mov	r1, r8
 8020ac4:	4620      	mov	r0, r4
 8020ac6:	f000 febb 	bl	8021840 <__any_on>
 8020aca:	4683      	mov	fp, r0
 8020acc:	b1b8      	cbz	r0, 8020afe <__gethex+0x1da>
 8020ace:	f108 33ff 	add.w	r3, r8, #4294967295
 8020ad2:	1159      	asrs	r1, r3, #5
 8020ad4:	f003 021f 	and.w	r2, r3, #31
 8020ad8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8020adc:	f04f 0b01 	mov.w	fp, #1
 8020ae0:	fa0b f202 	lsl.w	r2, fp, r2
 8020ae4:	420a      	tst	r2, r1
 8020ae6:	d00a      	beq.n	8020afe <__gethex+0x1da>
 8020ae8:	455b      	cmp	r3, fp
 8020aea:	dd06      	ble.n	8020afa <__gethex+0x1d6>
 8020aec:	f1a8 0102 	sub.w	r1, r8, #2
 8020af0:	4620      	mov	r0, r4
 8020af2:	f000 fea5 	bl	8021840 <__any_on>
 8020af6:	2800      	cmp	r0, #0
 8020af8:	d138      	bne.n	8020b6c <__gethex+0x248>
 8020afa:	f04f 0b02 	mov.w	fp, #2
 8020afe:	4641      	mov	r1, r8
 8020b00:	4620      	mov	r0, r4
 8020b02:	f7ff fea7 	bl	8020854 <rshift>
 8020b06:	4446      	add	r6, r8
 8020b08:	68bb      	ldr	r3, [r7, #8]
 8020b0a:	42b3      	cmp	r3, r6
 8020b0c:	da41      	bge.n	8020b92 <__gethex+0x26e>
 8020b0e:	4621      	mov	r1, r4
 8020b10:	4648      	mov	r0, r9
 8020b12:	f000 fa49 	bl	8020fa8 <_Bfree>
 8020b16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b18:	2300      	movs	r3, #0
 8020b1a:	6013      	str	r3, [r2, #0]
 8020b1c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8020b20:	e78a      	b.n	8020a38 <__gethex+0x114>
 8020b22:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8020b26:	2a2e      	cmp	r2, #46	; 0x2e
 8020b28:	d014      	beq.n	8020b54 <__gethex+0x230>
 8020b2a:	2b20      	cmp	r3, #32
 8020b2c:	d106      	bne.n	8020b3c <__gethex+0x218>
 8020b2e:	9b01      	ldr	r3, [sp, #4]
 8020b30:	f843 bb04 	str.w	fp, [r3], #4
 8020b34:	f04f 0b00 	mov.w	fp, #0
 8020b38:	9301      	str	r3, [sp, #4]
 8020b3a:	465b      	mov	r3, fp
 8020b3c:	7828      	ldrb	r0, [r5, #0]
 8020b3e:	9303      	str	r3, [sp, #12]
 8020b40:	f7ff feda 	bl	80208f8 <__hexdig_fun>
 8020b44:	9b03      	ldr	r3, [sp, #12]
 8020b46:	f000 000f 	and.w	r0, r0, #15
 8020b4a:	4098      	lsls	r0, r3
 8020b4c:	ea4b 0b00 	orr.w	fp, fp, r0
 8020b50:	3304      	adds	r3, #4
 8020b52:	e7a1      	b.n	8020a98 <__gethex+0x174>
 8020b54:	45a8      	cmp	r8, r5
 8020b56:	d8e8      	bhi.n	8020b2a <__gethex+0x206>
 8020b58:	2201      	movs	r2, #1
 8020b5a:	4628      	mov	r0, r5
 8020b5c:	9303      	str	r3, [sp, #12]
 8020b5e:	f7fe fec9 	bl	801f8f4 <strncmp>
 8020b62:	4926      	ldr	r1, [pc, #152]	; (8020bfc <__gethex+0x2d8>)
 8020b64:	9b03      	ldr	r3, [sp, #12]
 8020b66:	2800      	cmp	r0, #0
 8020b68:	d1df      	bne.n	8020b2a <__gethex+0x206>
 8020b6a:	e795      	b.n	8020a98 <__gethex+0x174>
 8020b6c:	f04f 0b03 	mov.w	fp, #3
 8020b70:	e7c5      	b.n	8020afe <__gethex+0x1da>
 8020b72:	da0b      	bge.n	8020b8c <__gethex+0x268>
 8020b74:	eba5 0800 	sub.w	r8, r5, r0
 8020b78:	4621      	mov	r1, r4
 8020b7a:	4642      	mov	r2, r8
 8020b7c:	4648      	mov	r0, r9
 8020b7e:	f000 fc2d 	bl	80213dc <__lshift>
 8020b82:	eba6 0608 	sub.w	r6, r6, r8
 8020b86:	4604      	mov	r4, r0
 8020b88:	f100 0a14 	add.w	sl, r0, #20
 8020b8c:	f04f 0b00 	mov.w	fp, #0
 8020b90:	e7ba      	b.n	8020b08 <__gethex+0x1e4>
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	42b3      	cmp	r3, r6
 8020b96:	dd73      	ble.n	8020c80 <__gethex+0x35c>
 8020b98:	1b9e      	subs	r6, r3, r6
 8020b9a:	42b5      	cmp	r5, r6
 8020b9c:	dc34      	bgt.n	8020c08 <__gethex+0x2e4>
 8020b9e:	68fb      	ldr	r3, [r7, #12]
 8020ba0:	2b02      	cmp	r3, #2
 8020ba2:	d023      	beq.n	8020bec <__gethex+0x2c8>
 8020ba4:	2b03      	cmp	r3, #3
 8020ba6:	d025      	beq.n	8020bf4 <__gethex+0x2d0>
 8020ba8:	2b01      	cmp	r3, #1
 8020baa:	d115      	bne.n	8020bd8 <__gethex+0x2b4>
 8020bac:	42b5      	cmp	r5, r6
 8020bae:	d113      	bne.n	8020bd8 <__gethex+0x2b4>
 8020bb0:	2d01      	cmp	r5, #1
 8020bb2:	d10b      	bne.n	8020bcc <__gethex+0x2a8>
 8020bb4:	9a02      	ldr	r2, [sp, #8]
 8020bb6:	687b      	ldr	r3, [r7, #4]
 8020bb8:	6013      	str	r3, [r2, #0]
 8020bba:	2301      	movs	r3, #1
 8020bbc:	6123      	str	r3, [r4, #16]
 8020bbe:	f8ca 3000 	str.w	r3, [sl]
 8020bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020bc4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8020bc8:	601c      	str	r4, [r3, #0]
 8020bca:	e735      	b.n	8020a38 <__gethex+0x114>
 8020bcc:	1e69      	subs	r1, r5, #1
 8020bce:	4620      	mov	r0, r4
 8020bd0:	f000 fe36 	bl	8021840 <__any_on>
 8020bd4:	2800      	cmp	r0, #0
 8020bd6:	d1ed      	bne.n	8020bb4 <__gethex+0x290>
 8020bd8:	4621      	mov	r1, r4
 8020bda:	4648      	mov	r0, r9
 8020bdc:	f000 f9e4 	bl	8020fa8 <_Bfree>
 8020be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020be2:	2300      	movs	r3, #0
 8020be4:	6013      	str	r3, [r2, #0]
 8020be6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8020bea:	e725      	b.n	8020a38 <__gethex+0x114>
 8020bec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020bee:	2b00      	cmp	r3, #0
 8020bf0:	d1f2      	bne.n	8020bd8 <__gethex+0x2b4>
 8020bf2:	e7df      	b.n	8020bb4 <__gethex+0x290>
 8020bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020bf6:	2b00      	cmp	r3, #0
 8020bf8:	d1dc      	bne.n	8020bb4 <__gethex+0x290>
 8020bfa:	e7ed      	b.n	8020bd8 <__gethex+0x2b4>
 8020bfc:	0802d08c 	.word	0x0802d08c
 8020c00:	0802d29e 	.word	0x0802d29e
 8020c04:	0802d2af 	.word	0x0802d2af
 8020c08:	f106 38ff 	add.w	r8, r6, #4294967295
 8020c0c:	f1bb 0f00 	cmp.w	fp, #0
 8020c10:	d133      	bne.n	8020c7a <__gethex+0x356>
 8020c12:	f1b8 0f00 	cmp.w	r8, #0
 8020c16:	d004      	beq.n	8020c22 <__gethex+0x2fe>
 8020c18:	4641      	mov	r1, r8
 8020c1a:	4620      	mov	r0, r4
 8020c1c:	f000 fe10 	bl	8021840 <__any_on>
 8020c20:	4683      	mov	fp, r0
 8020c22:	ea4f 1268 	mov.w	r2, r8, asr #5
 8020c26:	2301      	movs	r3, #1
 8020c28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8020c2c:	f008 081f 	and.w	r8, r8, #31
 8020c30:	fa03 f308 	lsl.w	r3, r3, r8
 8020c34:	4213      	tst	r3, r2
 8020c36:	4631      	mov	r1, r6
 8020c38:	4620      	mov	r0, r4
 8020c3a:	bf18      	it	ne
 8020c3c:	f04b 0b02 	orrne.w	fp, fp, #2
 8020c40:	1bad      	subs	r5, r5, r6
 8020c42:	f7ff fe07 	bl	8020854 <rshift>
 8020c46:	687e      	ldr	r6, [r7, #4]
 8020c48:	f04f 0802 	mov.w	r8, #2
 8020c4c:	f1bb 0f00 	cmp.w	fp, #0
 8020c50:	d04a      	beq.n	8020ce8 <__gethex+0x3c4>
 8020c52:	68fb      	ldr	r3, [r7, #12]
 8020c54:	2b02      	cmp	r3, #2
 8020c56:	d016      	beq.n	8020c86 <__gethex+0x362>
 8020c58:	2b03      	cmp	r3, #3
 8020c5a:	d018      	beq.n	8020c8e <__gethex+0x36a>
 8020c5c:	2b01      	cmp	r3, #1
 8020c5e:	d109      	bne.n	8020c74 <__gethex+0x350>
 8020c60:	f01b 0f02 	tst.w	fp, #2
 8020c64:	d006      	beq.n	8020c74 <__gethex+0x350>
 8020c66:	f8da 3000 	ldr.w	r3, [sl]
 8020c6a:	ea4b 0b03 	orr.w	fp, fp, r3
 8020c6e:	f01b 0f01 	tst.w	fp, #1
 8020c72:	d10f      	bne.n	8020c94 <__gethex+0x370>
 8020c74:	f048 0810 	orr.w	r8, r8, #16
 8020c78:	e036      	b.n	8020ce8 <__gethex+0x3c4>
 8020c7a:	f04f 0b01 	mov.w	fp, #1
 8020c7e:	e7d0      	b.n	8020c22 <__gethex+0x2fe>
 8020c80:	f04f 0801 	mov.w	r8, #1
 8020c84:	e7e2      	b.n	8020c4c <__gethex+0x328>
 8020c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c88:	f1c3 0301 	rsb	r3, r3, #1
 8020c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8020c8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	d0ef      	beq.n	8020c74 <__gethex+0x350>
 8020c94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020c98:	f104 0214 	add.w	r2, r4, #20
 8020c9c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8020ca0:	9301      	str	r3, [sp, #4]
 8020ca2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8020ca6:	2300      	movs	r3, #0
 8020ca8:	4694      	mov	ip, r2
 8020caa:	f852 1b04 	ldr.w	r1, [r2], #4
 8020cae:	f1b1 3fff 	cmp.w	r1, #4294967295
 8020cb2:	d01e      	beq.n	8020cf2 <__gethex+0x3ce>
 8020cb4:	3101      	adds	r1, #1
 8020cb6:	f8cc 1000 	str.w	r1, [ip]
 8020cba:	f1b8 0f02 	cmp.w	r8, #2
 8020cbe:	f104 0214 	add.w	r2, r4, #20
 8020cc2:	d13d      	bne.n	8020d40 <__gethex+0x41c>
 8020cc4:	683b      	ldr	r3, [r7, #0]
 8020cc6:	3b01      	subs	r3, #1
 8020cc8:	42ab      	cmp	r3, r5
 8020cca:	d10b      	bne.n	8020ce4 <__gethex+0x3c0>
 8020ccc:	1169      	asrs	r1, r5, #5
 8020cce:	2301      	movs	r3, #1
 8020cd0:	f005 051f 	and.w	r5, r5, #31
 8020cd4:	fa03 f505 	lsl.w	r5, r3, r5
 8020cd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020cdc:	421d      	tst	r5, r3
 8020cde:	bf18      	it	ne
 8020ce0:	f04f 0801 	movne.w	r8, #1
 8020ce4:	f048 0820 	orr.w	r8, r8, #32
 8020ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020cea:	601c      	str	r4, [r3, #0]
 8020cec:	9b02      	ldr	r3, [sp, #8]
 8020cee:	601e      	str	r6, [r3, #0]
 8020cf0:	e6a2      	b.n	8020a38 <__gethex+0x114>
 8020cf2:	4290      	cmp	r0, r2
 8020cf4:	f842 3c04 	str.w	r3, [r2, #-4]
 8020cf8:	d8d6      	bhi.n	8020ca8 <__gethex+0x384>
 8020cfa:	68a2      	ldr	r2, [r4, #8]
 8020cfc:	4593      	cmp	fp, r2
 8020cfe:	db17      	blt.n	8020d30 <__gethex+0x40c>
 8020d00:	6861      	ldr	r1, [r4, #4]
 8020d02:	4648      	mov	r0, r9
 8020d04:	3101      	adds	r1, #1
 8020d06:	f000 f90f 	bl	8020f28 <_Balloc>
 8020d0a:	4682      	mov	sl, r0
 8020d0c:	b918      	cbnz	r0, 8020d16 <__gethex+0x3f2>
 8020d0e:	4b1b      	ldr	r3, [pc, #108]	; (8020d7c <__gethex+0x458>)
 8020d10:	4602      	mov	r2, r0
 8020d12:	2184      	movs	r1, #132	; 0x84
 8020d14:	e6b3      	b.n	8020a7e <__gethex+0x15a>
 8020d16:	6922      	ldr	r2, [r4, #16]
 8020d18:	3202      	adds	r2, #2
 8020d1a:	f104 010c 	add.w	r1, r4, #12
 8020d1e:	0092      	lsls	r2, r2, #2
 8020d20:	300c      	adds	r0, #12
 8020d22:	f7fe fec3 	bl	801faac <memcpy>
 8020d26:	4621      	mov	r1, r4
 8020d28:	4648      	mov	r0, r9
 8020d2a:	f000 f93d 	bl	8020fa8 <_Bfree>
 8020d2e:	4654      	mov	r4, sl
 8020d30:	6922      	ldr	r2, [r4, #16]
 8020d32:	1c51      	adds	r1, r2, #1
 8020d34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020d38:	6121      	str	r1, [r4, #16]
 8020d3a:	2101      	movs	r1, #1
 8020d3c:	6151      	str	r1, [r2, #20]
 8020d3e:	e7bc      	b.n	8020cba <__gethex+0x396>
 8020d40:	6921      	ldr	r1, [r4, #16]
 8020d42:	4559      	cmp	r1, fp
 8020d44:	dd0b      	ble.n	8020d5e <__gethex+0x43a>
 8020d46:	2101      	movs	r1, #1
 8020d48:	4620      	mov	r0, r4
 8020d4a:	f7ff fd83 	bl	8020854 <rshift>
 8020d4e:	68bb      	ldr	r3, [r7, #8]
 8020d50:	3601      	adds	r6, #1
 8020d52:	42b3      	cmp	r3, r6
 8020d54:	f6ff aedb 	blt.w	8020b0e <__gethex+0x1ea>
 8020d58:	f04f 0801 	mov.w	r8, #1
 8020d5c:	e7c2      	b.n	8020ce4 <__gethex+0x3c0>
 8020d5e:	f015 051f 	ands.w	r5, r5, #31
 8020d62:	d0f9      	beq.n	8020d58 <__gethex+0x434>
 8020d64:	9b01      	ldr	r3, [sp, #4]
 8020d66:	441a      	add	r2, r3
 8020d68:	f1c5 0520 	rsb	r5, r5, #32
 8020d6c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8020d70:	f000 f9cc 	bl	802110c <__hi0bits>
 8020d74:	42a8      	cmp	r0, r5
 8020d76:	dbe6      	blt.n	8020d46 <__gethex+0x422>
 8020d78:	e7ee      	b.n	8020d58 <__gethex+0x434>
 8020d7a:	bf00      	nop
 8020d7c:	0802d29e 	.word	0x0802d29e

08020d80 <L_shift>:
 8020d80:	f1c2 0208 	rsb	r2, r2, #8
 8020d84:	0092      	lsls	r2, r2, #2
 8020d86:	b570      	push	{r4, r5, r6, lr}
 8020d88:	f1c2 0620 	rsb	r6, r2, #32
 8020d8c:	6843      	ldr	r3, [r0, #4]
 8020d8e:	6804      	ldr	r4, [r0, #0]
 8020d90:	fa03 f506 	lsl.w	r5, r3, r6
 8020d94:	432c      	orrs	r4, r5
 8020d96:	40d3      	lsrs	r3, r2
 8020d98:	6004      	str	r4, [r0, #0]
 8020d9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8020d9e:	4288      	cmp	r0, r1
 8020da0:	d3f4      	bcc.n	8020d8c <L_shift+0xc>
 8020da2:	bd70      	pop	{r4, r5, r6, pc}

08020da4 <__match>:
 8020da4:	b530      	push	{r4, r5, lr}
 8020da6:	6803      	ldr	r3, [r0, #0]
 8020da8:	3301      	adds	r3, #1
 8020daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020dae:	b914      	cbnz	r4, 8020db6 <__match+0x12>
 8020db0:	6003      	str	r3, [r0, #0]
 8020db2:	2001      	movs	r0, #1
 8020db4:	bd30      	pop	{r4, r5, pc}
 8020db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020dba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8020dbe:	2d19      	cmp	r5, #25
 8020dc0:	bf98      	it	ls
 8020dc2:	3220      	addls	r2, #32
 8020dc4:	42a2      	cmp	r2, r4
 8020dc6:	d0f0      	beq.n	8020daa <__match+0x6>
 8020dc8:	2000      	movs	r0, #0
 8020dca:	e7f3      	b.n	8020db4 <__match+0x10>

08020dcc <__hexnan>:
 8020dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dd0:	680b      	ldr	r3, [r1, #0]
 8020dd2:	6801      	ldr	r1, [r0, #0]
 8020dd4:	115e      	asrs	r6, r3, #5
 8020dd6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020dda:	f013 031f 	ands.w	r3, r3, #31
 8020dde:	b087      	sub	sp, #28
 8020de0:	bf18      	it	ne
 8020de2:	3604      	addne	r6, #4
 8020de4:	2500      	movs	r5, #0
 8020de6:	1f37      	subs	r7, r6, #4
 8020de8:	4682      	mov	sl, r0
 8020dea:	4690      	mov	r8, r2
 8020dec:	9301      	str	r3, [sp, #4]
 8020dee:	f846 5c04 	str.w	r5, [r6, #-4]
 8020df2:	46b9      	mov	r9, r7
 8020df4:	463c      	mov	r4, r7
 8020df6:	9502      	str	r5, [sp, #8]
 8020df8:	46ab      	mov	fp, r5
 8020dfa:	784a      	ldrb	r2, [r1, #1]
 8020dfc:	1c4b      	adds	r3, r1, #1
 8020dfe:	9303      	str	r3, [sp, #12]
 8020e00:	b342      	cbz	r2, 8020e54 <__hexnan+0x88>
 8020e02:	4610      	mov	r0, r2
 8020e04:	9105      	str	r1, [sp, #20]
 8020e06:	9204      	str	r2, [sp, #16]
 8020e08:	f7ff fd76 	bl	80208f8 <__hexdig_fun>
 8020e0c:	2800      	cmp	r0, #0
 8020e0e:	d14f      	bne.n	8020eb0 <__hexnan+0xe4>
 8020e10:	9a04      	ldr	r2, [sp, #16]
 8020e12:	9905      	ldr	r1, [sp, #20]
 8020e14:	2a20      	cmp	r2, #32
 8020e16:	d818      	bhi.n	8020e4a <__hexnan+0x7e>
 8020e18:	9b02      	ldr	r3, [sp, #8]
 8020e1a:	459b      	cmp	fp, r3
 8020e1c:	dd13      	ble.n	8020e46 <__hexnan+0x7a>
 8020e1e:	454c      	cmp	r4, r9
 8020e20:	d206      	bcs.n	8020e30 <__hexnan+0x64>
 8020e22:	2d07      	cmp	r5, #7
 8020e24:	dc04      	bgt.n	8020e30 <__hexnan+0x64>
 8020e26:	462a      	mov	r2, r5
 8020e28:	4649      	mov	r1, r9
 8020e2a:	4620      	mov	r0, r4
 8020e2c:	f7ff ffa8 	bl	8020d80 <L_shift>
 8020e30:	4544      	cmp	r4, r8
 8020e32:	d950      	bls.n	8020ed6 <__hexnan+0x10a>
 8020e34:	2300      	movs	r3, #0
 8020e36:	f1a4 0904 	sub.w	r9, r4, #4
 8020e3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8020e3e:	f8cd b008 	str.w	fp, [sp, #8]
 8020e42:	464c      	mov	r4, r9
 8020e44:	461d      	mov	r5, r3
 8020e46:	9903      	ldr	r1, [sp, #12]
 8020e48:	e7d7      	b.n	8020dfa <__hexnan+0x2e>
 8020e4a:	2a29      	cmp	r2, #41	; 0x29
 8020e4c:	d155      	bne.n	8020efa <__hexnan+0x12e>
 8020e4e:	3102      	adds	r1, #2
 8020e50:	f8ca 1000 	str.w	r1, [sl]
 8020e54:	f1bb 0f00 	cmp.w	fp, #0
 8020e58:	d04f      	beq.n	8020efa <__hexnan+0x12e>
 8020e5a:	454c      	cmp	r4, r9
 8020e5c:	d206      	bcs.n	8020e6c <__hexnan+0xa0>
 8020e5e:	2d07      	cmp	r5, #7
 8020e60:	dc04      	bgt.n	8020e6c <__hexnan+0xa0>
 8020e62:	462a      	mov	r2, r5
 8020e64:	4649      	mov	r1, r9
 8020e66:	4620      	mov	r0, r4
 8020e68:	f7ff ff8a 	bl	8020d80 <L_shift>
 8020e6c:	4544      	cmp	r4, r8
 8020e6e:	d934      	bls.n	8020eda <__hexnan+0x10e>
 8020e70:	f1a8 0204 	sub.w	r2, r8, #4
 8020e74:	4623      	mov	r3, r4
 8020e76:	f853 1b04 	ldr.w	r1, [r3], #4
 8020e7a:	f842 1f04 	str.w	r1, [r2, #4]!
 8020e7e:	429f      	cmp	r7, r3
 8020e80:	d2f9      	bcs.n	8020e76 <__hexnan+0xaa>
 8020e82:	1b3b      	subs	r3, r7, r4
 8020e84:	f023 0303 	bic.w	r3, r3, #3
 8020e88:	3304      	adds	r3, #4
 8020e8a:	3e03      	subs	r6, #3
 8020e8c:	3401      	adds	r4, #1
 8020e8e:	42a6      	cmp	r6, r4
 8020e90:	bf38      	it	cc
 8020e92:	2304      	movcc	r3, #4
 8020e94:	4443      	add	r3, r8
 8020e96:	2200      	movs	r2, #0
 8020e98:	f843 2b04 	str.w	r2, [r3], #4
 8020e9c:	429f      	cmp	r7, r3
 8020e9e:	d2fb      	bcs.n	8020e98 <__hexnan+0xcc>
 8020ea0:	683b      	ldr	r3, [r7, #0]
 8020ea2:	b91b      	cbnz	r3, 8020eac <__hexnan+0xe0>
 8020ea4:	4547      	cmp	r7, r8
 8020ea6:	d126      	bne.n	8020ef6 <__hexnan+0x12a>
 8020ea8:	2301      	movs	r3, #1
 8020eaa:	603b      	str	r3, [r7, #0]
 8020eac:	2005      	movs	r0, #5
 8020eae:	e025      	b.n	8020efc <__hexnan+0x130>
 8020eb0:	3501      	adds	r5, #1
 8020eb2:	2d08      	cmp	r5, #8
 8020eb4:	f10b 0b01 	add.w	fp, fp, #1
 8020eb8:	dd06      	ble.n	8020ec8 <__hexnan+0xfc>
 8020eba:	4544      	cmp	r4, r8
 8020ebc:	d9c3      	bls.n	8020e46 <__hexnan+0x7a>
 8020ebe:	2300      	movs	r3, #0
 8020ec0:	f844 3c04 	str.w	r3, [r4, #-4]
 8020ec4:	2501      	movs	r5, #1
 8020ec6:	3c04      	subs	r4, #4
 8020ec8:	6822      	ldr	r2, [r4, #0]
 8020eca:	f000 000f 	and.w	r0, r0, #15
 8020ece:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8020ed2:	6020      	str	r0, [r4, #0]
 8020ed4:	e7b7      	b.n	8020e46 <__hexnan+0x7a>
 8020ed6:	2508      	movs	r5, #8
 8020ed8:	e7b5      	b.n	8020e46 <__hexnan+0x7a>
 8020eda:	9b01      	ldr	r3, [sp, #4]
 8020edc:	2b00      	cmp	r3, #0
 8020ede:	d0df      	beq.n	8020ea0 <__hexnan+0xd4>
 8020ee0:	f1c3 0320 	rsb	r3, r3, #32
 8020ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8020ee8:	40da      	lsrs	r2, r3
 8020eea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8020eee:	4013      	ands	r3, r2
 8020ef0:	f846 3c04 	str.w	r3, [r6, #-4]
 8020ef4:	e7d4      	b.n	8020ea0 <__hexnan+0xd4>
 8020ef6:	3f04      	subs	r7, #4
 8020ef8:	e7d2      	b.n	8020ea0 <__hexnan+0xd4>
 8020efa:	2004      	movs	r0, #4
 8020efc:	b007      	add	sp, #28
 8020efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020f02 <__ascii_mbtowc>:
 8020f02:	b082      	sub	sp, #8
 8020f04:	b901      	cbnz	r1, 8020f08 <__ascii_mbtowc+0x6>
 8020f06:	a901      	add	r1, sp, #4
 8020f08:	b142      	cbz	r2, 8020f1c <__ascii_mbtowc+0x1a>
 8020f0a:	b14b      	cbz	r3, 8020f20 <__ascii_mbtowc+0x1e>
 8020f0c:	7813      	ldrb	r3, [r2, #0]
 8020f0e:	600b      	str	r3, [r1, #0]
 8020f10:	7812      	ldrb	r2, [r2, #0]
 8020f12:	1e10      	subs	r0, r2, #0
 8020f14:	bf18      	it	ne
 8020f16:	2001      	movne	r0, #1
 8020f18:	b002      	add	sp, #8
 8020f1a:	4770      	bx	lr
 8020f1c:	4610      	mov	r0, r2
 8020f1e:	e7fb      	b.n	8020f18 <__ascii_mbtowc+0x16>
 8020f20:	f06f 0001 	mvn.w	r0, #1
 8020f24:	e7f8      	b.n	8020f18 <__ascii_mbtowc+0x16>
	...

08020f28 <_Balloc>:
 8020f28:	b570      	push	{r4, r5, r6, lr}
 8020f2a:	69c6      	ldr	r6, [r0, #28]
 8020f2c:	4604      	mov	r4, r0
 8020f2e:	460d      	mov	r5, r1
 8020f30:	b976      	cbnz	r6, 8020f50 <_Balloc+0x28>
 8020f32:	2010      	movs	r0, #16
 8020f34:	f7fc fe0a 	bl	801db4c <malloc>
 8020f38:	4602      	mov	r2, r0
 8020f3a:	61e0      	str	r0, [r4, #28]
 8020f3c:	b920      	cbnz	r0, 8020f48 <_Balloc+0x20>
 8020f3e:	4b18      	ldr	r3, [pc, #96]	; (8020fa0 <_Balloc+0x78>)
 8020f40:	4818      	ldr	r0, [pc, #96]	; (8020fa4 <_Balloc+0x7c>)
 8020f42:	216b      	movs	r1, #107	; 0x6b
 8020f44:	f7fc fdc2 	bl	801dacc <__assert_func>
 8020f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020f4c:	6006      	str	r6, [r0, #0]
 8020f4e:	60c6      	str	r6, [r0, #12]
 8020f50:	69e6      	ldr	r6, [r4, #28]
 8020f52:	68f3      	ldr	r3, [r6, #12]
 8020f54:	b183      	cbz	r3, 8020f78 <_Balloc+0x50>
 8020f56:	69e3      	ldr	r3, [r4, #28]
 8020f58:	68db      	ldr	r3, [r3, #12]
 8020f5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020f5e:	b9b8      	cbnz	r0, 8020f90 <_Balloc+0x68>
 8020f60:	2101      	movs	r1, #1
 8020f62:	fa01 f605 	lsl.w	r6, r1, r5
 8020f66:	1d72      	adds	r2, r6, #5
 8020f68:	0092      	lsls	r2, r2, #2
 8020f6a:	4620      	mov	r0, r4
 8020f6c:	f7fc fdd8 	bl	801db20 <_calloc_r>
 8020f70:	b160      	cbz	r0, 8020f8c <_Balloc+0x64>
 8020f72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020f76:	e00e      	b.n	8020f96 <_Balloc+0x6e>
 8020f78:	2221      	movs	r2, #33	; 0x21
 8020f7a:	2104      	movs	r1, #4
 8020f7c:	4620      	mov	r0, r4
 8020f7e:	f7fc fdcf 	bl	801db20 <_calloc_r>
 8020f82:	69e3      	ldr	r3, [r4, #28]
 8020f84:	60f0      	str	r0, [r6, #12]
 8020f86:	68db      	ldr	r3, [r3, #12]
 8020f88:	2b00      	cmp	r3, #0
 8020f8a:	d1e4      	bne.n	8020f56 <_Balloc+0x2e>
 8020f8c:	2000      	movs	r0, #0
 8020f8e:	bd70      	pop	{r4, r5, r6, pc}
 8020f90:	6802      	ldr	r2, [r0, #0]
 8020f92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020f96:	2300      	movs	r3, #0
 8020f98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020f9c:	e7f7      	b.n	8020f8e <_Balloc+0x66>
 8020f9e:	bf00      	nop
 8020fa0:	0802d22f 	.word	0x0802d22f
 8020fa4:	0802d30f 	.word	0x0802d30f

08020fa8 <_Bfree>:
 8020fa8:	b570      	push	{r4, r5, r6, lr}
 8020faa:	69c6      	ldr	r6, [r0, #28]
 8020fac:	4605      	mov	r5, r0
 8020fae:	460c      	mov	r4, r1
 8020fb0:	b976      	cbnz	r6, 8020fd0 <_Bfree+0x28>
 8020fb2:	2010      	movs	r0, #16
 8020fb4:	f7fc fdca 	bl	801db4c <malloc>
 8020fb8:	4602      	mov	r2, r0
 8020fba:	61e8      	str	r0, [r5, #28]
 8020fbc:	b920      	cbnz	r0, 8020fc8 <_Bfree+0x20>
 8020fbe:	4b09      	ldr	r3, [pc, #36]	; (8020fe4 <_Bfree+0x3c>)
 8020fc0:	4809      	ldr	r0, [pc, #36]	; (8020fe8 <_Bfree+0x40>)
 8020fc2:	218f      	movs	r1, #143	; 0x8f
 8020fc4:	f7fc fd82 	bl	801dacc <__assert_func>
 8020fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020fcc:	6006      	str	r6, [r0, #0]
 8020fce:	60c6      	str	r6, [r0, #12]
 8020fd0:	b13c      	cbz	r4, 8020fe2 <_Bfree+0x3a>
 8020fd2:	69eb      	ldr	r3, [r5, #28]
 8020fd4:	6862      	ldr	r2, [r4, #4]
 8020fd6:	68db      	ldr	r3, [r3, #12]
 8020fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020fdc:	6021      	str	r1, [r4, #0]
 8020fde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020fe2:	bd70      	pop	{r4, r5, r6, pc}
 8020fe4:	0802d22f 	.word	0x0802d22f
 8020fe8:	0802d30f 	.word	0x0802d30f

08020fec <__multadd>:
 8020fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ff0:	690d      	ldr	r5, [r1, #16]
 8020ff2:	4607      	mov	r7, r0
 8020ff4:	460c      	mov	r4, r1
 8020ff6:	461e      	mov	r6, r3
 8020ff8:	f101 0c14 	add.w	ip, r1, #20
 8020ffc:	2000      	movs	r0, #0
 8020ffe:	f8dc 3000 	ldr.w	r3, [ip]
 8021002:	b299      	uxth	r1, r3
 8021004:	fb02 6101 	mla	r1, r2, r1, r6
 8021008:	0c1e      	lsrs	r6, r3, #16
 802100a:	0c0b      	lsrs	r3, r1, #16
 802100c:	fb02 3306 	mla	r3, r2, r6, r3
 8021010:	b289      	uxth	r1, r1
 8021012:	3001      	adds	r0, #1
 8021014:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021018:	4285      	cmp	r5, r0
 802101a:	f84c 1b04 	str.w	r1, [ip], #4
 802101e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021022:	dcec      	bgt.n	8020ffe <__multadd+0x12>
 8021024:	b30e      	cbz	r6, 802106a <__multadd+0x7e>
 8021026:	68a3      	ldr	r3, [r4, #8]
 8021028:	42ab      	cmp	r3, r5
 802102a:	dc19      	bgt.n	8021060 <__multadd+0x74>
 802102c:	6861      	ldr	r1, [r4, #4]
 802102e:	4638      	mov	r0, r7
 8021030:	3101      	adds	r1, #1
 8021032:	f7ff ff79 	bl	8020f28 <_Balloc>
 8021036:	4680      	mov	r8, r0
 8021038:	b928      	cbnz	r0, 8021046 <__multadd+0x5a>
 802103a:	4602      	mov	r2, r0
 802103c:	4b0c      	ldr	r3, [pc, #48]	; (8021070 <__multadd+0x84>)
 802103e:	480d      	ldr	r0, [pc, #52]	; (8021074 <__multadd+0x88>)
 8021040:	21ba      	movs	r1, #186	; 0xba
 8021042:	f7fc fd43 	bl	801dacc <__assert_func>
 8021046:	6922      	ldr	r2, [r4, #16]
 8021048:	3202      	adds	r2, #2
 802104a:	f104 010c 	add.w	r1, r4, #12
 802104e:	0092      	lsls	r2, r2, #2
 8021050:	300c      	adds	r0, #12
 8021052:	f7fe fd2b 	bl	801faac <memcpy>
 8021056:	4621      	mov	r1, r4
 8021058:	4638      	mov	r0, r7
 802105a:	f7ff ffa5 	bl	8020fa8 <_Bfree>
 802105e:	4644      	mov	r4, r8
 8021060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021064:	3501      	adds	r5, #1
 8021066:	615e      	str	r6, [r3, #20]
 8021068:	6125      	str	r5, [r4, #16]
 802106a:	4620      	mov	r0, r4
 802106c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021070:	0802d29e 	.word	0x0802d29e
 8021074:	0802d30f 	.word	0x0802d30f

08021078 <__s2b>:
 8021078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802107c:	460c      	mov	r4, r1
 802107e:	4615      	mov	r5, r2
 8021080:	461f      	mov	r7, r3
 8021082:	2209      	movs	r2, #9
 8021084:	3308      	adds	r3, #8
 8021086:	4606      	mov	r6, r0
 8021088:	fb93 f3f2 	sdiv	r3, r3, r2
 802108c:	2100      	movs	r1, #0
 802108e:	2201      	movs	r2, #1
 8021090:	429a      	cmp	r2, r3
 8021092:	db09      	blt.n	80210a8 <__s2b+0x30>
 8021094:	4630      	mov	r0, r6
 8021096:	f7ff ff47 	bl	8020f28 <_Balloc>
 802109a:	b940      	cbnz	r0, 80210ae <__s2b+0x36>
 802109c:	4602      	mov	r2, r0
 802109e:	4b19      	ldr	r3, [pc, #100]	; (8021104 <__s2b+0x8c>)
 80210a0:	4819      	ldr	r0, [pc, #100]	; (8021108 <__s2b+0x90>)
 80210a2:	21d3      	movs	r1, #211	; 0xd3
 80210a4:	f7fc fd12 	bl	801dacc <__assert_func>
 80210a8:	0052      	lsls	r2, r2, #1
 80210aa:	3101      	adds	r1, #1
 80210ac:	e7f0      	b.n	8021090 <__s2b+0x18>
 80210ae:	9b08      	ldr	r3, [sp, #32]
 80210b0:	6143      	str	r3, [r0, #20]
 80210b2:	2d09      	cmp	r5, #9
 80210b4:	f04f 0301 	mov.w	r3, #1
 80210b8:	6103      	str	r3, [r0, #16]
 80210ba:	dd16      	ble.n	80210ea <__s2b+0x72>
 80210bc:	f104 0909 	add.w	r9, r4, #9
 80210c0:	46c8      	mov	r8, r9
 80210c2:	442c      	add	r4, r5
 80210c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80210c8:	4601      	mov	r1, r0
 80210ca:	3b30      	subs	r3, #48	; 0x30
 80210cc:	220a      	movs	r2, #10
 80210ce:	4630      	mov	r0, r6
 80210d0:	f7ff ff8c 	bl	8020fec <__multadd>
 80210d4:	45a0      	cmp	r8, r4
 80210d6:	d1f5      	bne.n	80210c4 <__s2b+0x4c>
 80210d8:	f1a5 0408 	sub.w	r4, r5, #8
 80210dc:	444c      	add	r4, r9
 80210de:	1b2d      	subs	r5, r5, r4
 80210e0:	1963      	adds	r3, r4, r5
 80210e2:	42bb      	cmp	r3, r7
 80210e4:	db04      	blt.n	80210f0 <__s2b+0x78>
 80210e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80210ea:	340a      	adds	r4, #10
 80210ec:	2509      	movs	r5, #9
 80210ee:	e7f6      	b.n	80210de <__s2b+0x66>
 80210f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80210f4:	4601      	mov	r1, r0
 80210f6:	3b30      	subs	r3, #48	; 0x30
 80210f8:	220a      	movs	r2, #10
 80210fa:	4630      	mov	r0, r6
 80210fc:	f7ff ff76 	bl	8020fec <__multadd>
 8021100:	e7ee      	b.n	80210e0 <__s2b+0x68>
 8021102:	bf00      	nop
 8021104:	0802d29e 	.word	0x0802d29e
 8021108:	0802d30f 	.word	0x0802d30f

0802110c <__hi0bits>:
 802110c:	0c03      	lsrs	r3, r0, #16
 802110e:	041b      	lsls	r3, r3, #16
 8021110:	b9d3      	cbnz	r3, 8021148 <__hi0bits+0x3c>
 8021112:	0400      	lsls	r0, r0, #16
 8021114:	2310      	movs	r3, #16
 8021116:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802111a:	bf04      	itt	eq
 802111c:	0200      	lsleq	r0, r0, #8
 802111e:	3308      	addeq	r3, #8
 8021120:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021124:	bf04      	itt	eq
 8021126:	0100      	lsleq	r0, r0, #4
 8021128:	3304      	addeq	r3, #4
 802112a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802112e:	bf04      	itt	eq
 8021130:	0080      	lsleq	r0, r0, #2
 8021132:	3302      	addeq	r3, #2
 8021134:	2800      	cmp	r0, #0
 8021136:	db05      	blt.n	8021144 <__hi0bits+0x38>
 8021138:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802113c:	f103 0301 	add.w	r3, r3, #1
 8021140:	bf08      	it	eq
 8021142:	2320      	moveq	r3, #32
 8021144:	4618      	mov	r0, r3
 8021146:	4770      	bx	lr
 8021148:	2300      	movs	r3, #0
 802114a:	e7e4      	b.n	8021116 <__hi0bits+0xa>

0802114c <__lo0bits>:
 802114c:	6803      	ldr	r3, [r0, #0]
 802114e:	f013 0207 	ands.w	r2, r3, #7
 8021152:	d00c      	beq.n	802116e <__lo0bits+0x22>
 8021154:	07d9      	lsls	r1, r3, #31
 8021156:	d422      	bmi.n	802119e <__lo0bits+0x52>
 8021158:	079a      	lsls	r2, r3, #30
 802115a:	bf49      	itett	mi
 802115c:	085b      	lsrmi	r3, r3, #1
 802115e:	089b      	lsrpl	r3, r3, #2
 8021160:	6003      	strmi	r3, [r0, #0]
 8021162:	2201      	movmi	r2, #1
 8021164:	bf5c      	itt	pl
 8021166:	6003      	strpl	r3, [r0, #0]
 8021168:	2202      	movpl	r2, #2
 802116a:	4610      	mov	r0, r2
 802116c:	4770      	bx	lr
 802116e:	b299      	uxth	r1, r3
 8021170:	b909      	cbnz	r1, 8021176 <__lo0bits+0x2a>
 8021172:	0c1b      	lsrs	r3, r3, #16
 8021174:	2210      	movs	r2, #16
 8021176:	b2d9      	uxtb	r1, r3
 8021178:	b909      	cbnz	r1, 802117e <__lo0bits+0x32>
 802117a:	3208      	adds	r2, #8
 802117c:	0a1b      	lsrs	r3, r3, #8
 802117e:	0719      	lsls	r1, r3, #28
 8021180:	bf04      	itt	eq
 8021182:	091b      	lsreq	r3, r3, #4
 8021184:	3204      	addeq	r2, #4
 8021186:	0799      	lsls	r1, r3, #30
 8021188:	bf04      	itt	eq
 802118a:	089b      	lsreq	r3, r3, #2
 802118c:	3202      	addeq	r2, #2
 802118e:	07d9      	lsls	r1, r3, #31
 8021190:	d403      	bmi.n	802119a <__lo0bits+0x4e>
 8021192:	085b      	lsrs	r3, r3, #1
 8021194:	f102 0201 	add.w	r2, r2, #1
 8021198:	d003      	beq.n	80211a2 <__lo0bits+0x56>
 802119a:	6003      	str	r3, [r0, #0]
 802119c:	e7e5      	b.n	802116a <__lo0bits+0x1e>
 802119e:	2200      	movs	r2, #0
 80211a0:	e7e3      	b.n	802116a <__lo0bits+0x1e>
 80211a2:	2220      	movs	r2, #32
 80211a4:	e7e1      	b.n	802116a <__lo0bits+0x1e>
	...

080211a8 <__i2b>:
 80211a8:	b510      	push	{r4, lr}
 80211aa:	460c      	mov	r4, r1
 80211ac:	2101      	movs	r1, #1
 80211ae:	f7ff febb 	bl	8020f28 <_Balloc>
 80211b2:	4602      	mov	r2, r0
 80211b4:	b928      	cbnz	r0, 80211c2 <__i2b+0x1a>
 80211b6:	4b05      	ldr	r3, [pc, #20]	; (80211cc <__i2b+0x24>)
 80211b8:	4805      	ldr	r0, [pc, #20]	; (80211d0 <__i2b+0x28>)
 80211ba:	f240 1145 	movw	r1, #325	; 0x145
 80211be:	f7fc fc85 	bl	801dacc <__assert_func>
 80211c2:	2301      	movs	r3, #1
 80211c4:	6144      	str	r4, [r0, #20]
 80211c6:	6103      	str	r3, [r0, #16]
 80211c8:	bd10      	pop	{r4, pc}
 80211ca:	bf00      	nop
 80211cc:	0802d29e 	.word	0x0802d29e
 80211d0:	0802d30f 	.word	0x0802d30f

080211d4 <__multiply>:
 80211d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211d8:	4691      	mov	r9, r2
 80211da:	690a      	ldr	r2, [r1, #16]
 80211dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80211e0:	429a      	cmp	r2, r3
 80211e2:	bfb8      	it	lt
 80211e4:	460b      	movlt	r3, r1
 80211e6:	460c      	mov	r4, r1
 80211e8:	bfbc      	itt	lt
 80211ea:	464c      	movlt	r4, r9
 80211ec:	4699      	movlt	r9, r3
 80211ee:	6927      	ldr	r7, [r4, #16]
 80211f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80211f4:	68a3      	ldr	r3, [r4, #8]
 80211f6:	6861      	ldr	r1, [r4, #4]
 80211f8:	eb07 060a 	add.w	r6, r7, sl
 80211fc:	42b3      	cmp	r3, r6
 80211fe:	b085      	sub	sp, #20
 8021200:	bfb8      	it	lt
 8021202:	3101      	addlt	r1, #1
 8021204:	f7ff fe90 	bl	8020f28 <_Balloc>
 8021208:	b930      	cbnz	r0, 8021218 <__multiply+0x44>
 802120a:	4602      	mov	r2, r0
 802120c:	4b44      	ldr	r3, [pc, #272]	; (8021320 <__multiply+0x14c>)
 802120e:	4845      	ldr	r0, [pc, #276]	; (8021324 <__multiply+0x150>)
 8021210:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8021214:	f7fc fc5a 	bl	801dacc <__assert_func>
 8021218:	f100 0514 	add.w	r5, r0, #20
 802121c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021220:	462b      	mov	r3, r5
 8021222:	2200      	movs	r2, #0
 8021224:	4543      	cmp	r3, r8
 8021226:	d321      	bcc.n	802126c <__multiply+0x98>
 8021228:	f104 0314 	add.w	r3, r4, #20
 802122c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021230:	f109 0314 	add.w	r3, r9, #20
 8021234:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021238:	9202      	str	r2, [sp, #8]
 802123a:	1b3a      	subs	r2, r7, r4
 802123c:	3a15      	subs	r2, #21
 802123e:	f022 0203 	bic.w	r2, r2, #3
 8021242:	3204      	adds	r2, #4
 8021244:	f104 0115 	add.w	r1, r4, #21
 8021248:	428f      	cmp	r7, r1
 802124a:	bf38      	it	cc
 802124c:	2204      	movcc	r2, #4
 802124e:	9201      	str	r2, [sp, #4]
 8021250:	9a02      	ldr	r2, [sp, #8]
 8021252:	9303      	str	r3, [sp, #12]
 8021254:	429a      	cmp	r2, r3
 8021256:	d80c      	bhi.n	8021272 <__multiply+0x9e>
 8021258:	2e00      	cmp	r6, #0
 802125a:	dd03      	ble.n	8021264 <__multiply+0x90>
 802125c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021260:	2b00      	cmp	r3, #0
 8021262:	d05b      	beq.n	802131c <__multiply+0x148>
 8021264:	6106      	str	r6, [r0, #16]
 8021266:	b005      	add	sp, #20
 8021268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802126c:	f843 2b04 	str.w	r2, [r3], #4
 8021270:	e7d8      	b.n	8021224 <__multiply+0x50>
 8021272:	f8b3 a000 	ldrh.w	sl, [r3]
 8021276:	f1ba 0f00 	cmp.w	sl, #0
 802127a:	d024      	beq.n	80212c6 <__multiply+0xf2>
 802127c:	f104 0e14 	add.w	lr, r4, #20
 8021280:	46a9      	mov	r9, r5
 8021282:	f04f 0c00 	mov.w	ip, #0
 8021286:	f85e 2b04 	ldr.w	r2, [lr], #4
 802128a:	f8d9 1000 	ldr.w	r1, [r9]
 802128e:	fa1f fb82 	uxth.w	fp, r2
 8021292:	b289      	uxth	r1, r1
 8021294:	fb0a 110b 	mla	r1, sl, fp, r1
 8021298:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802129c:	f8d9 2000 	ldr.w	r2, [r9]
 80212a0:	4461      	add	r1, ip
 80212a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80212a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80212aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80212ae:	b289      	uxth	r1, r1
 80212b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80212b4:	4577      	cmp	r7, lr
 80212b6:	f849 1b04 	str.w	r1, [r9], #4
 80212ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80212be:	d8e2      	bhi.n	8021286 <__multiply+0xb2>
 80212c0:	9a01      	ldr	r2, [sp, #4]
 80212c2:	f845 c002 	str.w	ip, [r5, r2]
 80212c6:	9a03      	ldr	r2, [sp, #12]
 80212c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80212cc:	3304      	adds	r3, #4
 80212ce:	f1b9 0f00 	cmp.w	r9, #0
 80212d2:	d021      	beq.n	8021318 <__multiply+0x144>
 80212d4:	6829      	ldr	r1, [r5, #0]
 80212d6:	f104 0c14 	add.w	ip, r4, #20
 80212da:	46ae      	mov	lr, r5
 80212dc:	f04f 0a00 	mov.w	sl, #0
 80212e0:	f8bc b000 	ldrh.w	fp, [ip]
 80212e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80212e8:	fb09 220b 	mla	r2, r9, fp, r2
 80212ec:	4452      	add	r2, sl
 80212ee:	b289      	uxth	r1, r1
 80212f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80212f4:	f84e 1b04 	str.w	r1, [lr], #4
 80212f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80212fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021300:	f8be 1000 	ldrh.w	r1, [lr]
 8021304:	fb09 110a 	mla	r1, r9, sl, r1
 8021308:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802130c:	4567      	cmp	r7, ip
 802130e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021312:	d8e5      	bhi.n	80212e0 <__multiply+0x10c>
 8021314:	9a01      	ldr	r2, [sp, #4]
 8021316:	50a9      	str	r1, [r5, r2]
 8021318:	3504      	adds	r5, #4
 802131a:	e799      	b.n	8021250 <__multiply+0x7c>
 802131c:	3e01      	subs	r6, #1
 802131e:	e79b      	b.n	8021258 <__multiply+0x84>
 8021320:	0802d29e 	.word	0x0802d29e
 8021324:	0802d30f 	.word	0x0802d30f

08021328 <__pow5mult>:
 8021328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802132c:	4615      	mov	r5, r2
 802132e:	f012 0203 	ands.w	r2, r2, #3
 8021332:	4606      	mov	r6, r0
 8021334:	460f      	mov	r7, r1
 8021336:	d007      	beq.n	8021348 <__pow5mult+0x20>
 8021338:	4c25      	ldr	r4, [pc, #148]	; (80213d0 <__pow5mult+0xa8>)
 802133a:	3a01      	subs	r2, #1
 802133c:	2300      	movs	r3, #0
 802133e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021342:	f7ff fe53 	bl	8020fec <__multadd>
 8021346:	4607      	mov	r7, r0
 8021348:	10ad      	asrs	r5, r5, #2
 802134a:	d03d      	beq.n	80213c8 <__pow5mult+0xa0>
 802134c:	69f4      	ldr	r4, [r6, #28]
 802134e:	b97c      	cbnz	r4, 8021370 <__pow5mult+0x48>
 8021350:	2010      	movs	r0, #16
 8021352:	f7fc fbfb 	bl	801db4c <malloc>
 8021356:	4602      	mov	r2, r0
 8021358:	61f0      	str	r0, [r6, #28]
 802135a:	b928      	cbnz	r0, 8021368 <__pow5mult+0x40>
 802135c:	4b1d      	ldr	r3, [pc, #116]	; (80213d4 <__pow5mult+0xac>)
 802135e:	481e      	ldr	r0, [pc, #120]	; (80213d8 <__pow5mult+0xb0>)
 8021360:	f240 11b3 	movw	r1, #435	; 0x1b3
 8021364:	f7fc fbb2 	bl	801dacc <__assert_func>
 8021368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802136c:	6004      	str	r4, [r0, #0]
 802136e:	60c4      	str	r4, [r0, #12]
 8021370:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8021374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021378:	b94c      	cbnz	r4, 802138e <__pow5mult+0x66>
 802137a:	f240 2171 	movw	r1, #625	; 0x271
 802137e:	4630      	mov	r0, r6
 8021380:	f7ff ff12 	bl	80211a8 <__i2b>
 8021384:	2300      	movs	r3, #0
 8021386:	f8c8 0008 	str.w	r0, [r8, #8]
 802138a:	4604      	mov	r4, r0
 802138c:	6003      	str	r3, [r0, #0]
 802138e:	f04f 0900 	mov.w	r9, #0
 8021392:	07eb      	lsls	r3, r5, #31
 8021394:	d50a      	bpl.n	80213ac <__pow5mult+0x84>
 8021396:	4639      	mov	r1, r7
 8021398:	4622      	mov	r2, r4
 802139a:	4630      	mov	r0, r6
 802139c:	f7ff ff1a 	bl	80211d4 <__multiply>
 80213a0:	4639      	mov	r1, r7
 80213a2:	4680      	mov	r8, r0
 80213a4:	4630      	mov	r0, r6
 80213a6:	f7ff fdff 	bl	8020fa8 <_Bfree>
 80213aa:	4647      	mov	r7, r8
 80213ac:	106d      	asrs	r5, r5, #1
 80213ae:	d00b      	beq.n	80213c8 <__pow5mult+0xa0>
 80213b0:	6820      	ldr	r0, [r4, #0]
 80213b2:	b938      	cbnz	r0, 80213c4 <__pow5mult+0x9c>
 80213b4:	4622      	mov	r2, r4
 80213b6:	4621      	mov	r1, r4
 80213b8:	4630      	mov	r0, r6
 80213ba:	f7ff ff0b 	bl	80211d4 <__multiply>
 80213be:	6020      	str	r0, [r4, #0]
 80213c0:	f8c0 9000 	str.w	r9, [r0]
 80213c4:	4604      	mov	r4, r0
 80213c6:	e7e4      	b.n	8021392 <__pow5mult+0x6a>
 80213c8:	4638      	mov	r0, r7
 80213ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80213ce:	bf00      	nop
 80213d0:	0802d458 	.word	0x0802d458
 80213d4:	0802d22f 	.word	0x0802d22f
 80213d8:	0802d30f 	.word	0x0802d30f

080213dc <__lshift>:
 80213dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80213e0:	460c      	mov	r4, r1
 80213e2:	6849      	ldr	r1, [r1, #4]
 80213e4:	6923      	ldr	r3, [r4, #16]
 80213e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80213ea:	68a3      	ldr	r3, [r4, #8]
 80213ec:	4607      	mov	r7, r0
 80213ee:	4691      	mov	r9, r2
 80213f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80213f4:	f108 0601 	add.w	r6, r8, #1
 80213f8:	42b3      	cmp	r3, r6
 80213fa:	db0b      	blt.n	8021414 <__lshift+0x38>
 80213fc:	4638      	mov	r0, r7
 80213fe:	f7ff fd93 	bl	8020f28 <_Balloc>
 8021402:	4605      	mov	r5, r0
 8021404:	b948      	cbnz	r0, 802141a <__lshift+0x3e>
 8021406:	4602      	mov	r2, r0
 8021408:	4b28      	ldr	r3, [pc, #160]	; (80214ac <__lshift+0xd0>)
 802140a:	4829      	ldr	r0, [pc, #164]	; (80214b0 <__lshift+0xd4>)
 802140c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8021410:	f7fc fb5c 	bl	801dacc <__assert_func>
 8021414:	3101      	adds	r1, #1
 8021416:	005b      	lsls	r3, r3, #1
 8021418:	e7ee      	b.n	80213f8 <__lshift+0x1c>
 802141a:	2300      	movs	r3, #0
 802141c:	f100 0114 	add.w	r1, r0, #20
 8021420:	f100 0210 	add.w	r2, r0, #16
 8021424:	4618      	mov	r0, r3
 8021426:	4553      	cmp	r3, sl
 8021428:	db33      	blt.n	8021492 <__lshift+0xb6>
 802142a:	6920      	ldr	r0, [r4, #16]
 802142c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021430:	f104 0314 	add.w	r3, r4, #20
 8021434:	f019 091f 	ands.w	r9, r9, #31
 8021438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802143c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021440:	d02b      	beq.n	802149a <__lshift+0xbe>
 8021442:	f1c9 0e20 	rsb	lr, r9, #32
 8021446:	468a      	mov	sl, r1
 8021448:	2200      	movs	r2, #0
 802144a:	6818      	ldr	r0, [r3, #0]
 802144c:	fa00 f009 	lsl.w	r0, r0, r9
 8021450:	4310      	orrs	r0, r2
 8021452:	f84a 0b04 	str.w	r0, [sl], #4
 8021456:	f853 2b04 	ldr.w	r2, [r3], #4
 802145a:	459c      	cmp	ip, r3
 802145c:	fa22 f20e 	lsr.w	r2, r2, lr
 8021460:	d8f3      	bhi.n	802144a <__lshift+0x6e>
 8021462:	ebac 0304 	sub.w	r3, ip, r4
 8021466:	3b15      	subs	r3, #21
 8021468:	f023 0303 	bic.w	r3, r3, #3
 802146c:	3304      	adds	r3, #4
 802146e:	f104 0015 	add.w	r0, r4, #21
 8021472:	4584      	cmp	ip, r0
 8021474:	bf38      	it	cc
 8021476:	2304      	movcc	r3, #4
 8021478:	50ca      	str	r2, [r1, r3]
 802147a:	b10a      	cbz	r2, 8021480 <__lshift+0xa4>
 802147c:	f108 0602 	add.w	r6, r8, #2
 8021480:	3e01      	subs	r6, #1
 8021482:	4638      	mov	r0, r7
 8021484:	612e      	str	r6, [r5, #16]
 8021486:	4621      	mov	r1, r4
 8021488:	f7ff fd8e 	bl	8020fa8 <_Bfree>
 802148c:	4628      	mov	r0, r5
 802148e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021492:	f842 0f04 	str.w	r0, [r2, #4]!
 8021496:	3301      	adds	r3, #1
 8021498:	e7c5      	b.n	8021426 <__lshift+0x4a>
 802149a:	3904      	subs	r1, #4
 802149c:	f853 2b04 	ldr.w	r2, [r3], #4
 80214a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80214a4:	459c      	cmp	ip, r3
 80214a6:	d8f9      	bhi.n	802149c <__lshift+0xc0>
 80214a8:	e7ea      	b.n	8021480 <__lshift+0xa4>
 80214aa:	bf00      	nop
 80214ac:	0802d29e 	.word	0x0802d29e
 80214b0:	0802d30f 	.word	0x0802d30f

080214b4 <__mcmp>:
 80214b4:	b530      	push	{r4, r5, lr}
 80214b6:	6902      	ldr	r2, [r0, #16]
 80214b8:	690c      	ldr	r4, [r1, #16]
 80214ba:	1b12      	subs	r2, r2, r4
 80214bc:	d10e      	bne.n	80214dc <__mcmp+0x28>
 80214be:	f100 0314 	add.w	r3, r0, #20
 80214c2:	3114      	adds	r1, #20
 80214c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80214c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80214cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80214d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80214d4:	42a5      	cmp	r5, r4
 80214d6:	d003      	beq.n	80214e0 <__mcmp+0x2c>
 80214d8:	d305      	bcc.n	80214e6 <__mcmp+0x32>
 80214da:	2201      	movs	r2, #1
 80214dc:	4610      	mov	r0, r2
 80214de:	bd30      	pop	{r4, r5, pc}
 80214e0:	4283      	cmp	r3, r0
 80214e2:	d3f3      	bcc.n	80214cc <__mcmp+0x18>
 80214e4:	e7fa      	b.n	80214dc <__mcmp+0x28>
 80214e6:	f04f 32ff 	mov.w	r2, #4294967295
 80214ea:	e7f7      	b.n	80214dc <__mcmp+0x28>

080214ec <__mdiff>:
 80214ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214f0:	460c      	mov	r4, r1
 80214f2:	4606      	mov	r6, r0
 80214f4:	4611      	mov	r1, r2
 80214f6:	4620      	mov	r0, r4
 80214f8:	4690      	mov	r8, r2
 80214fa:	f7ff ffdb 	bl	80214b4 <__mcmp>
 80214fe:	1e05      	subs	r5, r0, #0
 8021500:	d110      	bne.n	8021524 <__mdiff+0x38>
 8021502:	4629      	mov	r1, r5
 8021504:	4630      	mov	r0, r6
 8021506:	f7ff fd0f 	bl	8020f28 <_Balloc>
 802150a:	b930      	cbnz	r0, 802151a <__mdiff+0x2e>
 802150c:	4b3a      	ldr	r3, [pc, #232]	; (80215f8 <__mdiff+0x10c>)
 802150e:	4602      	mov	r2, r0
 8021510:	f240 2137 	movw	r1, #567	; 0x237
 8021514:	4839      	ldr	r0, [pc, #228]	; (80215fc <__mdiff+0x110>)
 8021516:	f7fc fad9 	bl	801dacc <__assert_func>
 802151a:	2301      	movs	r3, #1
 802151c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021524:	bfa4      	itt	ge
 8021526:	4643      	movge	r3, r8
 8021528:	46a0      	movge	r8, r4
 802152a:	4630      	mov	r0, r6
 802152c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021530:	bfa6      	itte	ge
 8021532:	461c      	movge	r4, r3
 8021534:	2500      	movge	r5, #0
 8021536:	2501      	movlt	r5, #1
 8021538:	f7ff fcf6 	bl	8020f28 <_Balloc>
 802153c:	b920      	cbnz	r0, 8021548 <__mdiff+0x5c>
 802153e:	4b2e      	ldr	r3, [pc, #184]	; (80215f8 <__mdiff+0x10c>)
 8021540:	4602      	mov	r2, r0
 8021542:	f240 2145 	movw	r1, #581	; 0x245
 8021546:	e7e5      	b.n	8021514 <__mdiff+0x28>
 8021548:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802154c:	6926      	ldr	r6, [r4, #16]
 802154e:	60c5      	str	r5, [r0, #12]
 8021550:	f104 0914 	add.w	r9, r4, #20
 8021554:	f108 0514 	add.w	r5, r8, #20
 8021558:	f100 0e14 	add.w	lr, r0, #20
 802155c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8021560:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021564:	f108 0210 	add.w	r2, r8, #16
 8021568:	46f2      	mov	sl, lr
 802156a:	2100      	movs	r1, #0
 802156c:	f859 3b04 	ldr.w	r3, [r9], #4
 8021570:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021574:	fa11 f88b 	uxtah	r8, r1, fp
 8021578:	b299      	uxth	r1, r3
 802157a:	0c1b      	lsrs	r3, r3, #16
 802157c:	eba8 0801 	sub.w	r8, r8, r1
 8021580:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021584:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021588:	fa1f f888 	uxth.w	r8, r8
 802158c:	1419      	asrs	r1, r3, #16
 802158e:	454e      	cmp	r6, r9
 8021590:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021594:	f84a 3b04 	str.w	r3, [sl], #4
 8021598:	d8e8      	bhi.n	802156c <__mdiff+0x80>
 802159a:	1b33      	subs	r3, r6, r4
 802159c:	3b15      	subs	r3, #21
 802159e:	f023 0303 	bic.w	r3, r3, #3
 80215a2:	3304      	adds	r3, #4
 80215a4:	3415      	adds	r4, #21
 80215a6:	42a6      	cmp	r6, r4
 80215a8:	bf38      	it	cc
 80215aa:	2304      	movcc	r3, #4
 80215ac:	441d      	add	r5, r3
 80215ae:	4473      	add	r3, lr
 80215b0:	469e      	mov	lr, r3
 80215b2:	462e      	mov	r6, r5
 80215b4:	4566      	cmp	r6, ip
 80215b6:	d30e      	bcc.n	80215d6 <__mdiff+0xea>
 80215b8:	f10c 0203 	add.w	r2, ip, #3
 80215bc:	1b52      	subs	r2, r2, r5
 80215be:	f022 0203 	bic.w	r2, r2, #3
 80215c2:	3d03      	subs	r5, #3
 80215c4:	45ac      	cmp	ip, r5
 80215c6:	bf38      	it	cc
 80215c8:	2200      	movcc	r2, #0
 80215ca:	4413      	add	r3, r2
 80215cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80215d0:	b17a      	cbz	r2, 80215f2 <__mdiff+0x106>
 80215d2:	6107      	str	r7, [r0, #16]
 80215d4:	e7a4      	b.n	8021520 <__mdiff+0x34>
 80215d6:	f856 8b04 	ldr.w	r8, [r6], #4
 80215da:	fa11 f288 	uxtah	r2, r1, r8
 80215de:	1414      	asrs	r4, r2, #16
 80215e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80215e4:	b292      	uxth	r2, r2
 80215e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80215ea:	f84e 2b04 	str.w	r2, [lr], #4
 80215ee:	1421      	asrs	r1, r4, #16
 80215f0:	e7e0      	b.n	80215b4 <__mdiff+0xc8>
 80215f2:	3f01      	subs	r7, #1
 80215f4:	e7ea      	b.n	80215cc <__mdiff+0xe0>
 80215f6:	bf00      	nop
 80215f8:	0802d29e 	.word	0x0802d29e
 80215fc:	0802d30f 	.word	0x0802d30f

08021600 <__ulp>:
 8021600:	b082      	sub	sp, #8
 8021602:	ed8d 0b00 	vstr	d0, [sp]
 8021606:	9a01      	ldr	r2, [sp, #4]
 8021608:	4b0f      	ldr	r3, [pc, #60]	; (8021648 <__ulp+0x48>)
 802160a:	4013      	ands	r3, r2
 802160c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8021610:	2b00      	cmp	r3, #0
 8021612:	dc08      	bgt.n	8021626 <__ulp+0x26>
 8021614:	425b      	negs	r3, r3
 8021616:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802161a:	ea4f 5223 	mov.w	r2, r3, asr #20
 802161e:	da04      	bge.n	802162a <__ulp+0x2a>
 8021620:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021624:	4113      	asrs	r3, r2
 8021626:	2200      	movs	r2, #0
 8021628:	e008      	b.n	802163c <__ulp+0x3c>
 802162a:	f1a2 0314 	sub.w	r3, r2, #20
 802162e:	2b1e      	cmp	r3, #30
 8021630:	bfda      	itte	le
 8021632:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8021636:	40da      	lsrle	r2, r3
 8021638:	2201      	movgt	r2, #1
 802163a:	2300      	movs	r3, #0
 802163c:	4619      	mov	r1, r3
 802163e:	4610      	mov	r0, r2
 8021640:	ec41 0b10 	vmov	d0, r0, r1
 8021644:	b002      	add	sp, #8
 8021646:	4770      	bx	lr
 8021648:	7ff00000 	.word	0x7ff00000

0802164c <__b2d>:
 802164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021650:	6906      	ldr	r6, [r0, #16]
 8021652:	f100 0814 	add.w	r8, r0, #20
 8021656:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802165a:	1f37      	subs	r7, r6, #4
 802165c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8021660:	4610      	mov	r0, r2
 8021662:	f7ff fd53 	bl	802110c <__hi0bits>
 8021666:	f1c0 0320 	rsb	r3, r0, #32
 802166a:	280a      	cmp	r0, #10
 802166c:	600b      	str	r3, [r1, #0]
 802166e:	491b      	ldr	r1, [pc, #108]	; (80216dc <__b2d+0x90>)
 8021670:	dc15      	bgt.n	802169e <__b2d+0x52>
 8021672:	f1c0 0c0b 	rsb	ip, r0, #11
 8021676:	fa22 f30c 	lsr.w	r3, r2, ip
 802167a:	45b8      	cmp	r8, r7
 802167c:	ea43 0501 	orr.w	r5, r3, r1
 8021680:	bf34      	ite	cc
 8021682:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8021686:	2300      	movcs	r3, #0
 8021688:	3015      	adds	r0, #21
 802168a:	fa02 f000 	lsl.w	r0, r2, r0
 802168e:	fa23 f30c 	lsr.w	r3, r3, ip
 8021692:	4303      	orrs	r3, r0
 8021694:	461c      	mov	r4, r3
 8021696:	ec45 4b10 	vmov	d0, r4, r5
 802169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802169e:	45b8      	cmp	r8, r7
 80216a0:	bf3a      	itte	cc
 80216a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80216a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80216aa:	2300      	movcs	r3, #0
 80216ac:	380b      	subs	r0, #11
 80216ae:	d012      	beq.n	80216d6 <__b2d+0x8a>
 80216b0:	f1c0 0120 	rsb	r1, r0, #32
 80216b4:	fa23 f401 	lsr.w	r4, r3, r1
 80216b8:	4082      	lsls	r2, r0
 80216ba:	4322      	orrs	r2, r4
 80216bc:	4547      	cmp	r7, r8
 80216be:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80216c2:	bf8c      	ite	hi
 80216c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80216c8:	2200      	movls	r2, #0
 80216ca:	4083      	lsls	r3, r0
 80216cc:	40ca      	lsrs	r2, r1
 80216ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80216d2:	4313      	orrs	r3, r2
 80216d4:	e7de      	b.n	8021694 <__b2d+0x48>
 80216d6:	ea42 0501 	orr.w	r5, r2, r1
 80216da:	e7db      	b.n	8021694 <__b2d+0x48>
 80216dc:	3ff00000 	.word	0x3ff00000

080216e0 <__d2b>:
 80216e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80216e4:	460f      	mov	r7, r1
 80216e6:	2101      	movs	r1, #1
 80216e8:	ec59 8b10 	vmov	r8, r9, d0
 80216ec:	4616      	mov	r6, r2
 80216ee:	f7ff fc1b 	bl	8020f28 <_Balloc>
 80216f2:	4604      	mov	r4, r0
 80216f4:	b930      	cbnz	r0, 8021704 <__d2b+0x24>
 80216f6:	4602      	mov	r2, r0
 80216f8:	4b24      	ldr	r3, [pc, #144]	; (802178c <__d2b+0xac>)
 80216fa:	4825      	ldr	r0, [pc, #148]	; (8021790 <__d2b+0xb0>)
 80216fc:	f240 310f 	movw	r1, #783	; 0x30f
 8021700:	f7fc f9e4 	bl	801dacc <__assert_func>
 8021704:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8021708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802170c:	bb2d      	cbnz	r5, 802175a <__d2b+0x7a>
 802170e:	9301      	str	r3, [sp, #4]
 8021710:	f1b8 0300 	subs.w	r3, r8, #0
 8021714:	d026      	beq.n	8021764 <__d2b+0x84>
 8021716:	4668      	mov	r0, sp
 8021718:	9300      	str	r3, [sp, #0]
 802171a:	f7ff fd17 	bl	802114c <__lo0bits>
 802171e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8021722:	b1e8      	cbz	r0, 8021760 <__d2b+0x80>
 8021724:	f1c0 0320 	rsb	r3, r0, #32
 8021728:	fa02 f303 	lsl.w	r3, r2, r3
 802172c:	430b      	orrs	r3, r1
 802172e:	40c2      	lsrs	r2, r0
 8021730:	6163      	str	r3, [r4, #20]
 8021732:	9201      	str	r2, [sp, #4]
 8021734:	9b01      	ldr	r3, [sp, #4]
 8021736:	61a3      	str	r3, [r4, #24]
 8021738:	2b00      	cmp	r3, #0
 802173a:	bf14      	ite	ne
 802173c:	2202      	movne	r2, #2
 802173e:	2201      	moveq	r2, #1
 8021740:	6122      	str	r2, [r4, #16]
 8021742:	b1bd      	cbz	r5, 8021774 <__d2b+0x94>
 8021744:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021748:	4405      	add	r5, r0
 802174a:	603d      	str	r5, [r7, #0]
 802174c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021750:	6030      	str	r0, [r6, #0]
 8021752:	4620      	mov	r0, r4
 8021754:	b003      	add	sp, #12
 8021756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802175a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802175e:	e7d6      	b.n	802170e <__d2b+0x2e>
 8021760:	6161      	str	r1, [r4, #20]
 8021762:	e7e7      	b.n	8021734 <__d2b+0x54>
 8021764:	a801      	add	r0, sp, #4
 8021766:	f7ff fcf1 	bl	802114c <__lo0bits>
 802176a:	9b01      	ldr	r3, [sp, #4]
 802176c:	6163      	str	r3, [r4, #20]
 802176e:	3020      	adds	r0, #32
 8021770:	2201      	movs	r2, #1
 8021772:	e7e5      	b.n	8021740 <__d2b+0x60>
 8021774:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021778:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802177c:	6038      	str	r0, [r7, #0]
 802177e:	6918      	ldr	r0, [r3, #16]
 8021780:	f7ff fcc4 	bl	802110c <__hi0bits>
 8021784:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8021788:	e7e2      	b.n	8021750 <__d2b+0x70>
 802178a:	bf00      	nop
 802178c:	0802d29e 	.word	0x0802d29e
 8021790:	0802d30f 	.word	0x0802d30f

08021794 <__ratio>:
 8021794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021798:	4688      	mov	r8, r1
 802179a:	4669      	mov	r1, sp
 802179c:	4681      	mov	r9, r0
 802179e:	f7ff ff55 	bl	802164c <__b2d>
 80217a2:	a901      	add	r1, sp, #4
 80217a4:	4640      	mov	r0, r8
 80217a6:	ec55 4b10 	vmov	r4, r5, d0
 80217aa:	f7ff ff4f 	bl	802164c <__b2d>
 80217ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80217b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80217b6:	eba3 0c02 	sub.w	ip, r3, r2
 80217ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 80217be:	1a9b      	subs	r3, r3, r2
 80217c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80217c4:	ec51 0b10 	vmov	r0, r1, d0
 80217c8:	2b00      	cmp	r3, #0
 80217ca:	bfd6      	itet	le
 80217cc:	460a      	movle	r2, r1
 80217ce:	462a      	movgt	r2, r5
 80217d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80217d4:	468b      	mov	fp, r1
 80217d6:	462f      	mov	r7, r5
 80217d8:	bfd4      	ite	le
 80217da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80217de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80217e2:	4620      	mov	r0, r4
 80217e4:	ee10 2a10 	vmov	r2, s0
 80217e8:	465b      	mov	r3, fp
 80217ea:	4639      	mov	r1, r7
 80217ec:	f7df f83e 	bl	800086c <__aeabi_ddiv>
 80217f0:	ec41 0b10 	vmov	d0, r0, r1
 80217f4:	b003      	add	sp, #12
 80217f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080217fa <__copybits>:
 80217fa:	3901      	subs	r1, #1
 80217fc:	b570      	push	{r4, r5, r6, lr}
 80217fe:	1149      	asrs	r1, r1, #5
 8021800:	6914      	ldr	r4, [r2, #16]
 8021802:	3101      	adds	r1, #1
 8021804:	f102 0314 	add.w	r3, r2, #20
 8021808:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802180c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8021810:	1f05      	subs	r5, r0, #4
 8021812:	42a3      	cmp	r3, r4
 8021814:	d30c      	bcc.n	8021830 <__copybits+0x36>
 8021816:	1aa3      	subs	r3, r4, r2
 8021818:	3b11      	subs	r3, #17
 802181a:	f023 0303 	bic.w	r3, r3, #3
 802181e:	3211      	adds	r2, #17
 8021820:	42a2      	cmp	r2, r4
 8021822:	bf88      	it	hi
 8021824:	2300      	movhi	r3, #0
 8021826:	4418      	add	r0, r3
 8021828:	2300      	movs	r3, #0
 802182a:	4288      	cmp	r0, r1
 802182c:	d305      	bcc.n	802183a <__copybits+0x40>
 802182e:	bd70      	pop	{r4, r5, r6, pc}
 8021830:	f853 6b04 	ldr.w	r6, [r3], #4
 8021834:	f845 6f04 	str.w	r6, [r5, #4]!
 8021838:	e7eb      	b.n	8021812 <__copybits+0x18>
 802183a:	f840 3b04 	str.w	r3, [r0], #4
 802183e:	e7f4      	b.n	802182a <__copybits+0x30>

08021840 <__any_on>:
 8021840:	f100 0214 	add.w	r2, r0, #20
 8021844:	6900      	ldr	r0, [r0, #16]
 8021846:	114b      	asrs	r3, r1, #5
 8021848:	4298      	cmp	r0, r3
 802184a:	b510      	push	{r4, lr}
 802184c:	db11      	blt.n	8021872 <__any_on+0x32>
 802184e:	dd0a      	ble.n	8021866 <__any_on+0x26>
 8021850:	f011 011f 	ands.w	r1, r1, #31
 8021854:	d007      	beq.n	8021866 <__any_on+0x26>
 8021856:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802185a:	fa24 f001 	lsr.w	r0, r4, r1
 802185e:	fa00 f101 	lsl.w	r1, r0, r1
 8021862:	428c      	cmp	r4, r1
 8021864:	d10b      	bne.n	802187e <__any_on+0x3e>
 8021866:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802186a:	4293      	cmp	r3, r2
 802186c:	d803      	bhi.n	8021876 <__any_on+0x36>
 802186e:	2000      	movs	r0, #0
 8021870:	bd10      	pop	{r4, pc}
 8021872:	4603      	mov	r3, r0
 8021874:	e7f7      	b.n	8021866 <__any_on+0x26>
 8021876:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802187a:	2900      	cmp	r1, #0
 802187c:	d0f5      	beq.n	802186a <__any_on+0x2a>
 802187e:	2001      	movs	r0, #1
 8021880:	e7f6      	b.n	8021870 <__any_on+0x30>

08021882 <_malloc_usable_size_r>:
 8021882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021886:	1f18      	subs	r0, r3, #4
 8021888:	2b00      	cmp	r3, #0
 802188a:	bfbc      	itt	lt
 802188c:	580b      	ldrlt	r3, [r1, r0]
 802188e:	18c0      	addlt	r0, r0, r3
 8021890:	4770      	bx	lr
	...

08021894 <_strtol_l.constprop.0>:
 8021894:	2b01      	cmp	r3, #1
 8021896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802189a:	d001      	beq.n	80218a0 <_strtol_l.constprop.0+0xc>
 802189c:	2b24      	cmp	r3, #36	; 0x24
 802189e:	d906      	bls.n	80218ae <_strtol_l.constprop.0+0x1a>
 80218a0:	f7fe f8d8 	bl	801fa54 <__errno>
 80218a4:	2316      	movs	r3, #22
 80218a6:	6003      	str	r3, [r0, #0]
 80218a8:	2000      	movs	r0, #0
 80218aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80218ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8021994 <_strtol_l.constprop.0+0x100>
 80218b2:	460d      	mov	r5, r1
 80218b4:	462e      	mov	r6, r5
 80218b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80218ba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80218be:	f017 0708 	ands.w	r7, r7, #8
 80218c2:	d1f7      	bne.n	80218b4 <_strtol_l.constprop.0+0x20>
 80218c4:	2c2d      	cmp	r4, #45	; 0x2d
 80218c6:	d132      	bne.n	802192e <_strtol_l.constprop.0+0x9a>
 80218c8:	782c      	ldrb	r4, [r5, #0]
 80218ca:	2701      	movs	r7, #1
 80218cc:	1cb5      	adds	r5, r6, #2
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	d05b      	beq.n	802198a <_strtol_l.constprop.0+0xf6>
 80218d2:	2b10      	cmp	r3, #16
 80218d4:	d109      	bne.n	80218ea <_strtol_l.constprop.0+0x56>
 80218d6:	2c30      	cmp	r4, #48	; 0x30
 80218d8:	d107      	bne.n	80218ea <_strtol_l.constprop.0+0x56>
 80218da:	782c      	ldrb	r4, [r5, #0]
 80218dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80218e0:	2c58      	cmp	r4, #88	; 0x58
 80218e2:	d14d      	bne.n	8021980 <_strtol_l.constprop.0+0xec>
 80218e4:	786c      	ldrb	r4, [r5, #1]
 80218e6:	2310      	movs	r3, #16
 80218e8:	3502      	adds	r5, #2
 80218ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80218ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80218f2:	f04f 0e00 	mov.w	lr, #0
 80218f6:	fbb8 f9f3 	udiv	r9, r8, r3
 80218fa:	4676      	mov	r6, lr
 80218fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8021900:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8021904:	f1bc 0f09 	cmp.w	ip, #9
 8021908:	d816      	bhi.n	8021938 <_strtol_l.constprop.0+0xa4>
 802190a:	4664      	mov	r4, ip
 802190c:	42a3      	cmp	r3, r4
 802190e:	dd24      	ble.n	802195a <_strtol_l.constprop.0+0xc6>
 8021910:	f1be 3fff 	cmp.w	lr, #4294967295
 8021914:	d008      	beq.n	8021928 <_strtol_l.constprop.0+0x94>
 8021916:	45b1      	cmp	r9, r6
 8021918:	d31c      	bcc.n	8021954 <_strtol_l.constprop.0+0xc0>
 802191a:	d101      	bne.n	8021920 <_strtol_l.constprop.0+0x8c>
 802191c:	45a2      	cmp	sl, r4
 802191e:	db19      	blt.n	8021954 <_strtol_l.constprop.0+0xc0>
 8021920:	fb06 4603 	mla	r6, r6, r3, r4
 8021924:	f04f 0e01 	mov.w	lr, #1
 8021928:	f815 4b01 	ldrb.w	r4, [r5], #1
 802192c:	e7e8      	b.n	8021900 <_strtol_l.constprop.0+0x6c>
 802192e:	2c2b      	cmp	r4, #43	; 0x2b
 8021930:	bf04      	itt	eq
 8021932:	782c      	ldrbeq	r4, [r5, #0]
 8021934:	1cb5      	addeq	r5, r6, #2
 8021936:	e7ca      	b.n	80218ce <_strtol_l.constprop.0+0x3a>
 8021938:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802193c:	f1bc 0f19 	cmp.w	ip, #25
 8021940:	d801      	bhi.n	8021946 <_strtol_l.constprop.0+0xb2>
 8021942:	3c37      	subs	r4, #55	; 0x37
 8021944:	e7e2      	b.n	802190c <_strtol_l.constprop.0+0x78>
 8021946:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802194a:	f1bc 0f19 	cmp.w	ip, #25
 802194e:	d804      	bhi.n	802195a <_strtol_l.constprop.0+0xc6>
 8021950:	3c57      	subs	r4, #87	; 0x57
 8021952:	e7db      	b.n	802190c <_strtol_l.constprop.0+0x78>
 8021954:	f04f 3eff 	mov.w	lr, #4294967295
 8021958:	e7e6      	b.n	8021928 <_strtol_l.constprop.0+0x94>
 802195a:	f1be 3fff 	cmp.w	lr, #4294967295
 802195e:	d105      	bne.n	802196c <_strtol_l.constprop.0+0xd8>
 8021960:	2322      	movs	r3, #34	; 0x22
 8021962:	6003      	str	r3, [r0, #0]
 8021964:	4646      	mov	r6, r8
 8021966:	b942      	cbnz	r2, 802197a <_strtol_l.constprop.0+0xe6>
 8021968:	4630      	mov	r0, r6
 802196a:	e79e      	b.n	80218aa <_strtol_l.constprop.0+0x16>
 802196c:	b107      	cbz	r7, 8021970 <_strtol_l.constprop.0+0xdc>
 802196e:	4276      	negs	r6, r6
 8021970:	2a00      	cmp	r2, #0
 8021972:	d0f9      	beq.n	8021968 <_strtol_l.constprop.0+0xd4>
 8021974:	f1be 0f00 	cmp.w	lr, #0
 8021978:	d000      	beq.n	802197c <_strtol_l.constprop.0+0xe8>
 802197a:	1e69      	subs	r1, r5, #1
 802197c:	6011      	str	r1, [r2, #0]
 802197e:	e7f3      	b.n	8021968 <_strtol_l.constprop.0+0xd4>
 8021980:	2430      	movs	r4, #48	; 0x30
 8021982:	2b00      	cmp	r3, #0
 8021984:	d1b1      	bne.n	80218ea <_strtol_l.constprop.0+0x56>
 8021986:	2308      	movs	r3, #8
 8021988:	e7af      	b.n	80218ea <_strtol_l.constprop.0+0x56>
 802198a:	2c30      	cmp	r4, #48	; 0x30
 802198c:	d0a5      	beq.n	80218da <_strtol_l.constprop.0+0x46>
 802198e:	230a      	movs	r3, #10
 8021990:	e7ab      	b.n	80218ea <_strtol_l.constprop.0+0x56>
 8021992:	bf00      	nop
 8021994:	0802d0e1 	.word	0x0802d0e1

08021998 <_strtol_r>:
 8021998:	f7ff bf7c 	b.w	8021894 <_strtol_l.constprop.0>

0802199c <__ascii_wctomb>:
 802199c:	b149      	cbz	r1, 80219b2 <__ascii_wctomb+0x16>
 802199e:	2aff      	cmp	r2, #255	; 0xff
 80219a0:	bf85      	ittet	hi
 80219a2:	238a      	movhi	r3, #138	; 0x8a
 80219a4:	6003      	strhi	r3, [r0, #0]
 80219a6:	700a      	strbls	r2, [r1, #0]
 80219a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80219ac:	bf98      	it	ls
 80219ae:	2001      	movls	r0, #1
 80219b0:	4770      	bx	lr
 80219b2:	4608      	mov	r0, r1
 80219b4:	4770      	bx	lr

080219b6 <__ssputs_r>:
 80219b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80219ba:	688e      	ldr	r6, [r1, #8]
 80219bc:	461f      	mov	r7, r3
 80219be:	42be      	cmp	r6, r7
 80219c0:	680b      	ldr	r3, [r1, #0]
 80219c2:	4682      	mov	sl, r0
 80219c4:	460c      	mov	r4, r1
 80219c6:	4690      	mov	r8, r2
 80219c8:	d82c      	bhi.n	8021a24 <__ssputs_r+0x6e>
 80219ca:	898a      	ldrh	r2, [r1, #12]
 80219cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80219d0:	d026      	beq.n	8021a20 <__ssputs_r+0x6a>
 80219d2:	6965      	ldr	r5, [r4, #20]
 80219d4:	6909      	ldr	r1, [r1, #16]
 80219d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80219da:	eba3 0901 	sub.w	r9, r3, r1
 80219de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80219e2:	1c7b      	adds	r3, r7, #1
 80219e4:	444b      	add	r3, r9
 80219e6:	106d      	asrs	r5, r5, #1
 80219e8:	429d      	cmp	r5, r3
 80219ea:	bf38      	it	cc
 80219ec:	461d      	movcc	r5, r3
 80219ee:	0553      	lsls	r3, r2, #21
 80219f0:	d527      	bpl.n	8021a42 <__ssputs_r+0x8c>
 80219f2:	4629      	mov	r1, r5
 80219f4:	f7fc f8da 	bl	801dbac <_malloc_r>
 80219f8:	4606      	mov	r6, r0
 80219fa:	b360      	cbz	r0, 8021a56 <__ssputs_r+0xa0>
 80219fc:	6921      	ldr	r1, [r4, #16]
 80219fe:	464a      	mov	r2, r9
 8021a00:	f7fe f854 	bl	801faac <memcpy>
 8021a04:	89a3      	ldrh	r3, [r4, #12]
 8021a06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021a0e:	81a3      	strh	r3, [r4, #12]
 8021a10:	6126      	str	r6, [r4, #16]
 8021a12:	6165      	str	r5, [r4, #20]
 8021a14:	444e      	add	r6, r9
 8021a16:	eba5 0509 	sub.w	r5, r5, r9
 8021a1a:	6026      	str	r6, [r4, #0]
 8021a1c:	60a5      	str	r5, [r4, #8]
 8021a1e:	463e      	mov	r6, r7
 8021a20:	42be      	cmp	r6, r7
 8021a22:	d900      	bls.n	8021a26 <__ssputs_r+0x70>
 8021a24:	463e      	mov	r6, r7
 8021a26:	6820      	ldr	r0, [r4, #0]
 8021a28:	4632      	mov	r2, r6
 8021a2a:	4641      	mov	r1, r8
 8021a2c:	f7fd ff40 	bl	801f8b0 <memmove>
 8021a30:	68a3      	ldr	r3, [r4, #8]
 8021a32:	1b9b      	subs	r3, r3, r6
 8021a34:	60a3      	str	r3, [r4, #8]
 8021a36:	6823      	ldr	r3, [r4, #0]
 8021a38:	4433      	add	r3, r6
 8021a3a:	6023      	str	r3, [r4, #0]
 8021a3c:	2000      	movs	r0, #0
 8021a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a42:	462a      	mov	r2, r5
 8021a44:	f7fc f93e 	bl	801dcc4 <_realloc_r>
 8021a48:	4606      	mov	r6, r0
 8021a4a:	2800      	cmp	r0, #0
 8021a4c:	d1e0      	bne.n	8021a10 <__ssputs_r+0x5a>
 8021a4e:	6921      	ldr	r1, [r4, #16]
 8021a50:	4650      	mov	r0, sl
 8021a52:	f7fe feb3 	bl	80207bc <_free_r>
 8021a56:	230c      	movs	r3, #12
 8021a58:	f8ca 3000 	str.w	r3, [sl]
 8021a5c:	89a3      	ldrh	r3, [r4, #12]
 8021a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021a62:	81a3      	strh	r3, [r4, #12]
 8021a64:	f04f 30ff 	mov.w	r0, #4294967295
 8021a68:	e7e9      	b.n	8021a3e <__ssputs_r+0x88>
	...

08021a6c <_svfiprintf_r>:
 8021a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a70:	4698      	mov	r8, r3
 8021a72:	898b      	ldrh	r3, [r1, #12]
 8021a74:	061b      	lsls	r3, r3, #24
 8021a76:	b09d      	sub	sp, #116	; 0x74
 8021a78:	4607      	mov	r7, r0
 8021a7a:	460d      	mov	r5, r1
 8021a7c:	4614      	mov	r4, r2
 8021a7e:	d50e      	bpl.n	8021a9e <_svfiprintf_r+0x32>
 8021a80:	690b      	ldr	r3, [r1, #16]
 8021a82:	b963      	cbnz	r3, 8021a9e <_svfiprintf_r+0x32>
 8021a84:	2140      	movs	r1, #64	; 0x40
 8021a86:	f7fc f891 	bl	801dbac <_malloc_r>
 8021a8a:	6028      	str	r0, [r5, #0]
 8021a8c:	6128      	str	r0, [r5, #16]
 8021a8e:	b920      	cbnz	r0, 8021a9a <_svfiprintf_r+0x2e>
 8021a90:	230c      	movs	r3, #12
 8021a92:	603b      	str	r3, [r7, #0]
 8021a94:	f04f 30ff 	mov.w	r0, #4294967295
 8021a98:	e0d0      	b.n	8021c3c <_svfiprintf_r+0x1d0>
 8021a9a:	2340      	movs	r3, #64	; 0x40
 8021a9c:	616b      	str	r3, [r5, #20]
 8021a9e:	2300      	movs	r3, #0
 8021aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8021aa2:	2320      	movs	r3, #32
 8021aa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021aa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8021aac:	2330      	movs	r3, #48	; 0x30
 8021aae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8021c54 <_svfiprintf_r+0x1e8>
 8021ab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021ab6:	f04f 0901 	mov.w	r9, #1
 8021aba:	4623      	mov	r3, r4
 8021abc:	469a      	mov	sl, r3
 8021abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021ac2:	b10a      	cbz	r2, 8021ac8 <_svfiprintf_r+0x5c>
 8021ac4:	2a25      	cmp	r2, #37	; 0x25
 8021ac6:	d1f9      	bne.n	8021abc <_svfiprintf_r+0x50>
 8021ac8:	ebba 0b04 	subs.w	fp, sl, r4
 8021acc:	d00b      	beq.n	8021ae6 <_svfiprintf_r+0x7a>
 8021ace:	465b      	mov	r3, fp
 8021ad0:	4622      	mov	r2, r4
 8021ad2:	4629      	mov	r1, r5
 8021ad4:	4638      	mov	r0, r7
 8021ad6:	f7ff ff6e 	bl	80219b6 <__ssputs_r>
 8021ada:	3001      	adds	r0, #1
 8021adc:	f000 80a9 	beq.w	8021c32 <_svfiprintf_r+0x1c6>
 8021ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ae2:	445a      	add	r2, fp
 8021ae4:	9209      	str	r2, [sp, #36]	; 0x24
 8021ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8021aea:	2b00      	cmp	r3, #0
 8021aec:	f000 80a1 	beq.w	8021c32 <_svfiprintf_r+0x1c6>
 8021af0:	2300      	movs	r3, #0
 8021af2:	f04f 32ff 	mov.w	r2, #4294967295
 8021af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021afa:	f10a 0a01 	add.w	sl, sl, #1
 8021afe:	9304      	str	r3, [sp, #16]
 8021b00:	9307      	str	r3, [sp, #28]
 8021b02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021b06:	931a      	str	r3, [sp, #104]	; 0x68
 8021b08:	4654      	mov	r4, sl
 8021b0a:	2205      	movs	r2, #5
 8021b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021b10:	4850      	ldr	r0, [pc, #320]	; (8021c54 <_svfiprintf_r+0x1e8>)
 8021b12:	f7de fb6d 	bl	80001f0 <memchr>
 8021b16:	9a04      	ldr	r2, [sp, #16]
 8021b18:	b9d8      	cbnz	r0, 8021b52 <_svfiprintf_r+0xe6>
 8021b1a:	06d0      	lsls	r0, r2, #27
 8021b1c:	bf44      	itt	mi
 8021b1e:	2320      	movmi	r3, #32
 8021b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021b24:	0711      	lsls	r1, r2, #28
 8021b26:	bf44      	itt	mi
 8021b28:	232b      	movmi	r3, #43	; 0x2b
 8021b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8021b32:	2b2a      	cmp	r3, #42	; 0x2a
 8021b34:	d015      	beq.n	8021b62 <_svfiprintf_r+0xf6>
 8021b36:	9a07      	ldr	r2, [sp, #28]
 8021b38:	4654      	mov	r4, sl
 8021b3a:	2000      	movs	r0, #0
 8021b3c:	f04f 0c0a 	mov.w	ip, #10
 8021b40:	4621      	mov	r1, r4
 8021b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021b46:	3b30      	subs	r3, #48	; 0x30
 8021b48:	2b09      	cmp	r3, #9
 8021b4a:	d94d      	bls.n	8021be8 <_svfiprintf_r+0x17c>
 8021b4c:	b1b0      	cbz	r0, 8021b7c <_svfiprintf_r+0x110>
 8021b4e:	9207      	str	r2, [sp, #28]
 8021b50:	e014      	b.n	8021b7c <_svfiprintf_r+0x110>
 8021b52:	eba0 0308 	sub.w	r3, r0, r8
 8021b56:	fa09 f303 	lsl.w	r3, r9, r3
 8021b5a:	4313      	orrs	r3, r2
 8021b5c:	9304      	str	r3, [sp, #16]
 8021b5e:	46a2      	mov	sl, r4
 8021b60:	e7d2      	b.n	8021b08 <_svfiprintf_r+0x9c>
 8021b62:	9b03      	ldr	r3, [sp, #12]
 8021b64:	1d19      	adds	r1, r3, #4
 8021b66:	681b      	ldr	r3, [r3, #0]
 8021b68:	9103      	str	r1, [sp, #12]
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	bfbb      	ittet	lt
 8021b6e:	425b      	neglt	r3, r3
 8021b70:	f042 0202 	orrlt.w	r2, r2, #2
 8021b74:	9307      	strge	r3, [sp, #28]
 8021b76:	9307      	strlt	r3, [sp, #28]
 8021b78:	bfb8      	it	lt
 8021b7a:	9204      	strlt	r2, [sp, #16]
 8021b7c:	7823      	ldrb	r3, [r4, #0]
 8021b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8021b80:	d10c      	bne.n	8021b9c <_svfiprintf_r+0x130>
 8021b82:	7863      	ldrb	r3, [r4, #1]
 8021b84:	2b2a      	cmp	r3, #42	; 0x2a
 8021b86:	d134      	bne.n	8021bf2 <_svfiprintf_r+0x186>
 8021b88:	9b03      	ldr	r3, [sp, #12]
 8021b8a:	1d1a      	adds	r2, r3, #4
 8021b8c:	681b      	ldr	r3, [r3, #0]
 8021b8e:	9203      	str	r2, [sp, #12]
 8021b90:	2b00      	cmp	r3, #0
 8021b92:	bfb8      	it	lt
 8021b94:	f04f 33ff 	movlt.w	r3, #4294967295
 8021b98:	3402      	adds	r4, #2
 8021b9a:	9305      	str	r3, [sp, #20]
 8021b9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8021c64 <_svfiprintf_r+0x1f8>
 8021ba0:	7821      	ldrb	r1, [r4, #0]
 8021ba2:	2203      	movs	r2, #3
 8021ba4:	4650      	mov	r0, sl
 8021ba6:	f7de fb23 	bl	80001f0 <memchr>
 8021baa:	b138      	cbz	r0, 8021bbc <_svfiprintf_r+0x150>
 8021bac:	9b04      	ldr	r3, [sp, #16]
 8021bae:	eba0 000a 	sub.w	r0, r0, sl
 8021bb2:	2240      	movs	r2, #64	; 0x40
 8021bb4:	4082      	lsls	r2, r0
 8021bb6:	4313      	orrs	r3, r2
 8021bb8:	3401      	adds	r4, #1
 8021bba:	9304      	str	r3, [sp, #16]
 8021bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021bc0:	4825      	ldr	r0, [pc, #148]	; (8021c58 <_svfiprintf_r+0x1ec>)
 8021bc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021bc6:	2206      	movs	r2, #6
 8021bc8:	f7de fb12 	bl	80001f0 <memchr>
 8021bcc:	2800      	cmp	r0, #0
 8021bce:	d038      	beq.n	8021c42 <_svfiprintf_r+0x1d6>
 8021bd0:	4b22      	ldr	r3, [pc, #136]	; (8021c5c <_svfiprintf_r+0x1f0>)
 8021bd2:	bb1b      	cbnz	r3, 8021c1c <_svfiprintf_r+0x1b0>
 8021bd4:	9b03      	ldr	r3, [sp, #12]
 8021bd6:	3307      	adds	r3, #7
 8021bd8:	f023 0307 	bic.w	r3, r3, #7
 8021bdc:	3308      	adds	r3, #8
 8021bde:	9303      	str	r3, [sp, #12]
 8021be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021be2:	4433      	add	r3, r6
 8021be4:	9309      	str	r3, [sp, #36]	; 0x24
 8021be6:	e768      	b.n	8021aba <_svfiprintf_r+0x4e>
 8021be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8021bec:	460c      	mov	r4, r1
 8021bee:	2001      	movs	r0, #1
 8021bf0:	e7a6      	b.n	8021b40 <_svfiprintf_r+0xd4>
 8021bf2:	2300      	movs	r3, #0
 8021bf4:	3401      	adds	r4, #1
 8021bf6:	9305      	str	r3, [sp, #20]
 8021bf8:	4619      	mov	r1, r3
 8021bfa:	f04f 0c0a 	mov.w	ip, #10
 8021bfe:	4620      	mov	r0, r4
 8021c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021c04:	3a30      	subs	r2, #48	; 0x30
 8021c06:	2a09      	cmp	r2, #9
 8021c08:	d903      	bls.n	8021c12 <_svfiprintf_r+0x1a6>
 8021c0a:	2b00      	cmp	r3, #0
 8021c0c:	d0c6      	beq.n	8021b9c <_svfiprintf_r+0x130>
 8021c0e:	9105      	str	r1, [sp, #20]
 8021c10:	e7c4      	b.n	8021b9c <_svfiprintf_r+0x130>
 8021c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8021c16:	4604      	mov	r4, r0
 8021c18:	2301      	movs	r3, #1
 8021c1a:	e7f0      	b.n	8021bfe <_svfiprintf_r+0x192>
 8021c1c:	ab03      	add	r3, sp, #12
 8021c1e:	9300      	str	r3, [sp, #0]
 8021c20:	462a      	mov	r2, r5
 8021c22:	4b0f      	ldr	r3, [pc, #60]	; (8021c60 <_svfiprintf_r+0x1f4>)
 8021c24:	a904      	add	r1, sp, #16
 8021c26:	4638      	mov	r0, r7
 8021c28:	f7fc ff3c 	bl	801eaa4 <_printf_float>
 8021c2c:	1c42      	adds	r2, r0, #1
 8021c2e:	4606      	mov	r6, r0
 8021c30:	d1d6      	bne.n	8021be0 <_svfiprintf_r+0x174>
 8021c32:	89ab      	ldrh	r3, [r5, #12]
 8021c34:	065b      	lsls	r3, r3, #25
 8021c36:	f53f af2d 	bmi.w	8021a94 <_svfiprintf_r+0x28>
 8021c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021c3c:	b01d      	add	sp, #116	; 0x74
 8021c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c42:	ab03      	add	r3, sp, #12
 8021c44:	9300      	str	r3, [sp, #0]
 8021c46:	462a      	mov	r2, r5
 8021c48:	4b05      	ldr	r3, [pc, #20]	; (8021c60 <_svfiprintf_r+0x1f4>)
 8021c4a:	a904      	add	r1, sp, #16
 8021c4c:	4638      	mov	r0, r7
 8021c4e:	f7fd f9cd 	bl	801efec <_printf_i>
 8021c52:	e7eb      	b.n	8021c2c <_svfiprintf_r+0x1c0>
 8021c54:	0802d464 	.word	0x0802d464
 8021c58:	0802d46e 	.word	0x0802d46e
 8021c5c:	0801eaa5 	.word	0x0801eaa5
 8021c60:	080219b7 	.word	0x080219b7
 8021c64:	0802d46a 	.word	0x0802d46a

08021c68 <__sfputc_r>:
 8021c68:	6893      	ldr	r3, [r2, #8]
 8021c6a:	3b01      	subs	r3, #1
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	b410      	push	{r4}
 8021c70:	6093      	str	r3, [r2, #8]
 8021c72:	da08      	bge.n	8021c86 <__sfputc_r+0x1e>
 8021c74:	6994      	ldr	r4, [r2, #24]
 8021c76:	42a3      	cmp	r3, r4
 8021c78:	db01      	blt.n	8021c7e <__sfputc_r+0x16>
 8021c7a:	290a      	cmp	r1, #10
 8021c7c:	d103      	bne.n	8021c86 <__sfputc_r+0x1e>
 8021c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021c82:	f000 b9e3 	b.w	802204c <__swbuf_r>
 8021c86:	6813      	ldr	r3, [r2, #0]
 8021c88:	1c58      	adds	r0, r3, #1
 8021c8a:	6010      	str	r0, [r2, #0]
 8021c8c:	7019      	strb	r1, [r3, #0]
 8021c8e:	4608      	mov	r0, r1
 8021c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021c94:	4770      	bx	lr

08021c96 <__sfputs_r>:
 8021c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c98:	4606      	mov	r6, r0
 8021c9a:	460f      	mov	r7, r1
 8021c9c:	4614      	mov	r4, r2
 8021c9e:	18d5      	adds	r5, r2, r3
 8021ca0:	42ac      	cmp	r4, r5
 8021ca2:	d101      	bne.n	8021ca8 <__sfputs_r+0x12>
 8021ca4:	2000      	movs	r0, #0
 8021ca6:	e007      	b.n	8021cb8 <__sfputs_r+0x22>
 8021ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021cac:	463a      	mov	r2, r7
 8021cae:	4630      	mov	r0, r6
 8021cb0:	f7ff ffda 	bl	8021c68 <__sfputc_r>
 8021cb4:	1c43      	adds	r3, r0, #1
 8021cb6:	d1f3      	bne.n	8021ca0 <__sfputs_r+0xa>
 8021cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021cbc <_vfiprintf_r>:
 8021cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cc0:	460d      	mov	r5, r1
 8021cc2:	b09d      	sub	sp, #116	; 0x74
 8021cc4:	4614      	mov	r4, r2
 8021cc6:	4698      	mov	r8, r3
 8021cc8:	4606      	mov	r6, r0
 8021cca:	b118      	cbz	r0, 8021cd4 <_vfiprintf_r+0x18>
 8021ccc:	6a03      	ldr	r3, [r0, #32]
 8021cce:	b90b      	cbnz	r3, 8021cd4 <_vfiprintf_r+0x18>
 8021cd0:	f7fd fd38 	bl	801f744 <__sinit>
 8021cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021cd6:	07d9      	lsls	r1, r3, #31
 8021cd8:	d405      	bmi.n	8021ce6 <_vfiprintf_r+0x2a>
 8021cda:	89ab      	ldrh	r3, [r5, #12]
 8021cdc:	059a      	lsls	r2, r3, #22
 8021cde:	d402      	bmi.n	8021ce6 <_vfiprintf_r+0x2a>
 8021ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021ce2:	f7fd fee1 	bl	801faa8 <__retarget_lock_acquire_recursive>
 8021ce6:	89ab      	ldrh	r3, [r5, #12]
 8021ce8:	071b      	lsls	r3, r3, #28
 8021cea:	d501      	bpl.n	8021cf0 <_vfiprintf_r+0x34>
 8021cec:	692b      	ldr	r3, [r5, #16]
 8021cee:	b99b      	cbnz	r3, 8021d18 <_vfiprintf_r+0x5c>
 8021cf0:	4629      	mov	r1, r5
 8021cf2:	4630      	mov	r0, r6
 8021cf4:	f000 f9e8 	bl	80220c8 <__swsetup_r>
 8021cf8:	b170      	cbz	r0, 8021d18 <_vfiprintf_r+0x5c>
 8021cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021cfc:	07dc      	lsls	r4, r3, #31
 8021cfe:	d504      	bpl.n	8021d0a <_vfiprintf_r+0x4e>
 8021d00:	f04f 30ff 	mov.w	r0, #4294967295
 8021d04:	b01d      	add	sp, #116	; 0x74
 8021d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d0a:	89ab      	ldrh	r3, [r5, #12]
 8021d0c:	0598      	lsls	r0, r3, #22
 8021d0e:	d4f7      	bmi.n	8021d00 <_vfiprintf_r+0x44>
 8021d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021d12:	f7fd feca 	bl	801faaa <__retarget_lock_release_recursive>
 8021d16:	e7f3      	b.n	8021d00 <_vfiprintf_r+0x44>
 8021d18:	2300      	movs	r3, #0
 8021d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8021d1c:	2320      	movs	r3, #32
 8021d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8021d26:	2330      	movs	r3, #48	; 0x30
 8021d28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8021edc <_vfiprintf_r+0x220>
 8021d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021d30:	f04f 0901 	mov.w	r9, #1
 8021d34:	4623      	mov	r3, r4
 8021d36:	469a      	mov	sl, r3
 8021d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021d3c:	b10a      	cbz	r2, 8021d42 <_vfiprintf_r+0x86>
 8021d3e:	2a25      	cmp	r2, #37	; 0x25
 8021d40:	d1f9      	bne.n	8021d36 <_vfiprintf_r+0x7a>
 8021d42:	ebba 0b04 	subs.w	fp, sl, r4
 8021d46:	d00b      	beq.n	8021d60 <_vfiprintf_r+0xa4>
 8021d48:	465b      	mov	r3, fp
 8021d4a:	4622      	mov	r2, r4
 8021d4c:	4629      	mov	r1, r5
 8021d4e:	4630      	mov	r0, r6
 8021d50:	f7ff ffa1 	bl	8021c96 <__sfputs_r>
 8021d54:	3001      	adds	r0, #1
 8021d56:	f000 80a9 	beq.w	8021eac <_vfiprintf_r+0x1f0>
 8021d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021d5c:	445a      	add	r2, fp
 8021d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8021d60:	f89a 3000 	ldrb.w	r3, [sl]
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	f000 80a1 	beq.w	8021eac <_vfiprintf_r+0x1f0>
 8021d6a:	2300      	movs	r3, #0
 8021d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8021d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021d74:	f10a 0a01 	add.w	sl, sl, #1
 8021d78:	9304      	str	r3, [sp, #16]
 8021d7a:	9307      	str	r3, [sp, #28]
 8021d7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021d80:	931a      	str	r3, [sp, #104]	; 0x68
 8021d82:	4654      	mov	r4, sl
 8021d84:	2205      	movs	r2, #5
 8021d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d8a:	4854      	ldr	r0, [pc, #336]	; (8021edc <_vfiprintf_r+0x220>)
 8021d8c:	f7de fa30 	bl	80001f0 <memchr>
 8021d90:	9a04      	ldr	r2, [sp, #16]
 8021d92:	b9d8      	cbnz	r0, 8021dcc <_vfiprintf_r+0x110>
 8021d94:	06d1      	lsls	r1, r2, #27
 8021d96:	bf44      	itt	mi
 8021d98:	2320      	movmi	r3, #32
 8021d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021d9e:	0713      	lsls	r3, r2, #28
 8021da0:	bf44      	itt	mi
 8021da2:	232b      	movmi	r3, #43	; 0x2b
 8021da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021da8:	f89a 3000 	ldrb.w	r3, [sl]
 8021dac:	2b2a      	cmp	r3, #42	; 0x2a
 8021dae:	d015      	beq.n	8021ddc <_vfiprintf_r+0x120>
 8021db0:	9a07      	ldr	r2, [sp, #28]
 8021db2:	4654      	mov	r4, sl
 8021db4:	2000      	movs	r0, #0
 8021db6:	f04f 0c0a 	mov.w	ip, #10
 8021dba:	4621      	mov	r1, r4
 8021dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021dc0:	3b30      	subs	r3, #48	; 0x30
 8021dc2:	2b09      	cmp	r3, #9
 8021dc4:	d94d      	bls.n	8021e62 <_vfiprintf_r+0x1a6>
 8021dc6:	b1b0      	cbz	r0, 8021df6 <_vfiprintf_r+0x13a>
 8021dc8:	9207      	str	r2, [sp, #28]
 8021dca:	e014      	b.n	8021df6 <_vfiprintf_r+0x13a>
 8021dcc:	eba0 0308 	sub.w	r3, r0, r8
 8021dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8021dd4:	4313      	orrs	r3, r2
 8021dd6:	9304      	str	r3, [sp, #16]
 8021dd8:	46a2      	mov	sl, r4
 8021dda:	e7d2      	b.n	8021d82 <_vfiprintf_r+0xc6>
 8021ddc:	9b03      	ldr	r3, [sp, #12]
 8021dde:	1d19      	adds	r1, r3, #4
 8021de0:	681b      	ldr	r3, [r3, #0]
 8021de2:	9103      	str	r1, [sp, #12]
 8021de4:	2b00      	cmp	r3, #0
 8021de6:	bfbb      	ittet	lt
 8021de8:	425b      	neglt	r3, r3
 8021dea:	f042 0202 	orrlt.w	r2, r2, #2
 8021dee:	9307      	strge	r3, [sp, #28]
 8021df0:	9307      	strlt	r3, [sp, #28]
 8021df2:	bfb8      	it	lt
 8021df4:	9204      	strlt	r2, [sp, #16]
 8021df6:	7823      	ldrb	r3, [r4, #0]
 8021df8:	2b2e      	cmp	r3, #46	; 0x2e
 8021dfa:	d10c      	bne.n	8021e16 <_vfiprintf_r+0x15a>
 8021dfc:	7863      	ldrb	r3, [r4, #1]
 8021dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8021e00:	d134      	bne.n	8021e6c <_vfiprintf_r+0x1b0>
 8021e02:	9b03      	ldr	r3, [sp, #12]
 8021e04:	1d1a      	adds	r2, r3, #4
 8021e06:	681b      	ldr	r3, [r3, #0]
 8021e08:	9203      	str	r2, [sp, #12]
 8021e0a:	2b00      	cmp	r3, #0
 8021e0c:	bfb8      	it	lt
 8021e0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8021e12:	3402      	adds	r4, #2
 8021e14:	9305      	str	r3, [sp, #20]
 8021e16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8021eec <_vfiprintf_r+0x230>
 8021e1a:	7821      	ldrb	r1, [r4, #0]
 8021e1c:	2203      	movs	r2, #3
 8021e1e:	4650      	mov	r0, sl
 8021e20:	f7de f9e6 	bl	80001f0 <memchr>
 8021e24:	b138      	cbz	r0, 8021e36 <_vfiprintf_r+0x17a>
 8021e26:	9b04      	ldr	r3, [sp, #16]
 8021e28:	eba0 000a 	sub.w	r0, r0, sl
 8021e2c:	2240      	movs	r2, #64	; 0x40
 8021e2e:	4082      	lsls	r2, r0
 8021e30:	4313      	orrs	r3, r2
 8021e32:	3401      	adds	r4, #1
 8021e34:	9304      	str	r3, [sp, #16]
 8021e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e3a:	4829      	ldr	r0, [pc, #164]	; (8021ee0 <_vfiprintf_r+0x224>)
 8021e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021e40:	2206      	movs	r2, #6
 8021e42:	f7de f9d5 	bl	80001f0 <memchr>
 8021e46:	2800      	cmp	r0, #0
 8021e48:	d03f      	beq.n	8021eca <_vfiprintf_r+0x20e>
 8021e4a:	4b26      	ldr	r3, [pc, #152]	; (8021ee4 <_vfiprintf_r+0x228>)
 8021e4c:	bb1b      	cbnz	r3, 8021e96 <_vfiprintf_r+0x1da>
 8021e4e:	9b03      	ldr	r3, [sp, #12]
 8021e50:	3307      	adds	r3, #7
 8021e52:	f023 0307 	bic.w	r3, r3, #7
 8021e56:	3308      	adds	r3, #8
 8021e58:	9303      	str	r3, [sp, #12]
 8021e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e5c:	443b      	add	r3, r7
 8021e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8021e60:	e768      	b.n	8021d34 <_vfiprintf_r+0x78>
 8021e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8021e66:	460c      	mov	r4, r1
 8021e68:	2001      	movs	r0, #1
 8021e6a:	e7a6      	b.n	8021dba <_vfiprintf_r+0xfe>
 8021e6c:	2300      	movs	r3, #0
 8021e6e:	3401      	adds	r4, #1
 8021e70:	9305      	str	r3, [sp, #20]
 8021e72:	4619      	mov	r1, r3
 8021e74:	f04f 0c0a 	mov.w	ip, #10
 8021e78:	4620      	mov	r0, r4
 8021e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021e7e:	3a30      	subs	r2, #48	; 0x30
 8021e80:	2a09      	cmp	r2, #9
 8021e82:	d903      	bls.n	8021e8c <_vfiprintf_r+0x1d0>
 8021e84:	2b00      	cmp	r3, #0
 8021e86:	d0c6      	beq.n	8021e16 <_vfiprintf_r+0x15a>
 8021e88:	9105      	str	r1, [sp, #20]
 8021e8a:	e7c4      	b.n	8021e16 <_vfiprintf_r+0x15a>
 8021e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021e90:	4604      	mov	r4, r0
 8021e92:	2301      	movs	r3, #1
 8021e94:	e7f0      	b.n	8021e78 <_vfiprintf_r+0x1bc>
 8021e96:	ab03      	add	r3, sp, #12
 8021e98:	9300      	str	r3, [sp, #0]
 8021e9a:	462a      	mov	r2, r5
 8021e9c:	4b12      	ldr	r3, [pc, #72]	; (8021ee8 <_vfiprintf_r+0x22c>)
 8021e9e:	a904      	add	r1, sp, #16
 8021ea0:	4630      	mov	r0, r6
 8021ea2:	f7fc fdff 	bl	801eaa4 <_printf_float>
 8021ea6:	4607      	mov	r7, r0
 8021ea8:	1c78      	adds	r0, r7, #1
 8021eaa:	d1d6      	bne.n	8021e5a <_vfiprintf_r+0x19e>
 8021eac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021eae:	07d9      	lsls	r1, r3, #31
 8021eb0:	d405      	bmi.n	8021ebe <_vfiprintf_r+0x202>
 8021eb2:	89ab      	ldrh	r3, [r5, #12]
 8021eb4:	059a      	lsls	r2, r3, #22
 8021eb6:	d402      	bmi.n	8021ebe <_vfiprintf_r+0x202>
 8021eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021eba:	f7fd fdf6 	bl	801faaa <__retarget_lock_release_recursive>
 8021ebe:	89ab      	ldrh	r3, [r5, #12]
 8021ec0:	065b      	lsls	r3, r3, #25
 8021ec2:	f53f af1d 	bmi.w	8021d00 <_vfiprintf_r+0x44>
 8021ec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021ec8:	e71c      	b.n	8021d04 <_vfiprintf_r+0x48>
 8021eca:	ab03      	add	r3, sp, #12
 8021ecc:	9300      	str	r3, [sp, #0]
 8021ece:	462a      	mov	r2, r5
 8021ed0:	4b05      	ldr	r3, [pc, #20]	; (8021ee8 <_vfiprintf_r+0x22c>)
 8021ed2:	a904      	add	r1, sp, #16
 8021ed4:	4630      	mov	r0, r6
 8021ed6:	f7fd f889 	bl	801efec <_printf_i>
 8021eda:	e7e4      	b.n	8021ea6 <_vfiprintf_r+0x1ea>
 8021edc:	0802d464 	.word	0x0802d464
 8021ee0:	0802d46e 	.word	0x0802d46e
 8021ee4:	0801eaa5 	.word	0x0801eaa5
 8021ee8:	08021c97 	.word	0x08021c97
 8021eec:	0802d46a 	.word	0x0802d46a

08021ef0 <__sflush_r>:
 8021ef0:	898a      	ldrh	r2, [r1, #12]
 8021ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ef6:	4605      	mov	r5, r0
 8021ef8:	0710      	lsls	r0, r2, #28
 8021efa:	460c      	mov	r4, r1
 8021efc:	d458      	bmi.n	8021fb0 <__sflush_r+0xc0>
 8021efe:	684b      	ldr	r3, [r1, #4]
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	dc05      	bgt.n	8021f10 <__sflush_r+0x20>
 8021f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	dc02      	bgt.n	8021f10 <__sflush_r+0x20>
 8021f0a:	2000      	movs	r0, #0
 8021f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021f12:	2e00      	cmp	r6, #0
 8021f14:	d0f9      	beq.n	8021f0a <__sflush_r+0x1a>
 8021f16:	2300      	movs	r3, #0
 8021f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021f1c:	682f      	ldr	r7, [r5, #0]
 8021f1e:	6a21      	ldr	r1, [r4, #32]
 8021f20:	602b      	str	r3, [r5, #0]
 8021f22:	d032      	beq.n	8021f8a <__sflush_r+0x9a>
 8021f24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021f26:	89a3      	ldrh	r3, [r4, #12]
 8021f28:	075a      	lsls	r2, r3, #29
 8021f2a:	d505      	bpl.n	8021f38 <__sflush_r+0x48>
 8021f2c:	6863      	ldr	r3, [r4, #4]
 8021f2e:	1ac0      	subs	r0, r0, r3
 8021f30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021f32:	b10b      	cbz	r3, 8021f38 <__sflush_r+0x48>
 8021f34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021f36:	1ac0      	subs	r0, r0, r3
 8021f38:	2300      	movs	r3, #0
 8021f3a:	4602      	mov	r2, r0
 8021f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021f3e:	6a21      	ldr	r1, [r4, #32]
 8021f40:	4628      	mov	r0, r5
 8021f42:	47b0      	blx	r6
 8021f44:	1c43      	adds	r3, r0, #1
 8021f46:	89a3      	ldrh	r3, [r4, #12]
 8021f48:	d106      	bne.n	8021f58 <__sflush_r+0x68>
 8021f4a:	6829      	ldr	r1, [r5, #0]
 8021f4c:	291d      	cmp	r1, #29
 8021f4e:	d82b      	bhi.n	8021fa8 <__sflush_r+0xb8>
 8021f50:	4a29      	ldr	r2, [pc, #164]	; (8021ff8 <__sflush_r+0x108>)
 8021f52:	410a      	asrs	r2, r1
 8021f54:	07d6      	lsls	r6, r2, #31
 8021f56:	d427      	bmi.n	8021fa8 <__sflush_r+0xb8>
 8021f58:	2200      	movs	r2, #0
 8021f5a:	6062      	str	r2, [r4, #4]
 8021f5c:	04d9      	lsls	r1, r3, #19
 8021f5e:	6922      	ldr	r2, [r4, #16]
 8021f60:	6022      	str	r2, [r4, #0]
 8021f62:	d504      	bpl.n	8021f6e <__sflush_r+0x7e>
 8021f64:	1c42      	adds	r2, r0, #1
 8021f66:	d101      	bne.n	8021f6c <__sflush_r+0x7c>
 8021f68:	682b      	ldr	r3, [r5, #0]
 8021f6a:	b903      	cbnz	r3, 8021f6e <__sflush_r+0x7e>
 8021f6c:	6560      	str	r0, [r4, #84]	; 0x54
 8021f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021f70:	602f      	str	r7, [r5, #0]
 8021f72:	2900      	cmp	r1, #0
 8021f74:	d0c9      	beq.n	8021f0a <__sflush_r+0x1a>
 8021f76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021f7a:	4299      	cmp	r1, r3
 8021f7c:	d002      	beq.n	8021f84 <__sflush_r+0x94>
 8021f7e:	4628      	mov	r0, r5
 8021f80:	f7fe fc1c 	bl	80207bc <_free_r>
 8021f84:	2000      	movs	r0, #0
 8021f86:	6360      	str	r0, [r4, #52]	; 0x34
 8021f88:	e7c0      	b.n	8021f0c <__sflush_r+0x1c>
 8021f8a:	2301      	movs	r3, #1
 8021f8c:	4628      	mov	r0, r5
 8021f8e:	47b0      	blx	r6
 8021f90:	1c41      	adds	r1, r0, #1
 8021f92:	d1c8      	bne.n	8021f26 <__sflush_r+0x36>
 8021f94:	682b      	ldr	r3, [r5, #0]
 8021f96:	2b00      	cmp	r3, #0
 8021f98:	d0c5      	beq.n	8021f26 <__sflush_r+0x36>
 8021f9a:	2b1d      	cmp	r3, #29
 8021f9c:	d001      	beq.n	8021fa2 <__sflush_r+0xb2>
 8021f9e:	2b16      	cmp	r3, #22
 8021fa0:	d101      	bne.n	8021fa6 <__sflush_r+0xb6>
 8021fa2:	602f      	str	r7, [r5, #0]
 8021fa4:	e7b1      	b.n	8021f0a <__sflush_r+0x1a>
 8021fa6:	89a3      	ldrh	r3, [r4, #12]
 8021fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021fac:	81a3      	strh	r3, [r4, #12]
 8021fae:	e7ad      	b.n	8021f0c <__sflush_r+0x1c>
 8021fb0:	690f      	ldr	r7, [r1, #16]
 8021fb2:	2f00      	cmp	r7, #0
 8021fb4:	d0a9      	beq.n	8021f0a <__sflush_r+0x1a>
 8021fb6:	0793      	lsls	r3, r2, #30
 8021fb8:	680e      	ldr	r6, [r1, #0]
 8021fba:	bf08      	it	eq
 8021fbc:	694b      	ldreq	r3, [r1, #20]
 8021fbe:	600f      	str	r7, [r1, #0]
 8021fc0:	bf18      	it	ne
 8021fc2:	2300      	movne	r3, #0
 8021fc4:	eba6 0807 	sub.w	r8, r6, r7
 8021fc8:	608b      	str	r3, [r1, #8]
 8021fca:	f1b8 0f00 	cmp.w	r8, #0
 8021fce:	dd9c      	ble.n	8021f0a <__sflush_r+0x1a>
 8021fd0:	6a21      	ldr	r1, [r4, #32]
 8021fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021fd4:	4643      	mov	r3, r8
 8021fd6:	463a      	mov	r2, r7
 8021fd8:	4628      	mov	r0, r5
 8021fda:	47b0      	blx	r6
 8021fdc:	2800      	cmp	r0, #0
 8021fde:	dc06      	bgt.n	8021fee <__sflush_r+0xfe>
 8021fe0:	89a3      	ldrh	r3, [r4, #12]
 8021fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021fe6:	81a3      	strh	r3, [r4, #12]
 8021fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8021fec:	e78e      	b.n	8021f0c <__sflush_r+0x1c>
 8021fee:	4407      	add	r7, r0
 8021ff0:	eba8 0800 	sub.w	r8, r8, r0
 8021ff4:	e7e9      	b.n	8021fca <__sflush_r+0xda>
 8021ff6:	bf00      	nop
 8021ff8:	dfbffffe 	.word	0xdfbffffe

08021ffc <_fflush_r>:
 8021ffc:	b538      	push	{r3, r4, r5, lr}
 8021ffe:	690b      	ldr	r3, [r1, #16]
 8022000:	4605      	mov	r5, r0
 8022002:	460c      	mov	r4, r1
 8022004:	b913      	cbnz	r3, 802200c <_fflush_r+0x10>
 8022006:	2500      	movs	r5, #0
 8022008:	4628      	mov	r0, r5
 802200a:	bd38      	pop	{r3, r4, r5, pc}
 802200c:	b118      	cbz	r0, 8022016 <_fflush_r+0x1a>
 802200e:	6a03      	ldr	r3, [r0, #32]
 8022010:	b90b      	cbnz	r3, 8022016 <_fflush_r+0x1a>
 8022012:	f7fd fb97 	bl	801f744 <__sinit>
 8022016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802201a:	2b00      	cmp	r3, #0
 802201c:	d0f3      	beq.n	8022006 <_fflush_r+0xa>
 802201e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022020:	07d0      	lsls	r0, r2, #31
 8022022:	d404      	bmi.n	802202e <_fflush_r+0x32>
 8022024:	0599      	lsls	r1, r3, #22
 8022026:	d402      	bmi.n	802202e <_fflush_r+0x32>
 8022028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802202a:	f7fd fd3d 	bl	801faa8 <__retarget_lock_acquire_recursive>
 802202e:	4628      	mov	r0, r5
 8022030:	4621      	mov	r1, r4
 8022032:	f7ff ff5d 	bl	8021ef0 <__sflush_r>
 8022036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022038:	07da      	lsls	r2, r3, #31
 802203a:	4605      	mov	r5, r0
 802203c:	d4e4      	bmi.n	8022008 <_fflush_r+0xc>
 802203e:	89a3      	ldrh	r3, [r4, #12]
 8022040:	059b      	lsls	r3, r3, #22
 8022042:	d4e1      	bmi.n	8022008 <_fflush_r+0xc>
 8022044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022046:	f7fd fd30 	bl	801faaa <__retarget_lock_release_recursive>
 802204a:	e7dd      	b.n	8022008 <_fflush_r+0xc>

0802204c <__swbuf_r>:
 802204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802204e:	460e      	mov	r6, r1
 8022050:	4614      	mov	r4, r2
 8022052:	4605      	mov	r5, r0
 8022054:	b118      	cbz	r0, 802205e <__swbuf_r+0x12>
 8022056:	6a03      	ldr	r3, [r0, #32]
 8022058:	b90b      	cbnz	r3, 802205e <__swbuf_r+0x12>
 802205a:	f7fd fb73 	bl	801f744 <__sinit>
 802205e:	69a3      	ldr	r3, [r4, #24]
 8022060:	60a3      	str	r3, [r4, #8]
 8022062:	89a3      	ldrh	r3, [r4, #12]
 8022064:	071a      	lsls	r2, r3, #28
 8022066:	d525      	bpl.n	80220b4 <__swbuf_r+0x68>
 8022068:	6923      	ldr	r3, [r4, #16]
 802206a:	b31b      	cbz	r3, 80220b4 <__swbuf_r+0x68>
 802206c:	6823      	ldr	r3, [r4, #0]
 802206e:	6922      	ldr	r2, [r4, #16]
 8022070:	1a98      	subs	r0, r3, r2
 8022072:	6963      	ldr	r3, [r4, #20]
 8022074:	b2f6      	uxtb	r6, r6
 8022076:	4283      	cmp	r3, r0
 8022078:	4637      	mov	r7, r6
 802207a:	dc04      	bgt.n	8022086 <__swbuf_r+0x3a>
 802207c:	4621      	mov	r1, r4
 802207e:	4628      	mov	r0, r5
 8022080:	f7ff ffbc 	bl	8021ffc <_fflush_r>
 8022084:	b9e0      	cbnz	r0, 80220c0 <__swbuf_r+0x74>
 8022086:	68a3      	ldr	r3, [r4, #8]
 8022088:	3b01      	subs	r3, #1
 802208a:	60a3      	str	r3, [r4, #8]
 802208c:	6823      	ldr	r3, [r4, #0]
 802208e:	1c5a      	adds	r2, r3, #1
 8022090:	6022      	str	r2, [r4, #0]
 8022092:	701e      	strb	r6, [r3, #0]
 8022094:	6962      	ldr	r2, [r4, #20]
 8022096:	1c43      	adds	r3, r0, #1
 8022098:	429a      	cmp	r2, r3
 802209a:	d004      	beq.n	80220a6 <__swbuf_r+0x5a>
 802209c:	89a3      	ldrh	r3, [r4, #12]
 802209e:	07db      	lsls	r3, r3, #31
 80220a0:	d506      	bpl.n	80220b0 <__swbuf_r+0x64>
 80220a2:	2e0a      	cmp	r6, #10
 80220a4:	d104      	bne.n	80220b0 <__swbuf_r+0x64>
 80220a6:	4621      	mov	r1, r4
 80220a8:	4628      	mov	r0, r5
 80220aa:	f7ff ffa7 	bl	8021ffc <_fflush_r>
 80220ae:	b938      	cbnz	r0, 80220c0 <__swbuf_r+0x74>
 80220b0:	4638      	mov	r0, r7
 80220b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80220b4:	4621      	mov	r1, r4
 80220b6:	4628      	mov	r0, r5
 80220b8:	f000 f806 	bl	80220c8 <__swsetup_r>
 80220bc:	2800      	cmp	r0, #0
 80220be:	d0d5      	beq.n	802206c <__swbuf_r+0x20>
 80220c0:	f04f 37ff 	mov.w	r7, #4294967295
 80220c4:	e7f4      	b.n	80220b0 <__swbuf_r+0x64>
	...

080220c8 <__swsetup_r>:
 80220c8:	b538      	push	{r3, r4, r5, lr}
 80220ca:	4b2a      	ldr	r3, [pc, #168]	; (8022174 <__swsetup_r+0xac>)
 80220cc:	4605      	mov	r5, r0
 80220ce:	6818      	ldr	r0, [r3, #0]
 80220d0:	460c      	mov	r4, r1
 80220d2:	b118      	cbz	r0, 80220dc <__swsetup_r+0x14>
 80220d4:	6a03      	ldr	r3, [r0, #32]
 80220d6:	b90b      	cbnz	r3, 80220dc <__swsetup_r+0x14>
 80220d8:	f7fd fb34 	bl	801f744 <__sinit>
 80220dc:	89a3      	ldrh	r3, [r4, #12]
 80220de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80220e2:	0718      	lsls	r0, r3, #28
 80220e4:	d422      	bmi.n	802212c <__swsetup_r+0x64>
 80220e6:	06d9      	lsls	r1, r3, #27
 80220e8:	d407      	bmi.n	80220fa <__swsetup_r+0x32>
 80220ea:	2309      	movs	r3, #9
 80220ec:	602b      	str	r3, [r5, #0]
 80220ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80220f2:	81a3      	strh	r3, [r4, #12]
 80220f4:	f04f 30ff 	mov.w	r0, #4294967295
 80220f8:	e034      	b.n	8022164 <__swsetup_r+0x9c>
 80220fa:	0758      	lsls	r0, r3, #29
 80220fc:	d512      	bpl.n	8022124 <__swsetup_r+0x5c>
 80220fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022100:	b141      	cbz	r1, 8022114 <__swsetup_r+0x4c>
 8022102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022106:	4299      	cmp	r1, r3
 8022108:	d002      	beq.n	8022110 <__swsetup_r+0x48>
 802210a:	4628      	mov	r0, r5
 802210c:	f7fe fb56 	bl	80207bc <_free_r>
 8022110:	2300      	movs	r3, #0
 8022112:	6363      	str	r3, [r4, #52]	; 0x34
 8022114:	89a3      	ldrh	r3, [r4, #12]
 8022116:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802211a:	81a3      	strh	r3, [r4, #12]
 802211c:	2300      	movs	r3, #0
 802211e:	6063      	str	r3, [r4, #4]
 8022120:	6923      	ldr	r3, [r4, #16]
 8022122:	6023      	str	r3, [r4, #0]
 8022124:	89a3      	ldrh	r3, [r4, #12]
 8022126:	f043 0308 	orr.w	r3, r3, #8
 802212a:	81a3      	strh	r3, [r4, #12]
 802212c:	6923      	ldr	r3, [r4, #16]
 802212e:	b94b      	cbnz	r3, 8022144 <__swsetup_r+0x7c>
 8022130:	89a3      	ldrh	r3, [r4, #12]
 8022132:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802213a:	d003      	beq.n	8022144 <__swsetup_r+0x7c>
 802213c:	4621      	mov	r1, r4
 802213e:	4628      	mov	r0, r5
 8022140:	f000 f840 	bl	80221c4 <__smakebuf_r>
 8022144:	89a0      	ldrh	r0, [r4, #12]
 8022146:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802214a:	f010 0301 	ands.w	r3, r0, #1
 802214e:	d00a      	beq.n	8022166 <__swsetup_r+0x9e>
 8022150:	2300      	movs	r3, #0
 8022152:	60a3      	str	r3, [r4, #8]
 8022154:	6963      	ldr	r3, [r4, #20]
 8022156:	425b      	negs	r3, r3
 8022158:	61a3      	str	r3, [r4, #24]
 802215a:	6923      	ldr	r3, [r4, #16]
 802215c:	b943      	cbnz	r3, 8022170 <__swsetup_r+0xa8>
 802215e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022162:	d1c4      	bne.n	80220ee <__swsetup_r+0x26>
 8022164:	bd38      	pop	{r3, r4, r5, pc}
 8022166:	0781      	lsls	r1, r0, #30
 8022168:	bf58      	it	pl
 802216a:	6963      	ldrpl	r3, [r4, #20]
 802216c:	60a3      	str	r3, [r4, #8]
 802216e:	e7f4      	b.n	802215a <__swsetup_r+0x92>
 8022170:	2000      	movs	r0, #0
 8022172:	e7f7      	b.n	8022164 <__swsetup_r+0x9c>
 8022174:	200004b4 	.word	0x200004b4

08022178 <__swhatbuf_r>:
 8022178:	b570      	push	{r4, r5, r6, lr}
 802217a:	460c      	mov	r4, r1
 802217c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022180:	2900      	cmp	r1, #0
 8022182:	b096      	sub	sp, #88	; 0x58
 8022184:	4615      	mov	r5, r2
 8022186:	461e      	mov	r6, r3
 8022188:	da0d      	bge.n	80221a6 <__swhatbuf_r+0x2e>
 802218a:	89a3      	ldrh	r3, [r4, #12]
 802218c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8022190:	f04f 0100 	mov.w	r1, #0
 8022194:	bf0c      	ite	eq
 8022196:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802219a:	2340      	movne	r3, #64	; 0x40
 802219c:	2000      	movs	r0, #0
 802219e:	6031      	str	r1, [r6, #0]
 80221a0:	602b      	str	r3, [r5, #0]
 80221a2:	b016      	add	sp, #88	; 0x58
 80221a4:	bd70      	pop	{r4, r5, r6, pc}
 80221a6:	466a      	mov	r2, sp
 80221a8:	f000 f848 	bl	802223c <_fstat_r>
 80221ac:	2800      	cmp	r0, #0
 80221ae:	dbec      	blt.n	802218a <__swhatbuf_r+0x12>
 80221b0:	9901      	ldr	r1, [sp, #4]
 80221b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80221b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80221ba:	4259      	negs	r1, r3
 80221bc:	4159      	adcs	r1, r3
 80221be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80221c2:	e7eb      	b.n	802219c <__swhatbuf_r+0x24>

080221c4 <__smakebuf_r>:
 80221c4:	898b      	ldrh	r3, [r1, #12]
 80221c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80221c8:	079d      	lsls	r5, r3, #30
 80221ca:	4606      	mov	r6, r0
 80221cc:	460c      	mov	r4, r1
 80221ce:	d507      	bpl.n	80221e0 <__smakebuf_r+0x1c>
 80221d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80221d4:	6023      	str	r3, [r4, #0]
 80221d6:	6123      	str	r3, [r4, #16]
 80221d8:	2301      	movs	r3, #1
 80221da:	6163      	str	r3, [r4, #20]
 80221dc:	b002      	add	sp, #8
 80221de:	bd70      	pop	{r4, r5, r6, pc}
 80221e0:	ab01      	add	r3, sp, #4
 80221e2:	466a      	mov	r2, sp
 80221e4:	f7ff ffc8 	bl	8022178 <__swhatbuf_r>
 80221e8:	9900      	ldr	r1, [sp, #0]
 80221ea:	4605      	mov	r5, r0
 80221ec:	4630      	mov	r0, r6
 80221ee:	f7fb fcdd 	bl	801dbac <_malloc_r>
 80221f2:	b948      	cbnz	r0, 8022208 <__smakebuf_r+0x44>
 80221f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80221f8:	059a      	lsls	r2, r3, #22
 80221fa:	d4ef      	bmi.n	80221dc <__smakebuf_r+0x18>
 80221fc:	f023 0303 	bic.w	r3, r3, #3
 8022200:	f043 0302 	orr.w	r3, r3, #2
 8022204:	81a3      	strh	r3, [r4, #12]
 8022206:	e7e3      	b.n	80221d0 <__smakebuf_r+0xc>
 8022208:	89a3      	ldrh	r3, [r4, #12]
 802220a:	6020      	str	r0, [r4, #0]
 802220c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022210:	81a3      	strh	r3, [r4, #12]
 8022212:	9b00      	ldr	r3, [sp, #0]
 8022214:	6163      	str	r3, [r4, #20]
 8022216:	9b01      	ldr	r3, [sp, #4]
 8022218:	6120      	str	r0, [r4, #16]
 802221a:	b15b      	cbz	r3, 8022234 <__smakebuf_r+0x70>
 802221c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022220:	4630      	mov	r0, r6
 8022222:	f000 f81d 	bl	8022260 <_isatty_r>
 8022226:	b128      	cbz	r0, 8022234 <__smakebuf_r+0x70>
 8022228:	89a3      	ldrh	r3, [r4, #12]
 802222a:	f023 0303 	bic.w	r3, r3, #3
 802222e:	f043 0301 	orr.w	r3, r3, #1
 8022232:	81a3      	strh	r3, [r4, #12]
 8022234:	89a3      	ldrh	r3, [r4, #12]
 8022236:	431d      	orrs	r5, r3
 8022238:	81a5      	strh	r5, [r4, #12]
 802223a:	e7cf      	b.n	80221dc <__smakebuf_r+0x18>

0802223c <_fstat_r>:
 802223c:	b538      	push	{r3, r4, r5, lr}
 802223e:	4d07      	ldr	r5, [pc, #28]	; (802225c <_fstat_r+0x20>)
 8022240:	2300      	movs	r3, #0
 8022242:	4604      	mov	r4, r0
 8022244:	4608      	mov	r0, r1
 8022246:	4611      	mov	r1, r2
 8022248:	602b      	str	r3, [r5, #0]
 802224a:	f7ee f963 	bl	8010514 <_fstat>
 802224e:	1c43      	adds	r3, r0, #1
 8022250:	d102      	bne.n	8022258 <_fstat_r+0x1c>
 8022252:	682b      	ldr	r3, [r5, #0]
 8022254:	b103      	cbz	r3, 8022258 <_fstat_r+0x1c>
 8022256:	6023      	str	r3, [r4, #0]
 8022258:	bd38      	pop	{r3, r4, r5, pc}
 802225a:	bf00      	nop
 802225c:	200012a4 	.word	0x200012a4

08022260 <_isatty_r>:
 8022260:	b538      	push	{r3, r4, r5, lr}
 8022262:	4d06      	ldr	r5, [pc, #24]	; (802227c <_isatty_r+0x1c>)
 8022264:	2300      	movs	r3, #0
 8022266:	4604      	mov	r4, r0
 8022268:	4608      	mov	r0, r1
 802226a:	602b      	str	r3, [r5, #0]
 802226c:	f7ee f962 	bl	8010534 <_isatty>
 8022270:	1c43      	adds	r3, r0, #1
 8022272:	d102      	bne.n	802227a <_isatty_r+0x1a>
 8022274:	682b      	ldr	r3, [r5, #0]
 8022276:	b103      	cbz	r3, 802227a <_isatty_r+0x1a>
 8022278:	6023      	str	r3, [r4, #0]
 802227a:	bd38      	pop	{r3, r4, r5, pc}
 802227c:	200012a4 	.word	0x200012a4

08022280 <_init>:
 8022280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022282:	bf00      	nop
 8022284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022286:	bc08      	pop	{r3}
 8022288:	469e      	mov	lr, r3
 802228a:	4770      	bx	lr

0802228c <_fini>:
 802228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802228e:	bf00      	nop
 8022290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022292:	bc08      	pop	{r3}
 8022294:	469e      	mov	lr, r3
 8022296:	4770      	bx	lr
